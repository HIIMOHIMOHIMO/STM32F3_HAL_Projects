
Test02_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002258  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080023e0  080023e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002420  08002420  00012420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000042c  20000000  08002424  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002042c  2**0
                  CONTENTS
  7 .bss          00000020  2000042c  2000042c  0002042c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000044c  2000044c  0002042c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00001ed0  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00004182  00000000  00000000  0002232c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000c03  00000000  00000000  000264ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000003a8  00000000  00000000  000270b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000320  00000000  00000000  00027460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000196a  00000000  00000000  00027780  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000121c  00000000  00000000  000290ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000006e  00000000  00000000  0002a306  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000c5c  00000000  00000000  0002a374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000042f 	.word	0x2000042f
 80001a0:	2000042c 	.word	0x2000042c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	2000042c 	.word	0x2000042c
 80001c4:	2000042c 	.word	0x2000042c
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000042c 	.word	0x2000042c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080023c8 	.word	0x080023c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000430 	.word	0x20000430
 8000220:	080023c8 	.word	0x080023c8
 8000224:	2000042c 	.word	0x2000042c
 8000228:	00000000 	.word	0x00000000

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	4e0f      	ldr	r6, [pc, #60]	; (800026c <__libc_init_array+0x40>)
 8000230:	4d0f      	ldr	r5, [pc, #60]	; (8000270 <__libc_init_array+0x44>)
 8000232:	1b76      	subs	r6, r6, r5
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	bf18      	it	ne
 8000238:	2400      	movne	r4, #0
 800023a:	d005      	beq.n	8000248 <__libc_init_array+0x1c>
 800023c:	3401      	adds	r4, #1
 800023e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000242:	4798      	blx	r3
 8000244:	42a6      	cmp	r6, r4
 8000246:	d1f9      	bne.n	800023c <__libc_init_array+0x10>
 8000248:	4e0a      	ldr	r6, [pc, #40]	; (8000274 <__libc_init_array+0x48>)
 800024a:	4d0b      	ldr	r5, [pc, #44]	; (8000278 <__libc_init_array+0x4c>)
 800024c:	1b76      	subs	r6, r6, r5
 800024e:	f002 f8bb 	bl	80023c8 <_init>
 8000252:	10b6      	asrs	r6, r6, #2
 8000254:	bf18      	it	ne
 8000256:	2400      	movne	r4, #0
 8000258:	d006      	beq.n	8000268 <__libc_init_array+0x3c>
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	08002418 	.word	0x08002418
 8000270:	08002418 	.word	0x08002418
 8000274:	08002420 	.word	0x08002420
 8000278:	08002418 	.word	0x08002418

0800027c <register_fini>:
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <register_fini+0xc>)
 800027e:	b113      	cbz	r3, 8000286 <register_fini+0xa>
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <register_fini+0x10>)
 8000282:	f000 b805 	b.w	8000290 <atexit>
 8000286:	4770      	bx	lr
 8000288:	00000000 	.word	0x00000000
 800028c:	0800029d 	.word	0x0800029d

08000290 <atexit>:
 8000290:	2300      	movs	r3, #0
 8000292:	4601      	mov	r1, r0
 8000294:	461a      	mov	r2, r3
 8000296:	4618      	mov	r0, r3
 8000298:	f000 b814 	b.w	80002c4 <__register_exitproc>

0800029c <__libc_fini_array>:
 800029c:	b538      	push	{r3, r4, r5, lr}
 800029e:	4d07      	ldr	r5, [pc, #28]	; (80002bc <__libc_fini_array+0x20>)
 80002a0:	4c07      	ldr	r4, [pc, #28]	; (80002c0 <__libc_fini_array+0x24>)
 80002a2:	1b2c      	subs	r4, r5, r4
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	d005      	beq.n	80002b4 <__libc_fini_array+0x18>
 80002a8:	3c01      	subs	r4, #1
 80002aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80002ae:	4798      	blx	r3
 80002b0:	2c00      	cmp	r4, #0
 80002b2:	d1f9      	bne.n	80002a8 <__libc_fini_array+0xc>
 80002b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80002b8:	f002 b88c 	b.w	80023d4 <_fini>
 80002bc:	08002424 	.word	0x08002424
 80002c0:	08002420 	.word	0x08002420

080002c4 <__register_exitproc>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	4c25      	ldr	r4, [pc, #148]	; (8000360 <__register_exitproc+0x9c>)
 80002ca:	6825      	ldr	r5, [r4, #0]
 80002cc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80002d0:	4606      	mov	r6, r0
 80002d2:	4688      	mov	r8, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b3c4      	cbz	r4, 800034c <__register_exitproc+0x88>
 80002da:	6860      	ldr	r0, [r4, #4]
 80002dc:	281f      	cmp	r0, #31
 80002de:	dc17      	bgt.n	8000310 <__register_exitproc+0x4c>
 80002e0:	1c43      	adds	r3, r0, #1
 80002e2:	b176      	cbz	r6, 8000302 <__register_exitproc+0x3e>
 80002e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80002e8:	2201      	movs	r2, #1
 80002ea:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80002ee:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 80002f2:	4082      	lsls	r2, r0
 80002f4:	4311      	orrs	r1, r2
 80002f6:	2e02      	cmp	r6, #2
 80002f8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80002fc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8000300:	d01e      	beq.n	8000340 <__register_exitproc+0x7c>
 8000302:	3002      	adds	r0, #2
 8000304:	6063      	str	r3, [r4, #4]
 8000306:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800030a:	2000      	movs	r0, #0
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <__register_exitproc+0xa0>)
 8000312:	b303      	cbz	r3, 8000356 <__register_exitproc+0x92>
 8000314:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000318:	f3af 8000 	nop.w
 800031c:	4604      	mov	r4, r0
 800031e:	b1d0      	cbz	r0, 8000356 <__register_exitproc+0x92>
 8000320:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000324:	2700      	movs	r7, #0
 8000326:	e880 0088 	stmia.w	r0, {r3, r7}
 800032a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800032e:	4638      	mov	r0, r7
 8000330:	2301      	movs	r3, #1
 8000332:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000336:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e1      	beq.n	8000302 <__register_exitproc+0x3e>
 800033e:	e7d1      	b.n	80002e4 <__register_exitproc+0x20>
 8000340:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000344:	430a      	orrs	r2, r1
 8000346:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800034a:	e7da      	b.n	8000302 <__register_exitproc+0x3e>
 800034c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000350:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000354:	e7c1      	b.n	80002da <__register_exitproc+0x16>
 8000356:	f04f 30ff 	mov.w	r0, #4294967295
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	bf00      	nop
 8000360:	080023e4 	.word	0x080023e4
 8000364:	00000000 	.word	0x00000000

08000368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800036c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800036e:	e003      	b.n	8000378 <LoopCopyDataInit>

08000370 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000372:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000374:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000376:	3104      	adds	r1, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800037c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800037e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000380:	d3f6      	bcc.n	8000370 <CopyDataInit>
	ldr	r2, =_sbss
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000384:	e002      	b.n	800038c <LoopFillZerobss>

08000386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000386:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000388:	f842 3b04 	str.w	r3, [r2], #4

0800038c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <LoopForever+0x16>)
	cmp	r2, r3
 800038e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000390:	d3f9      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000392:	f000 f91d 	bl	80005d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000396:	f7ff ff49 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800039a:	f000 f80f 	bl	80003bc <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a0:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80003a4:	08002424 	.word	0x08002424
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003ac:	2000042c 	.word	0x2000042c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80003b0:	2000042c 	.word	0x2000042c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80003b4:	2000044c 	.word	0x2000044c

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c0:	f000 f992 	bl	80006e8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80003c4:	f000 f80a 	bl	80003dc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c8:	f000 f84a 	bl	8000460 <MX_GPIO_Init>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2108      	movs	r1, #8
 80003d0:	4801      	ldr	r0, [pc, #4]	; (80003d8 <main+0x1c>)
 80003d2:	f000 fc95 	bl	8000d00 <HAL_GPIO_WritePin>
  }
 80003d6:	e7f9      	b.n	80003cc <main+0x10>
 80003d8:	48000400 	.word	0x48000400

080003dc <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b090      	sub	sp, #64	; 0x40
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e6:	2301      	movs	r3, #1
 80003e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80003ea:	2310      	movs	r3, #16
 80003ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	f107 0318 	add.w	r3, r7, #24
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fcb2 	bl	8000d60 <HAL_RCC_OscConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x2a>
  {
    Error_Handler();
 8000402:	f000 f88f 	bl	8000524 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000406:	230f      	movs	r3, #15
 8000408:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fd60 	bl	8001ee4 <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x52>
  {
    Error_Handler();
 800042a:	f000 f87b 	bl	8000524 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800042e:	f001 ffbf 	bl	80023b0 <HAL_RCC_GetHCLKFreq>
 8000432:	4602      	mov	r2, r0
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <SystemClock_Config+0x80>)
 8000436:	fba3 2302 	umull	r2, r3, r3, r2
 800043a:	099b      	lsrs	r3, r3, #6
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fab3 	bl	80009a8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000442:	2004      	movs	r0, #4
 8000444:	f000 fabc 	bl	80009c0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000448:	2200      	movs	r2, #0
 800044a:	2100      	movs	r1, #0
 800044c:	f04f 30ff 	mov.w	r0, #4294967295
 8000450:	f000 fa80 	bl	8000954 <HAL_NVIC_SetPriority>
}
 8000454:	bf00      	nop
 8000456:	3740      	adds	r7, #64	; 0x40
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	10624dd3 	.word	0x10624dd3

08000460 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4a22      	ldr	r2, [pc, #136]	; (80004f0 <MX_GPIO_Init+0x90>)
 8000468:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <MX_GPIO_Init+0x90>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b1f      	ldr	r3, [pc, #124]	; (80004f0 <MX_GPIO_Init+0x90>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <MX_GPIO_Init+0x90>)
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_GPIO_Init+0x90>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <MX_GPIO_Init+0x90>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800049a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_GPIO_Init+0x94>)
 800049e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	4619      	mov	r1, r3
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ae:	f000 fab1 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80004b2:	2308      	movs	r3, #8
 80004b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	4619      	mov	r1, r3
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <MX_GPIO_Init+0x98>)
 80004ca:	f000 faa3 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2108      	movs	r1, #8
 80004d2:	4809      	ldr	r0, [pc, #36]	; (80004f8 <MX_GPIO_Init+0x98>)
 80004d4:	f000 fc14 	bl	8000d00 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	2101      	movs	r1, #1
 80004dc:	2028      	movs	r0, #40	; 0x28
 80004de:	f000 fa39 	bl	8000954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004e2:	2028      	movs	r0, #40	; 0x28
 80004e4:	f000 fa52 	bl	800098c <HAL_NVIC_EnableIRQ>

}
 80004e8:	bf00      	nop
 80004ea:	3720      	adds	r7, #32
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000
 80004f4:	10310000 	.word	0x10310000
 80004f8:	48000400 	.word	0x48000400

080004fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <HAL_GPIO_EXTI_Callback+0x24>)
 800050c:	f000 fbf8 	bl	8000d00 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000510:	2064      	movs	r0, #100	; 0x64
 8000512:	f000 f935 	bl	8000780 <HAL_Delay>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	48000400 	.word	0x48000400

08000524 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2108      	movs	r1, #8
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <Error_Handler+0x28>)
 800052e:	f000 fbe7 	bl	8000d00 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000532:	2032      	movs	r0, #50	; 0x32
 8000534:	f000 f924 	bl	8000780 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2108      	movs	r1, #8
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <Error_Handler+0x28>)
 800053e:	f000 fbdf 	bl	8000d00 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f000 f91c 	bl	8000780 <HAL_Delay>
  }
 8000548:	e7ee      	b.n	8000528 <Error_Handler+0x4>
 800054a:	bf00      	nop
 800054c:	48000400 	.word	0x48000400

08000550 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8000564:	e7fe      	b.n	8000564 <HardFault_Handler+0x4>
 8000566:	bf00      	nop

08000568 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 800056c:	e7fe      	b.n	800056c <MemManage_Handler+0x4>
 800056e:	bf00      	nop

08000570 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8000574:	e7fe      	b.n	8000574 <BusFault_Handler+0x4>
 8000576:	bf00      	nop

08000578 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 800057c:	e7fe      	b.n	800057c <UsageFault_Handler+0x4>
 800057e:	bf00      	nop

08000580 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 f8ca 	bl	800074c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80005b8:	f000 fa1e 	bl	80009f8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80005c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80005c8:	f000 fbb2 	bl	8000d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d4:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <SystemInit+0x84>)
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemInit+0x84>)
 80005d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005e4:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <SystemInit+0x88>)
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <SystemInit+0x88>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80005f0:	4919      	ldr	r1, [pc, #100]	; (8000658 <SystemInit+0x88>)
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <SystemInit+0x88>)
 80005f4:	685a      	ldr	r2, [r3, #4]
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <SystemInit+0x8c>)
 80005f8:	4013      	ands	r3, r2
 80005fa:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005fc:	4a16      	ldr	r2, [pc, #88]	; (8000658 <SystemInit+0x88>)
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <SystemInit+0x88>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800060a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <SystemInit+0x88>)
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <SystemInit+0x88>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000618:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <SystemInit+0x88>)
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <SystemInit+0x88>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000622:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <SystemInit+0x88>)
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <SystemInit+0x88>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	f023 030f 	bic.w	r3, r3, #15
 800062e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000630:	4909      	ldr	r1, [pc, #36]	; (8000658 <SystemInit+0x88>)
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <SystemInit+0x88>)
 8000634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <SystemInit+0x90>)
 8000638:	4013      	ands	r3, r2
 800063a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <SystemInit+0x88>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <SystemInit+0x84>)
 8000644:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000648:	609a      	str	r2, [r3, #8]
#endif
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00
 8000658:	40021000 	.word	0x40021000
 800065c:	f87fc00c 	.word	0xf87fc00c
 8000660:	ff00fccc 	.word	0xff00fccc

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <HAL_MspInit+0x80>)
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <HAL_MspInit+0x80>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <HAL_MspInit+0x80>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 f95a 	bl	800093c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	f06f 000b 	mvn.w	r0, #11
 8000690:	f000 f960 	bl	8000954 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	f06f 000a 	mvn.w	r0, #10
 800069c:	f000 f95a 	bl	8000954 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	f06f 0009 	mvn.w	r0, #9
 80006a8:	f000 f954 	bl	8000954 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	f06f 0004 	mvn.w	r0, #4
 80006b4:	f000 f94e 	bl	8000954 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	f06f 0003 	mvn.w	r0, #3
 80006c0:	f000 f948 	bl	8000954 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	f06f 0001 	mvn.w	r0, #1
 80006cc:	f000 f942 	bl	8000954 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2100      	movs	r1, #0
 80006d4:	f04f 30ff 	mov.w	r0, #4294967295
 80006d8:	f000 f93c 	bl	8000954 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4a08      	ldr	r2, [pc, #32]	; (8000710 <HAL_Init+0x28>)
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_Init+0x28>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f000 f91f 	bl	800093c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f808 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000704:	f7ff ffae 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40022000 	.word	0x40022000

08000714 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_InitTick+0x30>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a09      	ldr	r2, [pc, #36]	; (8000748 <HAL_InitTick+0x34>)
 8000722:	fba2 2303 	umull	r2, r3, r2, r3
 8000726:	099b      	lsrs	r3, r3, #6
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f93d 	bl	80009a8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800072e:	2200      	movs	r2, #0
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	f04f 30ff 	mov.w	r0, #4294967295
 8000736:	f000 f90d 	bl	8000954 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000428 	.word	0x20000428
 8000748:	10624dd3 	.word	0x10624dd3

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  uwTick++;
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <HAL_IncTick+0x18>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4a03      	ldr	r2, [pc, #12]	; (8000764 <HAL_IncTick+0x18>)
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000448 	.word	0x20000448

08000768 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;  
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <HAL_GetTick+0x14>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000448 	.word	0x20000448

08000780 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000788:	f7ff ffee 	bl	8000768 <HAL_GetTick>
 800078c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800078e:	bf00      	nop
 8000790:	f7ff ffea 	bl	8000768 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	1ad2      	subs	r2, r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	d3f7      	bcc.n	8000790 <HAL_Delay+0x10>
  {
  }
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80007fc:	0a1b      	lsrs	r3, r3, #8
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000816:	4909      	ldr	r1, [pc, #36]	; (800083c <NVIC_EnableIRQ+0x30>)
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	095b      	lsrs	r3, r3, #5
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	f002 021f 	and.w	r2, r2, #31
 8000824:	2001      	movs	r0, #1
 8000826:	fa00 f202 	lsl.w	r2, r0, r2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100

08000840 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	da0b      	bge.n	800086c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	490d      	ldr	r1, [pc, #52]	; (800088c <NVIC_SetPriority+0x4c>)
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 030f 	and.w	r3, r3, #15
 800085c:	3b04      	subs	r3, #4
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	440b      	add	r3, r1
 8000868:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800086a:	e009      	b.n	8000880 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086c:	4908      	ldr	r1, [pc, #32]	; (8000890 <NVIC_SetPriority+0x50>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	0112      	lsls	r2, r2, #4
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	440b      	add	r3, r1
 800087c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	e000e100 	.word	0xe000e100

08000894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f1c3 0307 	rsb	r3, r3, #7
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	bf28      	it	cs
 80008b2:	2304      	movcs	r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3304      	adds	r3, #4
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d902      	bls.n	80008c4 <NVIC_EncodePriority+0x30>
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3b03      	subs	r3, #3
 80008c2:	e000      	b.n	80008c6 <NVIC_EncodePriority+0x32>
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	2201      	movs	r2, #1
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	1e5a      	subs	r2, r3, #1
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	401a      	ands	r2, r3
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008da:	2101      	movs	r1, #1
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	1e59      	subs	r1, r3, #1
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80008e8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	; 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000908:	d301      	bcc.n	800090e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800090a:	2301      	movs	r3, #1
 800090c:	e00f      	b.n	800092e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <SysTick_Config+0x40>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000916:	210f      	movs	r1, #15
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f7ff ff90 	bl	8000840 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <SysTick_Config+0x40>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <SysTick_Config+0x40>)
 8000928:	2207      	movs	r2, #7
 800092a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	e000e010 	.word	0xe000e010

0800093c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ff2f 	bl	80007a8 <NVIC_SetPriorityGrouping>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop

08000954 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000966:	f7ff ff43 	bl	80007f0 <NVIC_GetPriorityGrouping>
 800096a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	68b9      	ldr	r1, [r7, #8]
 8000970:	6978      	ldr	r0, [r7, #20]
 8000972:	f7ff ff8f 	bl	8000894 <NVIC_EncodePriority>
 8000976:	4602      	mov	r2, r0
 8000978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff5e 	bl	8000840 <NVIC_SetPriority>
}
 8000984:	bf00      	nop
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff36 	bl	800080c <NVIC_EnableIRQ>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ffa1 	bl	80008f8 <SysTick_Config>
 80009b6:	4603      	mov	r3, r0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d106      	bne.n	80009dc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009ce:	4a09      	ldr	r2, [pc, #36]	; (80009f4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80009da:	e005      	b.n	80009e8 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009dc:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f023 0304 	bic.w	r3, r3, #4
 80009e6:	6013      	str	r3, [r2, #0]
  }
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000e010 	.word	0xe000e010

080009f8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80009fc:	f000 f802 	bl	8000a04 <HAL_SYSTICK_Callback>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a2a:	e14e      	b.n	8000cca <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	2101      	movs	r1, #1
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 8140 	beq.w	8000cc4 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d003      	beq.n	8000a54 <HAL_GPIO_Init+0x40>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b12      	cmp	r3, #18
 8000a52:	d123      	bne.n	8000a9c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	08da      	lsrs	r2, r3, #3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3208      	adds	r2, #8
 8000a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f003 0307 	and.w	r3, r3, #7
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	691a      	ldr	r2, [r3, #16]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	08da      	lsrs	r2, r3, #3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3208      	adds	r2, #8
 8000a96:	6939      	ldr	r1, [r7, #16]
 8000a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 0203 	and.w	r2, r3, #3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d00b      	beq.n	8000af0 <HAL_GPIO_Init+0xdc>
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d007      	beq.n	8000af0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae4:	2b11      	cmp	r3, #17
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b12      	cmp	r3, #18
 8000aee:	d130      	bne.n	8000b52 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	2203      	movs	r2, #3
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b26:	2201      	movs	r2, #1
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	091b      	lsrs	r3, r3, #4
 8000b3c:	f003 0201 	and.w	r2, r3, #1
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 809a 	beq.w	8000cc4 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b90:	4a55      	ldr	r2, [pc, #340]	; (8000ce8 <HAL_GPIO_Init+0x2d4>)
 8000b92:	4b55      	ldr	r3, [pc, #340]	; (8000ce8 <HAL_GPIO_Init+0x2d4>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b52      	ldr	r3, [pc, #328]	; (8000ce8 <HAL_GPIO_Init+0x2d4>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ba8:	4a50      	ldr	r2, [pc, #320]	; (8000cec <HAL_GPIO_Init+0x2d8>)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	089b      	lsrs	r3, r3, #2
 8000bae:	3302      	adds	r3, #2
 8000bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	220f      	movs	r2, #15
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bd2:	d013      	beq.n	8000bfc <HAL_GPIO_Init+0x1e8>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a46      	ldr	r2, [pc, #280]	; (8000cf0 <HAL_GPIO_Init+0x2dc>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d00d      	beq.n	8000bf8 <HAL_GPIO_Init+0x1e4>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a45      	ldr	r2, [pc, #276]	; (8000cf4 <HAL_GPIO_Init+0x2e0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d007      	beq.n	8000bf4 <HAL_GPIO_Init+0x1e0>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a44      	ldr	r2, [pc, #272]	; (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d101      	bne.n	8000bf0 <HAL_GPIO_Init+0x1dc>
 8000bec:	2303      	movs	r3, #3
 8000bee:	e006      	b.n	8000bfe <HAL_GPIO_Init+0x1ea>
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	e004      	b.n	8000bfe <HAL_GPIO_Init+0x1ea>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e002      	b.n	8000bfe <HAL_GPIO_Init+0x1ea>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <HAL_GPIO_Init+0x1ea>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	f002 0203 	and.w	r2, r2, #3
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	4093      	lsls	r3, r2
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c0e:	4937      	ldr	r1, [pc, #220]	; (8000cec <HAL_GPIO_Init+0x2d8>)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3302      	adds	r3, #2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c1c:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c40:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c6a:	4a24      	ldr	r2, [pc, #144]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f47f aea9 	bne.w	8000a2c <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 8000cda:	bf00      	nop
 8000cdc:	371c      	adds	r7, #28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	48000400 	.word	0x48000400
 8000cf4:	48000800 	.word	0x48000800
 8000cf8:	48000c00 	.word	0x48000c00
 8000cfc:	40010400 	.word	0x40010400

08000d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d10:	787b      	ldrb	r3, [r7, #1]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d1c:	e002      	b.n	8000d24 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d3c:	695a      	ldr	r2, [r3, #20]
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fbd4 	bl	80004fc <HAL_GPIO_EXTI_Callback>
  }
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 81e8 	beq.w	8001152 <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d82:	4bb8      	ldr	r3, [pc, #736]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d00c      	beq.n	8000da8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8e:	4bb5      	ldr	r3, [pc, #724]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 030c 	and.w	r3, r3, #12
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	f040 8082 	bne.w	8000ea0 <HAL_RCC_OscConfig+0x140>
 8000d9c:	4bb1      	ldr	r3, [pc, #708]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d07b      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x140>
 8000da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000db4:	fa93 f2a3 	rbit	r2, r3
 8000db8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000dbc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000dbe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000dc2:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc4:	fab3 f383 	clz	r3, r3
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d102      	bne.n	8000de0 <HAL_RCC_OscConfig+0x80>
 8000dda:	4ba2      	ldr	r3, [pc, #648]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	e039      	b.n	8000e54 <HAL_RCC_OscConfig+0xf4>
 8000de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000dec:	fa93 f2a3 	rbit	r2, r3
 8000df0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000df4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000df6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	fab3 f383 	clz	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f043 0320 	orr.w	r3, r3, #32
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d102      	bne.n	8000e18 <HAL_RCC_OscConfig+0xb8>
 8000e12:	4b94      	ldr	r3, [pc, #592]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000e14:	6a1b      	ldr	r3, [r3, #32]
 8000e16:	e01d      	b.n	8000e54 <HAL_RCC_OscConfig+0xf4>
 8000e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e20:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e24:	fa93 f2a3 	rbit	r2, r3
 8000e28:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e2c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e2e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	fab3 f383 	clz	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f043 0320 	orr.w	r3, r3, #32
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d102      	bne.n	8000e50 <HAL_RCC_OscConfig+0xf0>
 8000e4a:	4b86      	ldr	r3, [pc, #536]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	e001      	b.n	8000e54 <HAL_RCC_OscConfig+0xf4>
 8000e50:	4b84      	ldr	r3, [pc, #528]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e58:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8000e60:	fa92 f1a2 	rbit	r1, r2
 8000e64:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8000e68:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e6a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	f042 0220 	orr.w	r2, r2, #32
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	f002 021f 	and.w	r2, r2, #31
 8000e82:	40d3      	lsrs	r3, r2
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f000 8161 	beq.w	8001150 <HAL_RCC_OscConfig+0x3f0>
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f040 815b 	bne.w	8001150 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f001 b81a 	b.w	8001ed4 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eaa:	d106      	bne.n	8000eba <HAL_RCC_OscConfig+0x15a>
 8000eac:	4a6d      	ldr	r2, [pc, #436]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000eae:	4b6d      	ldr	r3, [pc, #436]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	e030      	b.n	8000f1c <HAL_RCC_OscConfig+0x1bc>
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10c      	bne.n	8000ede <HAL_RCC_OscConfig+0x17e>
 8000ec4:	4a67      	ldr	r2, [pc, #412]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000ec6:	4b67      	ldr	r3, [pc, #412]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4a64      	ldr	r2, [pc, #400]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000ed2:	4b64      	ldr	r3, [pc, #400]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	e01e      	b.n	8000f1c <HAL_RCC_OscConfig+0x1bc>
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee8:	d10c      	bne.n	8000f04 <HAL_RCC_OscConfig+0x1a4>
 8000eea:	4a5e      	ldr	r2, [pc, #376]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000eec:	4b5d      	ldr	r3, [pc, #372]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4a5b      	ldr	r2, [pc, #364]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000ef8:	4b5a      	ldr	r3, [pc, #360]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e00b      	b.n	8000f1c <HAL_RCC_OscConfig+0x1bc>
 8000f04:	4a57      	ldr	r2, [pc, #348]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000f06:	4b57      	ldr	r3, [pc, #348]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4a54      	ldr	r2, [pc, #336]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000f12:	4b54      	ldr	r3, [pc, #336]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f1c:	4951      	ldr	r1, [pc, #324]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000f1e:	4b51      	ldr	r3, [pc, #324]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f22:	f023 020f 	bic.w	r2, r3, #15
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 8083 	beq.w	8001042 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc14 	bl	8000768 <HAL_GetTick>
 8000f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f44:	e00a      	b.n	8000f5c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f46:	f7ff fc0f 	bl	8000768 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	; 0x64
 8000f54:	d902      	bls.n	8000f5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	f000 bfbc 	b.w	8001ed4 <HAL_RCC_OscConfig+0x1174>
 8000f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f60:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f68:	fa93 f2a3 	rbit	r2, r3
 8000f6c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f70:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f72:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f76:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	f043 0320 	orr.w	r3, r3, #32
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d102      	bne.n	8000f94 <HAL_RCC_OscConfig+0x234>
 8000f8e:	4b35      	ldr	r3, [pc, #212]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	e039      	b.n	8001008 <HAL_RCC_OscConfig+0x2a8>
 8000f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f98:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000fa0:	fa93 f2a3 	rbit	r2, r3
 8000fa4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fa8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000faa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	fab3 f383 	clz	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f043 0320 	orr.w	r3, r3, #32
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d102      	bne.n	8000fcc <HAL_RCC_OscConfig+0x26c>
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	e01d      	b.n	8001008 <HAL_RCC_OscConfig+0x2a8>
 8000fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fd8:	fa93 f2a3 	rbit	r2, r3
 8000fdc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fe0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fe2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f043 0320 	orr.w	r3, r3, #32
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d102      	bne.n	8001004 <HAL_RCC_OscConfig+0x2a4>
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	e001      	b.n	8001008 <HAL_RCC_OscConfig+0x2a8>
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_RCC_OscConfig+0x304>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800100c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001010:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001014:	fa92 f1a2 	rbit	r1, r2
 8001018:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800101c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800101e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	fab2 f282 	clz	r2, r2
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	f042 0220 	orr.w	r2, r2, #32
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	f002 021f 	and.w	r2, r2, #31
 8001036:	40d3      	lsrs	r3, r2
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d082      	beq.n	8000f46 <HAL_RCC_OscConfig+0x1e6>
 8001040:	e087      	b.n	8001152 <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fb91 	bl	8000768 <HAL_GetTick>
 8001046:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	e00d      	b.n	8001068 <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fb8c 	bl	8000768 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b64      	cmp	r3, #100	; 0x64
 800105a:	d905      	bls.n	8001068 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	f000 bf39 	b.w	8001ed4 <HAL_RCC_OscConfig+0x1174>
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800106c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001070:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001074:	fa93 f2a3 	rbit	r2, r3
 8001078:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800107c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800107e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001082:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001084:	fab3 f383 	clz	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	f043 0320 	orr.w	r3, r3, #32
 800108e:	b2db      	uxtb	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d102      	bne.n	80010a0 <HAL_RCC_OscConfig+0x340>
 800109a:	4bb6      	ldr	r3, [pc, #728]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	e039      	b.n	8001114 <HAL_RCC_OscConfig+0x3b4>
 80010a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010ac:	fa93 f2a3 	rbit	r2, r3
 80010b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010b4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	fab3 f383 	clz	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d102      	bne.n	80010d8 <HAL_RCC_OscConfig+0x378>
 80010d2:	4ba8      	ldr	r3, [pc, #672]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	e01d      	b.n	8001114 <HAL_RCC_OscConfig+0x3b4>
 80010d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80010e4:	fa93 f2a3 	rbit	r2, r3
 80010e8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80010ec:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	fab3 f383 	clz	r3, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f043 0320 	orr.w	r3, r3, #32
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b04      	cmp	r3, #4
 8001108:	d102      	bne.n	8001110 <HAL_RCC_OscConfig+0x3b0>
 800110a:	4b9a      	ldr	r3, [pc, #616]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	e001      	b.n	8001114 <HAL_RCC_OscConfig+0x3b4>
 8001110:	4b98      	ldr	r3, [pc, #608]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001118:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001120:	fa92 f1a2 	rbit	r1, r2
 8001124:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001128:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800112a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	fab2 f282 	clz	r2, r2
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	f042 0220 	orr.w	r2, r2, #32
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	f002 021f 	and.w	r2, r2, #31
 8001142:	40d3      	lsrs	r3, r2
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	f47f af7f 	bne.w	800104c <HAL_RCC_OscConfig+0x2ec>
 800114e:	e000      	b.n	8001152 <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 81f4 	beq.w	800154a <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001162:	4b84      	ldr	r3, [pc, #528]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00d      	beq.n	800118a <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800116e:	4b81      	ldr	r3, [pc, #516]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b08      	cmp	r3, #8
 8001178:	f040 8099 	bne.w	80012ae <HAL_RCC_OscConfig+0x54e>
 800117c:	4b7d      	ldr	r3, [pc, #500]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f040 8092 	bne.w	80012ae <HAL_RCC_OscConfig+0x54e>
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001190:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001194:	fa93 f2a3 	rbit	r2, r3
 8001198:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800119c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800119e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011a2:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a4:	fab3 f383 	clz	r3, r3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d102      	bne.n	80011c0 <HAL_RCC_OscConfig+0x460>
 80011ba:	4b6e      	ldr	r3, [pc, #440]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	e037      	b.n	8001230 <HAL_RCC_OscConfig+0x4d0>
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80011ca:	fa93 f2a3 	rbit	r2, r3
 80011ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011d2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f043 0320 	orr.w	r3, r3, #32
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	095b      	lsrs	r3, r3, #5
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d102      	bne.n	80011f6 <HAL_RCC_OscConfig+0x496>
 80011f0:	4b60      	ldr	r3, [pc, #384]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	e01c      	b.n	8001230 <HAL_RCC_OscConfig+0x4d0>
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001200:	fa93 f2a3 	rbit	r2, r3
 8001204:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001208:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800120a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	fab3 f383 	clz	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f043 0320 	orr.w	r3, r3, #32
 800121a:	b2db      	uxtb	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b04      	cmp	r3, #4
 8001224:	d102      	bne.n	800122c <HAL_RCC_OscConfig+0x4cc>
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	e001      	b.n	8001230 <HAL_RCC_OscConfig+0x4d0>
 800122c:	4b51      	ldr	r3, [pc, #324]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	2202      	movs	r2, #2
 8001232:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800123a:	fa92 f1a2 	rbit	r1, r2
 800123e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001242:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001244:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	f042 0220 	orr.w	r2, r2, #32
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	f002 021f 	and.w	r2, r2, #31
 800125c:	40d3      	lsrs	r3, r2
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <HAL_RCC_OscConfig+0x516>
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d002      	beq.n	8001276 <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	f000 be2f 	b.w	8001ed4 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4c3f      	ldr	r4, [pc, #252]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 8001278:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6959      	ldr	r1, [r3, #20]
 8001286:	23f8      	movs	r3, #248	; 0xf8
 8001288:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001290:	fa93 f0a3 	rbit	r0, r3
 8001294:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001298:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800129a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	fab3 f383 	clz	r3, r3
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ac:	e14d      	b.n	800154a <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80b3 	beq.w	8001420 <HAL_RCC_OscConfig+0x6c0>
 80012ba:	2301      	movs	r3, #1
 80012bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012c4:	fa93 f2a3 	rbit	r2, r3
 80012c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012cc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012d2:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80012de:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80012e2:	461a      	mov	r2, r3
 80012e4:	2301      	movs	r3, #1
 80012e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fa3e 	bl	8000768 <HAL_GetTick>
 80012ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fa39 	bl	8000768 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d902      	bls.n	8001308 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	f000 bde6 	b.w	8001ed4 <HAL_RCC_OscConfig+0x1174>
 8001308:	2302      	movs	r3, #2
 800130a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001312:	fa93 f2a3 	rbit	r2, r3
 8001316:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800131a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800131c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001320:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f043 0320 	orr.w	r3, r3, #32
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d102      	bne.n	800133e <HAL_RCC_OscConfig+0x5de>
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	e039      	b.n	80013b2 <HAL_RCC_OscConfig+0x652>
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001348:	fa93 f2a3 	rbit	r2, r3
 800134c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001350:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001352:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	fab3 f383 	clz	r3, r3
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f043 0320 	orr.w	r3, r3, #32
 8001362:	b2db      	uxtb	r3, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d104      	bne.n	8001378 <HAL_RCC_OscConfig+0x618>
 800136e:	4b01      	ldr	r3, [pc, #4]	; (8001374 <HAL_RCC_OscConfig+0x614>)
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	e01e      	b.n	80013b2 <HAL_RCC_OscConfig+0x652>
 8001374:	40021000 	.word	0x40021000
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001382:	fa93 f2a3 	rbit	r2, r3
 8001386:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800138a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800138c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	fab3 f383 	clz	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	b2db      	uxtb	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	095b      	lsrs	r3, r3, #5
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d102      	bne.n	80013ae <HAL_RCC_OscConfig+0x64e>
 80013a8:	4bb9      	ldr	r3, [pc, #740]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	e001      	b.n	80013b2 <HAL_RCC_OscConfig+0x652>
 80013ae:	4bb8      	ldr	r3, [pc, #736]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	2202      	movs	r2, #2
 80013b4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013bc:	fa92 f1a2 	rbit	r1, r2
 80013c0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80013c4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013c6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	fab2 f282 	clz	r2, r2
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f042 0220 	orr.w	r2, r2, #32
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	f002 021f 	and.w	r2, r2, #31
 80013de:	40d3      	lsrs	r3, r2
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d084      	beq.n	80012f2 <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4ca9      	ldr	r4, [pc, #676]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80013ea:	4ba9      	ldr	r3, [pc, #676]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6959      	ldr	r1, [r3, #20]
 80013f8:	23f8      	movs	r3, #248	; 0xf8
 80013fa:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001402:	fa93 f0a3 	rbit	r0, r3
 8001406:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800140a:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800140c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	6023      	str	r3, [r4, #0]
 800141e:	e094      	b.n	800154a <HAL_RCC_OscConfig+0x7ea>
 8001420:	2301      	movs	r3, #1
 8001422:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800142a:	fa93 f2a3 	rbit	r2, r3
 800142e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001432:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001434:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001438:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001444:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001448:	461a      	mov	r2, r3
 800144a:	2300      	movs	r3, #0
 800144c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff f98b 	bl	8000768 <HAL_GetTick>
 8001452:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e00a      	b.n	800146e <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff f986 	bl	8000768 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d902      	bls.n	800146e <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	f000 bd33 	b.w	8001ed4 <HAL_RCC_OscConfig+0x1174>
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001474:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001478:	fa93 f2a3 	rbit	r2, r3
 800147c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001480:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001482:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001486:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f043 0320 	orr.w	r3, r3, #32
 8001492:	b2db      	uxtb	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d102      	bne.n	80014a4 <HAL_RCC_OscConfig+0x744>
 800149e:	4b7c      	ldr	r3, [pc, #496]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	e037      	b.n	8001514 <HAL_RCC_OscConfig+0x7b4>
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80014ae:	fa93 f2a3 	rbit	r2, r3
 80014b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014b6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f043 0320 	orr.w	r3, r3, #32
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d102      	bne.n	80014da <HAL_RCC_OscConfig+0x77a>
 80014d4:	4b6e      	ldr	r3, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	e01c      	b.n	8001514 <HAL_RCC_OscConfig+0x7b4>
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014e4:	fa93 f2a3 	rbit	r2, r3
 80014e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014ec:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f043 0320 	orr.w	r3, r3, #32
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b04      	cmp	r3, #4
 8001508:	d102      	bne.n	8001510 <HAL_RCC_OscConfig+0x7b0>
 800150a:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	e001      	b.n	8001514 <HAL_RCC_OscConfig+0x7b4>
 8001510:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	2202      	movs	r2, #2
 8001516:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800151e:	fa92 f1a2 	rbit	r1, r2
 8001522:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001526:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001528:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	fab2 f282 	clz	r2, r2
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	f042 0220 	orr.w	r2, r2, #32
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f002 021f 	and.w	r2, r2, #31
 8001540:	40d3      	lsrs	r3, r2
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d186      	bne.n	8001458 <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8132 	beq.w	80017be <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 8099 	beq.w	8001698 <HAL_RCC_OscConfig+0x938>
 8001566:	2301      	movs	r3, #1
 8001568:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001570:	fa93 f2a3 	rbit	r2, r3
 8001574:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001578:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800157a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800157e:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	461a      	mov	r2, r3
 8001588:	4b42      	ldr	r3, [pc, #264]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 800158a:	4413      	add	r3, r2
 800158c:	461a      	mov	r2, r3
 800158e:	2301      	movs	r3, #1
 8001590:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff f8e9 	bl	8000768 <HAL_GetTick>
 8001596:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff f8e4 	bl	8000768 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d902      	bls.n	80015b2 <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	f000 bc91 	b.w	8001ed4 <HAL_RCC_OscConfig+0x1174>
 80015b2:	2302      	movs	r3, #2
 80015b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015c4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015ca:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d102      	bne.n	80015e8 <HAL_RCC_OscConfig+0x888>
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	e037      	b.n	8001658 <HAL_RCC_OscConfig+0x8f8>
 80015e8:	2302      	movs	r3, #2
 80015ea:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015f2:	fa93 f2a3 	rbit	r2, r3
 80015f6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015fa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fab3 f383 	clz	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800160c:	b2db      	uxtb	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	095b      	lsrs	r3, r3, #5
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d102      	bne.n	800161e <HAL_RCC_OscConfig+0x8be>
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	e01c      	b.n	8001658 <HAL_RCC_OscConfig+0x8f8>
 800161e:	2302      	movs	r3, #2
 8001620:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001628:	fa93 f2a3 	rbit	r2, r3
 800162c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001630:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001632:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001642:	b2db      	uxtb	r3, r3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b04      	cmp	r3, #4
 800164c:	d102      	bne.n	8001654 <HAL_RCC_OscConfig+0x8f4>
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	e001      	b.n	8001658 <HAL_RCC_OscConfig+0x8f8>
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	2202      	movs	r2, #2
 800165a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001662:	fa92 f1a2 	rbit	r1, r2
 8001666:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800166a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800166c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	fab2 f282 	clz	r2, r2
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	f002 021f 	and.w	r2, r2, #31
 8001684:	40d3      	lsrs	r3, r2
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d086      	beq.n	800159c <HAL_RCC_OscConfig+0x83c>
 800168e:	e096      	b.n	80017be <HAL_RCC_OscConfig+0xa5e>
 8001690:	40021000 	.word	0x40021000
 8001694:	42420480 	.word	0x42420480
 8001698:	2301      	movs	r3, #1
 800169a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80016a2:	fa93 f2a3 	rbit	r2, r3
 80016a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016aa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016b0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4bb5      	ldr	r3, [pc, #724]	; (8001990 <HAL_RCC_OscConfig+0xc30>)
 80016bc:	4413      	add	r3, r2
 80016be:	461a      	mov	r2, r3
 80016c0:	2300      	movs	r3, #0
 80016c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff f850 	bl	8000768 <HAL_GetTick>
 80016c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	e009      	b.n	80016e2 <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff f84b 	bl	8000768 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e3f8      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1174>
 80016e2:	2302      	movs	r3, #2
 80016e4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80016ec:	fa93 f2a3 	rbit	r2, r3
 80016f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016f4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016fa:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001706:	b2db      	uxtb	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d102      	bne.n	8001718 <HAL_RCC_OscConfig+0x9b8>
 8001712:	4ba0      	ldr	r3, [pc, #640]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	e037      	b.n	8001788 <HAL_RCC_OscConfig+0xa28>
 8001718:	2302      	movs	r3, #2
 800171a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001722:	fa93 f2a3 	rbit	r2, r3
 8001726:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800172a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800172c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800173c:	b2db      	uxtb	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	095b      	lsrs	r3, r3, #5
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d102      	bne.n	800174e <HAL_RCC_OscConfig+0x9ee>
 8001748:	4b92      	ldr	r3, [pc, #584]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	e01c      	b.n	8001788 <HAL_RCC_OscConfig+0xa28>
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001760:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001762:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001772:	b2db      	uxtb	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b04      	cmp	r3, #4
 800177c:	d102      	bne.n	8001784 <HAL_RCC_OscConfig+0xa24>
 800177e:	4b85      	ldr	r3, [pc, #532]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	e001      	b.n	8001788 <HAL_RCC_OscConfig+0xa28>
 8001784:	4b83      	ldr	r3, [pc, #524]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	2202      	movs	r2, #2
 800178a:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001792:	fa92 f1a2 	rbit	r1, r2
 8001796:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800179a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800179c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	fab2 f282 	clz	r2, r2
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	f002 021f 	and.w	r2, r2, #31
 80017b4:	40d3      	lsrs	r3, r2
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d187      	bne.n	80016ce <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 818f 	beq.w	8001aec <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d4:	4b6f      	ldr	r3, [pc, #444]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d112      	bne.n	8001806 <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e0:	4a6c      	ldr	r2, [pc, #432]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 80017e2:	4b6c      	ldr	r3, [pc, #432]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ea:	61d3      	str	r3, [r2, #28]
 80017ec:	4b69      	ldr	r3, [pc, #420]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001800:	2301      	movs	r3, #1
 8001802:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	4b64      	ldr	r3, [pc, #400]	; (8001998 <HAL_RCC_OscConfig+0xc38>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d11a      	bne.n	8001848 <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001812:	4a61      	ldr	r2, [pc, #388]	; (8001998 <HAL_RCC_OscConfig+0xc38>)
 8001814:	4b60      	ldr	r3, [pc, #384]	; (8001998 <HAL_RCC_OscConfig+0xc38>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181e:	f7fe ffa3 	bl	8000768 <HAL_GetTick>
 8001822:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001826:	e009      	b.n	800183c <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001828:	f7fe ff9e 	bl	8000768 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b64      	cmp	r3, #100	; 0x64
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e34b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	4b56      	ldr	r3, [pc, #344]	; (8001998 <HAL_RCC_OscConfig+0xc38>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ef      	beq.n	8001828 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d106      	bne.n	8001860 <HAL_RCC_OscConfig+0xb00>
 8001852:	4a50      	ldr	r2, [pc, #320]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6213      	str	r3, [r2, #32]
 800185e:	e02f      	b.n	80018c0 <HAL_RCC_OscConfig+0xb60>
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0xb24>
 800186a:	4a4a      	ldr	r2, [pc, #296]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 800186c:	4b49      	ldr	r3, [pc, #292]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	6213      	str	r3, [r2, #32]
 8001876:	4a47      	ldr	r2, [pc, #284]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 8001878:	4b46      	ldr	r3, [pc, #280]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	6213      	str	r3, [r2, #32]
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0xb60>
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0xb48>
 800188e:	4a41      	ldr	r2, [pc, #260]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 8001890:	4b40      	ldr	r3, [pc, #256]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6213      	str	r3, [r2, #32]
 800189a:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 800189c:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6213      	str	r3, [r2, #32]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0xb60>
 80018a8:	4a3a      	ldr	r2, [pc, #232]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 80018aa:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	4a37      	ldr	r2, [pc, #220]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	f023 0304 	bic.w	r3, r3, #4
 80018be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 8087 	beq.w	80019da <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018cc:	f7fe ff4c 	bl	8000768 <HAL_GetTick>
 80018d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	e00b      	b.n	80018ee <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7fe ff47 	bl	8000768 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e2f2      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1174>
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001900:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001902:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001906:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001912:	b2db      	uxtb	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d102      	bne.n	8001924 <HAL_RCC_OscConfig+0xbc4>
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	e03d      	b.n	80019a0 <HAL_RCC_OscConfig+0xc40>
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800192e:	fa93 f2a3 	rbit	r2, r3
 8001932:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001936:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001938:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001948:	b2db      	uxtb	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	095b      	lsrs	r3, r3, #5
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d102      	bne.n	800195a <HAL_RCC_OscConfig+0xbfa>
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	e022      	b.n	80019a0 <HAL_RCC_OscConfig+0xc40>
 800195a:	2302      	movs	r3, #2
 800195c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001964:	fa93 f2a3 	rbit	r2, r3
 8001968:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800196c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800196e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197e:	b2db      	uxtb	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b04      	cmp	r3, #4
 8001988:	d108      	bne.n	800199c <HAL_RCC_OscConfig+0xc3c>
 800198a:	4b02      	ldr	r3, [pc, #8]	; (8001994 <HAL_RCC_OscConfig+0xc34>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	e007      	b.n	80019a0 <HAL_RCC_OscConfig+0xc40>
 8001990:	42420480 	.word	0x42420480
 8001994:	40021000 	.word	0x40021000
 8001998:	40007000 	.word	0x40007000
 800199c:	4bbf      	ldr	r3, [pc, #764]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	2202      	movs	r2, #2
 80019a2:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80019aa:	fa92 f1a2 	rbit	r1, r2
 80019ae:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80019b2:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019b4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	fab2 f282 	clz	r2, r2
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f002 021f 	and.w	r2, r2, #31
 80019cc:	40d3      	lsrs	r3, r2
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f43f af7f 	beq.w	80018d6 <HAL_RCC_OscConfig+0xb76>
 80019d8:	e07e      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019da:	f7fe fec5 	bl	8000768 <HAL_GetTick>
 80019de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7fe fec0 	bl	8000768 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e26b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1174>
 80019fc:	2302      	movs	r3, #2
 80019fe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a0e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a14:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	095b      	lsrs	r3, r3, #5
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d102      	bne.n	8001a32 <HAL_RCC_OscConfig+0xcd2>
 8001a2c:	4b9b      	ldr	r3, [pc, #620]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	e037      	b.n	8001aa2 <HAL_RCC_OscConfig+0xd42>
 8001a32:	2302      	movs	r3, #2
 8001a34:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a3c:	fa93 f2a3 	rbit	r2, r3
 8001a40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a44:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d102      	bne.n	8001a68 <HAL_RCC_OscConfig+0xd08>
 8001a62:	4b8e      	ldr	r3, [pc, #568]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	e01c      	b.n	8001aa2 <HAL_RCC_OscConfig+0xd42>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a7a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	095b      	lsrs	r3, r3, #5
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0xd3e>
 8001a98:	4b80      	ldr	r3, [pc, #512]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	e001      	b.n	8001aa2 <HAL_RCC_OscConfig+0xd42>
 8001a9e:	4b7f      	ldr	r3, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001aac:	fa92 f1a2 	rbit	r1, r2
 8001ab0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001ab4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ab6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	fab2 f282 	clz	r2, r2
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f002 021f 	and.w	r2, r2, #31
 8001ace:	40d3      	lsrs	r3, r2
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d185      	bne.n	80019e4 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ad8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4a6e      	ldr	r2, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001ae2:	4b6e      	ldr	r3, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 81ed 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af8:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	f000 81e4 	beq.w	8001ece <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	f040 8144 	bne.w	8001d9a <HAL_RCC_OscConfig+0x103a>
 8001b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b16:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001b1e:	fa93 f2a3 	rbit	r2, r3
 8001b22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b26:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001b38:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2300      	movs	r3, #0
 8001b40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7fe fe11 	bl	8000768 <HAL_GetTick>
 8001b46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	e009      	b.n	8001b60 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7fe fe0c 	bl	8000768 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1b9      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1174>
 8001b60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b64:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b6c:	fa93 f2a3 	rbit	r2, r3
 8001b70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b74:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b7a:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f043 0320 	orr.w	r3, r3, #32
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d102      	bne.n	8001b98 <HAL_RCC_OscConfig+0xe38>
 8001b92:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	e039      	b.n	8001c0c <HAL_RCC_OscConfig+0xeac>
 8001b98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bac:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f043 0320 	orr.w	r3, r3, #32
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d102      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xe70>
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	e01d      	b.n	8001c0c <HAL_RCC_OscConfig+0xeac>
 8001bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001be4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001be6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f043 0320 	orr.w	r3, r3, #32
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d102      	bne.n	8001c08 <HAL_RCC_OscConfig+0xea8>
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	e001      	b.n	8001c0c <HAL_RCC_OscConfig+0xeac>
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c10:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001c18:	fa92 f1a2 	rbit	r1, r2
 8001c1c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c20:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c22:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	fab2 f282 	clz	r2, r2
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f042 0220 	orr.w	r2, r2, #32
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	f002 021f 	and.w	r2, r2, #31
 8001c3a:	40d3      	lsrs	r3, r2
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d183      	bne.n	8001b4c <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c44:	4815      	ldr	r0, [pc, #84]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_RCC_OscConfig+0xf3c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	430b      	orrs	r3, r1
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	6043      	str	r3, [r0, #4]
 8001c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c6c:	fa93 f2a3 	rbit	r2, r3
 8001c70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c74:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c7a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001c86:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7fe fd6a 	bl	8000768 <HAL_GetTick>
 8001c94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c98:	e00c      	b.n	8001cb4 <HAL_RCC_OscConfig+0xf54>
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7fe fd62 	bl	8000768 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e10f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1174>
 8001cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cc0:	fa93 f2a3 	rbit	r2, r3
 8001cc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cc8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cce:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f043 0320 	orr.w	r3, r3, #32
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <HAL_RCC_OscConfig+0xf8c>
 8001ce6:	4b7e      	ldr	r3, [pc, #504]	; (8001ee0 <HAL_RCC_OscConfig+0x1180>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	e039      	b.n	8001d60 <HAL_RCC_OscConfig+0x1000>
 8001cec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d00:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f043 0320 	orr.w	r3, r3, #32
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d102      	bne.n	8001d24 <HAL_RCC_OscConfig+0xfc4>
 8001d1e:	4b70      	ldr	r3, [pc, #448]	; (8001ee0 <HAL_RCC_OscConfig+0x1180>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	e01d      	b.n	8001d60 <HAL_RCC_OscConfig+0x1000>
 8001d24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d38:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f043 0320 	orr.w	r3, r3, #32
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d102      	bne.n	8001d5c <HAL_RCC_OscConfig+0xffc>
 8001d56:	4b62      	ldr	r3, [pc, #392]	; (8001ee0 <HAL_RCC_OscConfig+0x1180>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	e001      	b.n	8001d60 <HAL_RCC_OscConfig+0x1000>
 8001d5c:	4b60      	ldr	r3, [pc, #384]	; (8001ee0 <HAL_RCC_OscConfig+0x1180>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d64:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d6c:	fa92 f1a2 	rbit	r1, r2
 8001d70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d74:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d76:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	f002 021f 	and.w	r2, r2, #31
 8001d8e:	40d3      	lsrs	r3, r2
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d083      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xf40>
 8001d98:	e09b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1172>
 8001d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001da6:	fa93 f2a3 	rbit	r2, r3
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001db0:	f107 0320 	add.w	r3, r7, #32
 8001db4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001dc0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7fe fccd 	bl	8000768 <HAL_GetTick>
 8001dce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd2:	e009      	b.n	8001de8 <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe fcc8 	bl	8000768 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e075      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1174>
 8001de8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001df4:	fa93 f2a3 	rbit	r2, r3
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f043 0320 	orr.w	r3, r3, #32
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_OscConfig+0x10c0>
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_RCC_OscConfig+0x1180>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	e039      	b.n	8001e94 <HAL_RCC_OscConfig+0x1134>
 8001e20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f107 0318 	add.w	r3, r7, #24
 8001e34:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f043 0320 	orr.w	r3, r3, #32
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d102      	bne.n	8001e58 <HAL_RCC_OscConfig+0x10f8>
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_RCC_OscConfig+0x1180>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	e01d      	b.n	8001e94 <HAL_RCC_OscConfig+0x1134>
 8001e58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e64:	fa93 f2a3 	rbit	r2, r3
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f043 0320 	orr.w	r3, r3, #32
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d102      	bne.n	8001e90 <HAL_RCC_OscConfig+0x1130>
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_RCC_OscConfig+0x1180>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	e001      	b.n	8001e94 <HAL_RCC_OscConfig+0x1134>
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_RCC_OscConfig+0x1180>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e98:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001ea0:	fa92 f1a2 	rbit	r1, r2
 8001ea4:	f107 0210 	add.w	r2, r7, #16
 8001ea8:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001eaa:	f107 0210 	add.w	r2, r7, #16
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	fab2 f282 	clz	r2, r2
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	f042 0220 	orr.w	r2, r2, #32
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f002 021f 	and.w	r2, r2, #31
 8001ec2:	40d3      	lsrs	r3, r2
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d183      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x1074>
 8001ecc:	e001      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b09e      	sub	sp, #120	; 0x78
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ef2:	4ba3      	ldr	r3, [pc, #652]	; (8002180 <HAL_RCC_ClockConfig+0x29c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0207 	and.w	r2, r3, #7
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d210      	bcs.n	8001f22 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f00:	499f      	ldr	r1, [pc, #636]	; (8002180 <HAL_RCC_ClockConfig+0x29c>)
 8001f02:	4b9f      	ldr	r3, [pc, #636]	; (8002180 <HAL_RCC_ClockConfig+0x29c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 0207 	bic.w	r2, r3, #7
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f10:	4b9b      	ldr	r3, [pc, #620]	; (8002180 <HAL_RCC_ClockConfig+0x29c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0207 	and.w	r2, r3, #7
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1d0      	b.n	80022c4 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2e:	4995      	ldr	r1, [pc, #596]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 8001f30:	4b94      	ldr	r3, [pc, #592]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8168 	beq.w	800221e <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d15c      	bne.n	8002010 <HAL_RCC_ClockConfig+0x12c>
 8001f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5a:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f043 0320 	orr.w	r3, r3, #32
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d102      	bne.n	8001f82 <HAL_RCC_ClockConfig+0x9e>
 8001f7c:	4b81      	ldr	r3, [pc, #516]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	e02d      	b.n	8001fde <HAL_RCC_ClockConfig+0xfa>
 8001f82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f86:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f043 0320 	orr.w	r3, r3, #32
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_ClockConfig+0xca>
 8001fa8:	4b76      	ldr	r3, [pc, #472]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	e017      	b.n	8001fde <HAL_RCC_ClockConfig+0xfa>
 8001fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f043 0320 	orr.w	r3, r3, #32
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_ClockConfig+0xf6>
 8001fd4:	4b6b      	ldr	r3, [pc, #428]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	e001      	b.n	8001fde <HAL_RCC_ClockConfig+0xfa>
 8001fda:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fe2:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fe6:	fa92 f2a2 	rbit	r2, r2
 8001fea:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fee:	fab2 f282 	clz	r2, r2
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	f042 0220 	orr.w	r2, r2, #32
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	f002 021f 	and.w	r2, r2, #31
 8002000:	40d3      	lsrs	r3, r2
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 80be 	bne.w	8002188 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e159      	b.n	80022c4 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d15b      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x1ec>
 8002018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800201c:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	f043 0320 	orr.w	r3, r3, #32
 8002032:	b2db      	uxtb	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_RCC_ClockConfig+0x160>
 800203e:	4b51      	ldr	r3, [pc, #324]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	e02d      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1bc>
 8002044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002048:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f043 0320 	orr.w	r3, r3, #32
 800205e:	b2db      	uxtb	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d102      	bne.n	8002070 <HAL_RCC_ClockConfig+0x18c>
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	e017      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1bc>
 8002070:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002074:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f043 0320 	orr.w	r3, r3, #32
 800208a:	b2db      	uxtb	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b04      	cmp	r3, #4
 8002094:	d102      	bne.n	800209c <HAL_RCC_ClockConfig+0x1b8>
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	e001      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1bc>
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a4:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020a8:	fa92 f2a2 	rbit	r2, r2
 80020ac:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020ae:	6a3a      	ldr	r2, [r7, #32]
 80020b0:	fab2 f282 	clz	r2, r2
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	f042 0220 	orr.w	r2, r2, #32
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f002 021f 	and.w	r2, r2, #31
 80020c2:	40d3      	lsrs	r3, r2
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d15d      	bne.n	8002188 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0f9      	b.n	80022c4 <HAL_RCC_ClockConfig+0x3e0>
 80020d0:	2302      	movs	r3, #2
 80020d2:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020dc:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d102      	bne.n	80020fa <HAL_RCC_ClockConfig+0x216>
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	e02b      	b.n	8002152 <HAL_RCC_ClockConfig+0x26e>
 80020fa:	2302      	movs	r3, #2
 80020fc:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f043 0320 	orr.w	r3, r3, #32
 8002112:	b2db      	uxtb	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d102      	bne.n	8002124 <HAL_RCC_ClockConfig+0x240>
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	e016      	b.n	8002152 <HAL_RCC_ClockConfig+0x26e>
 8002124:	2302      	movs	r3, #2
 8002126:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f043 0320 	orr.w	r3, r3, #32
 800213c:	b2db      	uxtb	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b04      	cmp	r3, #4
 8002146:	d102      	bne.n	800214e <HAL_RCC_ClockConfig+0x26a>
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	e001      	b.n	8002152 <HAL_RCC_ClockConfig+0x26e>
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_RCC_ClockConfig+0x2a0>)
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	2202      	movs	r2, #2
 8002154:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002158:	fa92 f2a2 	rbit	r2, r2
 800215c:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	fab2 f282 	clz	r2, r2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f042 0220 	orr.w	r2, r2, #32
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	40d3      	lsrs	r3, r2
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0a1      	b.n	80022c4 <HAL_RCC_ClockConfig+0x3e0>
 8002180:	40022000 	.word	0x40022000
 8002184:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002188:	4950      	ldr	r1, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x3e8>)
 800218a:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x3e8>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f023 0203 	bic.w	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800219a:	f7fe fae5 	bl	8000768 <HAL_GetTick>
 800219e:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d112      	bne.n	80021ce <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021aa:	f7fe fadd 	bl	8000768 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e081      	b.n	80022c4 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c0:	4b42      	ldr	r3, [pc, #264]	; (80022cc <HAL_RCC_ClockConfig+0x3e8>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d1ee      	bne.n	80021aa <HAL_RCC_ClockConfig+0x2c6>
 80021cc:	e027      	b.n	800221e <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d11d      	bne.n	8002212 <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7fe fac6 	bl	8000768 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e06a      	b.n	80022c4 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <HAL_RCC_ClockConfig+0x3e8>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d1ee      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x2f4>
 80021fa:	e010      	b.n	800221e <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7fe fab4 	bl	8000768 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e058      	b.n	80022c4 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002212:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <HAL_RCC_ClockConfig+0x3e8>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ee      	bne.n	80021fc <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800221e:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_RCC_ClockConfig+0x3ec>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0207 	and.w	r2, r3, #7
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d910      	bls.n	800224e <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222c:	4928      	ldr	r1, [pc, #160]	; (80022d0 <HAL_RCC_ClockConfig+0x3ec>)
 800222e:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_RCC_ClockConfig+0x3ec>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 0207 	bic.w	r2, r3, #7
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCC_ClockConfig+0x3ec>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0207 	and.w	r2, r3, #7
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e03a      	b.n	80022c4 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225a:	491c      	ldr	r1, [pc, #112]	; (80022cc <HAL_RCC_ClockConfig+0x3e8>)
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_RCC_ClockConfig+0x3e8>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002278:	4914      	ldr	r1, [pc, #80]	; (80022cc <HAL_RCC_ClockConfig+0x3e8>)
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_RCC_ClockConfig+0x3e8>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800228c:	f000 f826 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8002290:	4601      	mov	r1, r0
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x3e8>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800229a:	23f0      	movs	r3, #240	; 0xf0
 800229c:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_RCC_ClockConfig+0x3f0>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	fa21 f303 	lsr.w	r3, r1, r3
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_RCC_ClockConfig+0x3f4>)
 80022ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022bc:	2000      	movs	r0, #0
 80022be:	f7fe fa29 	bl	8000714 <HAL_InitTick>
  
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3778      	adds	r7, #120	; 0x78
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40022000 	.word	0x40022000
 80022d4:	080023e8 	.word	0x080023e8
 80022d8:	20000428 	.word	0x20000428

080022dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b08b      	sub	sp, #44	; 0x2c
 80022e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_RCC_GetSysClockFreq+0xc0>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b04      	cmp	r3, #4
 8002304:	d002      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x30>
 8002306:	2b08      	cmp	r3, #8
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x36>
 800230a:	e03c      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800230e:	623b      	str	r3, [r7, #32]
      break;
 8002310:	e03c      	b.n	800238c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002318:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800231c:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	230f      	movs	r3, #15
 8002340:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002364:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
 8002374:	e004      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	623b      	str	r3, [r7, #32]
      break;
 8002384:	e002      	b.n	800238c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002388:	623b      	str	r3, [r7, #32]
      break;
 800238a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800238c:	6a3b      	ldr	r3, [r7, #32]
}
 800238e:	4618      	mov	r0, r3
 8002390:	372c      	adds	r7, #44	; 0x2c
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	007a1200 	.word	0x007a1200
 80023a4:	080023f8 	.word	0x080023f8
 80023a8:	08002408 	.word	0x08002408
 80023ac:	003d0900 	.word	0x003d0900

080023b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000428 	.word	0x20000428

080023c8 <_init>:
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	bf00      	nop
 80023cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ce:	bc08      	pop	{r3}
 80023d0:	469e      	mov	lr, r3
 80023d2:	4770      	bx	lr

080023d4 <_fini>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	bf00      	nop
 80023d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023da:	bc08      	pop	{r3}
 80023dc:	469e      	mov	lr, r3
 80023de:	4770      	bx	lr
