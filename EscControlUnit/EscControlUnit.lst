
EscControlUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b50  08004b50  00014b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000042c  20000000  08004b9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002042c  2**0
                  CONTENTS
  7 .bss          00000154  2000042c  2000042c  0002042c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000580  20000580  0002042c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00005289  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000ba65  00000000  00000000  000256e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001803  00000000  00000000  0003114a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000be8  00000000  00000000  00032950  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b10  00000000  00000000  00033538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000067f2  00000000  00000000  00034048  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000348d  00000000  00000000  0003a83a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000006e  00000000  00000000  0003dcc7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003060  00000000  00000000  0003dd38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000042f 	.word	0x2000042f
 80001a0:	2000042c 	.word	0x2000042c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	2000042c 	.word	0x2000042c
 80001c4:	2000042c 	.word	0x2000042c
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000042c 	.word	0x2000042c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b38 	.word	0x08004b38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000430 	.word	0x20000430
 8000220:	08004b38 	.word	0x08004b38
 8000224:	2000042c 	.word	0x2000042c
 8000228:	00000000 	.word	0x00000000

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	4e0f      	ldr	r6, [pc, #60]	; (800026c <__libc_init_array+0x40>)
 8000230:	4d0f      	ldr	r5, [pc, #60]	; (8000270 <__libc_init_array+0x44>)
 8000232:	1b76      	subs	r6, r6, r5
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	bf18      	it	ne
 8000238:	2400      	movne	r4, #0
 800023a:	d005      	beq.n	8000248 <__libc_init_array+0x1c>
 800023c:	3401      	adds	r4, #1
 800023e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000242:	4798      	blx	r3
 8000244:	42a6      	cmp	r6, r4
 8000246:	d1f9      	bne.n	800023c <__libc_init_array+0x10>
 8000248:	4e0a      	ldr	r6, [pc, #40]	; (8000274 <__libc_init_array+0x48>)
 800024a:	4d0b      	ldr	r5, [pc, #44]	; (8000278 <__libc_init_array+0x4c>)
 800024c:	1b76      	subs	r6, r6, r5
 800024e:	f004 fc73 	bl	8004b38 <_init>
 8000252:	10b6      	asrs	r6, r6, #2
 8000254:	bf18      	it	ne
 8000256:	2400      	movne	r4, #0
 8000258:	d006      	beq.n	8000268 <__libc_init_array+0x3c>
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	08004b90 	.word	0x08004b90
 8000270:	08004b90 	.word	0x08004b90
 8000274:	08004b98 	.word	0x08004b98
 8000278:	08004b90 	.word	0x08004b90

0800027c <register_fini>:
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <register_fini+0xc>)
 800027e:	b113      	cbz	r3, 8000286 <register_fini+0xa>
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <register_fini+0x10>)
 8000282:	f000 b805 	b.w	8000290 <atexit>
 8000286:	4770      	bx	lr
 8000288:	00000000 	.word	0x00000000
 800028c:	0800029d 	.word	0x0800029d

08000290 <atexit>:
 8000290:	2300      	movs	r3, #0
 8000292:	4601      	mov	r1, r0
 8000294:	461a      	mov	r2, r3
 8000296:	4618      	mov	r0, r3
 8000298:	f000 b814 	b.w	80002c4 <__register_exitproc>

0800029c <__libc_fini_array>:
 800029c:	b538      	push	{r3, r4, r5, lr}
 800029e:	4d07      	ldr	r5, [pc, #28]	; (80002bc <__libc_fini_array+0x20>)
 80002a0:	4c07      	ldr	r4, [pc, #28]	; (80002c0 <__libc_fini_array+0x24>)
 80002a2:	1b2c      	subs	r4, r5, r4
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	d005      	beq.n	80002b4 <__libc_fini_array+0x18>
 80002a8:	3c01      	subs	r4, #1
 80002aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80002ae:	4798      	blx	r3
 80002b0:	2c00      	cmp	r4, #0
 80002b2:	d1f9      	bne.n	80002a8 <__libc_fini_array+0xc>
 80002b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80002b8:	f004 bc44 	b.w	8004b44 <_fini>
 80002bc:	08004b9c 	.word	0x08004b9c
 80002c0:	08004b98 	.word	0x08004b98

080002c4 <__register_exitproc>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	4c25      	ldr	r4, [pc, #148]	; (8000360 <__register_exitproc+0x9c>)
 80002ca:	6825      	ldr	r5, [r4, #0]
 80002cc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80002d0:	4606      	mov	r6, r0
 80002d2:	4688      	mov	r8, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b3c4      	cbz	r4, 800034c <__register_exitproc+0x88>
 80002da:	6860      	ldr	r0, [r4, #4]
 80002dc:	281f      	cmp	r0, #31
 80002de:	dc17      	bgt.n	8000310 <__register_exitproc+0x4c>
 80002e0:	1c43      	adds	r3, r0, #1
 80002e2:	b176      	cbz	r6, 8000302 <__register_exitproc+0x3e>
 80002e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80002e8:	2201      	movs	r2, #1
 80002ea:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80002ee:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 80002f2:	4082      	lsls	r2, r0
 80002f4:	4311      	orrs	r1, r2
 80002f6:	2e02      	cmp	r6, #2
 80002f8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80002fc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8000300:	d01e      	beq.n	8000340 <__register_exitproc+0x7c>
 8000302:	3002      	adds	r0, #2
 8000304:	6063      	str	r3, [r4, #4]
 8000306:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800030a:	2000      	movs	r0, #0
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <__register_exitproc+0xa0>)
 8000312:	b303      	cbz	r3, 8000356 <__register_exitproc+0x92>
 8000314:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000318:	f3af 8000 	nop.w
 800031c:	4604      	mov	r4, r0
 800031e:	b1d0      	cbz	r0, 8000356 <__register_exitproc+0x92>
 8000320:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000324:	2700      	movs	r7, #0
 8000326:	e880 0088 	stmia.w	r0, {r3, r7}
 800032a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800032e:	4638      	mov	r0, r7
 8000330:	2301      	movs	r3, #1
 8000332:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000336:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e1      	beq.n	8000302 <__register_exitproc+0x3e>
 800033e:	e7d1      	b.n	80002e4 <__register_exitproc+0x20>
 8000340:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000344:	430a      	orrs	r2, r1
 8000346:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800034a:	e7da      	b.n	8000302 <__register_exitproc+0x3e>
 800034c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000350:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000354:	e7c1      	b.n	80002da <__register_exitproc+0x16>
 8000356:	f04f 30ff 	mov.w	r0, #4294967295
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	bf00      	nop
 8000360:	08004b54 	.word	0x08004b54
 8000364:	00000000 	.word	0x00000000

08000368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800036c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800036e:	e003      	b.n	8000378 <LoopCopyDataInit>

08000370 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000372:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000374:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000376:	3104      	adds	r1, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800037c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800037e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000380:	d3f6      	bcc.n	8000370 <CopyDataInit>
	ldr	r2, =_sbss
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000384:	e002      	b.n	800038c <LoopFillZerobss>

08000386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000386:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000388:	f842 3b04 	str.w	r3, [r2], #4

0800038c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <LoopForever+0x16>)
	cmp	r2, r3
 800038e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000390:	d3f9      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000392:	f000 fe23 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000396:	f7ff ff49 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800039a:	f000 f80f 	bl	80003bc <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a0:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80003a4:	08004b9c 	.word	0x08004b9c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003ac:	2000042c 	.word	0x2000042c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80003b0:	2000042c 	.word	0x2000042c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80003b4:	20000580 	.word	0x20000580

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <main>:
void user_A9_pwm_setvalue(float value);
void user_A10_pwm_setvalue(float value);
/* USER CODE END 0 */

int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c0:	f000 ff7a 	bl	80012b8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80003c4:	f000 f81e 	bl	8000404 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c8:	f000 fa00 	bl	80007cc <MX_GPIO_Init>
  MX_TIM1_Init();
 80003cc:	f000 f86e 	bl	80004ac <MX_TIM1_Init>
  MX_TIM2_Init();
 80003d0:	f000 f904 	bl	80005dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80003d4:	f000 f960 	bl	8000698 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80003d8:	f000 f9c8 	bl	800076c <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1,&RxData,1);
 80003dc:	2201      	movs	r2, #1
 80003de:	4907      	ldr	r1, [pc, #28]	; (80003fc <main+0x40>)
 80003e0:	4807      	ldr	r0, [pc, #28]	; (8000400 <main+0x44>)
 80003e2:	f002 ffaf 	bl	8003344 <HAL_UART_Receive_IT>
	LED1Off();
 80003e6:	f000 fb03 	bl	80009f0 <LED1Off>
	LED2Off();
 80003ea:	f000 fb0b 	bl	8000a04 <LED2Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  LED1Toggle();
 80003ee:	f000 fb13 	bl	8000a18 <LED1Toggle>
  HAL_Delay(10);
 80003f2:	200a      	movs	r0, #10
 80003f4:	f000 ffac 	bl	8001350 <HAL_Delay>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
 80003f8:	e7f9      	b.n	80003ee <main+0x32>
 80003fa:	bf00      	nop
 80003fc:	20000570 	.word	0x20000570
 8000400:	200004fc 	.word	0x200004fc

08000404 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b096      	sub	sp, #88	; 0x58
 8000408:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040a:	2302      	movs	r3, #2
 800040c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040e:	2301      	movs	r3, #1
 8000410:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000412:	2310      	movs	r3, #16
 8000414:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000416:	2300      	movs	r3, #0
 8000418:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fa80 	bl	8001924 <HAL_RCC_OscConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x2a>
  {
    Error_Handler();
 800042a:	f000 fd91 	bl	8000f50 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042e:	230f      	movs	r3, #15
 8000430:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000442:	f107 031c 	add.w	r3, r7, #28
 8000446:	2100      	movs	r1, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f002 fb2d 	bl	8002aa8 <HAL_RCC_ClockConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000454:	f000 fd7c 	bl	8000f50 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000458:	f241 0301 	movw	r3, #4097	; 0x1001
 800045c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000462:	2300      	movs	r3, #0
 8000464:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4618      	mov	r0, r3
 800046a:	f002 fdd3 	bl	8003014 <HAL_RCCEx_PeriphCLKConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000474:	f000 fd6c 	bl	8000f50 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000478:	f002 fd7c 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 800047c:	4602      	mov	r2, r0
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <SystemClock_Config+0xa4>)
 8000480:	fba3 2302 	umull	r2, r3, r3, r2
 8000484:	099b      	lsrs	r3, r3, #6
 8000486:	4618      	mov	r0, r3
 8000488:	f001 f876 	bl	8001578 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800048c:	2004      	movs	r0, #4
 800048e:	f001 f87f 	bl	8001590 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	f04f 30ff 	mov.w	r0, #4294967295
 800049a:	f001 f843 	bl	8001524 <HAL_NVIC_SetPriority>
}
 800049e:	bf00      	nop
 80004a0:	3758      	adds	r7, #88	; 0x58
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	10624dd3 	.word	0x10624dd3

080004ac <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b096      	sub	sp, #88	; 0x58
 80004b0:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 80004b2:	4b48      	ldr	r3, [pc, #288]	; (80005d4 <MX_TIM1_Init+0x128>)
 80004b4:	4a48      	ldr	r2, [pc, #288]	; (80005d8 <MX_TIM1_Init+0x12c>)
 80004b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80004b8:	4b46      	ldr	r3, [pc, #280]	; (80005d4 <MX_TIM1_Init+0x128>)
 80004ba:	2203      	movs	r2, #3
 80004bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004be:	4b45      	ldr	r3, [pc, #276]	; (80005d4 <MX_TIM1_Init+0x128>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 80004c4:	4b43      	ldr	r3, [pc, #268]	; (80005d4 <MX_TIM1_Init+0x128>)
 80004c6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80004ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004cc:	4b41      	ldr	r3, [pc, #260]	; (80005d4 <MX_TIM1_Init+0x128>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d2:	4b40      	ldr	r3, [pc, #256]	; (80005d4 <MX_TIM1_Init+0x128>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004d8:	483e      	ldr	r0, [pc, #248]	; (80005d4 <MX_TIM1_Init+0x128>)
 80004da:	f003 fca1 	bl	8003e20 <HAL_TIM_PWM_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM1_Init+0x3c>
  {
    Error_Handler();
 80004e4:	f000 fd34 	bl	8000f50 <Error_Handler>
  }

  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80004e8:	483a      	ldr	r0, [pc, #232]	; (80005d4 <MX_TIM1_Init+0x128>)
 80004ea:	f003 fc63 	bl	8003db4 <HAL_TIM_OC_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 80004f4:	f000 fd2c 	bl	8000f50 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f8:	2300      	movs	r3, #0
 80004fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004fc:	2300      	movs	r3, #0
 80004fe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000504:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000508:	4619      	mov	r1, r3
 800050a:	4832      	ldr	r0, [pc, #200]	; (80005d4 <MX_TIM1_Init+0x128>)
 800050c:	f004 f944 	bl	8004798 <HAL_TIMEx_MasterConfigSynchronization>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000516:	f000 fd1b 	bl	8000f50 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800051a:	2360      	movs	r3, #96	; 0x60
 800051c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000522:	2300      	movs	r3, #0
 8000524:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000526:	2300      	movs	r3, #0
 8000528:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800052e:	2300      	movs	r3, #0
 8000530:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000532:	2300      	movs	r3, #0
 8000534:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800053a:	2200      	movs	r2, #0
 800053c:	4619      	mov	r1, r3
 800053e:	4825      	ldr	r0, [pc, #148]	; (80005d4 <MX_TIM1_Init+0x128>)
 8000540:	f004 f812 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800054a:	f000 fd01 	bl	8000f50 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800054e:	2300      	movs	r3, #0
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000552:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000556:	2204      	movs	r2, #4
 8000558:	4619      	mov	r1, r3
 800055a:	481e      	ldr	r0, [pc, #120]	; (80005d4 <MX_TIM1_Init+0x128>)
 800055c:	f003 ff86 	bl	800446c <HAL_TIM_OC_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000566:	f000 fcf3 	bl	8000f50 <Error_Handler>
  }

  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800056a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800056e:	2208      	movs	r2, #8
 8000570:	4619      	mov	r1, r3
 8000572:	4818      	ldr	r0, [pc, #96]	; (80005d4 <MX_TIM1_Init+0x128>)
 8000574:	f003 ff7a 	bl	800446c <HAL_TIM_OC_ConfigChannel>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800057e:	f000 fce7 	bl	8000f50 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4619      	mov	r1, r3
 80005b6:	4807      	ldr	r0, [pc, #28]	; (80005d4 <MX_TIM1_Init+0x128>)
 80005b8:	f004 f93c 	bl	8004834 <HAL_TIMEx_ConfigBreakDeadTime>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 80005c2:	f000 fcc5 	bl	8000f50 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 80005c6:	4803      	ldr	r0, [pc, #12]	; (80005d4 <MX_TIM1_Init+0x128>)
 80005c8:	f000 fdda 	bl	8001180 <HAL_TIM_MspPostInit>

}
 80005cc:	bf00      	nop
 80005ce:	3758      	adds	r7, #88	; 0x58
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000448 	.word	0x20000448
 80005d8:	40012c00 	.word	0x40012c00

080005dc <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 80005e2:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <MX_TIM2_Init+0xb8>)
 80005e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_TIM2_Init+0xb8>)
 80005ec:	2203      	movs	r2, #3
 80005ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f0:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_TIM2_Init+0xb8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_TIM2_Init+0xb8>)
 80005f8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80005fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_TIM2_Init+0xb8>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000604:	4823      	ldr	r0, [pc, #140]	; (8000694 <MX_TIM2_Init+0xb8>)
 8000606:	f003 fc0b 	bl	8003e20 <HAL_TIM_PWM_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 fc9e 	bl	8000f50 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	481c      	ldr	r0, [pc, #112]	; (8000694 <MX_TIM2_Init+0xb8>)
 8000624:	f004 f8b8 	bl	8004798 <HAL_TIMEx_MasterConfigSynchronization>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800062e:	f000 fc8f 	bl	8000f50 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000632:	2360      	movs	r3, #96	; 0x60
 8000634:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	4812      	ldr	r0, [pc, #72]	; (8000694 <MX_TIM2_Init+0xb8>)
 800064a:	f003 ff8d 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000654:	f000 fc7c 	bl	8000f50 <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	2204      	movs	r2, #4
 800065c:	4619      	mov	r1, r3
 800065e:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_TIM2_Init+0xb8>)
 8000660:	f003 ff82 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800066a:	f000 fc71 	bl	8000f50 <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	220c      	movs	r2, #12
 8000672:	4619      	mov	r1, r3
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <MX_TIM2_Init+0xb8>)
 8000676:	f003 ff77 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000680:	f000 fc66 	bl	8000f50 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <MX_TIM2_Init+0xb8>)
 8000686:	f000 fd7b 	bl	8001180 <HAL_TIM_MspPostInit>

}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000484 	.word	0x20000484

08000698 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 800069e:	4b31      	ldr	r3, [pc, #196]	; (8000764 <MX_TIM3_Init+0xcc>)
 80006a0:	4a31      	ldr	r2, [pc, #196]	; (8000768 <MX_TIM3_Init+0xd0>)
 80006a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 80006a4:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <MX_TIM3_Init+0xcc>)
 80006a6:	2203      	movs	r2, #3
 80006a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <MX_TIM3_Init+0xcc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <MX_TIM3_Init+0xcc>)
 80006b2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80006b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <MX_TIM3_Init+0xcc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006be:	4829      	ldr	r0, [pc, #164]	; (8000764 <MX_TIM3_Init+0xcc>)
 80006c0:	f003 fbae 	bl	8003e20 <HAL_TIM_PWM_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM3_Init+0x36>
  {
    Error_Handler();
 80006ca:	f000 fc41 	bl	8000f50 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4821      	ldr	r0, [pc, #132]	; (8000764 <MX_TIM3_Init+0xcc>)
 80006de:	f004 f85b 	bl	8004798 <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006e8:	f000 fc32 	bl	8000f50 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ec:	2360      	movs	r3, #96	; 0x60
 80006ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	4619      	mov	r1, r3
 8000702:	4818      	ldr	r0, [pc, #96]	; (8000764 <MX_TIM3_Init+0xcc>)
 8000704:	f003 ff30 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800070e:	f000 fc1f 	bl	8000f50 <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	2204      	movs	r2, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4812      	ldr	r0, [pc, #72]	; (8000764 <MX_TIM3_Init+0xcc>)
 800071a:	f003 ff25 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000724:	f000 fc14 	bl	8000f50 <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	2208      	movs	r2, #8
 800072c:	4619      	mov	r1, r3
 800072e:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_TIM3_Init+0xcc>)
 8000730:	f003 ff1a 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800073a:	f000 fc09 	bl	8000f50 <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	220c      	movs	r2, #12
 8000742:	4619      	mov	r1, r3
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <MX_TIM3_Init+0xcc>)
 8000746:	f003 ff0f 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8000750:	f000 fbfe 	bl	8000f50 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <MX_TIM3_Init+0xcc>)
 8000756:	f000 fd13 	bl	8001180 <HAL_TIM_MspPostInit>

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200004c0 	.word	0x200004c0
 8000768:	40000400 	.word	0x40000400

0800076c <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <MX_USART1_UART_Init+0x5c>)
 8000774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 80007b0:	f002 fd76 	bl	80032a0 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 fbc9 	bl	8000f50 <Error_Handler>
  }

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200004fc 	.word	0x200004fc
 80007c8:	40013800 	.word	0x40013800

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d2:	4a32      	ldr	r2, [pc, #200]	; (800089c <MX_GPIO_Init+0xd0>)
 80007d4:	4b31      	ldr	r3, [pc, #196]	; (800089c <MX_GPIO_Init+0xd0>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <MX_GPIO_Init+0xd0>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4a2c      	ldr	r2, [pc, #176]	; (800089c <MX_GPIO_Init+0xd0>)
 80007ec:	4b2b      	ldr	r3, [pc, #172]	; (800089c <MX_GPIO_Init+0xd0>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <MX_GPIO_Init+0xd0>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4a26      	ldr	r2, [pc, #152]	; (800089c <MX_GPIO_Init+0xd0>)
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <MX_GPIO_Init+0xd0>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800080c:	6153      	str	r3, [r2, #20]
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_GPIO_Init+0xd0>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, EV7_Pin|EV5_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2103      	movs	r1, #3
 800081e:	4820      	ldr	r0, [pc, #128]	; (80008a0 <MX_GPIO_Init+0xd4>)
 8000820:	f001 f856 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|EV6_Pin|EV3_Pin 
 8000824:	2200      	movs	r2, #0
 8000826:	f641 01a4 	movw	r1, #6308	; 0x18a4
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f001 f84f 	bl	80018d0 <HAL_GPIO_WritePin>
                          |EV4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDE_Pin|EV1_Pin|EV2_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2138      	movs	r1, #56	; 0x38
 8000836:	481b      	ldr	r0, [pc, #108]	; (80008a4 <MX_GPIO_Init+0xd8>)
 8000838:	f001 f84a 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EV7_Pin EV5_Pin */
  GPIO_InitStruct.Pin = EV7_Pin|EV5_Pin;
 800083c:	2303      	movs	r3, #3
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4813      	ldr	r0, [pc, #76]	; (80008a0 <MX_GPIO_Init+0xd4>)
 8000854:	f000 fec6 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin EV6_Pin EV3_Pin 
                           EV4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|EV6_Pin|EV3_Pin 
 8000858:	f641 03a4 	movw	r3, #6308	; 0x18a4
 800085c:	60fb      	str	r3, [r7, #12]
                          |EV4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f000 feb6 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : REDE_Pin EV1_Pin EV2_Pin */
  GPIO_InitStruct.Pin = REDE_Pin|EV1_Pin|EV2_Pin;
 8000878:	2338      	movs	r3, #56	; 0x38
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_GPIO_Init+0xd8>)
 8000890:	f000 fea8 	bl	80015e4 <HAL_GPIO_Init>

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000
 80008a0:	48001400 	.word	0x48001400
 80008a4:	48000400 	.word	0x48000400

080008a8 <EV1On>:

/* USER CODE BEGIN 4 */
/*GPIO_On*/
void EV1On(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV1_GPIO_Port,EV1_Pin,GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2110      	movs	r1, #16
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <EV1On+0x14>)
 80008b2:	f001 f80d 	bl	80018d0 <HAL_GPIO_WritePin>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	48000400 	.word	0x48000400

080008c0 <EV2On>:
void EV2On(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV2_GPIO_Port,EV2_Pin,GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2120      	movs	r1, #32
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <EV2On+0x14>)
 80008ca:	f001 f801 	bl	80018d0 <HAL_GPIO_WritePin>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	48000400 	.word	0x48000400

080008d8 <EV3On>:
void EV3On(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV3_GPIO_Port,EV3_Pin,GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f000 fff3 	bl	80018d0 <HAL_GPIO_WritePin>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop

080008f0 <EV4On>:
void EV4On(){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV4_GPIO_Port,EV4_Pin,GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fe:	f000 ffe7 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop

08000908 <EV5On>:
void EV5On(){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV5_GPIO_Port,EV5_Pin,GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2102      	movs	r1, #2
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <EV5On+0x14>)
 8000912:	f000 ffdd 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	48001400 	.word	0x48001400

08000920 <EV6On>:
void EV6On(){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV6_GPIO_Port,EV6_Pin,GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f000 ffd0 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <EV7On>:
void EV7On(){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV7_GPIO_Port,EV7_Pin,GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2101      	movs	r1, #1
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <EV7On+0x14>)
 800093e:	f000 ffc7 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	48001400 	.word	0x48001400

0800094c <EV1Off>:
}
void REDEOn(){
	HAL_GPIO_WritePin(REDE_GPIO_Port,REDE_Pin,GPIO_PIN_SET);
}
/*GPIO_Off*/
void EV1Off(){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV1_GPIO_Port,EV1_Pin,GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2110      	movs	r1, #16
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <EV1Off+0x14>)
 8000956:	f000 ffbb 	bl	80018d0 <HAL_GPIO_WritePin>
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	48000400 	.word	0x48000400

08000964 <EV2Off>:
void EV2Off(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV2_GPIO_Port,EV2_Pin,GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2120      	movs	r1, #32
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <EV2Off+0x14>)
 800096e:	f000 ffaf 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	48000400 	.word	0x48000400

0800097c <EV3Off>:
void EV3Off(){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV3_GPIO_Port,EV3_Pin,GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098a:	f000 ffa1 	bl	80018d0 <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop

08000994 <EV4Off>:
void EV4Off(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV4_GPIO_Port,EV4_Pin,GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f000 ff95 	bl	80018d0 <HAL_GPIO_WritePin>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop

080009ac <EV5Off>:
void EV5Off(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV5_GPIO_Port,EV5_Pin,GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2102      	movs	r1, #2
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <EV5Off+0x14>)
 80009b6:	f000 ff8b 	bl	80018d0 <HAL_GPIO_WritePin>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	48001400 	.word	0x48001400

080009c4 <EV6Off>:
void EV6Off(){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV6_GPIO_Port,EV6_Pin,GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f000 ff7e 	bl	80018d0 <HAL_GPIO_WritePin>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <EV7Off>:
void EV7Off(){
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EV7_GPIO_Port,EV7_Pin,GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2101      	movs	r1, #1
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <EV7Off+0x14>)
 80009e2:	f000 ff75 	bl	80018d0 <HAL_GPIO_WritePin>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	48001400 	.word	0x48001400

080009f0 <LED1Off>:
void LED1Off(){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2104      	movs	r1, #4
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f000 ff68 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <LED2Off>:
void LED2Off(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2120      	movs	r1, #32
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 ff5e 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <LED1Toggle>:
void REDEOff(){
	HAL_GPIO_WritePin(REDE_GPIO_Port,REDE_Pin,GPIO_PIN_RESET);
}
/*GPIOToggle*/
void LED1Toggle(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f000 ff6d 	bl	8001900 <HAL_GPIO_TogglePin>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop

08000a2c <LED2Toggle>:
void LED2Toggle(){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8000a30:	2120      	movs	r1, #32
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f000 ff63 	bl	8001900 <HAL_GPIO_TogglePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop

08000a40 <HAL_UART_TxCpltCallback>:
/*Interupt*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){}
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	volatile int j=0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
	HAL_UART_Receive_IT(&huart1, &RxData, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	4917      	ldr	r1, [pc, #92]	; (8000ac0 <HAL_UART_RxCpltCallback+0x6c>)
 8000a64:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <HAL_UART_RxCpltCallback+0x70>)
 8000a66:	f002 fc6d 	bl	8003344 <HAL_UART_Receive_IT>
	uint8_t Data = RxData;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_RxCpltCallback+0x6c>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	73fb      	strb	r3, [r7, #15]
	if(_index != 0){
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_UART_RxCpltCallback+0x74>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d019      	beq.n	8000aac <HAL_UART_RxCpltCallback+0x58>
		Rxbuff[_index-1] = Data;
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <HAL_UART_RxCpltCallback+0x74>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	4913      	ldr	r1, [pc, #76]	; (8000acc <HAL_UART_RxCpltCallback+0x78>)
 8000a80:	7bfa      	ldrb	r2, [r7, #15]
 8000a82:	54ca      	strb	r2, [r1, r3]
		_index++;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_UART_RxCpltCallback+0x74>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_UART_RxCpltCallback+0x74>)
 8000a8c:	6013      	str	r3, [r2, #0]
		if(_index == 5){
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_UART_RxCpltCallback+0x74>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b05      	cmp	r3, #5
 8000a94:	d110      	bne.n	8000ab8 <HAL_UART_RxCpltCallback+0x64>
			_index=0;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_UART_RxCpltCallback+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
			if(Rxbuff[0] == 0xBB){
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_UART_RxCpltCallback+0x78>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2bbb      	cmp	r3, #187	; 0xbb
 8000aa2:	d109      	bne.n	8000ab8 <HAL_UART_RxCpltCallback+0x64>
				ESC_CONTROL(Rxbuff);
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <HAL_UART_RxCpltCallback+0x78>)
 8000aa6:	f000 f813 	bl	8000ad0 <ESC_CONTROL>
		}
	}else
		if(Data == 0x23){
		_index=1;
	}
}
 8000aaa:	e005      	b.n	8000ab8 <HAL_UART_RxCpltCallback+0x64>
			if(Rxbuff[0] == 0xBB){
				ESC_CONTROL(Rxbuff);
			}
		}
	}else
		if(Data == 0x23){
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	2b23      	cmp	r3, #35	; 0x23
 8000ab0:	d102      	bne.n	8000ab8 <HAL_UART_RxCpltCallback+0x64>
		_index=1;
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_UART_RxCpltCallback+0x74>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
	}
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000570 	.word	0x20000570
 8000ac4:	200004fc 	.word	0x200004fc
 8000ac8:	2000056c 	.word	0x2000056c
 8000acc:	20000574 	.word	0x20000574

08000ad0 <ESC_CONTROL>:
	HAL_UART_Transmit(&huart1,TxData,10,1);
	for(j=0;j<SENDDELAYCOUNT;j++);
	REDEOff();
}
/*ESC*/
uint8_t ESC_CONTROL(uint8_t *Dat){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	int i=0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
	uint8_t Data[4];
	for(i=0;i<4;i++){
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00c      	b.n	8000afc <ESC_CONTROL+0x2c>
		Data[i] = Dat[i];
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	7819      	ldrb	r1, [r3, #0]
 8000aea:	f107 020c 	add.w	r2, r7, #12
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	4413      	add	r3, r2
 8000af2:	460a      	mov	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
}
/*ESC*/
uint8_t ESC_CONTROL(uint8_t *Dat){
	int i=0;
	uint8_t Data[4];
	for(i=0;i<4;i++){
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	ddef      	ble.n	8000ae2 <ESC_CONTROL+0x12>
		Data[i] = Dat[i];
	}
	int _checksum = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
	_checksum = _checksum^0x23;
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f083 0323 	eor.w	r3, r3, #35	; 0x23
 8000b0c:	613b      	str	r3, [r7, #16]
	for(i=0;i<3;i++){
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	e00b      	b.n	8000b2c <ESC_CONTROL+0x5c>
		_checksum = _checksum ^ Data[i];
 8000b14:	f107 020c 	add.w	r2, r7, #12
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4053      	eors	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
	for(i=0;i<4;i++){
		Data[i] = Dat[i];
	}
	int _checksum = 0;
	_checksum = _checksum^0x23;
	for(i=0;i<3;i++){
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	ddf0      	ble.n	8000b14 <ESC_CONTROL+0x44>
		_checksum = _checksum ^ Data[i];
	}
	if(Data[3] == _checksum){
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	461a      	mov	r2, r3
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d153      	bne.n	8000be4 <ESC_CONTROL+0x114>
		if((Data[1] & 0x01) != 0 )EV1On();
 8000b3c:	7b7b      	ldrb	r3, [r7, #13]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <ESC_CONTROL+0x7c>
 8000b46:	f7ff feaf 	bl	80008a8 <EV1On>
 8000b4a:	e001      	b.n	8000b50 <ESC_CONTROL+0x80>
		else EV1Off();
 8000b4c:	f7ff fefe 	bl	800094c <EV1Off>
		if((Data[1] & 0x02) != 0 )EV2On();
 8000b50:	7b7b      	ldrb	r3, [r7, #13]
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <ESC_CONTROL+0x90>
 8000b5a:	f7ff feb1 	bl	80008c0 <EV2On>
 8000b5e:	e001      	b.n	8000b64 <ESC_CONTROL+0x94>
		else EV2Off();
 8000b60:	f7ff ff00 	bl	8000964 <EV2Off>
		if((Data[1] & 0x04) != 0 )EV3On();
 8000b64:	7b7b      	ldrb	r3, [r7, #13]
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <ESC_CONTROL+0xa4>
 8000b6e:	f7ff feb3 	bl	80008d8 <EV3On>
 8000b72:	e001      	b.n	8000b78 <ESC_CONTROL+0xa8>
		else EV3Off();
 8000b74:	f7ff ff02 	bl	800097c <EV3Off>
		if((Data[1] & 0x08) != 0 )EV4On();
 8000b78:	7b7b      	ldrb	r3, [r7, #13]
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <ESC_CONTROL+0xb8>
 8000b82:	f7ff feb5 	bl	80008f0 <EV4On>
 8000b86:	e001      	b.n	8000b8c <ESC_CONTROL+0xbc>
		else EV4Off();
 8000b88:	f7ff ff04 	bl	8000994 <EV4Off>
		if((Data[1] & 0x10) != 0 )EV5On();
 8000b8c:	7b7b      	ldrb	r3, [r7, #13]
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <ESC_CONTROL+0xcc>
 8000b96:	f7ff feb7 	bl	8000908 <EV5On>
 8000b9a:	e001      	b.n	8000ba0 <ESC_CONTROL+0xd0>
		else EV5Off();
 8000b9c:	f7ff ff06 	bl	80009ac <EV5Off>
		if((Data[1] & 0x20) != 0 )EV6On();
 8000ba0:	7b7b      	ldrb	r3, [r7, #13]
 8000ba2:	f003 0320 	and.w	r3, r3, #32
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <ESC_CONTROL+0xe0>
 8000baa:	f7ff feb9 	bl	8000920 <EV6On>
 8000bae:	e001      	b.n	8000bb4 <ESC_CONTROL+0xe4>
		else EV6Off();
 8000bb0:	f7ff ff08 	bl	80009c4 <EV6Off>
		if((Data[1] & 0x40) != 0 )EV7On();
 8000bb4:	7b7b      	ldrb	r3, [r7, #13]
 8000bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <ESC_CONTROL+0xf4>
 8000bbe:	f7ff feb9 	bl	8000934 <EV7On>
 8000bc2:	e001      	b.n	8000bc8 <ESC_CONTROL+0xf8>
		else EV7Off();
 8000bc4:	f7ff ff08 	bl	80009d8 <EV7Off>
		if((Data[1] & 0x80) != 0 )EscStart();
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da02      	bge.n	8000bd8 <ESC_CONTROL+0x108>
 8000bd2:	f000 f80d 	bl	8000bf0 <EscStart>
 8000bd6:	e001      	b.n	8000bdc <ESC_CONTROL+0x10c>
		else EscStop();
 8000bd8:	f000 f82c 	bl	8000c34 <EscStop>
		LED2Toggle();
 8000bdc:	f7ff ff26 	bl	8000a2c <LED2Toggle>
		return true;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e000      	b.n	8000be6 <ESC_CONTROL+0x116>
	}else{
		return false;
 8000be4:	2300      	movs	r3, #0
	}
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop

08000bf0 <EscStart>:
void EscStart(){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	user_A0_pwm_setvalue(val_A0_1);
 8000bf4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000c30 <EscStart+0x40>
 8000bf8:	f000 f83e 	bl	8000c78 <user_A0_pwm_setvalue>
	user_A1_pwm_setvalue(val_A1_1);
 8000bfc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000c30 <EscStart+0x40>
 8000c00:	f000 f86e 	bl	8000ce0 <user_A1_pwm_setvalue>
	user_A3_pwm_setvalue(val_A3_1);
 8000c04:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000c30 <EscStart+0x40>
 8000c08:	f000 f89e 	bl	8000d48 <user_A3_pwm_setvalue>
	user_A4_pwm_setvalue(val_A4_1);
 8000c0c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000c30 <EscStart+0x40>
 8000c10:	f000 f8ce 	bl	8000db0 <user_A4_pwm_setvalue>
	user_A6_pwm_setvalue(val_A6_1);
 8000c14:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000c30 <EscStart+0x40>
 8000c18:	f000 f8fe 	bl	8000e18 <user_A6_pwm_setvalue>
	user_B0_pwm_setvalue(val_B0_1);
 8000c1c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000c30 <EscStart+0x40>
 8000c20:	f000 f92e 	bl	8000e80 <user_B0_pwm_setvalue>
	user_B1_pwm_setvalue(val_B1_1);
 8000c24:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c30 <EscStart+0x40>
 8000c28:	f000 f95e 	bl	8000ee8 <user_B1_pwm_setvalue>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	3d4ccccd 	.word	0x3d4ccccd

08000c34 <EscStop>:
void EscStop(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	user_A0_pwm_setvalue(val_default);
 8000c38:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000c74 <EscStop+0x40>
 8000c3c:	f000 f81c 	bl	8000c78 <user_A0_pwm_setvalue>
	user_A1_pwm_setvalue(val_default);
 8000c40:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000c74 <EscStop+0x40>
 8000c44:	f000 f84c 	bl	8000ce0 <user_A1_pwm_setvalue>
	user_A3_pwm_setvalue(val_default);
 8000c48:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000c74 <EscStop+0x40>
 8000c4c:	f000 f87c 	bl	8000d48 <user_A3_pwm_setvalue>
	user_A4_pwm_setvalue(val_default);
 8000c50:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000c74 <EscStop+0x40>
 8000c54:	f000 f8ac 	bl	8000db0 <user_A4_pwm_setvalue>
	user_A6_pwm_setvalue(val_default);
 8000c58:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000c74 <EscStop+0x40>
 8000c5c:	f000 f8dc 	bl	8000e18 <user_A6_pwm_setvalue>
	user_B0_pwm_setvalue(val_default);
 8000c60:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000c74 <EscStop+0x40>
 8000c64:	f000 f90c 	bl	8000e80 <user_B0_pwm_setvalue>
	user_B1_pwm_setvalue(val_default);
 8000c68:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c74 <EscStop+0x40>
 8000c6c:	f000 f93c 	bl	8000ee8 <user_B1_pwm_setvalue>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	3d4ccccd 	.word	0x3d4ccccd

08000c78 <user_A0_pwm_setvalue>:
uint8_t isOn(uint8_t a,uint8_t b,uint8_t c){
	return ((a&c)!=0 + (b&c)!=0);
}
/*timer*/
void user_A0_pwm_setvalue(float value)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	ed87 0a01 	vstr	s0, [r7, #4]
   TIM_OC_InitTypeDef sConfigOC;
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c82:	2360      	movs	r3, #96	; 0x60
 8000c84:	60fb      	str	r3, [r7, #12]
   sConfigOC.Pulse = (uint32_t)((39999)*value);
 8000c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c8a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000cd8 <user_A0_pwm_setvalue+0x60>
 8000c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c96:	ee17 3a90 	vmov	r3, s15
 8000c9a:	613b      	str	r3, [r7, #16]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <user_A0_pwm_setvalue+0x64>)
 8000cba:	f003 fc55 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4806      	ldr	r0, [pc, #24]	; (8000cdc <user_A0_pwm_setvalue+0x64>)
 8000cc2:	f003 f8d9 	bl	8003e78 <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_1);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <user_A0_pwm_setvalue+0x64>)
 8000cca:	f003 fbad 	bl	8004428 <HAL_TIMEx_PWMN_Start>
}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	471c3f00 	.word	0x471c3f00
 8000cdc:	20000484 	.word	0x20000484

08000ce0 <user_A1_pwm_setvalue>:
void user_A1_pwm_setvalue(float value)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	ed87 0a01 	vstr	s0, [r7, #4]
   TIM_OC_InitTypeDef sConfigOC;
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cea:	2360      	movs	r3, #96	; 0x60
 8000cec:	60fb      	str	r3, [r7, #12]
   sConfigOC.Pulse = (uint32_t)((39999)*value);
 8000cee:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cf2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000d40 <user_A1_pwm_setvalue+0x60>
 8000cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cfe:	ee17 3a90 	vmov	r3, s15
 8000d02:	613b      	str	r3, [r7, #16]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <user_A1_pwm_setvalue+0x64>)
 8000d22:	f003 fc21 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d26:	2104      	movs	r1, #4
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <user_A1_pwm_setvalue+0x64>)
 8000d2a:	f003 f8a5 	bl	8003e78 <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_2);
 8000d2e:	2104      	movs	r1, #4
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <user_A1_pwm_setvalue+0x64>)
 8000d32:	f003 fb79 	bl	8004428 <HAL_TIMEx_PWMN_Start>
}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	471c3f00 	.word	0x471c3f00
 8000d44:	20000484 	.word	0x20000484

08000d48 <user_A3_pwm_setvalue>:
void user_A3_pwm_setvalue(float value)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	ed87 0a01 	vstr	s0, [r7, #4]
   TIM_OC_InitTypeDef sConfigOC;
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d52:	2360      	movs	r3, #96	; 0x60
 8000d54:	60fb      	str	r3, [r7, #12]
   sConfigOC.Pulse = (uint32_t)((39999)*value);
 8000d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d5a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000da8 <user_A3_pwm_setvalue+0x60>
 8000d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d66:	ee17 3a90 	vmov	r3, s15
 8000d6a:	613b      	str	r3, [r7, #16]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	220c      	movs	r2, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <user_A3_pwm_setvalue+0x64>)
 8000d8a:	f003 fbed 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000d8e:	210c      	movs	r1, #12
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <user_A3_pwm_setvalue+0x64>)
 8000d92:	f003 f871 	bl	8003e78 <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_4);
 8000d96:	210c      	movs	r1, #12
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <user_A3_pwm_setvalue+0x64>)
 8000d9a:	f003 fb45 	bl	8004428 <HAL_TIMEx_PWMN_Start>
}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	471c3f00 	.word	0x471c3f00
 8000dac:	20000484 	.word	0x20000484

08000db0 <user_A4_pwm_setvalue>:
void user_A4_pwm_setvalue(float value)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	ed87 0a01 	vstr	s0, [r7, #4]
   TIM_OC_InitTypeDef sConfigOC;
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dba:	2360      	movs	r3, #96	; 0x60
 8000dbc:	60fb      	str	r3, [r7, #12]
   sConfigOC.Pulse = (uint32_t)((39999)*value);
 8000dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000e10 <user_A4_pwm_setvalue+0x60>
 8000dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dce:	ee17 3a90 	vmov	r3, s15
 8000dd2:	613b      	str	r3, [r7, #16]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2204      	movs	r2, #4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4808      	ldr	r0, [pc, #32]	; (8000e14 <user_A4_pwm_setvalue+0x64>)
 8000df2:	f003 fbb9 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000df6:	2104      	movs	r1, #4
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <user_A4_pwm_setvalue+0x64>)
 8000dfa:	f003 f83d 	bl	8003e78 <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_2);
 8000dfe:	2104      	movs	r1, #4
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <user_A4_pwm_setvalue+0x64>)
 8000e02:	f003 fb11 	bl	8004428 <HAL_TIMEx_PWMN_Start>
}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	471c3f00 	.word	0x471c3f00
 8000e14:	200004c0 	.word	0x200004c0

08000e18 <user_A6_pwm_setvalue>:
void user_A6_pwm_setvalue(float value)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	ed87 0a01 	vstr	s0, [r7, #4]
   TIM_OC_InitTypeDef sConfigOC;
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e22:	2360      	movs	r3, #96	; 0x60
 8000e24:	60fb      	str	r3, [r7, #12]
   sConfigOC.Pulse = (uint32_t)((39999)*value);
 8000e26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e2a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000e78 <user_A6_pwm_setvalue+0x60>
 8000e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e36:	ee17 3a90 	vmov	r3, s15
 8000e3a:	613b      	str	r3, [r7, #16]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	4619      	mov	r1, r3
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <user_A6_pwm_setvalue+0x64>)
 8000e5a:	f003 fb85 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4806      	ldr	r0, [pc, #24]	; (8000e7c <user_A6_pwm_setvalue+0x64>)
 8000e62:	f003 f809 	bl	8003e78 <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_1);
 8000e66:	2100      	movs	r1, #0
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <user_A6_pwm_setvalue+0x64>)
 8000e6a:	f003 fadd 	bl	8004428 <HAL_TIMEx_PWMN_Start>
}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	471c3f00 	.word	0x471c3f00
 8000e7c:	200004c0 	.word	0x200004c0

08000e80 <user_B0_pwm_setvalue>:
void user_B0_pwm_setvalue(float value)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	ed87 0a01 	vstr	s0, [r7, #4]
   TIM_OC_InitTypeDef sConfigOC;
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8a:	2360      	movs	r3, #96	; 0x60
 8000e8c:	60fb      	str	r3, [r7, #12]
   sConfigOC.Pulse = (uint32_t)((39999)*value);
 8000e8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e92:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000ee0 <user_B0_pwm_setvalue+0x60>
 8000e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e9e:	ee17 3a90 	vmov	r3, s15
 8000ea2:	613b      	str	r3, [r7, #16]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <user_B0_pwm_setvalue+0x64>)
 8000ec2:	f003 fb51 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <user_B0_pwm_setvalue+0x64>)
 8000eca:	f002 ffd5 	bl	8003e78 <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_3);
 8000ece:	2108      	movs	r1, #8
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <user_B0_pwm_setvalue+0x64>)
 8000ed2:	f003 faa9 	bl	8004428 <HAL_TIMEx_PWMN_Start>
}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	471c3f00 	.word	0x471c3f00
 8000ee4:	200004c0 	.word	0x200004c0

08000ee8 <user_B1_pwm_setvalue>:
void user_B1_pwm_setvalue(float value)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	ed87 0a01 	vstr	s0, [r7, #4]
   TIM_OC_InitTypeDef sConfigOC;
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef2:	2360      	movs	r3, #96	; 0x60
 8000ef4:	60fb      	str	r3, [r7, #12]
   sConfigOC.Pulse = (uint32_t)((39999)*value);
 8000ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000efa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000f48 <user_B1_pwm_setvalue+0x60>
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f06:	ee17 3a90 	vmov	r3, s15
 8000f0a:	613b      	str	r3, [r7, #16]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	220c      	movs	r2, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <user_B1_pwm_setvalue+0x64>)
 8000f2a:	f003 fb1d 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000f2e:	210c      	movs	r1, #12
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <user_B1_pwm_setvalue+0x64>)
 8000f32:	f002 ffa1 	bl	8003e78 <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_4);
 8000f36:	210c      	movs	r1, #12
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <user_B1_pwm_setvalue+0x64>)
 8000f3a:	f003 fa75 	bl	8004428 <HAL_TIMEx_PWMN_Start>
}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	; 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	471c3f00 	.word	0x471c3f00
 8000f4c:	200004c0 	.word	0x200004c0

08000f50 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x4>
 8000f56:	bf00      	nop

08000f58 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8000f6c:	e7fe      	b.n	8000f6c <HardFault_Handler+0x4>
 8000f6e:	bf00      	nop

08000f70 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>
 8000f76:	bf00      	nop

08000f78 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8000f7c:	e7fe      	b.n	8000f7c <BusFault_Handler+0x4>
 8000f7e:	bf00      	nop

08000f80 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>
 8000f86:	bf00      	nop

08000f88 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f9ae 	bl	800131c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000fc0:	f000 fb02 	bl	80015c8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <USART1_IRQHandler+0x10>)
 8000fce:	f002 fa49 	bl	8003464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200004fc 	.word	0x200004fc

08000fdc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <SystemInit+0x84>)
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <SystemInit+0x84>)
 8000fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ff0:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <SystemInit+0x88>)
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <SystemInit+0x88>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000ffc:	4919      	ldr	r1, [pc, #100]	; (8001064 <SystemInit+0x88>)
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <SystemInit+0x88>)
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <SystemInit+0x8c>)
 8001004:	4013      	ands	r3, r2
 8001006:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001008:	4a16      	ldr	r2, [pc, #88]	; (8001064 <SystemInit+0x88>)
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <SystemInit+0x88>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <SystemInit+0x88>)
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <SystemInit+0x88>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001022:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001024:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <SystemInit+0x88>)
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <SystemInit+0x88>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800102e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <SystemInit+0x88>)
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <SystemInit+0x88>)
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	f023 030f 	bic.w	r3, r3, #15
 800103a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800103c:	4909      	ldr	r1, [pc, #36]	; (8001064 <SystemInit+0x88>)
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <SystemInit+0x88>)
 8001040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <SystemInit+0x90>)
 8001044:	4013      	ands	r3, r2
 8001046:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x88>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <SystemInit+0x84>)
 8001050:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001054:	609a      	str	r2, [r3, #8]
#endif
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	40021000 	.word	0x40021000
 8001068:	f87fc00c 	.word	0xf87fc00c
 800106c:	ff00fccc 	.word	0xff00fccc

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <HAL_MspInit+0x80>)
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_MspInit+0x80>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_MspInit+0x80>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108e:	2003      	movs	r0, #3
 8001090:	f000 fa3c 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	f06f 000b 	mvn.w	r0, #11
 800109c:	f000 fa42 	bl	8001524 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	f06f 000a 	mvn.w	r0, #10
 80010a8:	f000 fa3c 	bl	8001524 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	f06f 0009 	mvn.w	r0, #9
 80010b4:	f000 fa36 	bl	8001524 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	f06f 0004 	mvn.w	r0, #4
 80010c0:	f000 fa30 	bl	8001524 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	f06f 0003 	mvn.w	r0, #3
 80010cc:	f000 fa2a 	bl	8001524 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	f06f 0001 	mvn.w	r0, #1
 80010d8:	f000 fa24 	bl	8001524 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 fa1e 	bl	8001524 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <HAL_TIM_PWM_MspInit+0x80>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10c      	bne.n	8001120 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <HAL_TIM_PWM_MspInit+0x84>)
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_TIM_PWM_MspInit+0x84>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001110:	6193      	str	r3, [r2, #24]
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_TIM_PWM_MspInit+0x84>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800111e:	e022      	b.n	8001166 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001128:	d10c      	bne.n	8001144 <HAL_TIM_PWM_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <HAL_TIM_PWM_MspInit+0x84>)
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_TIM_PWM_MspInit+0x84>)
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <HAL_TIM_PWM_MspInit+0x84>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001142:	e010      	b.n	8001166 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0c      	ldr	r2, [pc, #48]	; (800117c <HAL_TIM_PWM_MspInit+0x88>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10b      	bne.n	8001166 <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_TIM_PWM_MspInit+0x84>)
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_TIM_PWM_MspInit+0x84>)
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <HAL_TIM_PWM_MspInit+0x84>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001166:	bf00      	nop
 8001168:	371c      	adds	r7, #28
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40012c00 	.word	0x40012c00
 8001178:	40021000 	.word	0x40021000
 800117c:	40000400 	.word	0x40000400

08001180 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a2b      	ldr	r2, [pc, #172]	; (800123c <HAL_TIM_MspPostInit+0xbc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d112      	bne.n	80011b8 <HAL_TIM_MspPostInit+0x38>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001192:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001196:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011a4:	2306      	movs	r3, #6
 80011a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f000 fa17 	bl	80015e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011b6:	e03c      	b.n	8001232 <HAL_TIM_MspPostInit+0xb2>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c0:	d111      	bne.n	80011e6 <HAL_TIM_MspPostInit+0x66>
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80011c2:	230b      	movs	r3, #11
 80011c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f000 fa00 	bl	80015e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011e4:	e025      	b.n	8001232 <HAL_TIM_MspPostInit+0xb2>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <HAL_TIM_MspPostInit+0xc0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d120      	bne.n	8001232 <HAL_TIM_MspPostInit+0xb2>
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011f0:	2350      	movs	r3, #80	; 0x50
 80011f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001200:	2302      	movs	r3, #2
 8001202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f000 f9e9 	bl	80015e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001212:	2303      	movs	r3, #3
 8001214:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001222:	2302      	movs	r3, #2
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_TIM_MspPostInit+0xc4>)
 800122e:	f000 f9d9 	bl	80015e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40012c00 	.word	0x40012c00
 8001240:	40000400 	.word	0x40000400
 8001244:	48000400 	.word	0x48000400

08001248 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a15      	ldr	r2, [pc, #84]	; (80012ac <HAL_UART_MspInit+0x64>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d123      	bne.n	80012a2 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800125a:	4a15      	ldr	r2, [pc, #84]	; (80012b0 <HAL_UART_MspInit+0x68>)
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_UART_MspInit+0x68>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6193      	str	r3, [r2, #24]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_UART_MspInit+0x68>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001272:	23c0      	movs	r3, #192	; 0xc0
 8001274:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001282:	2307      	movs	r3, #7
 8001284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4619      	mov	r1, r3
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <HAL_UART_MspInit+0x6c>)
 800128e:	f000 f9a9 	bl	80015e4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2101      	movs	r1, #1
 8001296:	2025      	movs	r0, #37	; 0x25
 8001298:	f000 f944 	bl	8001524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800129c:	2025      	movs	r0, #37	; 0x25
 800129e:	f000 f95d 	bl	800155c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	48000400 	.word	0x48000400

080012b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_Init+0x28>)
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_Init+0x28>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f91f 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fecc 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40022000 	.word	0x40022000

080012e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_InitTick+0x30>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_InitTick+0x34>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	099b      	lsrs	r3, r3, #6
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f93d 	bl	8001578 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80012fe:	2200      	movs	r2, #0
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	f04f 30ff 	mov.w	r0, #4294967295
 8001306:	f000 f90d 	bl	8001524 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000428 	.word	0x20000428
 8001318:	10624dd3 	.word	0x10624dd3

0800131c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick++;
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <HAL_IncTick+0x18>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_IncTick+0x18>)
 8001328:	6013      	str	r3, [r2, #0]
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	2000057c 	.word	0x2000057c

08001338 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;  
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2000057c 	.word	0x2000057c

08001350 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff ffee 	bl	8001338 <HAL_GetTick>
 800135c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800135e:	bf00      	nop
 8001360:	f7ff ffea 	bl	8001338 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad2      	subs	r2, r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3f7      	bcc.n	8001360 <HAL_Delay+0x10>
  {
  }
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	; (80013bc <NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013cc:	0a1b      	lsrs	r3, r3, #8
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013e6:	4909      	ldr	r1, [pc, #36]	; (800140c <NVIC_EnableIRQ+0x30>)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	095b      	lsrs	r3, r3, #5
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	f002 021f 	and.w	r2, r2, #31
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100

08001410 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	da0b      	bge.n	800143c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	490d      	ldr	r1, [pc, #52]	; (800145c <NVIC_SetPriority+0x4c>)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	3b04      	subs	r3, #4
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143a:	e009      	b.n	8001450 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	4908      	ldr	r1, [pc, #32]	; (8001460 <NVIC_SetPriority+0x50>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00
 8001460:	e000e100 	.word	0xe000e100

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	2201      	movs	r2, #1
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	401a      	ands	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014aa:	2101      	movs	r1, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	1e59      	subs	r1, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80014b8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff2f 	bl	8001378 <NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop

08001524 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001536:	f7ff ff43 	bl	80013c0 <NVIC_GetPriorityGrouping>
 800153a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	6978      	ldr	r0, [r7, #20]
 8001542:	f7ff ff8f 	bl	8001464 <NVIC_EncodePriority>
 8001546:	4602      	mov	r2, r0
 8001548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff5e 	bl	8001410 <NVIC_SetPriority>
}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff36 	bl	80013dc <NVIC_EnableIRQ>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ffa1 	bl	80014c8 <SysTick_Config>
 8001586:	4603      	mov	r3, r0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b04      	cmp	r3, #4
 800159c:	d106      	bne.n	80015ac <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80015aa:	e005      	b.n	80015b8 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80015ac:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 0304 	bic.w	r3, r3, #4
 80015b6:	6013      	str	r3, [r2, #0]
  }
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80015cc:	f000 f802 	bl	80015d4 <HAL_SYSTICK_Callback>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80015fa:	e14e      	b.n	800189a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8140 	beq.w	8001894 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x40>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b12      	cmp	r3, #18
 8001622:	d123      	bne.n	800166c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	6939      	ldr	r1, [r7, #16]
 8001668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0203 	and.w	r2, r3, #3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d00b      	beq.n	80016c0 <HAL_GPIO_Init+0xdc>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d007      	beq.n	80016c0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b4:	2b11      	cmp	r3, #17
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b12      	cmp	r3, #18
 80016be:	d130      	bne.n	8001722 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f6:	2201      	movs	r2, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 0201 	and.w	r2, r3, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 809a 	beq.w	8001894 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001760:	4a55      	ldr	r2, [pc, #340]	; (80018b8 <HAL_GPIO_Init+0x2d4>)
 8001762:	4b55      	ldr	r3, [pc, #340]	; (80018b8 <HAL_GPIO_Init+0x2d4>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b52      	ldr	r3, [pc, #328]	; (80018b8 <HAL_GPIO_Init+0x2d4>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001778:	4a50      	ldr	r2, [pc, #320]	; (80018bc <HAL_GPIO_Init+0x2d8>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017a2:	d013      	beq.n	80017cc <HAL_GPIO_Init+0x1e8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a46      	ldr	r2, [pc, #280]	; (80018c0 <HAL_GPIO_Init+0x2dc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d00d      	beq.n	80017c8 <HAL_GPIO_Init+0x1e4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a45      	ldr	r2, [pc, #276]	; (80018c4 <HAL_GPIO_Init+0x2e0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d007      	beq.n	80017c4 <HAL_GPIO_Init+0x1e0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a44      	ldr	r2, [pc, #272]	; (80018c8 <HAL_GPIO_Init+0x2e4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d101      	bne.n	80017c0 <HAL_GPIO_Init+0x1dc>
 80017bc:	2303      	movs	r3, #3
 80017be:	e006      	b.n	80017ce <HAL_GPIO_Init+0x1ea>
 80017c0:	2305      	movs	r3, #5
 80017c2:	e004      	b.n	80017ce <HAL_GPIO_Init+0x1ea>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x1ea>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_GPIO_Init+0x1ea>
 80017cc:	2300      	movs	r3, #0
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	f002 0203 	and.w	r2, r2, #3
 80017d4:	0092      	lsls	r2, r2, #2
 80017d6:	4093      	lsls	r3, r2
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017de:	4937      	ldr	r1, [pc, #220]	; (80018bc <HAL_GPIO_Init+0x2d8>)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001810:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800183a:	4a24      	ldr	r2, [pc, #144]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001864:	4a19      	ldr	r2, [pc, #100]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800188e:	4a0f      	ldr	r2, [pc, #60]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f47f aea9 	bne.w	80015fc <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 80018aa:	bf00      	nop
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800
 80018c8:	48000c00 	.word	0x48000c00
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	405a      	eors	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	615a      	str	r2, [r3, #20]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800192a:	af00      	add	r7, sp, #0
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 81e8 	beq.w	8001d16 <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001946:	4bb8      	ldr	r3, [pc, #736]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b04      	cmp	r3, #4
 8001950:	d00c      	beq.n	800196c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001952:	4bb5      	ldr	r3, [pc, #724]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b08      	cmp	r3, #8
 800195c:	f040 8082 	bne.w	8001a64 <HAL_RCC_OscConfig+0x140>
 8001960:	4bb1      	ldr	r3, [pc, #708]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d07b      	beq.n	8001a64 <HAL_RCC_OscConfig+0x140>
 800196c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001970:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001980:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001982:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001986:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f043 0320 	orr.w	r3, r3, #32
 8001992:	b2db      	uxtb	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d102      	bne.n	80019a4 <HAL_RCC_OscConfig+0x80>
 800199e:	4ba2      	ldr	r3, [pc, #648]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	e039      	b.n	8001a18 <HAL_RCC_OscConfig+0xf4>
 80019a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019b8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019ba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f043 0320 	orr.w	r3, r3, #32
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d102      	bne.n	80019dc <HAL_RCC_OscConfig+0xb8>
 80019d6:	4b94      	ldr	r3, [pc, #592]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xf4>
 80019dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019e8:	fa93 f2a3 	rbit	r2, r3
 80019ec:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019f0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0320 	orr.w	r3, r3, #32
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d102      	bne.n	8001a14 <HAL_RCC_OscConfig+0xf0>
 8001a0e:	4b86      	ldr	r3, [pc, #536]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	e001      	b.n	8001a18 <HAL_RCC_OscConfig+0xf4>
 8001a14:	4b84      	ldr	r3, [pc, #528]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a1c:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8001a24:	fa92 f1a2 	rbit	r1, r2
 8001a28:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001a2c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a2e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f002 021f 	and.w	r2, r2, #31
 8001a46:	40d3      	lsrs	r3, r2
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8161 	beq.w	8001d14 <HAL_RCC_OscConfig+0x3f0>
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f040 815b 	bne.w	8001d14 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f001 b81a 	b.w	8002a98 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x15a>
 8001a70:	4a6d      	ldr	r2, [pc, #436]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001a72:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e030      	b.n	8001ae0 <HAL_RCC_OscConfig+0x1bc>
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10c      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x17e>
 8001a88:	4a67      	ldr	r2, [pc, #412]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001a8a:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4a64      	ldr	r2, [pc, #400]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001a96:	4b64      	ldr	r3, [pc, #400]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e01e      	b.n	8001ae0 <HAL_RCC_OscConfig+0x1bc>
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1a4>
 8001aae:	4a5e      	ldr	r2, [pc, #376]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001ab0:	4b5d      	ldr	r3, [pc, #372]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4a5b      	ldr	r2, [pc, #364]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001abc:	4b5a      	ldr	r3, [pc, #360]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x1bc>
 8001ac8:	4a57      	ldr	r2, [pc, #348]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001aca:	4b57      	ldr	r3, [pc, #348]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4a54      	ldr	r2, [pc, #336]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001ad6:	4b54      	ldr	r3, [pc, #336]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae0:	4951      	ldr	r1, [pc, #324]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001ae2:	4b51      	ldr	r3, [pc, #324]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	f023 020f 	bic.w	r2, r3, #15
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8083 	beq.w	8001c06 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fc1a 	bl	8001338 <HAL_GetTick>
 8001b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fc15 	bl	8001338 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d902      	bls.n	8001b20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f000 bfbc 	b.w	8002a98 <HAL_RCC_OscConfig+0x1174>
 8001b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b24:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b2c:	fa93 f2a3 	rbit	r2, r3
 8001b30:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b34:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b36:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b3a:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f043 0320 	orr.w	r3, r3, #32
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d102      	bne.n	8001b58 <HAL_RCC_OscConfig+0x234>
 8001b52:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	e039      	b.n	8001bcc <HAL_RCC_OscConfig+0x2a8>
 8001b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b6c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b6e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f043 0320 	orr.w	r3, r3, #32
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_OscConfig+0x26c>
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	e01d      	b.n	8001bcc <HAL_RCC_OscConfig+0x2a8>
 8001b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b94:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b9c:	fa93 f2a3 	rbit	r2, r3
 8001ba0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ba4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ba6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f043 0320 	orr.w	r3, r3, #32
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d102      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2a4>
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	e001      	b.n	8001bcc <HAL_RCC_OscConfig+0x2a8>
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_RCC_OscConfig+0x304>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bd0:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001bd8:	fa92 f1a2 	rbit	r1, r2
 8001bdc:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001be0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001be2:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	fab2 f282 	clz	r2, r2
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	f042 0220 	orr.w	r2, r2, #32
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f002 021f 	and.w	r2, r2, #31
 8001bfa:	40d3      	lsrs	r3, r2
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d082      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1e6>
 8001c04:	e087      	b.n	8001d16 <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fb97 	bl	8001338 <HAL_GetTick>
 8001c0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	e00d      	b.n	8001c2c <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fb92 	bl	8001338 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b64      	cmp	r3, #100	; 0x64
 8001c1e:	d905      	bls.n	8001c2c <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	f000 bf39 	b.w	8002a98 <HAL_RCC_OscConfig+0x1174>
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c30:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c38:	fa93 f2a3 	rbit	r2, r3
 8001c3c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c40:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c42:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c46:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f043 0320 	orr.w	r3, r3, #32
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d102      	bne.n	8001c64 <HAL_RCC_OscConfig+0x340>
 8001c5e:	4bb6      	ldr	r3, [pc, #728]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	e039      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3b4>
 8001c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c70:	fa93 f2a3 	rbit	r2, r3
 8001c74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c78:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d102      	bne.n	8001c9c <HAL_RCC_OscConfig+0x378>
 8001c96:	4ba8      	ldr	r3, [pc, #672]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3b4>
 8001c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001cb0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cb2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f043 0320 	orr.w	r3, r3, #32
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d102      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x3b0>
 8001cce:	4b9a      	ldr	r3, [pc, #616]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	e001      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3b4>
 8001cd4:	4b98      	ldr	r3, [pc, #608]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cdc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001ce4:	fa92 f1a2 	rbit	r1, r2
 8001ce8:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001cec:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cee:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	fab2 f282 	clz	r2, r2
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	f042 0220 	orr.w	r2, r2, #32
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f002 021f 	and.w	r2, r2, #31
 8001d06:	40d3      	lsrs	r3, r2
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f af7f 	bne.w	8001c10 <HAL_RCC_OscConfig+0x2ec>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 81f4 	beq.w	800210e <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d26:	4b84      	ldr	r3, [pc, #528]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00d      	beq.n	8001d4e <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d32:	4b81      	ldr	r3, [pc, #516]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	f040 8099 	bne.w	8001e72 <HAL_RCC_OscConfig+0x54e>
 8001d40:	4b7d      	ldr	r3, [pc, #500]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f040 8092 	bne.w	8001e72 <HAL_RCC_OscConfig+0x54e>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d60:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d62:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d66:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f043 0320 	orr.w	r3, r3, #32
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCC_OscConfig+0x460>
 8001d7e:	4b6e      	ldr	r3, [pc, #440]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	e037      	b.n	8001df4 <HAL_RCC_OscConfig+0x4d0>
 8001d84:	2302      	movs	r3, #2
 8001d86:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001d8e:	fa93 f2a3 	rbit	r2, r3
 8001d92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d96:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f043 0320 	orr.w	r3, r3, #32
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_OscConfig+0x496>
 8001db4:	4b60      	ldr	r3, [pc, #384]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	e01c      	b.n	8001df4 <HAL_RCC_OscConfig+0x4d0>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dcc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001dce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f043 0320 	orr.w	r3, r3, #32
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d102      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4cc>
 8001dea:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	e001      	b.n	8001df4 <HAL_RCC_OscConfig+0x4d0>
 8001df0:	4b51      	ldr	r3, [pc, #324]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	2202      	movs	r2, #2
 8001df6:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8001dfe:	fa92 f1a2 	rbit	r1, r2
 8001e02:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001e06:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e08:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	fab2 f282 	clz	r2, r2
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f042 0220 	orr.w	r2, r2, #32
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f002 021f 	and.w	r2, r2, #31
 8001e20:	40d3      	lsrs	r3, r2
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_RCC_OscConfig+0x516>
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d002      	beq.n	8001e3a <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f000 be2f 	b.w	8002a98 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4c3f      	ldr	r4, [pc, #252]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001e3c:	4b3e      	ldr	r3, [pc, #248]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6959      	ldr	r1, [r3, #20]
 8001e4a:	23f8      	movs	r3, #248	; 0xf8
 8001e4c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e54:	fa93 f0a3 	rbit	r0, r3
 8001e58:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e5c:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e5e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e70:	e14d      	b.n	800210e <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80b3 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x6c0>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e90:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e92:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e96:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001ea2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fa44 	bl	8001338 <HAL_GetTick>
 8001eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fa3f 	bl	8001338 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d902      	bls.n	8001ecc <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	f000 bde6 	b.w	8002a98 <HAL_RCC_OscConfig+0x1174>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ed6:	fa93 f2a3 	rbit	r2, r3
 8001eda:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ede:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ee0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ee4:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f043 0320 	orr.w	r3, r3, #32
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_OscConfig+0x5de>
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	e039      	b.n	8001f76 <HAL_RCC_OscConfig+0x652>
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f14:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f16:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f043 0320 	orr.w	r3, r3, #32
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d104      	bne.n	8001f3c <HAL_RCC_OscConfig+0x618>
 8001f32:	4b01      	ldr	r3, [pc, #4]	; (8001f38 <HAL_RCC_OscConfig+0x614>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	e01e      	b.n	8001f76 <HAL_RCC_OscConfig+0x652>
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f4e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f50:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0320 	orr.w	r3, r3, #32
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d102      	bne.n	8001f72 <HAL_RCC_OscConfig+0x64e>
 8001f6c:	4bb9      	ldr	r3, [pc, #740]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	e001      	b.n	8001f76 <HAL_RCC_OscConfig+0x652>
 8001f72:	4bb8      	ldr	r3, [pc, #736]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	2202      	movs	r2, #2
 8001f78:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f80:	fa92 f1a2 	rbit	r1, r2
 8001f84:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001f88:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f8a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f002 021f 	and.w	r2, r2, #31
 8001fa2:	40d3      	lsrs	r3, r2
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d084      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4ca9      	ldr	r4, [pc, #676]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 8001fae:	4ba9      	ldr	r3, [pc, #676]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6959      	ldr	r1, [r3, #20]
 8001fbc:	23f8      	movs	r3, #248	; 0xf8
 8001fbe:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001fc6:	fa93 f0a3 	rbit	r0, r3
 8001fca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001fce:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fd0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	6023      	str	r3, [r4, #0]
 8001fe2:	e094      	b.n	800210e <HAL_RCC_OscConfig+0x7ea>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001fee:	fa93 f2a3 	rbit	r2, r3
 8001ff2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ff6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ff8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ffc:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002008:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800200c:	461a      	mov	r2, r3
 800200e:	2300      	movs	r3, #0
 8002010:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff f991 	bl	8001338 <HAL_GetTick>
 8002016:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	e00a      	b.n	8002032 <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201c:	f7ff f98c 	bl	8001338 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d902      	bls.n	8002032 <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	f000 bd33 	b.w	8002a98 <HAL_RCC_OscConfig+0x1174>
 8002032:	2302      	movs	r3, #2
 8002034:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002044:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002046:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800204a:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f043 0320 	orr.w	r3, r3, #32
 8002056:	b2db      	uxtb	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <HAL_RCC_OscConfig+0x744>
 8002062:	4b7c      	ldr	r3, [pc, #496]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	e037      	b.n	80020d8 <HAL_RCC_OscConfig+0x7b4>
 8002068:	2302      	movs	r3, #2
 800206a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002072:	fa93 f2a3 	rbit	r2, r3
 8002076:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800207a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800207c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f043 0320 	orr.w	r3, r3, #32
 800208c:	b2db      	uxtb	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d102      	bne.n	800209e <HAL_RCC_OscConfig+0x77a>
 8002098:	4b6e      	ldr	r3, [pc, #440]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	e01c      	b.n	80020d8 <HAL_RCC_OscConfig+0x7b4>
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80020a8:	fa93 f2a3 	rbit	r2, r3
 80020ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020b0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f043 0320 	orr.w	r3, r3, #32
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d102      	bne.n	80020d4 <HAL_RCC_OscConfig+0x7b0>
 80020ce:	4b61      	ldr	r3, [pc, #388]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	e001      	b.n	80020d8 <HAL_RCC_OscConfig+0x7b4>
 80020d4:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	2202      	movs	r2, #2
 80020da:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80020e2:	fa92 f1a2 	rbit	r1, r2
 80020e6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80020ea:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020ec:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	fab2 f282 	clz	r2, r2
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	f042 0220 	orr.w	r2, r2, #32
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	f002 021f 	and.w	r2, r2, #31
 8002104:	40d3      	lsrs	r3, r2
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d186      	bne.n	800201c <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8132 	beq.w	8002382 <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 8099 	beq.w	800225c <HAL_RCC_OscConfig+0x938>
 800212a:	2301      	movs	r3, #1
 800212c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002134:	fa93 f2a3 	rbit	r2, r3
 8002138:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800213c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800213e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002142:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	461a      	mov	r2, r3
 800214c:	4b42      	ldr	r3, [pc, #264]	; (8002258 <HAL_RCC_OscConfig+0x934>)
 800214e:	4413      	add	r3, r2
 8002150:	461a      	mov	r2, r3
 8002152:	2301      	movs	r3, #1
 8002154:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7ff f8ef 	bl	8001338 <HAL_GetTick>
 800215a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002160:	f7ff f8ea 	bl	8001338 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d902      	bls.n	8002176 <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	f000 bc91 	b.w	8002a98 <HAL_RCC_OscConfig+0x1174>
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002188:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800218a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800218e:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800219a:	b2db      	uxtb	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d102      	bne.n	80021ac <HAL_RCC_OscConfig+0x888>
 80021a6:	4b2b      	ldr	r3, [pc, #172]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	e037      	b.n	800221c <HAL_RCC_OscConfig+0x8f8>
 80021ac:	2302      	movs	r3, #2
 80021ae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021b6:	fa93 f2a3 	rbit	r2, r3
 80021ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021be:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d102      	bne.n	80021e2 <HAL_RCC_OscConfig+0x8be>
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	e01c      	b.n	800221c <HAL_RCC_OscConfig+0x8f8>
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80021ec:	fa93 f2a3 	rbit	r2, r3
 80021f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80021f4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002206:	b2db      	uxtb	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b04      	cmp	r3, #4
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x8f4>
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	e001      	b.n	800221c <HAL_RCC_OscConfig+0x8f8>
 8002218:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_RCC_OscConfig+0x930>)
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	2202      	movs	r2, #2
 800221e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002226:	fa92 f1a2 	rbit	r1, r2
 800222a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800222e:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002230:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f002 021f 	and.w	r2, r2, #31
 8002248:	40d3      	lsrs	r3, r2
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d086      	beq.n	8002160 <HAL_RCC_OscConfig+0x83c>
 8002252:	e096      	b.n	8002382 <HAL_RCC_OscConfig+0xa5e>
 8002254:	40021000 	.word	0x40021000
 8002258:	42420480 	.word	0x42420480
 800225c:	2301      	movs	r3, #1
 800225e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002266:	fa93 f2a3 	rbit	r2, r3
 800226a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800226e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002270:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002274:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	461a      	mov	r2, r3
 800227e:	4bb5      	ldr	r3, [pc, #724]	; (8002554 <HAL_RCC_OscConfig+0xc30>)
 8002280:	4413      	add	r3, r2
 8002282:	461a      	mov	r2, r3
 8002284:	2300      	movs	r3, #0
 8002286:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002288:	f7ff f856 	bl	8001338 <HAL_GetTick>
 800228c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	e009      	b.n	80022a6 <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002292:	f7ff f851 	bl	8001338 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e3f8      	b.n	8002a98 <HAL_RCC_OscConfig+0x1174>
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022b8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022be:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d102      	bne.n	80022dc <HAL_RCC_OscConfig+0x9b8>
 80022d6:	4ba0      	ldr	r3, [pc, #640]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	e037      	b.n	800234c <HAL_RCC_OscConfig+0xa28>
 80022dc:	2302      	movs	r3, #2
 80022de:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022ee:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002300:	b2db      	uxtb	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d102      	bne.n	8002312 <HAL_RCC_OscConfig+0x9ee>
 800230c:	4b92      	ldr	r3, [pc, #584]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	e01c      	b.n	800234c <HAL_RCC_OscConfig+0xa28>
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002324:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002326:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002336:	b2db      	uxtb	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b04      	cmp	r3, #4
 8002340:	d102      	bne.n	8002348 <HAL_RCC_OscConfig+0xa24>
 8002342:	4b85      	ldr	r3, [pc, #532]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	e001      	b.n	800234c <HAL_RCC_OscConfig+0xa28>
 8002348:	4b83      	ldr	r3, [pc, #524]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2202      	movs	r2, #2
 800234e:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8002356:	fa92 f1a2 	rbit	r1, r2
 800235a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800235e:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002360:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	fab2 f282 	clz	r2, r2
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	f002 021f 	and.w	r2, r2, #31
 8002378:	40d3      	lsrs	r3, r2
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d187      	bne.n	8002292 <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 818f 	beq.w	80026b0 <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002398:	4b6f      	ldr	r3, [pc, #444]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d112      	bne.n	80023ca <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4a6c      	ldr	r2, [pc, #432]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 80023a6:	4b6c      	ldr	r3, [pc, #432]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	61d3      	str	r3, [r2, #28]
 80023b0:	4b69      	ldr	r3, [pc, #420]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b64      	ldr	r3, [pc, #400]	; (800255c <HAL_RCC_OscConfig+0xc38>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d11a      	bne.n	800240c <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d6:	4a61      	ldr	r2, [pc, #388]	; (800255c <HAL_RCC_OscConfig+0xc38>)
 80023d8:	4b60      	ldr	r3, [pc, #384]	; (800255c <HAL_RCC_OscConfig+0xc38>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e2:	f7fe ffa9 	bl	8001338 <HAL_GetTick>
 80023e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	e009      	b.n	8002400 <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ec:	f7fe ffa4 	bl	8001338 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b64      	cmp	r3, #100	; 0x64
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e34b      	b.n	8002a98 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	4b56      	ldr	r3, [pc, #344]	; (800255c <HAL_RCC_OscConfig+0xc38>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0ef      	beq.n	80023ec <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d106      	bne.n	8002424 <HAL_RCC_OscConfig+0xb00>
 8002416:	4a50      	ldr	r2, [pc, #320]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 8002418:	4b4f      	ldr	r3, [pc, #316]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	e02f      	b.n	8002484 <HAL_RCC_OscConfig+0xb60>
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0xb24>
 800242e:	4a4a      	ldr	r2, [pc, #296]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 8002430:	4b49      	ldr	r3, [pc, #292]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6213      	str	r3, [r2, #32]
 800243a:	4a47      	ldr	r2, [pc, #284]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 800243c:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	e01d      	b.n	8002484 <HAL_RCC_OscConfig+0xb60>
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0xb48>
 8002452:	4a41      	ldr	r2, [pc, #260]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 8002454:	4b40      	ldr	r3, [pc, #256]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	4a3e      	ldr	r2, [pc, #248]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 8002460:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xb60>
 800246c:	4a3a      	ldr	r2, [pc, #232]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 800246e:	4b3a      	ldr	r3, [pc, #232]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	6213      	str	r3, [r2, #32]
 8002478:	4a37      	ldr	r2, [pc, #220]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	f023 0304 	bic.w	r3, r3, #4
 8002482:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8087 	beq.w	800259e <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7fe ff52 	bl	8001338 <HAL_GetTick>
 8002494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00b      	b.n	80024b2 <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe ff4d 	bl	8001338 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e2f2      	b.n	8002a98 <HAL_RCC_OscConfig+0x1174>
 80024b2:	2302      	movs	r3, #2
 80024b4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024bc:	fa93 f2a3 	rbit	r2, r3
 80024c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024c4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80024c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024ca:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d102      	bne.n	80024e8 <HAL_RCC_OscConfig+0xbc4>
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	e03d      	b.n	8002564 <HAL_RCC_OscConfig+0xc40>
 80024e8:	2302      	movs	r3, #2
 80024ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80024f2:	fa93 f2a3 	rbit	r2, r3
 80024f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024fa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80024fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800250c:	b2db      	uxtb	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d102      	bne.n	800251e <HAL_RCC_OscConfig+0xbfa>
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	e022      	b.n	8002564 <HAL_RCC_OscConfig+0xc40>
 800251e:	2302      	movs	r3, #2
 8002520:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002530:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002532:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002542:	b2db      	uxtb	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b04      	cmp	r3, #4
 800254c:	d108      	bne.n	8002560 <HAL_RCC_OscConfig+0xc3c>
 800254e:	4b02      	ldr	r3, [pc, #8]	; (8002558 <HAL_RCC_OscConfig+0xc34>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	e007      	b.n	8002564 <HAL_RCC_OscConfig+0xc40>
 8002554:	42420480 	.word	0x42420480
 8002558:	40021000 	.word	0x40021000
 800255c:	40007000 	.word	0x40007000
 8002560:	4bbf      	ldr	r3, [pc, #764]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2202      	movs	r2, #2
 8002566:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800256e:	fa92 f1a2 	rbit	r1, r2
 8002572:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002576:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002578:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	fab2 f282 	clz	r2, r2
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f002 021f 	and.w	r2, r2, #31
 8002590:	40d3      	lsrs	r3, r2
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f43f af7f 	beq.w	800249a <HAL_RCC_OscConfig+0xb76>
 800259c:	e07e      	b.n	800269c <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe fecb 	bl	8001338 <HAL_GetTick>
 80025a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f7fe fec6 	bl	8001338 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e26b      	b.n	8002a98 <HAL_RCC_OscConfig+0x1174>
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025d2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025d8:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_OscConfig+0xcd2>
 80025f0:	4b9b      	ldr	r3, [pc, #620]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	e037      	b.n	8002666 <HAL_RCC_OscConfig+0xd42>
 80025f6:	2302      	movs	r3, #2
 80025f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002600:	fa93 f2a3 	rbit	r2, r3
 8002604:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002608:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800260a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800261a:	b2db      	uxtb	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d102      	bne.n	800262c <HAL_RCC_OscConfig+0xd08>
 8002626:	4b8e      	ldr	r3, [pc, #568]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	e01c      	b.n	8002666 <HAL_RCC_OscConfig+0xd42>
 800262c:	2302      	movs	r3, #2
 800262e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800263e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002640:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002650:	b2db      	uxtb	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b04      	cmp	r3, #4
 800265a:	d102      	bne.n	8002662 <HAL_RCC_OscConfig+0xd3e>
 800265c:	4b80      	ldr	r3, [pc, #512]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	e001      	b.n	8002666 <HAL_RCC_OscConfig+0xd42>
 8002662:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2202      	movs	r2, #2
 8002668:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002670:	fa92 f1a2 	rbit	r1, r2
 8002674:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002678:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800267a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	fab2 f282 	clz	r2, r2
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	f002 021f 	and.w	r2, r2, #31
 8002692:	40d3      	lsrs	r3, r2
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d185      	bne.n	80025a8 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800269c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a4:	4a6e      	ldr	r2, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 80026a6:	4b6e      	ldr	r3, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 81ed 	beq.w	8002a96 <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026bc:	4b68      	ldr	r3, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	f000 81e4 	beq.w	8002a92 <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	f040 8144 	bne.w	800295e <HAL_RCC_OscConfig+0x103a>
 80026d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026da:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026ea:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80026fc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002700:	461a      	mov	r2, r3
 8002702:	2300      	movs	r3, #0
 8002704:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe fe17 	bl	8001338 <HAL_GetTick>
 800270a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	e009      	b.n	8002724 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe fe12 	bl	8001338 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1b9      	b.n	8002a98 <HAL_RCC_OscConfig+0x1174>
 8002724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002728:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002730:	fa93 f2a3 	rbit	r2, r3
 8002734:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002738:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800273a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800273e:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f043 0320 	orr.w	r3, r3, #32
 800274a:	b2db      	uxtb	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d102      	bne.n	800275c <HAL_RCC_OscConfig+0xe38>
 8002756:	4b42      	ldr	r3, [pc, #264]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	e039      	b.n	80027d0 <HAL_RCC_OscConfig+0xeac>
 800275c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002760:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002768:	fa93 f2a3 	rbit	r2, r3
 800276c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002770:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002772:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	fab3 f383 	clz	r3, r3
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f043 0320 	orr.w	r3, r3, #32
 8002782:	b2db      	uxtb	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d102      	bne.n	8002794 <HAL_RCC_OscConfig+0xe70>
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	e01d      	b.n	80027d0 <HAL_RCC_OscConfig+0xeac>
 8002794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002798:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80027a0:	fa93 f2a3 	rbit	r2, r3
 80027a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027a8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f043 0320 	orr.w	r3, r3, #32
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_OscConfig+0xea8>
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	e001      	b.n	80027d0 <HAL_RCC_OscConfig+0xeac>
 80027cc:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d4:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80027dc:	fa92 f1a2 	rbit	r1, r2
 80027e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027e4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	fab2 f282 	clz	r2, r2
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	f042 0220 	orr.w	r2, r2, #32
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	40d3      	lsrs	r3, r2
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d183      	bne.n	8002710 <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4815      	ldr	r0, [pc, #84]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_RCC_OscConfig+0xf3c>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	430b      	orrs	r3, r1
 8002820:	4313      	orrs	r3, r2
 8002822:	6043      	str	r3, [r0, #4]
 8002824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002828:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002838:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800283a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800283e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800284a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800284e:	461a      	mov	r2, r3
 8002850:	2301      	movs	r3, #1
 8002852:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fd70 	bl	8001338 <HAL_GetTick>
 8002858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800285c:	e00c      	b.n	8002878 <HAL_RCC_OscConfig+0xf54>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe fd68 	bl	8001338 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e10f      	b.n	8002a98 <HAL_RCC_OscConfig+0x1174>
 8002878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002884:	fa93 f2a3 	rbit	r2, r3
 8002888:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800288c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800288e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002892:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f043 0320 	orr.w	r3, r3, #32
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d102      	bne.n	80028b0 <HAL_RCC_OscConfig+0xf8c>
 80028aa:	4b7e      	ldr	r3, [pc, #504]	; (8002aa4 <HAL_RCC_OscConfig+0x1180>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	e039      	b.n	8002924 <HAL_RCC_OscConfig+0x1000>
 80028b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80028c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f043 0320 	orr.w	r3, r3, #32
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d102      	bne.n	80028e8 <HAL_RCC_OscConfig+0xfc4>
 80028e2:	4b70      	ldr	r3, [pc, #448]	; (8002aa4 <HAL_RCC_OscConfig+0x1180>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0x1000>
 80028e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80028f4:	fa93 f2a3 	rbit	r2, r3
 80028f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028fc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80028fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f043 0320 	orr.w	r3, r3, #32
 800290e:	b2db      	uxtb	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b04      	cmp	r3, #4
 8002918:	d102      	bne.n	8002920 <HAL_RCC_OscConfig+0xffc>
 800291a:	4b62      	ldr	r3, [pc, #392]	; (8002aa4 <HAL_RCC_OscConfig+0x1180>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	e001      	b.n	8002924 <HAL_RCC_OscConfig+0x1000>
 8002920:	4b60      	ldr	r3, [pc, #384]	; (8002aa4 <HAL_RCC_OscConfig+0x1180>)
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002928:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002930:	fa92 f1a2 	rbit	r1, r2
 8002934:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002938:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800293a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	fab2 f282 	clz	r2, r2
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	f042 0220 	orr.w	r2, r2, #32
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	f002 021f 	and.w	r2, r2, #31
 8002952:	40d3      	lsrs	r3, r2
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d083      	beq.n	8002864 <HAL_RCC_OscConfig+0xf40>
 800295c:	e09b      	b.n	8002a96 <HAL_RCC_OscConfig+0x1172>
 800295e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002962:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800296a:	fa93 f2a3 	rbit	r2, r3
 800296e:	f107 0320 	add.w	r3, r7, #32
 8002972:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002974:	f107 0320 	add.w	r3, r7, #32
 8002978:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002984:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002988:	461a      	mov	r2, r3
 800298a:	2300      	movs	r3, #0
 800298c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe fcd3 	bl	8001338 <HAL_GetTick>
 8002992:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002996:	e009      	b.n	80029ac <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe fcce 	bl	8001338 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e075      	b.n	8002a98 <HAL_RCC_OscConfig+0x1174>
 80029ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80029c2:	f107 031c 	add.w	r3, r7, #28
 80029c6:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f043 0320 	orr.w	r3, r3, #32
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d102      	bne.n	80029e4 <HAL_RCC_OscConfig+0x10c0>
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <HAL_RCC_OscConfig+0x1180>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	e039      	b.n	8002a58 <HAL_RCC_OscConfig+0x1134>
 80029e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f107 0318 	add.w	r3, r7, #24
 80029f8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80029fa:	f107 0318 	add.w	r3, r7, #24
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f043 0320 	orr.w	r3, r3, #32
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_OscConfig+0x10f8>
 8002a16:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_RCC_OscConfig+0x1180>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0x1134>
 8002a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f043 0320 	orr.w	r3, r3, #32
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_OscConfig+0x1130>
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_RCC_OscConfig+0x1180>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	e001      	b.n	8002a58 <HAL_RCC_OscConfig+0x1134>
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_RCC_OscConfig+0x1180>)
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002a64:	fa92 f1a2 	rbit	r1, r2
 8002a68:	f107 0210 	add.w	r2, r7, #16
 8002a6c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a6e:	f107 0210 	add.w	r2, r7, #16
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	fab2 f282 	clz	r2, r2
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f042 0220 	orr.w	r2, r2, #32
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	f002 021f 	and.w	r2, r2, #31
 8002a86:	40d3      	lsrs	r3, r2
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d183      	bne.n	8002998 <HAL_RCC_OscConfig+0x1074>
 8002a90:	e001      	b.n	8002a96 <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b09e      	sub	sp, #120	; 0x78
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ab6:	4ba3      	ldr	r3, [pc, #652]	; (8002d44 <HAL_RCC_ClockConfig+0x29c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0207 	and.w	r2, r3, #7
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d210      	bcs.n	8002ae6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac4:	499f      	ldr	r1, [pc, #636]	; (8002d44 <HAL_RCC_ClockConfig+0x29c>)
 8002ac6:	4b9f      	ldr	r3, [pc, #636]	; (8002d44 <HAL_RCC_ClockConfig+0x29c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ad4:	4b9b      	ldr	r3, [pc, #620]	; (8002d44 <HAL_RCC_ClockConfig+0x29c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0207 	and.w	r2, r3, #7
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e1d0      	b.n	8002e88 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af2:	4995      	ldr	r1, [pc, #596]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002af4:	4b94      	ldr	r3, [pc, #592]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8168 	beq.w	8002de2 <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d15c      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x12c>
 8002b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f043 0320 	orr.w	r3, r3, #32
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d102      	bne.n	8002b46 <HAL_RCC_ClockConfig+0x9e>
 8002b40:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	e02d      	b.n	8002ba2 <HAL_RCC_ClockConfig+0xfa>
 8002b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4a:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f043 0320 	orr.w	r3, r3, #32
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d102      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xca>
 8002b6c:	4b76      	ldr	r3, [pc, #472]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	e017      	b.n	8002ba2 <HAL_RCC_ClockConfig+0xfa>
 8002b72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b76:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f043 0320 	orr.w	r3, r3, #32
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d102      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xf6>
 8002b98:	4b6b      	ldr	r3, [pc, #428]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	e001      	b.n	8002ba2 <HAL_RCC_ClockConfig+0xfa>
 8002b9e:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ba6:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002baa:	fa92 f2a2 	rbit	r2, r2
 8002bae:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb2:	fab2 f282 	clz	r2, r2
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	f042 0220 	orr.w	r2, r2, #32
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f002 021f 	and.w	r2, r2, #31
 8002bc4:	40d3      	lsrs	r3, r2
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 80be 	bne.w	8002d4c <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e159      	b.n	8002e88 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d15b      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x1ec>
 8002bdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be0:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f043 0320 	orr.w	r3, r3, #32
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d102      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x160>
 8002c02:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	e02d      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1bc>
 8002c08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c0c:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	fab3 f383 	clz	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f043 0320 	orr.w	r3, r3, #32
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x18c>
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	e017      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1bc>
 8002c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c38:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f043 0320 	orr.w	r3, r3, #32
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x1b8>
 8002c5a:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	e001      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1bc>
 8002c60:	4b39      	ldr	r3, [pc, #228]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c68:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c6c:	fa92 f2a2 	rbit	r2, r2
 8002c70:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c72:	6a3a      	ldr	r2, [r7, #32]
 8002c74:	fab2 f282 	clz	r2, r2
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	f042 0220 	orr.w	r2, r2, #32
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f002 021f 	and.w	r2, r2, #31
 8002c86:	40d3      	lsrs	r3, r2
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d15d      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0f9      	b.n	8002e88 <HAL_RCC_ClockConfig+0x3e0>
 8002c94:	2302      	movs	r3, #2
 8002c96:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f043 0320 	orr.w	r3, r3, #32
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d102      	bne.n	8002cbe <HAL_RCC_ClockConfig+0x216>
 8002cb8:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	e02b      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26e>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f043 0320 	orr.w	r3, r3, #32
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d102      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x240>
 8002ce2:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	e016      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26e>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0320 	orr.w	r3, r3, #32
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d102      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x26a>
 8002d0c:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	e001      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26e>
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_ClockConfig+0x2a0>)
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	2202      	movs	r2, #2
 8002d18:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d1c:	fa92 f2a2 	rbit	r2, r2
 8002d20:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	fab2 f282 	clz	r2, r2
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f042 0220 	orr.w	r2, r2, #32
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	f002 021f 	and.w	r2, r2, #31
 8002d36:	40d3      	lsrs	r3, r2
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0a1      	b.n	8002e88 <HAL_RCC_ClockConfig+0x3e0>
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4c:	4950      	ldr	r1, [pc, #320]	; (8002e90 <HAL_RCC_ClockConfig+0x3e8>)
 8002d4e:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <HAL_RCC_ClockConfig+0x3e8>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d5e:	f7fe faeb 	bl	8001338 <HAL_GetTick>
 8002d62:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d112      	bne.n	8002d92 <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6e:	f7fe fae3 	bl	8001338 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e081      	b.n	8002e88 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d84:	4b42      	ldr	r3, [pc, #264]	; (8002e90 <HAL_RCC_ClockConfig+0x3e8>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d1ee      	bne.n	8002d6e <HAL_RCC_ClockConfig+0x2c6>
 8002d90:	e027      	b.n	8002de2 <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d11d      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7fe facc 	bl	8001338 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e06a      	b.n	8002e88 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <HAL_RCC_ClockConfig+0x3e8>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d1ee      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x2f4>
 8002dbe:	e010      	b.n	8002de2 <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc0:	f7fe faba 	bl	8001338 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e058      	b.n	8002e88 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dd6:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <HAL_RCC_ClockConfig+0x3e8>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ee      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002de2:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <HAL_RCC_ClockConfig+0x3ec>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0207 	and.w	r2, r3, #7
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d910      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df0:	4928      	ldr	r1, [pc, #160]	; (8002e94 <HAL_RCC_ClockConfig+0x3ec>)
 8002df2:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_RCC_ClockConfig+0x3ec>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 0207 	bic.w	r2, r3, #7
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e00:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <HAL_RCC_ClockConfig+0x3ec>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0207 	and.w	r2, r3, #7
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e03a      	b.n	8002e88 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1e:	491c      	ldr	r1, [pc, #112]	; (8002e90 <HAL_RCC_ClockConfig+0x3e8>)
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_RCC_ClockConfig+0x3e8>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e3c:	4914      	ldr	r1, [pc, #80]	; (8002e90 <HAL_RCC_ClockConfig+0x3e8>)
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_RCC_ClockConfig+0x3e8>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e50:	f000 f826 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e54:	4601      	mov	r1, r0
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_RCC_ClockConfig+0x3e8>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e5e:	23f0      	movs	r3, #240	; 0xf0
 8002e60:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
 8002e74:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <HAL_RCC_ClockConfig+0x3f0>)
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	fa21 f303 	lsr.w	r3, r1, r3
 8002e7c:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <HAL_RCC_ClockConfig+0x3f4>)
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fe fa2f 	bl	80012e4 <HAL_InitTick>
  
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3778      	adds	r7, #120	; 0x78
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40022000 	.word	0x40022000
 8002e98:	08004b58 	.word	0x08004b58
 8002e9c:	20000428 	.word	0x20000428

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b08b      	sub	sp, #44	; 0x2c
 8002ea4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002eba:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d002      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x30>
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ece:	e03c      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ed2:	623b      	str	r3, [r7, #32]
      break;
 8002ed4:	e03c      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002edc:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002ee0:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef4:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ef6:	5cd3      	ldrb	r3, [r2, r3]
 8002ef8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002efa:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	f003 020f 	and.w	r2, r3, #15
 8002f02:	230f      	movs	r3, #15
 8002f04:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
 8002f18:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002f28:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
 8002f38:	e004      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	4a0c      	ldr	r2, [pc, #48]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	623b      	str	r3, [r7, #32]
      break;
 8002f48:	e002      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f4c:	623b      	str	r3, [r7, #32]
      break;
 8002f4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f50:	6a3b      	ldr	r3, [r7, #32]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	372c      	adds	r7, #44	; 0x2c
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	007a1200 	.word	0x007a1200
 8002f68:	08004b70 	.word	0x08004b70
 8002f6c:	08004b80 	.word	0x08004b80
 8002f70:	003d0900 	.word	0x003d0900

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000428 	.word	0x20000428

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f92:	f7ff ffef 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f96:	4601      	mov	r1, r0
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fa0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002fa4:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb8:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fba:	5cd3      	ldrb	r3, [r2, r3]
 8002fbc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08004b68 	.word	0x08004b68

08002fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002fd6:	f7ff ffcd 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002fda:	4601      	mov	r1, r0
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002fe4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002fe8:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ffe:	5cd3      	ldrb	r3, [r2, r3]
 8003000:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	08004b68 	.word	0x08004b68

08003014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b092      	sub	sp, #72	; 0x48
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80ef 	beq.w	8003210 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003038:	4b96      	ldr	r3, [pc, #600]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10e      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003044:	4a93      	ldr	r2, [pc, #588]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003046:	4b93      	ldr	r3, [pc, #588]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304e:	61d3      	str	r3, [r2, #28]
 8003050:	4b90      	ldr	r3, [pc, #576]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003062:	4b8d      	ldr	r3, [pc, #564]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d118      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306e:	4a8a      	ldr	r2, [pc, #552]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003070:	4b89      	ldr	r3, [pc, #548]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003078:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307a:	f7fe f95d 	bl	8001338 <HAL_GetTick>
 800307e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	e008      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003082:	f7fe f959 	bl	8001338 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b64      	cmp	r3, #100	; 0x64
 800308e:	d901      	bls.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e0fa      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x276>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	4b80      	ldr	r3, [pc, #512]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030a0:	4b7c      	ldr	r3, [pc, #496]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 809c 	beq.w	80031ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80030ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030bc:	429a      	cmp	r2, r3
 80030be:	f000 8094 	beq.w	80031ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030c2:	4b74      	ldr	r3, [pc, #464]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80030da:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b6d      	ldr	r3, [pc, #436]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80030e6:	4413      	add	r3, r2
 80030e8:	461a      	mov	r2, r3
 80030ea:	2301      	movs	r3, #1
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80030fc:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	461a      	mov	r2, r3
 8003106:	4b65      	ldr	r3, [pc, #404]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003108:	4413      	add	r3, r2
 800310a:	461a      	mov	r2, r3
 800310c:	2300      	movs	r3, #0
 800310e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003110:	4a60      	ldr	r2, [pc, #384]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003114:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d064      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe f90a 	bl	8001338 <HAL_GetTick>
 8003124:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe f906 	bl	8001338 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0a5      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800313e:	2302      	movs	r3, #2
 8003140:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800314a:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003156:	b2db      	uxtb	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003162:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	e02b      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003168:	2302      	movs	r3, #2
 800316a:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003180:	b2db      	uxtb	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d102      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800318c:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	e016      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003192:	2302      	movs	r3, #2
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d102      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	e001      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80031bc:	4b35      	ldr	r3, [pc, #212]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	2202      	movs	r2, #2
 80031c2:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c6:	fa92 f2a2 	rbit	r2, r2
 80031ca:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	fab2 f282 	clz	r2, r2
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	f002 021f 	and.w	r2, r2, #31
 80031e0:	40d3      	lsrs	r3, r2
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d09e      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031ea:	492a      	ldr	r1, [pc, #168]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031ec:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4a23      	ldr	r2, [pc, #140]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003206:	4b23      	ldr	r3, [pc, #140]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800321c:	491d      	ldr	r1, [pc, #116]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f023 0203 	bic.w	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	4313      	orrs	r3, r2
 800322c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800323a:	4916      	ldr	r1, [pc, #88]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	f023 0210 	bic.w	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003258:	490e      	ldr	r1, [pc, #56]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800325a:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003276:	4907      	ldr	r1, [pc, #28]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3748      	adds	r7, #72	; 0x48
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	42420400 	.word	0x42420400

080032a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e043      	b.n	800333a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fd ffbe 	bl	8001248 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	; 0x24
 80032d0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f98f 	bl	8003608 <UART_SetConfig>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e022      	b.n	800333a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fae9 	bl	80038d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	6852      	ldr	r2, [r2, #4]
 800330c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003310:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	6892      	ldr	r2, [r2, #8]
 800331c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003320:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fb70 	bl	8003a18 <UART_CheckIdleState>
 8003338:	4603      	mov	r3, r0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop

08003344 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b20      	cmp	r3, #32
 800335c:	d17a      	bne.n	8003454 <HAL_UART_Receive_IT+0x110>
  {
    if((pData == NULL ) || (Size == 0))
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_UART_Receive_IT+0x26>
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e073      	b.n	8003456 <HAL_UART_Receive_IT+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_UART_Receive_IT+0x38>
 8003378:	2302      	movs	r3, #2
 800337a:	e06c      	b.n	8003456 <HAL_UART_Receive_IT+0x112>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pRxBuffPtr = pData;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	88fa      	ldrh	r2, [r7, #6]
 800338e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	88fa      	ldrh	r2, [r7, #6]
 8003396:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a2:	d10e      	bne.n	80033c2 <HAL_UART_Receive_IT+0x7e>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <HAL_UART_Receive_IT+0x74>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033b6:	e028      	b.n	800340a <HAL_UART_Receive_IT+0xc6>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	22ff      	movs	r2, #255	; 0xff
 80033bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033c0:	e023      	b.n	800340a <HAL_UART_Receive_IT+0xc6>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10d      	bne.n	80033e6 <HAL_UART_Receive_IT+0xa2>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <HAL_UART_Receive_IT+0x98>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033da:	e016      	b.n	800340a <HAL_UART_Receive_IT+0xc6>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	227f      	movs	r2, #127	; 0x7f
 80033e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033e4:	e011      	b.n	800340a <HAL_UART_Receive_IT+0xc6>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ee:	d10c      	bne.n	800340a <HAL_UART_Receive_IT+0xc6>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d104      	bne.n	8003402 <HAL_UART_Receive_IT+0xbe>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	227f      	movs	r2, #127	; 0x7f
 80033fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003400:	e003      	b.n	800340a <HAL_UART_Receive_IT+0xc6>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	223f      	movs	r2, #63	; 0x3f
 8003406:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2222      	movs	r2, #34	; 0x22
 8003414:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003426:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	6892      	ldr	r2, [r2, #8]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	f042 0220 	orr.w	r2, r2, #32
 800344e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_UART_Receive_IT+0x112>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop

08003464 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* UART parity error interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d010      	beq.n	800349c <HAL_UART_IRQHandler+0x38>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d009      	beq.n	800349c <HAL_UART_IRQHandler+0x38>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2201      	movs	r2, #1
 800348e:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART frame error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d010      	beq.n	80034cc <HAL_UART_IRQHandler+0x68>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <HAL_UART_IRQHandler+0x68>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2202      	movs	r2, #2
 80034be:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c4:	f043 0204 	orr.w	r2, r3, #4
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART noise error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d010      	beq.n	80034fc <HAL_UART_IRQHandler+0x98>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HAL_UART_IRQHandler+0x98>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2204      	movs	r2, #4
 80034ee:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f4:	f043 0202 	orr.w	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART Over-Run interrupt occurred -----------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d010      	beq.n	800352c <HAL_UART_IRQHandler+0xc8>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <HAL_UART_IRQHandler+0xc8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2208      	movs	r2, #8
 800351e:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003524:	f043 0208 	orr.w	r2, r3, #8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART wakeup from Stop mode interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_UART_IRQHandler+0x104>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00f      	beq.n	8003568 <HAL_UART_IRQHandler+0x104>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003550:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    HAL_UARTEx_WakeupCallback(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fc1c 	bl	8003da0 <HAL_UARTEx_WakeupCallback>
  }

  /* UART in mode Receiver ---------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_UART_IRQHandler+0x126>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_UART_IRQHandler+0x126>
  {
    UART_Receive_IT(huart);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fb95 	bl	8003cb4 <UART_Receive_IT>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_UART_IRQHandler+0x148>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_UART_IRQHandler+0x148>
  {
    UART_Transmit_IT(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fb16 	bl	8003bd8 <UART_Transmit_IT>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_UART_IRQHandler+0x16a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_UART_IRQHandler+0x16a>
  {
    UART_EndTransmit_IT(huart);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fb5b 	bl	8003c84 <UART_EndTransmit_IT>
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_UART_IRQHandler+0x188>
  {
    /* Set the UART state ready to be able to start again the Tx/Rx process */
    huart->gState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    HAL_UART_ErrorCallback(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f804 	bl	80035f4 <HAL_UART_ErrorCallback>
  }  
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003614:	2310      	movs	r3, #16
 8003616:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000;
 8003618:	2300      	movs	r3, #0
 800361a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000;
 800361c:	2300      	movs	r3, #0
 800361e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6819      	ldr	r1, [r3, #0]
 8003646:	4b9e      	ldr	r3, [pc, #632]	; (80038c0 <UART_SetConfig+0x2b8>)
 8003648:	400b      	ands	r3, r1
 800364a:	68f9      	ldr	r1, [r7, #12]
 800364c:	430b      	orrs	r3, r1
 800364e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	6852      	ldr	r2, [r2, #4]
 800365a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68d2      	ldr	r2, [r2, #12]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	6892      	ldr	r2, [r2, #8]
 800367c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	430a      	orrs	r2, r1
 8003684:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a8e      	ldr	r2, [pc, #568]	; (80038c4 <UART_SetConfig+0x2bc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d121      	bne.n	80036d4 <UART_SetConfig+0xcc>
 8003690:	4b8d      	ldr	r3, [pc, #564]	; (80038c8 <UART_SetConfig+0x2c0>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b03      	cmp	r3, #3
 800369a:	d817      	bhi.n	80036cc <UART_SetConfig+0xc4>
 800369c:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x9c>)
 800369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a2:	bf00      	nop
 80036a4:	080036b5 	.word	0x080036b5
 80036a8:	080036c1 	.word	0x080036c1
 80036ac:	080036c7 	.word	0x080036c7
 80036b0:	080036bb 	.word	0x080036bb
 80036b4:	2300      	movs	r3, #0
 80036b6:	75fb      	strb	r3, [r7, #23]
 80036b8:	e01e      	b.n	80036f8 <UART_SetConfig+0xf0>
 80036ba:	2302      	movs	r3, #2
 80036bc:	75fb      	strb	r3, [r7, #23]
 80036be:	e01b      	b.n	80036f8 <UART_SetConfig+0xf0>
 80036c0:	2304      	movs	r3, #4
 80036c2:	75fb      	strb	r3, [r7, #23]
 80036c4:	e018      	b.n	80036f8 <UART_SetConfig+0xf0>
 80036c6:	2308      	movs	r3, #8
 80036c8:	75fb      	strb	r3, [r7, #23]
 80036ca:	e015      	b.n	80036f8 <UART_SetConfig+0xf0>
 80036cc:	2310      	movs	r3, #16
 80036ce:	75fb      	strb	r3, [r7, #23]
 80036d0:	bf00      	nop
 80036d2:	e011      	b.n	80036f8 <UART_SetConfig+0xf0>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a7c      	ldr	r2, [pc, #496]	; (80038cc <UART_SetConfig+0x2c4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d102      	bne.n	80036e4 <UART_SetConfig+0xdc>
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]
 80036e2:	e009      	b.n	80036f8 <UART_SetConfig+0xf0>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a79      	ldr	r2, [pc, #484]	; (80038d0 <UART_SetConfig+0x2c8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d102      	bne.n	80036f4 <UART_SetConfig+0xec>
 80036ee:	2300      	movs	r3, #0
 80036f0:	75fb      	strb	r3, [r7, #23]
 80036f2:	e001      	b.n	80036f8 <UART_SetConfig+0xf0>
 80036f4:	2310      	movs	r3, #16
 80036f6:	75fb      	strb	r3, [r7, #23]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003700:	d170      	bne.n	80037e4 <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	2b08      	cmp	r3, #8
 8003706:	d857      	bhi.n	80037b8 <UART_SetConfig+0x1b0>
 8003708:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <UART_SetConfig+0x108>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003735 	.word	0x08003735
 8003714:	08003751 	.word	0x08003751
 8003718:	0800376d 	.word	0x0800376d
 800371c:	080037b9 	.word	0x080037b9
 8003720:	08003787 	.word	0x08003787
 8003724:	080037b9 	.word	0x080037b9
 8003728:	080037b9 	.word	0x080037b9
 800372c:	080037b9 	.word	0x080037b9
 8003730:	080037a3 	.word	0x080037a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003734:	f7ff fc2a 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8003738:	4603      	mov	r3, r0
 800373a:	005a      	lsls	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	441a      	add	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	82bb      	strh	r3, [r7, #20]
        break;
 800374e:	e036      	b.n	80037be <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003750:	f7ff fc3e 	bl	8002fd0 <HAL_RCC_GetPCLK2Freq>
 8003754:	4603      	mov	r3, r0
 8003756:	005a      	lsls	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	441a      	add	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	82bb      	strh	r3, [r7, #20]
        break;
 800376a:	e028      	b.n	80037be <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003776:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6852      	ldr	r2, [r2, #4]
 800377e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003782:	82bb      	strh	r3, [r7, #20]
        break;
 8003784:	e01b      	b.n	80037be <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003786:	f7ff fb8b 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 800378a:	4603      	mov	r3, r0
 800378c:	005a      	lsls	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	085b      	lsrs	r3, r3, #1
 8003794:	441a      	add	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	82bb      	strh	r3, [r7, #20]
        break;
 80037a0:	e00d      	b.n	80037be <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	82bb      	strh	r3, [r7, #20]
        break;
 80037b6:	e002      	b.n	80037be <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	74fb      	strb	r3, [r7, #19]
        break;
 80037bc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 80037be:	8abb      	ldrh	r3, [r7, #20]
 80037c0:	f023 030f 	bic.w	r3, r3, #15
 80037c4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80037c6:	8abb      	ldrh	r3, [r7, #20]
 80037c8:	105b      	asrs	r3, r3, #1
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	897b      	ldrh	r3, [r7, #10]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	897a      	ldrh	r2, [r7, #10]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	e068      	b.n	80038b6 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d862      	bhi.n	80038b0 <UART_SetConfig+0x2a8>
 80037ea:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <UART_SetConfig+0x1e8>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003815 	.word	0x08003815
 80037f4:	08003835 	.word	0x08003835
 80037f8:	08003855 	.word	0x08003855
 80037fc:	080038b1 	.word	0x080038b1
 8003800:	08003875 	.word	0x08003875
 8003804:	080038b1 	.word	0x080038b1
 8003808:	080038b1 	.word	0x080038b1
 800380c:	080038b1 	.word	0x080038b1
 8003810:	08003895 	.word	0x08003895
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681c      	ldr	r4, [r3, #0]
 8003818:	f7ff fbb8 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 800381c:	4602      	mov	r2, r0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	441a      	add	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	b29b      	uxth	r3, r3
 8003830:	60e3      	str	r3, [r4, #12]
        break;
 8003832:	e040      	b.n	80038b6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681c      	ldr	r4, [r3, #0]
 8003838:	f7ff fbca 	bl	8002fd0 <HAL_RCC_GetPCLK2Freq>
 800383c:	4602      	mov	r2, r0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	441a      	add	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	b29b      	uxth	r3, r3
 8003850:	60e3      	str	r3, [r4, #12]
        break;
 8003852:	e030      	b.n	80038b6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003862:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	6849      	ldr	r1, [r1, #4]
 800386a:	fbb3 f3f1 	udiv	r3, r3, r1
 800386e:	b29b      	uxth	r3, r3
 8003870:	60d3      	str	r3, [r2, #12]
        break;
 8003872:	e020      	b.n	80038b6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681c      	ldr	r4, [r3, #0]
 8003878:	f7ff fb12 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	441a      	add	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	fbb2 f3f3 	udiv	r3, r2, r3
 800388e:	b29b      	uxth	r3, r3
 8003890:	60e3      	str	r3, [r4, #12]
        break;
 8003892:	e010      	b.n	80038b6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6852      	ldr	r2, [r2, #4]
 800389c:	0852      	lsrs	r2, r2, #1
 800389e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6852      	ldr	r2, [r2, #4]
 80038a6:	fbb1 f2f2 	udiv	r2, r1, r2
 80038aa:	b292      	uxth	r2, r2
 80038ac:	60da      	str	r2, [r3, #12]
        break;
 80038ae:	e002      	b.n	80038b6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	74fb      	strb	r3, [r7, #19]
        break;
 80038b4:	bf00      	nop
    }
  }

  return ret;
 80038b6:	7cfb      	ldrb	r3, [r7, #19]

}
 80038b8:	4618      	mov	r0, r3
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd90      	pop	{r4, r7, pc}
 80038c0:	efff69f3 	.word	0xefff69f3
 80038c4:	40013800 	.word	0x40013800
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40004400 	.word	0x40004400
 80038d0:	40004800 	.word	0x40004800

080038d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	6852      	ldr	r2, [r2, #4]
 80038f2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	6852      	ldr	r2, [r2, #4]
 8003914:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	6852      	ldr	r2, [r2, #4]
 8003936:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	6852      	ldr	r2, [r2, #4]
 8003958:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	6892      	ldr	r2, [r2, #8]
 800397a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	6892      	ldr	r2, [r2, #8]
 800399c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01a      	beq.n	80039ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	6852      	ldr	r2, [r2, #4]
 80039be:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d2:	d10a      	bne.n	80039ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	6852      	ldr	r2, [r2, #4]
 80039de:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	6852      	ldr	r2, [r2, #4]
 8003a00:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00c      	beq.n	8003a4e <UART_CheckIdleState+0x36>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f82a 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <UART_CheckIdleState+0x36>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e020      	b.n	8003a90 <UART_CheckIdleState+0x78>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00c      	beq.n	8003a76 <UART_CheckIdleState+0x5e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a60:	2200      	movs	r2, #0
 8003a62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f816 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <UART_CheckIdleState+0x5e>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e00c      	b.n	8003a90 <UART_CheckIdleState+0x78>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 8003aa8:	f7fd fc46 	bl	8001338 <HAL_GetTick>
 8003aac:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f040 8084 	bne.w	8003bbe <UART_WaitOnFlagUntilTimeout+0x126>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8003ab6:	e03c      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x9a>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d038      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x9a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0x3e>
 8003ac6:	f7fd fc37 	bl	8001338 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	1ad2      	subs	r2, r2, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d92d      	bls.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x9a>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae4:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	f022 0220 	bic.w	r2, r2, #32
 8003af4:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b04:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	f022 0201 	bic.w	r2, r2, #1
 8003b14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e04e      	b.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0x138>
  uint32_t tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d1ba      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x20>
 8003b42:	e044      	b.n	8003bce <UART_WaitOnFlagUntilTimeout+0x136>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d038      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x126>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xca>
 8003b52:	f7fd fbf1 	bl	8001338 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	1ad2      	subs	r2, r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d92d      	bls.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x126>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b70:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	f022 0220 	bic.w	r2, r2, #32
 8003b80:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b90:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	6892      	ldr	r2, [r2, #8]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e008      	b.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0x138>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d0ba      	beq.n	8003b44 <UART_WaitOnFlagUntilTimeout+0xac>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b21      	cmp	r3, #33	; 0x21
 8003bea:	d144      	bne.n	8003c76 <UART_Transmit_IT+0x9e>
  {

    if(huart->TxXferCount == 0)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d111      	bne.n	8003c1a <UART_Transmit_IT+0x42>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c04:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c14:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e02e      	b.n	8003c78 <UART_Transmit_IT+0xa0>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c22:	d114      	bne.n	8003c4e <UART_Transmit_IT+0x76>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d110      	bne.n	8003c4e <UART_Transmit_IT+0x76>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c30:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	8812      	ldrh	r2, [r2, #0]
 8003c3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c3e:	b292      	uxth	r2, r2
 8003c40:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	1c9a      	adds	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c4c:	e009      	b.n	8003c62 <UART_Transmit_IT+0x8a>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	1c58      	adds	r0, r3, #1
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	64c8      	str	r0, [r1, #76]	; 0x4c
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <UART_Transmit_IT+0xa0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7fc fecb 	bl	8000a40 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cc2:	81fb      	strh	r3, [r7, #14]

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b22      	cmp	r3, #34	; 0x22
 8003cce:	d159      	bne.n	8003d84 <UART_Receive_IT+0xd0>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd8:	d115      	bne.n	8003d06 <UART_Receive_IT+0x52>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d111      	bne.n	8003d06 <UART_Receive_IT+0x52>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	89fb      	ldrh	r3, [r7, #14]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	1c9a      	adds	r2, r3, #2
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
 8003d04:	e00e      	b.n	8003d24 <UART_Receive_IT+0x70>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0a:	1c59      	adds	r1, r3, #1
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6551      	str	r1, [r2, #84]	; 0x54
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003d16:	b292      	uxth	r2, r2
 8003d18:	b2d1      	uxtb	r1, r2
 8003d1a:	89fa      	ldrh	r2, [r7, #14]
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	400a      	ands	r2, r1
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d120      	bne.n	8003d80 <UART_Receive_IT+0xcc>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	f022 0220 	bic.w	r2, r2, #32
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	6892      	ldr	r2, [r2, #8]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fc fe6c 	bl	8000a54 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e00a      	b.n	8003d96 <UART_Receive_IT+0xe2>
    }

    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e008      	b.n	8003d96 <UART_Receive_IT+0xe2>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	6992      	ldr	r2, [r2, #24]
 8003d8e:	f042 0208 	orr.w	r2, r2, #8
 8003d92:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop

08003da0 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback
  * @param  huart: UART handle
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e01d      	b.n	8003e02 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_TIM_OC_Init+0x2c>
  {   
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f816 	bl	8003e0c <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f000 f882 	bl	8003efc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop

08003e0c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e01d      	b.n	8003e6e <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd f954 	bl	80010f4 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f000 f84c 	bl	8003efc <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop

08003e78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2201      	movs	r2, #1
 8003e88:	6839      	ldr	r1, [r7, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 faa8 	bl	80043e0 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a15      	ldr	r2, [pc, #84]	; (8003eec <HAL_TIM_PWM_Start+0x74>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00e      	beq.n	8003eb8 <HAL_TIM_PWM_Start+0x40>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <HAL_TIM_PWM_Start+0x78>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_TIM_PWM_Start+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <HAL_TIM_PWM_Start+0x7c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_TIM_PWM_Start+0x40>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a11      	ldr	r2, [pc, #68]	; (8003ef8 <HAL_TIM_PWM_Start+0x80>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_PWM_Start+0x44>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <HAL_TIM_PWM_Start+0x46>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
} 
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800

08003efc <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a2e      	ldr	r2, [pc, #184]	; (8003fcc <TIM_Base_SetConfig+0xd0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <TIM_Base_SetConfig+0x2c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d003      	beq.n	8003f28 <TIM_Base_SetConfig+0x2c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <TIM_Base_SetConfig+0xd4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d108      	bne.n	8003f3a <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <TIM_Base_SetConfig+0xd0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <TIM_Base_SetConfig+0x6e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d00f      	beq.n	8003f6a <TIM_Base_SetConfig+0x6e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <TIM_Base_SetConfig+0xd4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <TIM_Base_SetConfig+0x6e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <TIM_Base_SetConfig+0xd8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <TIM_Base_SetConfig+0x6e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1e      	ldr	r2, [pc, #120]	; (8003fd8 <TIM_Base_SetConfig+0xdc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_Base_SetConfig+0x6e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a1d      	ldr	r2, [pc, #116]	; (8003fdc <TIM_Base_SetConfig+0xe0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d108      	bne.n	8003f7c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <TIM_Base_SetConfig+0xd0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb6>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <TIM_Base_SetConfig+0xd8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb6>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a0c      	ldr	r2, [pc, #48]	; (8003fd8 <TIM_Base_SetConfig+0xdc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb6>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a0b      	ldr	r2, [pc, #44]	; (8003fdc <TIM_Base_SetConfig+0xe0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d103      	bne.n	8003fba <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	615a      	str	r2, [r3, #20]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	40014800 	.word	0x40014800

08003fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0201 	bic.w	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0303 	bic.w	r3, r3, #3
 8004026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f023 0302 	bic.w	r3, r3, #2
 8004038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a28      	ldr	r2, [pc, #160]	; (80040e8 <TIM_OC1_SetConfig+0x108>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00b      	beq.n	8004064 <TIM_OC1_SetConfig+0x84>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a27      	ldr	r2, [pc, #156]	; (80040ec <TIM_OC1_SetConfig+0x10c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d007      	beq.n	8004064 <TIM_OC1_SetConfig+0x84>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <TIM_OC1_SetConfig+0x110>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_OC1_SetConfig+0x84>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a25      	ldr	r2, [pc, #148]	; (80040f4 <TIM_OC1_SetConfig+0x114>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d10c      	bne.n	800407e <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f023 0308 	bic.w	r3, r3, #8
 800406a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <TIM_OC1_SetConfig+0x108>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00b      	beq.n	800409e <TIM_OC1_SetConfig+0xbe>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a18      	ldr	r2, [pc, #96]	; (80040ec <TIM_OC1_SetConfig+0x10c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <TIM_OC1_SetConfig+0xbe>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <TIM_OC1_SetConfig+0x110>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_OC1_SetConfig+0xbe>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <TIM_OC1_SetConfig+0x114>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d111      	bne.n	80040c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	621a      	str	r2, [r3, #32]
} 
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40014400 	.word	0x40014400
 80040f4:	40014800 	.word	0x40014800

080040f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f023 0210 	bic.w	r2, r3, #16
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413e:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4313      	orrs	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f023 0320 	bic.w	r3, r3, #32
 8004152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a24      	ldr	r2, [pc, #144]	; (80041f4 <TIM_OC2_SetConfig+0xfc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d10d      	bne.n	8004184 <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800416e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004182:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <TIM_OC2_SetConfig+0xfc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00b      	beq.n	80041a4 <TIM_OC2_SetConfig+0xac>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <TIM_OC2_SetConfig+0x100>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d007      	beq.n	80041a4 <TIM_OC2_SetConfig+0xac>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a19      	ldr	r2, [pc, #100]	; (80041fc <TIM_OC2_SetConfig+0x104>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_OC2_SetConfig+0xac>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a18      	ldr	r2, [pc, #96]	; (8004200 <TIM_OC2_SetConfig+0x108>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d113      	bne.n	80041cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40014000 	.word	0x40014000
 80041fc:	40014400 	.word	0x40014400
 8004200:	40014800 	.word	0x40014800

08004204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800425c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a23      	ldr	r2, [pc, #140]	; (80042fc <TIM_OC3_SetConfig+0xf8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d10d      	bne.n	800428e <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800428c:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1a      	ldr	r2, [pc, #104]	; (80042fc <TIM_OC3_SetConfig+0xf8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00b      	beq.n	80042ae <TIM_OC3_SetConfig+0xaa>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <TIM_OC3_SetConfig+0xfc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d007      	beq.n	80042ae <TIM_OC3_SetConfig+0xaa>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <TIM_OC3_SetConfig+0x100>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_OC3_SetConfig+0xaa>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a17      	ldr	r2, [pc, #92]	; (8004308 <TIM_OC3_SetConfig+0x104>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d113      	bne.n	80042d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	621a      	str	r2, [r3, #32]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004352:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004366:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	031b      	lsls	r3, r3, #12
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a16      	ldr	r2, [pc, #88]	; (80043d0 <TIM_OC4_SetConfig+0xc4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00b      	beq.n	8004394 <TIM_OC4_SetConfig+0x88>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a15      	ldr	r2, [pc, #84]	; (80043d4 <TIM_OC4_SetConfig+0xc8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d007      	beq.n	8004394 <TIM_OC4_SetConfig+0x88>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <TIM_OC4_SetConfig+0xcc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d003      	beq.n	8004394 <TIM_OC4_SetConfig+0x88>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a13      	ldr	r2, [pc, #76]	; (80043dc <TIM_OC4_SetConfig+0xd0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d109      	bne.n	80043a8 <TIM_OC4_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800439a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	019b      	lsls	r3, r3, #6
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800

080043e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80043f0:	2201      	movs	r2, #1
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1a      	ldr	r2, [r3, #32]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	43db      	mvns	r3, r3
 8004402:	401a      	ands	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	431a      	orrs	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop

08004428 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2204      	movs	r2, #4
 8004438:	6839      	ldr	r1, [r7, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fa8e 	bl	800495c <TIM_CCxNChannelCmd>
  
  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800444a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800444e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
} 
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop

0800446c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{  
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004482:	2302      	movs	r3, #2
 8004484:	e06c      	b.n	8004560 <HAL_TIM_OC_ConfigChannel+0xf4>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2202      	movs	r2, #2
 8004492:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  switch (Channel)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b14      	cmp	r3, #20
 800449a:	d857      	bhi.n	800454c <HAL_TIM_OC_ConfigChannel+0xe0>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <HAL_TIM_OC_ConfigChannel+0x38>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044f9 	.word	0x080044f9
 80044a8:	0800454d 	.word	0x0800454d
 80044ac:	0800454d 	.word	0x0800454d
 80044b0:	0800454d 	.word	0x0800454d
 80044b4:	08004507 	.word	0x08004507
 80044b8:	0800454d 	.word	0x0800454d
 80044bc:	0800454d 	.word	0x0800454d
 80044c0:	0800454d 	.word	0x0800454d
 80044c4:	08004515 	.word	0x08004515
 80044c8:	0800454d 	.word	0x0800454d
 80044cc:	0800454d 	.word	0x0800454d
 80044d0:	0800454d 	.word	0x0800454d
 80044d4:	08004523 	.word	0x08004523
 80044d8:	0800454d 	.word	0x0800454d
 80044dc:	0800454d 	.word	0x0800454d
 80044e0:	0800454d 	.word	0x0800454d
 80044e4:	08004531 	.word	0x08004531
 80044e8:	0800454d 	.word	0x0800454d
 80044ec:	0800454d 	.word	0x0800454d
 80044f0:	0800454d 	.word	0x0800454d
 80044f4:	0800453f 	.word	0x0800453f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
     /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fd6e 	bl	8003fe0 <TIM_OC1_SetConfig>
    }
    break;
 8004504:	e023      	b.n	800454e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fdf3 	bl	80040f8 <TIM_OC2_SetConfig>
    }
    break;
 8004512:	e01c      	b.n	800454e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fe72 	bl	8004204 <TIM_OC3_SetConfig>
    }
    break;
 8004520:	e015      	b.n	800454e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff feef 	bl	800430c <TIM_OC4_SetConfig>
    }
    break;
 800452e:	e00e      	b.n	800454e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 5 in Output Compare */
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fa34 	bl	80049a4 <TIM_OC5_SetConfig>
    }
    break;
 800453c:	e007      	b.n	800454e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 6 in Output Compare */
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fa91 	bl	8004a6c <TIM_OC6_SetConfig>
    }
    break;
 800454a:	e000      	b.n	800454e <HAL_TIM_OC_ConfigChannel+0xe2>
        
    default:
    break;    
 800454c:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800457e:	2302      	movs	r3, #2
 8004580:	e105      	b.n	800478e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b14      	cmp	r3, #20
 8004596:	f200 80f0 	bhi.w	800477a <HAL_TIM_PWM_ConfigChannel+0x212>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	080045f5 	.word	0x080045f5
 80045a4:	0800477b 	.word	0x0800477b
 80045a8:	0800477b 	.word	0x0800477b
 80045ac:	0800477b 	.word	0x0800477b
 80045b0:	08004635 	.word	0x08004635
 80045b4:	0800477b 	.word	0x0800477b
 80045b8:	0800477b 	.word	0x0800477b
 80045bc:	0800477b 	.word	0x0800477b
 80045c0:	08004677 	.word	0x08004677
 80045c4:	0800477b 	.word	0x0800477b
 80045c8:	0800477b 	.word	0x0800477b
 80045cc:	0800477b 	.word	0x0800477b
 80045d0:	080046b7 	.word	0x080046b7
 80045d4:	0800477b 	.word	0x0800477b
 80045d8:	0800477b 	.word	0x0800477b
 80045dc:	0800477b 	.word	0x0800477b
 80045e0:	080046f9 	.word	0x080046f9
 80045e4:	0800477b 	.word	0x0800477b
 80045e8:	0800477b 	.word	0x0800477b
 80045ec:	0800477b 	.word	0x0800477b
 80045f0:	08004739 	.word	0x08004739
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fcf0 	bl	8003fe0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	6992      	ldr	r2, [r2, #24]
 800460a:	f042 0208 	orr.w	r2, r2, #8
 800460e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	6992      	ldr	r2, [r2, #24]
 800461a:	f022 0204 	bic.w	r2, r2, #4
 800461e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	6991      	ldr	r1, [r2, #24]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	6912      	ldr	r2, [r2, #16]
 800462e:	430a      	orrs	r2, r1
 8004630:	619a      	str	r2, [r3, #24]
    }
    break;
 8004632:	e0a3      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fd5c 	bl	80040f8 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	6992      	ldr	r2, [r2, #24]
 800464a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800464e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	6992      	ldr	r2, [r2, #24]
 800465a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	6991      	ldr	r1, [r2, #24]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	6912      	ldr	r2, [r2, #16]
 800466e:	0212      	lsls	r2, r2, #8
 8004670:	430a      	orrs	r2, r1
 8004672:	619a      	str	r2, [r3, #24]
    }
    break;
 8004674:	e082      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fdc1 	bl	8004204 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	69d2      	ldr	r2, [r2, #28]
 800468c:	f042 0208 	orr.w	r2, r2, #8
 8004690:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	69d2      	ldr	r2, [r2, #28]
 800469c:	f022 0204 	bic.w	r2, r2, #4
 80046a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	69d1      	ldr	r1, [r2, #28]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	6912      	ldr	r2, [r2, #16]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	61da      	str	r2, [r3, #28]
    }
    break;
 80046b4:	e062      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fe25 	bl	800430c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	69d2      	ldr	r2, [r2, #28]
 80046cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	69d2      	ldr	r2, [r2, #28]
 80046dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	69d1      	ldr	r1, [r2, #28]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	6912      	ldr	r2, [r2, #16]
 80046f0:	0212      	lsls	r2, r2, #8
 80046f2:	430a      	orrs	r2, r1
 80046f4:	61da      	str	r2, [r3, #28]
    }
    break;
 80046f6:	e041      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 f950 	bl	80049a4 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800470e:	f042 0208 	orr.w	r2, r2, #8
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800471e:	f022 0204 	bic.w	r2, r2, #4
 8004722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	6912      	ldr	r2, [r2, #16]
 8004732:	430a      	orrs	r2, r1
 8004734:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8004736:	e021      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f994 	bl	8004a6c <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800474e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004752:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800475e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	6912      	ldr	r2, [r2, #16]
 8004772:	0212      	lsls	r2, r2, #8
 8004774:	430a      	orrs	r2, r1
 8004776:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8004778:	e000      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 800477a:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop

08004798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e038      	b.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a18      	ldr	r2, [pc, #96]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d108      	bne.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	4313      	orrs	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
} 
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40012c00 	.word	0x40012c00

08004834 <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800484c:	2302      	movs	r3, #2
 800484e:	e07c      	b.n	800494a <HAL_TIMEx_ConfigBreakDeadTime+0x116>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a3e      	ldr	r2, [pc, #248]	; (8004958 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d13d      	bne.n	80048de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8004868:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF |
                 TIM_BDTR_BK2F | TIM_BDTR_BK2E | TIM_BDTR_BK2P);

    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	041b      	lsls	r3, r3, #16
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	051b      	lsls	r3, r3, #20
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2State;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e02c      	b.n	8004938 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
  }
  else
  {
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	0d1b      	lsrs	r3, r3, #20
 80048e2:	051b      	lsls	r3, r3, #20
 80048e4:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF);
    
    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	041b      	lsls	r3, r3, #16
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40012c00 	.word	0x40012c00

0800495c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable. 
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]

  tmp = TIM_CCER_CC1NE << Channel;
 800496c:	2204      	movs	r2, #4
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1a      	ldr	r2, [r3, #32]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	43db      	mvns	r3, r3
 800497e:	401a      	ands	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1a      	ldr	r2, [r3, #32]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	431a      	orrs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop

080049a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a15      	ldr	r2, [pc, #84]	; (8004a5c <TIM_OC5_SetConfig+0xb8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_OC5_SetConfig+0x7e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a14      	ldr	r2, [pc, #80]	; (8004a60 <TIM_OC5_SetConfig+0xbc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <TIM_OC5_SetConfig+0x7e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <TIM_OC5_SetConfig+0xc0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_OC5_SetConfig+0x7e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a12      	ldr	r2, [pc, #72]	; (8004a68 <TIM_OC5_SetConfig+0xc4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d109      	bne.n	8004a36 <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	621a      	str	r2, [r3, #32]
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40014000 	.word	0x40014000
 8004a64:	40014400 	.word	0x40014400
 8004a68:	40014800 	.word	0x40014800

08004a6c <TIM_OC6_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	051b      	lsls	r3, r3, #20
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a16      	ldr	r2, [pc, #88]	; (8004b28 <TIM_OC6_SetConfig+0xbc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00b      	beq.n	8004aec <TIM_OC6_SetConfig+0x80>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a15      	ldr	r2, [pc, #84]	; (8004b2c <TIM_OC6_SetConfig+0xc0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d007      	beq.n	8004aec <TIM_OC6_SetConfig+0x80>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a14      	ldr	r2, [pc, #80]	; (8004b30 <TIM_OC6_SetConfig+0xc4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_OC6_SetConfig+0x80>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <TIM_OC6_SetConfig+0xc8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d109      	bne.n	8004b00 <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	029b      	lsls	r3, r3, #10
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
} 
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40014400 	.word	0x40014400
 8004b34:	40014800 	.word	0x40014800

08004b38 <_init>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	bf00      	nop
 8004b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3e:	bc08      	pop	{r3}
 8004b40:	469e      	mov	lr, r3
 8004b42:	4770      	bx	lr

08004b44 <_fini>:
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	bf00      	nop
 8004b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4a:	bc08      	pop	{r3}
 8004b4c:	469e      	mov	lr, r3
 8004b4e:	4770      	bx	lr
