
Test08_I2CwithDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004344  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080044cc  080044cc  000144cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004514  08004514  00014514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000042c  20000000  08004518  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002042c  2**0
                  CONTENTS
  7 .bss          00000194  2000042c  2000042c  0002042c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005c0  200005c0  0002042c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00004fc5  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000aa76  00000000  00000000  00025421  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001893  00000000  00000000  0002fe97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000918  00000000  00000000  00031730  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000830  00000000  00000000  00032048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004c32  00000000  00000000  00032878  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002ad5  00000000  00000000  000374aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000006e  00000000  00000000  00039f7f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000023d4  00000000  00000000  00039ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000042f 	.word	0x2000042f
 80001a0:	2000042c 	.word	0x2000042c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	2000042c 	.word	0x2000042c
 80001c4:	2000042c 	.word	0x2000042c
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000042c 	.word	0x2000042c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080044b4 	.word	0x080044b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000430 	.word	0x20000430
 8000220:	080044b4 	.word	0x080044b4
 8000224:	2000042c 	.word	0x2000042c
 8000228:	00000000 	.word	0x00000000

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	4e0f      	ldr	r6, [pc, #60]	; (800026c <__libc_init_array+0x40>)
 8000230:	4d0f      	ldr	r5, [pc, #60]	; (8000270 <__libc_init_array+0x44>)
 8000232:	1b76      	subs	r6, r6, r5
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	bf18      	it	ne
 8000238:	2400      	movne	r4, #0
 800023a:	d005      	beq.n	8000248 <__libc_init_array+0x1c>
 800023c:	3401      	adds	r4, #1
 800023e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000242:	4798      	blx	r3
 8000244:	42a6      	cmp	r6, r4
 8000246:	d1f9      	bne.n	800023c <__libc_init_array+0x10>
 8000248:	4e0a      	ldr	r6, [pc, #40]	; (8000274 <__libc_init_array+0x48>)
 800024a:	4d0b      	ldr	r5, [pc, #44]	; (8000278 <__libc_init_array+0x4c>)
 800024c:	1b76      	subs	r6, r6, r5
 800024e:	f004 f931 	bl	80044b4 <_init>
 8000252:	10b6      	asrs	r6, r6, #2
 8000254:	bf18      	it	ne
 8000256:	2400      	movne	r4, #0
 8000258:	d006      	beq.n	8000268 <__libc_init_array+0x3c>
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	0800450c 	.word	0x0800450c
 8000270:	0800450c 	.word	0x0800450c
 8000274:	08004514 	.word	0x08004514
 8000278:	0800450c 	.word	0x0800450c

0800027c <register_fini>:
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <register_fini+0xc>)
 800027e:	b113      	cbz	r3, 8000286 <register_fini+0xa>
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <register_fini+0x10>)
 8000282:	f000 b805 	b.w	8000290 <atexit>
 8000286:	4770      	bx	lr
 8000288:	00000000 	.word	0x00000000
 800028c:	0800029d 	.word	0x0800029d

08000290 <atexit>:
 8000290:	2300      	movs	r3, #0
 8000292:	4601      	mov	r1, r0
 8000294:	461a      	mov	r2, r3
 8000296:	4618      	mov	r0, r3
 8000298:	f000 b814 	b.w	80002c4 <__register_exitproc>

0800029c <__libc_fini_array>:
 800029c:	b538      	push	{r3, r4, r5, lr}
 800029e:	4d07      	ldr	r5, [pc, #28]	; (80002bc <__libc_fini_array+0x20>)
 80002a0:	4c07      	ldr	r4, [pc, #28]	; (80002c0 <__libc_fini_array+0x24>)
 80002a2:	1b2c      	subs	r4, r5, r4
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	d005      	beq.n	80002b4 <__libc_fini_array+0x18>
 80002a8:	3c01      	subs	r4, #1
 80002aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80002ae:	4798      	blx	r3
 80002b0:	2c00      	cmp	r4, #0
 80002b2:	d1f9      	bne.n	80002a8 <__libc_fini_array+0xc>
 80002b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80002b8:	f004 b902 	b.w	80044c0 <_fini>
 80002bc:	08004518 	.word	0x08004518
 80002c0:	08004514 	.word	0x08004514

080002c4 <__register_exitproc>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	4c25      	ldr	r4, [pc, #148]	; (8000360 <__register_exitproc+0x9c>)
 80002ca:	6825      	ldr	r5, [r4, #0]
 80002cc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80002d0:	4606      	mov	r6, r0
 80002d2:	4688      	mov	r8, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b3c4      	cbz	r4, 800034c <__register_exitproc+0x88>
 80002da:	6860      	ldr	r0, [r4, #4]
 80002dc:	281f      	cmp	r0, #31
 80002de:	dc17      	bgt.n	8000310 <__register_exitproc+0x4c>
 80002e0:	1c43      	adds	r3, r0, #1
 80002e2:	b176      	cbz	r6, 8000302 <__register_exitproc+0x3e>
 80002e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80002e8:	2201      	movs	r2, #1
 80002ea:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80002ee:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 80002f2:	4082      	lsls	r2, r0
 80002f4:	4311      	orrs	r1, r2
 80002f6:	2e02      	cmp	r6, #2
 80002f8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80002fc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8000300:	d01e      	beq.n	8000340 <__register_exitproc+0x7c>
 8000302:	3002      	adds	r0, #2
 8000304:	6063      	str	r3, [r4, #4]
 8000306:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800030a:	2000      	movs	r0, #0
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <__register_exitproc+0xa0>)
 8000312:	b303      	cbz	r3, 8000356 <__register_exitproc+0x92>
 8000314:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000318:	f3af 8000 	nop.w
 800031c:	4604      	mov	r4, r0
 800031e:	b1d0      	cbz	r0, 8000356 <__register_exitproc+0x92>
 8000320:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000324:	2700      	movs	r7, #0
 8000326:	e880 0088 	stmia.w	r0, {r3, r7}
 800032a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800032e:	4638      	mov	r0, r7
 8000330:	2301      	movs	r3, #1
 8000332:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000336:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e1      	beq.n	8000302 <__register_exitproc+0x3e>
 800033e:	e7d1      	b.n	80002e4 <__register_exitproc+0x20>
 8000340:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000344:	430a      	orrs	r2, r1
 8000346:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800034a:	e7da      	b.n	8000302 <__register_exitproc+0x3e>
 800034c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000350:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000354:	e7c1      	b.n	80002da <__register_exitproc+0x16>
 8000356:	f04f 30ff 	mov.w	r0, #4294967295
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	bf00      	nop
 8000360:	080044d0 	.word	0x080044d0
 8000364:	00000000 	.word	0x00000000

08000368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800036c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800036e:	e003      	b.n	8000378 <LoopCopyDataInit>

08000370 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000372:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000374:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000376:	3104      	adds	r1, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800037c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800037e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000380:	d3f6      	bcc.n	8000370 <CopyDataInit>
	ldr	r2, =_sbss
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000384:	e002      	b.n	800038c <LoopFillZerobss>

08000386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000386:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000388:	f842 3b04 	str.w	r3, [r2], #4

0800038c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <LoopForever+0x16>)
	cmp	r2, r3
 800038e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000390:	d3f9      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000392:	f000 fa17 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000396:	f7ff ff49 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800039a:	f000 f80f 	bl	80003bc <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a0:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80003a4:	08004518 	.word	0x08004518
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003ac:	2000042c 	.word	0x2000042c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80003b0:	2000042c 	.word	0x2000042c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80003b4:	200005c0 	.word	0x200005c0

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80003c2:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	uint8_t data[1024];
	uint8_t newline[]="\n";
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	220a      	movs	r2, #10
 80003c8:	801a      	strh	r2, [r3, #0]
	uint8_t read=0;
 80003ca:	1cfb      	adds	r3, r7, #3
 80003cc:	2200      	movs	r2, #0
 80003ce:	701a      	strb	r2, [r3, #0]
//	uint8_t address=0x1A;//Config
	uint8_t address=0x75;//WHO_AM_I
 80003d0:	1cbb      	adds	r3, r7, #2
 80003d2:	2275      	movs	r2, #117	; 0x75
 80003d4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d6:	f000 fb67 	bl	8000aa8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80003da:	f000 f843 	bl	8000464 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003de:	f000 f935 	bl	800064c <MX_GPIO_Init>
  MX_DMA_Init();
 80003e2:	f000 f91b 	bl	800061c <MX_DMA_Init>
  MX_I2C1_Init();
 80003e6:	f000 f8b3 	bl	8000550 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80003ea:	f000 f8e7 	bl	80005bc <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80003ee:	f000 f88b 	bl	8000508 <MX_NVIC_Init>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

//READ MPU6050(0xD0) WHO_AM_I(0x75)
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)0xD0, &address, 1, 1000) != HAL_OK){
 80003f2:	1cba      	adds	r2, r7, #2
 80003f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	2301      	movs	r3, #1
 80003fc:	21d0      	movs	r1, #208	; 0xd0
 80003fe:	4816      	ldr	r0, [pc, #88]	; (8000458 <main+0x9c>)
 8000400:	f001 f9be 	bl	8001780 <HAL_I2C_Master_Transmit>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <main+0x52>
		Error_Handler();
 800040a:	f000 f96f 	bl	80006ec <Error_Handler>
	}
	if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)0xD0, &read, 1, 1000) != HAL_OK){
 800040e:	1cfa      	adds	r2, r7, #3
 8000410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2301      	movs	r3, #1
 8000418:	21d0      	movs	r1, #208	; 0xd0
 800041a:	480f      	ldr	r0, [pc, #60]	; (8000458 <main+0x9c>)
 800041c:	f001 fab0 	bl	8001980 <HAL_I2C_Master_Receive>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <main+0x6e>
		Error_Handler();
 8000426:	f000 f961 	bl	80006ec <Error_Handler>
	}
	if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, sizeof(data))!=HAL_OK){
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000432:	4619      	mov	r1, r3
 8000434:	4809      	ldr	r0, [pc, #36]	; (800045c <main+0xa0>)
 8000436:	f003 fac5 	bl	80039c4 <HAL_UART_Transmit_DMA>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <main+0x88>
		Error_Handler();
 8000440:	f000 f954 	bl	80006ec <Error_Handler>
	}
	while (Uartready != 1)
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <main+0xa4>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d1fb      	bne.n	8000446 <main+0x8a>
	{
	}
	Uartready=0;
 800044e:	4b04      	ldr	r3, [pc, #16]	; (8000460 <main+0xa4>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
	/* Data send (UART) */
	//sprintf(data,"data:%f \n",0.002);
	//put_c((uint8_t *)data);
  while (1)
  {
  }
 8000454:	e7fe      	b.n	8000454 <main+0x98>
 8000456:	bf00      	nop
 8000458:	20000448 	.word	0x20000448
 800045c:	200004d0 	.word	0x200004d0
 8000460:	200005b8 	.word	0x200005b8

08000464 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b096      	sub	sp, #88	; 0x58
 8000468:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046a:	2302      	movs	r3, #2
 800046c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046e:	2301      	movs	r3, #1
 8000470:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000472:	2310      	movs	r3, #16
 8000474:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000476:	2300      	movs	r3, #0
 8000478:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800047e:	4618      	mov	r0, r3
 8000480:	f001 fd90 	bl	8001fa4 <HAL_RCC_OscConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x2a>
  {
    Error_Handler();
 800048a:	f000 f92f 	bl	80006ec <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	230f      	movs	r3, #15
 8000490:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000492:	2300      	movs	r3, #0
 8000494:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004a2:	f107 031c 	add.w	r3, r7, #28
 80004a6:	2100      	movs	r1, #0
 80004a8:	4618      	mov	r0, r3
 80004aa:	f002 fe3d 	bl	8003128 <HAL_RCC_ClockConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80004b4:	f000 f91a 	bl	80006ec <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80004b8:	2321      	movs	r3, #33	; 0x21
 80004ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 f8e4 	bl	8003694 <HAL_RCCEx_PeriphCLKConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004d2:	f000 f90b 	bl	80006ec <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80004d6:	f003 f88d 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 80004da:	4602      	mov	r2, r0
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <SystemClock_Config+0xa0>)
 80004de:	fba3 2302 	umull	r2, r3, r3, r2
 80004e2:	099b      	lsrs	r3, r3, #6
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fc3f 	bl	8000d68 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80004ea:	2004      	movs	r0, #4
 80004ec:	f000 fc48 	bl	8000d80 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f000 fc0c 	bl	8000d14 <HAL_NVIC_SetPriority>
}
 80004fc:	bf00      	nop
 80004fe:	3758      	adds	r7, #88	; 0x58
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	10624dd3 	.word	0x10624dd3

08000508 <MX_NVIC_Init>:

/** NVIC Configuration
*/
static void MX_NVIC_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	200f      	movs	r0, #15
 8000512:	f000 fbff 	bl	8000d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000516:	200f      	movs	r0, #15
 8000518:	f000 fc18 	bl	8000d4c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	200d      	movs	r0, #13
 8000522:	f000 fbf7 	bl	8000d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000526:	200d      	movs	r0, #13
 8000528:	f000 fc10 	bl	8000d4c <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	2025      	movs	r0, #37	; 0x25
 8000532:	f000 fbef 	bl	8000d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000536:	2025      	movs	r0, #37	; 0x25
 8000538:	f000 fc08 	bl	8000d4c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	200e      	movs	r0, #14
 8000542:	f000 fbe7 	bl	8000d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000546:	200e      	movs	r0, #14
 8000548:	f000 fc00 	bl	8000d4c <HAL_NVIC_EnableIRQ>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000554:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <MX_I2C1_Init+0x60>)
 8000556:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <MX_I2C1_Init+0x64>)
 8000558:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_I2C1_Init+0x60>)
 800055c:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <MX_I2C1_Init+0x68>)
 800055e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <MX_I2C1_Init+0x60>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x60>)
 8000568:	2201      	movs	r2, #1
 800056a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <MX_I2C1_Init+0x60>)
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x60>)
 8000574:	2200      	movs	r2, #0
 8000576:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <MX_I2C1_Init+0x60>)
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_I2C1_Init+0x60>)
 8000580:	2200      	movs	r2, #0
 8000582:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_I2C1_Init+0x60>)
 8000586:	2200      	movs	r2, #0
 8000588:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800058a:	4809      	ldr	r0, [pc, #36]	; (80005b0 <MX_I2C1_Init+0x60>)
 800058c:	f001 f86e 	bl	800166c <HAL_I2C_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000596:	f000 f8a9 	bl	80006ec <Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800059a:	2100      	movs	r1, #0
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_I2C1_Init+0x60>)
 800059e:	f001 fcb5 	bl	8001f0c <HAL_I2CEx_ConfigAnalogFilter>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005a8:	f000 f8a0 	bl	80006ec <Error_Handler>
  }

}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000448 	.word	0x20000448
 80005b4:	40005400 	.word	0x40005400
 80005b8:	2000090e 	.word	0x2000090e

080005bc <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005c2:	4a15      	ldr	r2, [pc, #84]	; (8000618 <MX_USART1_UART_Init+0x5c>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_USART1_UART_Init+0x58>)
 8000600:	f003 f98e 	bl	8003920 <HAL_UART_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800060a:	f000 f86f 	bl	80006ec <Error_Handler>
  }

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200004d0 	.word	0x200004d0
 8000618:	40013800 	.word	0x40013800

0800061c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <MX_DMA_Init+0x2c>)
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_DMA_Init+0x2c>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_DMA_Init+0x2c>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <MX_GPIO_Init+0x64>)
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_GPIO_Init+0x64>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_GPIO_Init+0x64>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <MX_GPIO_Init+0x64>)
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_GPIO_Init+0x64>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_GPIO_Init+0x64>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2108      	movs	r1, #8
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <MX_GPIO_Init+0x68>)
 8000688:	f000 ffc6 	bl	8001618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800068c:	2308      	movs	r3, #8
 800068e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4619      	mov	r1, r3
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_GPIO_Init+0x68>)
 80006a4:	f000 fe42 	bl	800132c <HAL_GPIO_Init>

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000400 	.word	0x48000400

080006b8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	Uartready = 1;
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <HAL_UART_TxCpltCallback+0x1c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200005b8 	.word	0x200005b8

080006d8 <HAL_UART_ErrorCallback>:
void put_c(uint8_t *data){
}
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    Error_Handler();
 80006e0:	f000 f804 	bl	80006ec <Error_Handler>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80006f0:	2108      	movs	r1, #8
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <Error_Handler+0x14>)
 80006f4:	f000 ffa8 	bl	8001648 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 80006f8:	2032      	movs	r0, #50	; 0x32
 80006fa:	f000 fa21 	bl	8000b40 <HAL_Delay>
  }
 80006fe:	e7f7      	b.n	80006f0 <Error_Handler+0x4>
 8000700:	48000400 	.word	0x48000400

08000704 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop

08000714 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8000718:	e7fe      	b.n	8000718 <HardFault_Handler+0x4>
 800071a:	bf00      	nop

0800071c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>
 8000722:	bf00      	nop

08000724 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8000728:	e7fe      	b.n	8000728 <BusFault_Handler+0x4>
 800072a:	bf00      	nop

0800072c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8000730:	e7fe      	b.n	8000730 <UsageFault_Handler+0x4>
 8000732:	bf00      	nop

08000734 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop

08000754 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000768:	f000 f9d0 	bl	8000b0c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800076c:	f000 fb24 	bl	8000db8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <DMA1_Channel3_IRQHandler>:

/**
* @brief This function handles DMA1 channel3 global interrupt.
*/
void DMA1_Channel3_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <DMA1_Channel3_IRQHandler+0x10>)
 800077a:	f000 fbc1 	bl	8000f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000494 	.word	0x20000494

08000788 <DMA1_Channel4_IRQHandler>:

/**
* @brief This function handles DMA1 channel4 global interrupt.
*/
void DMA1_Channel4_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <DMA1_Channel4_IRQHandler+0x10>)
 800078e:	f000 fbb7 	bl	8000f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000057c 	.word	0x2000057c

0800079c <DMA1_Channel5_IRQHandler>:

/**
* @brief This function handles DMA1 channel5 global interrupt.
*/
void DMA1_Channel5_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <DMA1_Channel5_IRQHandler+0x10>)
 80007a2:	f000 fbad 	bl	8000f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000540 	.word	0x20000540

080007b0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <USART1_IRQHandler+0x10>)
 80007b6:	f003 f96f 	bl	8003a98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200004d0 	.word	0x200004d0

080007c4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c8:	4a1f      	ldr	r2, [pc, #124]	; (8000848 <SystemInit+0x84>)
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <SystemInit+0x84>)
 80007cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80007d8:	4a1c      	ldr	r2, [pc, #112]	; (800084c <SystemInit+0x88>)
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <SystemInit+0x88>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80007e4:	4919      	ldr	r1, [pc, #100]	; (800084c <SystemInit+0x88>)
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <SystemInit+0x88>)
 80007e8:	685a      	ldr	r2, [r3, #4]
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <SystemInit+0x8c>)
 80007ec:	4013      	ands	r3, r2
 80007ee:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007f0:	4a16      	ldr	r2, [pc, #88]	; (800084c <SystemInit+0x88>)
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <SystemInit+0x88>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000800:	4a12      	ldr	r2, [pc, #72]	; (800084c <SystemInit+0x88>)
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <SystemInit+0x88>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800080a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800080c:	4a0f      	ldr	r2, [pc, #60]	; (800084c <SystemInit+0x88>)
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <SystemInit+0x88>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000816:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000818:	4a0c      	ldr	r2, [pc, #48]	; (800084c <SystemInit+0x88>)
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <SystemInit+0x88>)
 800081c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081e:	f023 030f 	bic.w	r3, r3, #15
 8000822:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000824:	4909      	ldr	r1, [pc, #36]	; (800084c <SystemInit+0x88>)
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <SystemInit+0x88>)
 8000828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <SystemInit+0x90>)
 800082c:	4013      	ands	r3, r2
 800082e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <SystemInit+0x88>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SystemInit+0x84>)
 8000838:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800083c:	609a      	str	r2, [r3, #8]
#endif
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00
 800084c:	40021000 	.word	0x40021000
 8000850:	f87fc00c 	.word	0xf87fc00c
 8000854:	ff00fccc 	.word	0xff00fccc

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <HAL_MspInit+0x80>)
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_MspInit+0x80>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <HAL_MspInit+0x80>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000876:	2003      	movs	r0, #3
 8000878:	f000 fa40 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	f06f 000b 	mvn.w	r0, #11
 8000884:	f000 fa46 	bl	8000d14 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	f06f 000a 	mvn.w	r0, #10
 8000890:	f000 fa40 	bl	8000d14 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	f06f 0009 	mvn.w	r0, #9
 800089c:	f000 fa3a 	bl	8000d14 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	f06f 0004 	mvn.w	r0, #4
 80008a8:	f000 fa34 	bl	8000d14 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	f06f 0003 	mvn.w	r0, #3
 80008b4:	f000 fa2e 	bl	8000d14 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	f06f 0001 	mvn.w	r0, #1
 80008c0:	f000 fa28 	bl	8000d14 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 fa22 	bl	8000d14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a27      	ldr	r2, [pc, #156]	; (8000988 <HAL_I2C_MspInit+0xac>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d147      	bne.n	800097e <HAL_I2C_MspInit+0xa2>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ee:	23c0      	movs	r3, #192	; 0xc0
 80008f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f2:	2312      	movs	r3, #18
 80008f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fe:	2304      	movs	r3, #4
 8000900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4619      	mov	r1, r3
 8000908:	4820      	ldr	r0, [pc, #128]	; (800098c <HAL_I2C_MspInit+0xb0>)
 800090a:	f000 fd0f 	bl	800132c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090e:	4a20      	ldr	r2, [pc, #128]	; (8000990 <HAL_I2C_MspInit+0xb4>)
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <HAL_I2C_MspInit+0xb4>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <HAL_I2C_MspInit+0xb4>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral DMA init*/
  
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <HAL_I2C_MspInit+0xbc>)
 800092a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 800094c:	2220      	movs	r2, #32
 800094e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000950:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000956:	480f      	ldr	r0, [pc, #60]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 8000958:	f000 fa3c 	bl	8000dd4 <HAL_DMA_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_I2C_MspInit+0x8a>
    {
      Error_Handler();
 8000962:	f7ff fec3 	bl	80006ec <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_RX_DMA1_CH3);
 8000966:	4a0d      	ldr	r2, [pc, #52]	; (800099c <HAL_I2C_MspInit+0xc0>)
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_I2C_MspInit+0xc0>)
 800096a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 8000976:	63da      	str	r2, [r3, #60]	; 0x3c
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800097e:	bf00      	nop
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40005400 	.word	0x40005400
 800098c:	48000400 	.word	0x48000400
 8000990:	40021000 	.word	0x40021000
 8000994:	20000494 	.word	0x20000494
 8000998:	40020030 	.word	0x40020030
 800099c:	40010000 	.word	0x40010000

080009a0 <HAL_UART_MspInit>:
  /* USER CODE END I2C1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a38      	ldr	r2, [pc, #224]	; (8000a90 <HAL_UART_MspInit+0xf0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d169      	bne.n	8000a86 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b2:	4a38      	ldr	r2, [pc, #224]	; (8000a94 <HAL_UART_MspInit+0xf4>)
 80009b4:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <HAL_UART_MspInit+0xf4>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <HAL_UART_MspInit+0xf4>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009dc:	2307      	movs	r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f000 fc9f 	bl	800132c <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 80009f0:	4a2a      	ldr	r2, [pc, #168]	; (8000a9c <HAL_UART_MspInit+0xfc>)
 80009f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a06:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a12:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a1e:	481e      	ldr	r0, [pc, #120]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 8000a20:	f000 f9d8 	bl	8000dd4 <HAL_DMA_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8000a2a:	f7ff fe5f 	bl	80006ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 8000a32:	665a      	str	r2, [r3, #100]	; 0x64
 8000a34:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6253      	str	r3, [r2, #36]	; 0x24

    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_UART_MspInit+0x100>)
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <HAL_UART_MspInit+0x104>)
 8000a3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_UART_MspInit+0x100>)
 8000a42:	2210      	movs	r2, #16
 8000a44:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_UART_MspInit+0x100>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_UART_MspInit+0x100>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <HAL_UART_MspInit+0x100>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_UART_MspInit+0x100>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_UART_MspInit+0x100>)
 8000a60:	2220      	movs	r2, #32
 8000a62:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_UART_MspInit+0x100>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <HAL_UART_MspInit+0x100>)
 8000a6c:	f000 f9b2 	bl	8000dd4 <HAL_DMA_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8000a76:	f7ff fe39 	bl	80006ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_UART_MspInit+0x100>)
 8000a7e:	661a      	str	r2, [r3, #96]	; 0x60
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_UART_MspInit+0x100>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	20000540 	.word	0x20000540
 8000a9c:	40020058 	.word	0x40020058
 8000aa0:	2000057c 	.word	0x2000057c
 8000aa4:	40020044 	.word	0x40020044

08000aa8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_Init+0x28>)
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x28>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f91f 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f808 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff fec8 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_InitTick+0x30>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <HAL_InitTick+0x34>)
 8000ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae6:	099b      	lsrs	r3, r3, #6
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 f93d 	bl	8000d68 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	f04f 30ff 	mov.w	r0, #4294967295
 8000af6:	f000 f90d 	bl	8000d14 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000428 	.word	0x20000428
 8000b08:	10624dd3 	.word	0x10624dd3

08000b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick++;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <HAL_IncTick+0x18>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <HAL_IncTick+0x18>)
 8000b18:	6013      	str	r3, [r2, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	200005bc 	.word	0x200005bc

08000b28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200005bc 	.word	0x200005bc

08000b40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff ffee 	bl	8000b28 <HAL_GetTick>
 8000b4c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffea 	bl	8000b28 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	1ad2      	subs	r2, r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3f7      	bcc.n	8000b50 <HAL_Delay+0x10>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bbc:	0a1b      	lsrs	r3, r3, #8
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bd6:	4909      	ldr	r1, [pc, #36]	; (8000bfc <NVIC_EnableIRQ+0x30>)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	095b      	lsrs	r3, r3, #5
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	f002 021f 	and.w	r2, r2, #31
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	da0b      	bge.n	8000c2c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	490d      	ldr	r1, [pc, #52]	; (8000c4c <NVIC_SetPriority+0x4c>)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 030f 	and.w	r3, r3, #15
 8000c1c:	3b04      	subs	r3, #4
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2a:	e009      	b.n	8000c40 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	4908      	ldr	r1, [pc, #32]	; (8000c50 <NVIC_SetPriority+0x50>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	2201      	movs	r2, #1
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	401a      	ands	r2, r3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	1e59      	subs	r1, r3, #1
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000ca8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff90 	bl	8000c00 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff2f 	bl	8000b68 <NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop

08000d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d26:	f7ff ff43 	bl	8000bb0 <NVIC_GetPriorityGrouping>
 8000d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	6978      	ldr	r0, [r7, #20]
 8000d32:	f7ff ff8f 	bl	8000c54 <NVIC_EncodePriority>
 8000d36:	4602      	mov	r2, r0
 8000d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff5e 	bl	8000c00 <NVIC_SetPriority>
}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff36 	bl	8000bcc <NVIC_EnableIRQ>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ffa1 	bl	8000cb8 <SysTick_Config>
 8000d76:	4603      	mov	r3, r0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d106      	bne.n	8000d9c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d8e:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d9a:	e005      	b.n	8000da8 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d9c:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f023 0304 	bic.w	r3, r3, #4
 8000da6:	6013      	str	r3, [r2, #0]
  }
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000dbc:	f000 f802 	bl	8000dc4 <HAL_SYSTICK_Callback>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e039      	b.n	8000e5e <HAL_DMA_Init+0x8a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d103      	bne.n	8000dfc <HAL_DMA_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2202      	movs	r2, #2
 8000e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	699b      	ldr	r3, [r3, #24]
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4313      	orrs	r3, r2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}  
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d101      	bne.n	8000e88 <HAL_DMA_Start_IT+0x1c>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e036      	b.n	8000ef6 <HAL_DMA_Start_IT+0x8a>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2202      	movs	r2, #2
 8000e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	f022 0201 	bic.w	r2, r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */  
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f000 fa16 	bl	80012e0 <DMA_SetConfig>
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	f042 0202 	orr.w	r2, r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	f042 0204 	orr.w	r2, r2, #4
 8000ed2:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	6812      	ldr	r2, [r2, #0]
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	f042 0208 	orr.w	r2, r2, #8
 8000ee2:	601a      	str	r2, [r3, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);   
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	f042 0201 	orr.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;    
 8000ef4:	2300      	movs	r3, #0
} 
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop

08000f00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{        
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8000f08:	4b8f      	ldr	r3, [pc, #572]	; (8001148 <HAL_DMA_IRQHandler+0x248>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4b8e      	ldr	r3, [pc, #568]	; (800114c <HAL_DMA_IRQHandler+0x24c>)
 8000f14:	4299      	cmp	r1, r3
 8000f16:	d02e      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x76>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4b8c      	ldr	r3, [pc, #560]	; (8001150 <HAL_DMA_IRQHandler+0x250>)
 8000f20:	4299      	cmp	r1, r3
 8000f22:	d026      	beq.n	8000f72 <HAL_DMA_IRQHandler+0x72>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4b8a      	ldr	r3, [pc, #552]	; (8001154 <HAL_DMA_IRQHandler+0x254>)
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d01d      	beq.n	8000f6c <HAL_DMA_IRQHandler+0x6c>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4b88      	ldr	r3, [pc, #544]	; (8001158 <HAL_DMA_IRQHandler+0x258>)
 8000f38:	4299      	cmp	r1, r3
 8000f3a:	d014      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x66>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4b86      	ldr	r3, [pc, #536]	; (800115c <HAL_DMA_IRQHandler+0x25c>)
 8000f44:	4299      	cmp	r1, r3
 8000f46:	d00b      	beq.n	8000f60 <HAL_DMA_IRQHandler+0x60>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4b84      	ldr	r3, [pc, #528]	; (8001160 <HAL_DMA_IRQHandler+0x260>)
 8000f50:	4299      	cmp	r1, r3
 8000f52:	d102      	bne.n	8000f5a <HAL_DMA_IRQHandler+0x5a>
 8000f54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000f58:	e00e      	b.n	8000f78 <HAL_DMA_IRQHandler+0x78>
 8000f5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f5e:	e00b      	b.n	8000f78 <HAL_DMA_IRQHandler+0x78>
 8000f60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f64:	e008      	b.n	8000f78 <HAL_DMA_IRQHandler+0x78>
 8000f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f6a:	e005      	b.n	8000f78 <HAL_DMA_IRQHandler+0x78>
 8000f6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f70:	e002      	b.n	8000f78 <HAL_DMA_IRQHandler+0x78>
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	e000      	b.n	8000f78 <HAL_DMA_IRQHandler+0x78>
 8000f76:	2308      	movs	r3, #8
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d05c      	beq.n	8001038 <HAL_DMA_IRQHandler+0x138>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d055      	beq.n	8001038 <HAL_DMA_IRQHandler+0x138>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	f022 0208 	bic.w	r2, r2, #8
 8000f9a:	601a      	str	r2, [r3, #0]
    
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f9c:	4a6a      	ldr	r2, [pc, #424]	; (8001148 <HAL_DMA_IRQHandler+0x248>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4b69      	ldr	r3, [pc, #420]	; (800114c <HAL_DMA_IRQHandler+0x24c>)
 8000fa6:	4299      	cmp	r1, r3
 8000fa8:	d02e      	beq.n	8001008 <HAL_DMA_IRQHandler+0x108>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4b67      	ldr	r3, [pc, #412]	; (8001150 <HAL_DMA_IRQHandler+0x250>)
 8000fb2:	4299      	cmp	r1, r3
 8000fb4:	d026      	beq.n	8001004 <HAL_DMA_IRQHandler+0x104>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4b65      	ldr	r3, [pc, #404]	; (8001154 <HAL_DMA_IRQHandler+0x254>)
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d01d      	beq.n	8000ffe <HAL_DMA_IRQHandler+0xfe>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4b63      	ldr	r3, [pc, #396]	; (8001158 <HAL_DMA_IRQHandler+0x258>)
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d014      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0xf8>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4b61      	ldr	r3, [pc, #388]	; (800115c <HAL_DMA_IRQHandler+0x25c>)
 8000fd6:	4299      	cmp	r1, r3
 8000fd8:	d00b      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0xf2>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <HAL_DMA_IRQHandler+0x260>)
 8000fe2:	4299      	cmp	r1, r3
 8000fe4:	d102      	bne.n	8000fec <HAL_DMA_IRQHandler+0xec>
 8000fe6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000fea:	e00e      	b.n	800100a <HAL_DMA_IRQHandler+0x10a>
 8000fec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ff0:	e00b      	b.n	800100a <HAL_DMA_IRQHandler+0x10a>
 8000ff2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ff6:	e008      	b.n	800100a <HAL_DMA_IRQHandler+0x10a>
 8000ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffc:	e005      	b.n	800100a <HAL_DMA_IRQHandler+0x10a>
 8000ffe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001002:	e002      	b.n	800100a <HAL_DMA_IRQHandler+0x10a>
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	e000      	b.n	800100a <HAL_DMA_IRQHandler+0x10a>
 8001008:	2308      	movs	r3, #8
 800100a:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001010:	f043 0201 	orr.w	r2, r3, #1
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;    
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2204      	movs	r2, #4
 800101c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2020 	strb.w	r2, [r3, #32]
    
      if (hdma->XferErrorCallback != NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_DMA_IRQHandler+0x138>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8001038:	4b43      	ldr	r3, [pc, #268]	; (8001148 <HAL_DMA_IRQHandler+0x248>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	4b42      	ldr	r3, [pc, #264]	; (800114c <HAL_DMA_IRQHandler+0x24c>)
 8001044:	4299      	cmp	r1, r3
 8001046:	d02e      	beq.n	80010a6 <HAL_DMA_IRQHandler+0x1a6>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	4b40      	ldr	r3, [pc, #256]	; (8001150 <HAL_DMA_IRQHandler+0x250>)
 8001050:	4299      	cmp	r1, r3
 8001052:	d026      	beq.n	80010a2 <HAL_DMA_IRQHandler+0x1a2>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <HAL_DMA_IRQHandler+0x254>)
 800105c:	4299      	cmp	r1, r3
 800105e:	d01d      	beq.n	800109c <HAL_DMA_IRQHandler+0x19c>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <HAL_DMA_IRQHandler+0x258>)
 8001068:	4299      	cmp	r1, r3
 800106a:	d014      	beq.n	8001096 <HAL_DMA_IRQHandler+0x196>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	4b3a      	ldr	r3, [pc, #232]	; (800115c <HAL_DMA_IRQHandler+0x25c>)
 8001074:	4299      	cmp	r1, r3
 8001076:	d00b      	beq.n	8001090 <HAL_DMA_IRQHandler+0x190>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <HAL_DMA_IRQHandler+0x260>)
 8001080:	4299      	cmp	r1, r3
 8001082:	d102      	bne.n	800108a <HAL_DMA_IRQHandler+0x18a>
 8001084:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001088:	e00e      	b.n	80010a8 <HAL_DMA_IRQHandler+0x1a8>
 800108a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800108e:	e00b      	b.n	80010a8 <HAL_DMA_IRQHandler+0x1a8>
 8001090:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001094:	e008      	b.n	80010a8 <HAL_DMA_IRQHandler+0x1a8>
 8001096:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800109a:	e005      	b.n	80010a8 <HAL_DMA_IRQHandler+0x1a8>
 800109c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a0:	e002      	b.n	80010a8 <HAL_DMA_IRQHandler+0x1a8>
 80010a2:	2340      	movs	r3, #64	; 0x40
 80010a4:	e000      	b.n	80010a8 <HAL_DMA_IRQHandler+0x1a8>
 80010a6:	2304      	movs	r3, #4
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d068      	beq.n	8001180 <HAL_DMA_IRQHandler+0x280>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d061      	beq.n	8001180 <HAL_DMA_IRQHandler+0x280>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0320 	and.w	r3, r3, #32
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d107      	bne.n	80010da <HAL_DMA_IRQHandler+0x1da>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	f022 0204 	bic.w	r2, r2, #4
 80010d8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010da:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <HAL_DMA_IRQHandler+0x248>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_DMA_IRQHandler+0x24c>)
 80010e4:	4299      	cmp	r1, r3
 80010e6:	d03d      	beq.n	8001164 <HAL_DMA_IRQHandler+0x264>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_DMA_IRQHandler+0x250>)
 80010f0:	4299      	cmp	r1, r3
 80010f2:	d026      	beq.n	8001142 <HAL_DMA_IRQHandler+0x242>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_DMA_IRQHandler+0x254>)
 80010fc:	4299      	cmp	r1, r3
 80010fe:	d01d      	beq.n	800113c <HAL_DMA_IRQHandler+0x23c>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_DMA_IRQHandler+0x258>)
 8001108:	4299      	cmp	r1, r3
 800110a:	d014      	beq.n	8001136 <HAL_DMA_IRQHandler+0x236>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_DMA_IRQHandler+0x25c>)
 8001114:	4299      	cmp	r1, r3
 8001116:	d00b      	beq.n	8001130 <HAL_DMA_IRQHandler+0x230>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_DMA_IRQHandler+0x260>)
 8001120:	4299      	cmp	r1, r3
 8001122:	d102      	bne.n	800112a <HAL_DMA_IRQHandler+0x22a>
 8001124:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001128:	e01d      	b.n	8001166 <HAL_DMA_IRQHandler+0x266>
 800112a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800112e:	e01a      	b.n	8001166 <HAL_DMA_IRQHandler+0x266>
 8001130:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001134:	e017      	b.n	8001166 <HAL_DMA_IRQHandler+0x266>
 8001136:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800113a:	e014      	b.n	8001166 <HAL_DMA_IRQHandler+0x266>
 800113c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001140:	e011      	b.n	8001166 <HAL_DMA_IRQHandler+0x266>
 8001142:	2340      	movs	r3, #64	; 0x40
 8001144:	e00f      	b.n	8001166 <HAL_DMA_IRQHandler+0x266>
 8001146:	bf00      	nop
 8001148:	40020000 	.word	0x40020000
 800114c:	40020008 	.word	0x40020008
 8001150:	4002001c 	.word	0x4002001c
 8001154:	40020030 	.word	0x40020030
 8001158:	40020044 	.word	0x40020044
 800115c:	40020058 	.word	0x40020058
 8001160:	4002006c 	.word	0x4002006c
 8001164:	2304      	movs	r3, #4
 8001166:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2211      	movs	r2, #17
 800116c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_DMA_IRQHandler+0x280>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001180:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <HAL_DMA_IRQHandler+0x3c4>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <HAL_DMA_IRQHandler+0x3c8>)
 800118c:	4299      	cmp	r1, r3
 800118e:	d02e      	beq.n	80011ee <HAL_DMA_IRQHandler+0x2ee>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	4b4d      	ldr	r3, [pc, #308]	; (80012cc <HAL_DMA_IRQHandler+0x3cc>)
 8001198:	4299      	cmp	r1, r3
 800119a:	d026      	beq.n	80011ea <HAL_DMA_IRQHandler+0x2ea>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <HAL_DMA_IRQHandler+0x3d0>)
 80011a4:	4299      	cmp	r1, r3
 80011a6:	d01d      	beq.n	80011e4 <HAL_DMA_IRQHandler+0x2e4>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <HAL_DMA_IRQHandler+0x3d4>)
 80011b0:	4299      	cmp	r1, r3
 80011b2:	d014      	beq.n	80011de <HAL_DMA_IRQHandler+0x2de>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <HAL_DMA_IRQHandler+0x3d8>)
 80011bc:	4299      	cmp	r1, r3
 80011be:	d00b      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x2d8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	4b45      	ldr	r3, [pc, #276]	; (80012dc <HAL_DMA_IRQHandler+0x3dc>)
 80011c8:	4299      	cmp	r1, r3
 80011ca:	d102      	bne.n	80011d2 <HAL_DMA_IRQHandler+0x2d2>
 80011cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011d0:	e00e      	b.n	80011f0 <HAL_DMA_IRQHandler+0x2f0>
 80011d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d6:	e00b      	b.n	80011f0 <HAL_DMA_IRQHandler+0x2f0>
 80011d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011dc:	e008      	b.n	80011f0 <HAL_DMA_IRQHandler+0x2f0>
 80011de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e2:	e005      	b.n	80011f0 <HAL_DMA_IRQHandler+0x2f0>
 80011e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e8:	e002      	b.n	80011f0 <HAL_DMA_IRQHandler+0x2f0>
 80011ea:	2320      	movs	r3, #32
 80011ec:	e000      	b.n	80011f0 <HAL_DMA_IRQHandler+0x2f0>
 80011ee:	2302      	movs	r3, #2
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d061      	beq.n	80012ba <HAL_DMA_IRQHandler+0x3ba>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d05a      	beq.n	80012ba <HAL_DMA_IRQHandler+0x3ba>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	2b00      	cmp	r3, #0
 8001210:	d107      	bne.n	8001222 <HAL_DMA_IRQHandler+0x322>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	f022 0202 	bic.w	r2, r2, #2
 8001220:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001222:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_DMA_IRQHandler+0x3c4>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <HAL_DMA_IRQHandler+0x3c8>)
 800122c:	4299      	cmp	r1, r3
 800122e:	d02e      	beq.n	800128e <HAL_DMA_IRQHandler+0x38e>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_DMA_IRQHandler+0x3cc>)
 8001238:	4299      	cmp	r1, r3
 800123a:	d026      	beq.n	800128a <HAL_DMA_IRQHandler+0x38a>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <HAL_DMA_IRQHandler+0x3d0>)
 8001244:	4299      	cmp	r1, r3
 8001246:	d01d      	beq.n	8001284 <HAL_DMA_IRQHandler+0x384>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_DMA_IRQHandler+0x3d4>)
 8001250:	4299      	cmp	r1, r3
 8001252:	d014      	beq.n	800127e <HAL_DMA_IRQHandler+0x37e>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <HAL_DMA_IRQHandler+0x3d8>)
 800125c:	4299      	cmp	r1, r3
 800125e:	d00b      	beq.n	8001278 <HAL_DMA_IRQHandler+0x378>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_DMA_IRQHandler+0x3dc>)
 8001268:	4299      	cmp	r1, r3
 800126a:	d102      	bne.n	8001272 <HAL_DMA_IRQHandler+0x372>
 800126c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001270:	e00e      	b.n	8001290 <HAL_DMA_IRQHandler+0x390>
 8001272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001276:	e00b      	b.n	8001290 <HAL_DMA_IRQHandler+0x390>
 8001278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127c:	e008      	b.n	8001290 <HAL_DMA_IRQHandler+0x390>
 800127e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001282:	e005      	b.n	8001290 <HAL_DMA_IRQHandler+0x390>
 8001284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001288:	e002      	b.n	8001290 <HAL_DMA_IRQHandler+0x390>
 800128a:	2320      	movs	r3, #32
 800128c:	e000      	b.n	8001290 <HAL_DMA_IRQHandler+0x390>
 800128e:	2302      	movs	r3, #2
 8001290:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;    
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_DMA_IRQHandler+0x3ba>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	4798      	blx	r3
      }
    }
  }
}  
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020008 	.word	0x40020008
 80012cc:	4002001c 	.word	0x4002001c
 80012d0:	40020030 	.word	0x40020030
 80012d4:	40020044 	.word	0x40020044
 80012d8:	40020058 	.word	0x40020058
 80012dc:	4002006c 	.word	0x4002006c

080012e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d108      	bne.n	8001310 <DMA_SetConfig+0x30>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800130e:	e007      	b.n	8001320 <DMA_SetConfig+0x40>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	60da      	str	r2, [r3, #12]
  }
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001342:	e14e      	b.n	80015e2 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2101      	movs	r1, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8140 	beq.w	80015dc <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x40>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b12      	cmp	r3, #18
 800136a:	d123      	bne.n	80013b4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	6939      	ldr	r1, [r7, #16]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d00b      	beq.n	8001408 <HAL_GPIO_Init+0xdc>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d007      	beq.n	8001408 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d130      	bne.n	800146a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800143e:	2201      	movs	r2, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 809a 	beq.w	80015dc <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a8:	4a55      	ldr	r2, [pc, #340]	; (8001600 <HAL_GPIO_Init+0x2d4>)
 80014aa:	4b55      	ldr	r3, [pc, #340]	; (8001600 <HAL_GPIO_Init+0x2d4>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b52      	ldr	r3, [pc, #328]	; (8001600 <HAL_GPIO_Init+0x2d4>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80014c0:	4a50      	ldr	r2, [pc, #320]	; (8001604 <HAL_GPIO_Init+0x2d8>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ea:	d013      	beq.n	8001514 <HAL_GPIO_Init+0x1e8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a46      	ldr	r2, [pc, #280]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d00d      	beq.n	8001510 <HAL_GPIO_Init+0x1e4>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a45      	ldr	r2, [pc, #276]	; (800160c <HAL_GPIO_Init+0x2e0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d007      	beq.n	800150c <HAL_GPIO_Init+0x1e0>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a44      	ldr	r2, [pc, #272]	; (8001610 <HAL_GPIO_Init+0x2e4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d101      	bne.n	8001508 <HAL_GPIO_Init+0x1dc>
 8001504:	2303      	movs	r3, #3
 8001506:	e006      	b.n	8001516 <HAL_GPIO_Init+0x1ea>
 8001508:	2305      	movs	r3, #5
 800150a:	e004      	b.n	8001516 <HAL_GPIO_Init+0x1ea>
 800150c:	2302      	movs	r3, #2
 800150e:	e002      	b.n	8001516 <HAL_GPIO_Init+0x1ea>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <HAL_GPIO_Init+0x1ea>
 8001514:	2300      	movs	r3, #0
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	f002 0203 	and.w	r2, r2, #3
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	4093      	lsls	r3, r2
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001526:	4937      	ldr	r1, [pc, #220]	; (8001604 <HAL_GPIO_Init+0x2d8>)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001534:	4b37      	ldr	r3, [pc, #220]	; (8001614 <HAL_GPIO_Init+0x2e8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001558:	4a2e      	ldr	r2, [pc, #184]	; (8001614 <HAL_GPIO_Init+0x2e8>)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <HAL_GPIO_Init+0x2e8>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001582:	4a24      	ldr	r2, [pc, #144]	; (8001614 <HAL_GPIO_Init+0x2e8>)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_GPIO_Init+0x2e8>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015ac:	4a19      	ldr	r2, [pc, #100]	; (8001614 <HAL_GPIO_Init+0x2e8>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_GPIO_Init+0x2e8>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <HAL_GPIO_Init+0x2e8>)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f aea9 	bne.w	8001344 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	48000400 	.word	0x48000400
 800160c:	48000800 	.word	0x48000800
 8001610:	48000c00 	.word	0x48000c00
 8001614:	40010400 	.word	0x40010400

08001618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
 8001624:	4613      	mov	r3, r2
 8001626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001628:	787b      	ldrb	r3, [r7, #1]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001634:	e002      	b.n	800163c <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	405a      	eors	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	615a      	str	r2, [r3, #20]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e07c      	b.n	8001778 <HAL_I2C_Init+0x10c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff f922 	bl	80008dc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2224      	movs	r2, #36	; 0x24
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6852      	ldr	r2, [r2, #4]
 80016b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	6892      	ldr	r2, [r2, #8]
 80016c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016cc:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d012      	beq.n	80016fc <HAL_I2C_Init+0x90>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_I2C_Init+0x82>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6892      	ldr	r2, [r2, #8]
 80016e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	e006      	b.n	80016fc <HAL_I2C_Init+0x90>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6892      	ldr	r2, [r2, #8]
 80016f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016fa:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d104      	bne.n	800170e <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800170c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800171c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001720:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6911      	ldr	r1, [r2, #16]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6952      	ldr	r2, [r2, #20]
 800172e:	4311      	orrs	r1, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6992      	ldr	r2, [r2, #24]
 8001734:	0212      	lsls	r2, r2, #8
 8001736:	430a      	orrs	r2, r1
 8001738:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	69d1      	ldr	r1, [r2, #28]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6a12      	ldr	r2, [r2, #32]
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	f042 0201 	orr.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2220      	movs	r2, #32
 8001764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af02      	add	r7, sp, #8
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	461a      	mov	r2, r3
 800178c:	460b      	mov	r3, r1
 800178e:	817b      	strh	r3, [r7, #10]
 8001790:	4613      	mov	r3, r2
 8001792:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	f040 80e6 	bne.w	8001972 <HAL_I2C_Master_Transmit+0x1f2>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_I2C_Master_Transmit+0x34>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e0df      	b.n	8001974 <HAL_I2C_Master_Transmit+0x1f4>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017bc:	f7ff f9b4 	bl	8000b28 <HAL_GetTick>
 80017c0:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2319      	movs	r3, #25
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f9fc 	bl	8001bcc <I2C_WaitOnFlagUntilTimeout>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e0ca      	b.n	8001974 <HAL_I2C_Master_Transmit+0x1f4>
    }

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2221      	movs	r2, #33	; 0x21
 80017e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_MASTER;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2210      	movs	r2, #16
 80017ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	893a      	ldrh	r2, [r7, #8]
 80017fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180a:	b29b      	uxth	r3, r3
 800180c:	2bff      	cmp	r3, #255	; 0xff
 800180e:	d90f      	bls.n	8001830 <HAL_I2C_Master_Transmit+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	22ff      	movs	r2, #255	; 0xff
 8001814:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181a:	b2da      	uxtb	r2, r3
 800181c:	8979      	ldrh	r1, [r7, #10]
 800181e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 fb41 	bl	8001eb0 <I2C_TransferConfig>
 800182e:	e071      	b.n	8001914 <HAL_I2C_Master_Transmit+0x194>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183e:	b2da      	uxtb	r2, r3
 8001840:	8979      	ldrh	r1, [r7, #10]
 8001842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 fb2f 	bl	8001eb0 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8001852:	e05f      	b.n	8001914 <HAL_I2C_Master_Transmit+0x194>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	6a39      	ldr	r1, [r7, #32]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f9f1 	bl	8001c40 <I2C_WaitOnTXISFlagUntilTimeout>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <HAL_I2C_Master_Transmit+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	2b04      	cmp	r3, #4
 800186a:	d101      	bne.n	8001870 <HAL_I2C_Master_Transmit+0xf0>
        {
          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e081      	b.n	8001974 <HAL_I2C_Master_Transmit+0x1f4>
        }
        else
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e07f      	b.n	8001974 <HAL_I2C_Master_Transmit+0x1f4>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	1c58      	adds	r0, r3, #1
 800187e:	68f9      	ldr	r1, [r7, #12]
 8001880:	6248      	str	r0, [r1, #36]	; 0x24
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188a:	b29b      	uxth	r3, r3
 800188c:	3b01      	subs	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001898:	3b01      	subs	r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d135      	bne.n	8001914 <HAL_I2C_Master_Transmit+0x194>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d030      	beq.n	8001914 <HAL_I2C_Master_Transmit+0x194>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	2200      	movs	r2, #0
 80018ba:	2180      	movs	r1, #128	; 0x80
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f985 	bl	8001bcc <I2C_WaitOnFlagUntilTimeout>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_I2C_Master_Transmit+0x14c>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e053      	b.n	8001974 <HAL_I2C_Master_Transmit+0x1f4>
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2bff      	cmp	r3, #255	; 0xff
 80018d4:	d90e      	bls.n	80018f4 <HAL_I2C_Master_Transmit+0x174>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	22ff      	movs	r2, #255	; 0xff
 80018da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	8979      	ldrh	r1, [r7, #10]
 80018e4:	2300      	movs	r3, #0
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 fadf 	bl	8001eb0 <I2C_TransferConfig>
 80018f2:	e00f      	b.n	8001914 <HAL_I2C_Master_Transmit+0x194>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	b2da      	uxtb	r2, r3
 8001904:	8979      	ldrh	r1, [r7, #10]
 8001906:	2300      	movs	r3, #0
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 face 	bl	8001eb0 <I2C_TransferConfig>
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
    }

    while(hi2c->XferCount > 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001918:	b29b      	uxth	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d19a      	bne.n	8001854 <HAL_I2C_Master_Transmit+0xd4>
      }
    }
  
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	6a39      	ldr	r1, [r7, #32]
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f9cc 	bl	8001cc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <HAL_I2C_Master_Transmit+0x1be>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	2b04      	cmp	r3, #4
 8001934:	d101      	bne.n	800193a <HAL_I2C_Master_Transmit+0x1ba>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e01c      	b.n	8001974 <HAL_I2C_Master_Transmit+0x1f4>
      }
      else
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e01a      	b.n	8001974 <HAL_I2C_Master_Transmit+0x1f4>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2220      	movs	r2, #32
 8001944:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_I2C_Master_Transmit+0x1fc>)
 8001952:	400b      	ands	r3, r1
 8001954:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2220      	movs	r2, #32
 800195a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_I2C_Master_Transmit+0x1f4>
  }
  else
  {
    return HAL_BUSY;
 8001972:	2302      	movs	r3, #2
  }
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	fe00e800 	.word	0xfe00e800

08001980 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af02      	add	r7, sp, #8
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	461a      	mov	r2, r3
 800198c:	460b      	mov	r3, r1
 800198e:	817b      	strh	r3, [r7, #10]
 8001990:	4613      	mov	r3, r2
 8001992:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	f040 80e7 	bne.w	8001b74 <HAL_I2C_Master_Receive+0x1f4>
  {    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_I2C_Master_Receive+0x34>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e0e0      	b.n	8001b76 <HAL_I2C_Master_Receive+0x1f6>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019bc:	f7ff f8b4 	bl	8000b28 <HAL_GetTick>
 80019c0:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2319      	movs	r3, #25
 80019c8:	2201      	movs	r2, #1
 80019ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f8fc 	bl	8001bcc <I2C_WaitOnFlagUntilTimeout>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e0cb      	b.n	8001b76 <HAL_I2C_Master_Receive+0x1f6>
    }

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2222      	movs	r2, #34	; 0x22
 80019e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_MASTER;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2210      	movs	r2, #16
 80019ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	893a      	ldrh	r2, [r7, #8]
 80019fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
      
    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2bff      	cmp	r3, #255	; 0xff
 8001a0e:	d90f      	bls.n	8001a30 <HAL_I2C_Master_Receive+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	22ff      	movs	r2, #255	; 0xff
 8001a14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	8979      	ldrh	r1, [r7, #10]
 8001a1e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 fa41 	bl	8001eb0 <I2C_TransferConfig>
 8001a2e:	e072      	b.n	8001b16 <HAL_I2C_Master_Receive+0x196>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	8979      	ldrh	r1, [r7, #10]
 8001a42:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fa2f 	bl	8001eb0 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8001a52:	e060      	b.n	8001b16 <HAL_I2C_Master_Receive+0x196>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	6a39      	ldr	r1, [r7, #32]
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 f96d 	bl	8001d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <HAL_I2C_Master_Receive+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d101      	bne.n	8001a70 <HAL_I2C_Master_Receive+0xf0>
        {
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e082      	b.n	8001b76 <HAL_I2C_Master_Receive+0x1f6>
        }
        else
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e080      	b.n	8001b76 <HAL_I2C_Master_Receive+0x1f6>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	1c59      	adds	r1, r3, #1
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	6251      	str	r1, [r2, #36]	; 0x24
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d135      	bne.n	8001b16 <HAL_I2C_Master_Receive+0x196>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d030      	beq.n	8001b16 <HAL_I2C_Master_Receive+0x196>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	2200      	movs	r2, #0
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f884 	bl	8001bcc <I2C_WaitOnFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Master_Receive+0x14e>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e053      	b.n	8001b76 <HAL_I2C_Master_Receive+0x1f6>
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2bff      	cmp	r3, #255	; 0xff
 8001ad6:	d90e      	bls.n	8001af6 <HAL_I2C_Master_Receive+0x176>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	22ff      	movs	r2, #255	; 0xff
 8001adc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	8979      	ldrh	r1, [r7, #10]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f9de 	bl	8001eb0 <I2C_TransferConfig>
 8001af4:	e00f      	b.n	8001b16 <HAL_I2C_Master_Receive+0x196>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	8979      	ldrh	r1, [r7, #10]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 f9cd 	bl	8001eb0 <I2C_TransferConfig>
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
    }

    while(hi2c->XferCount > 0U)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d199      	bne.n	8001a54 <HAL_I2C_Master_Receive+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	6a39      	ldr	r1, [r7, #32]
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f8cb 	bl	8001cc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_I2C_Master_Receive+0x1c0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d101      	bne.n	8001b3c <HAL_I2C_Master_Receive+0x1bc>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e01c      	b.n	8001b76 <HAL_I2C_Master_Receive+0x1f6>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e01a      	b.n	8001b76 <HAL_I2C_Master_Receive+0x1f6>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2220      	movs	r2, #32
 8001b46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6859      	ldr	r1, [r3, #4]
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_I2C_Master_Receive+0x200>)
 8001b54:	400b      	ands	r3, r1
 8001b56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    return HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e000      	b.n	8001b76 <HAL_I2C_Master_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 8001b74:	2302      	movs	r3, #2
  }
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	fe00e800 	.word	0xfe00e800

08001b84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d107      	bne.n	8001bc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	6992      	ldr	r2, [r2, #24]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	619a      	str	r2, [r3, #24]
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bdc:	e01c      	b.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d018      	beq.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d007      	beq.n	8001bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bec:	f7fe ff9c 	bl	8000b28 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	1ad2      	subs	r2, r2, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d90d      	bls.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e00f      	b.n	8001c38 <I2C_WaitOnFlagUntilTimeout+0x6c>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	401a      	ands	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d0d3      	beq.n	8001bde <I2C_WaitOnFlagUntilTimeout+0x12>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c4c:	e02c      	b.n	8001ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f8ce 	bl	8001df4 <I2C_IsAcknowledgeFailed>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e02a      	b.n	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d01e      	beq.n	8001ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c70:	f7fe ff5a 	bl	8000b28 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d913      	bls.n	8001ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e007      	b.n	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0cb      	beq.n	8001c4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ccc:	e028      	b.n	8001d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f88e 	bl	8001df4 <I2C_IsAcknowledgeFailed>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e026      	b.n	8001d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ce8:	f7fe ff1e 	bl	8000b28 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	1ad2      	subs	r2, r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d913      	bls.n	8001d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	f043 0220 	orr.w	r2, r3, #32
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2220      	movs	r2, #32
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e007      	b.n	8001d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0cf      	beq.n	8001cce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d44:	e048      	b.n	8001dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f852 	bl	8001df4 <I2C_IsAcknowledgeFailed>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e046      	b.n	8001de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01c      	beq.n	8001da2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8001d7c:	400b      	ands	r3, r1
 8001d7e:	6053      	str	r3, [r2, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e022      	b.n	8001de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8001da8:	f7fe febe 	bl	8000b28 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1ad2      	subs	r2, r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d90f      	bls.n	8001dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	f043 0220 	orr.w	r2, r3, #32
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e007      	b.n	8001de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0af      	beq.n	8001d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	fe00e800 	.word	0xfe00e800

08001df4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d048      	beq.n	8001ea0 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e0e:	e01c      	b.n	8001e4a <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e16:	d018      	beq.n	8001e4a <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <I2C_IsAcknowledgeFailed+0x3a>
 8001e1e:	f7fe fe83 	bl	8000b28 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	1ad2      	subs	r2, r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d90d      	bls.n	8001e4a <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e02b      	b.n	8001ea2 <I2C_IsAcknowledgeFailed+0xae>
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0db      	beq.n	8001e10 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2210      	movs	r2, #16
 8001e5e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f7ff fe8b 	bl	8001b84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <I2C_IsAcknowledgeFailed+0xb8>)
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2204      	movs	r2, #4
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	fe00e800 	.word	0xfe00e800

08001eb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	817b      	strh	r3, [r7, #10]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <I2C_TransferConfig+0x58>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8001ed6:	897b      	ldrh	r3, [r7, #10]
 8001ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001edc:	7a7b      	ldrb	r3, [r7, #9]
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	605a      	str	r2, [r3, #4]
}
 8001efc:	bf00      	nop
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	fc009800 	.word	0xfc009800

08001f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	d138      	bne.n	8001f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  { 
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e032      	b.n	8001f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2224      	movs	r2, #36	; 0x24
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
    
    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f5e:	601a      	str	r2, [r3, #0]
    
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	6811      	ldr	r1, [r2, #0]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
    
    __HAL_I2C_ENABLE(hi2c); 
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    return HAL_OK; 
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
  }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop

08001fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 81e8 	beq.w	8002396 <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fc6:	4bb8      	ldr	r3, [pc, #736]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d00c      	beq.n	8001fec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fd2:	4bb5      	ldr	r3, [pc, #724]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	f040 8082 	bne.w	80020e4 <HAL_RCC_OscConfig+0x140>
 8001fe0:	4bb1      	ldr	r3, [pc, #708]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d07b      	beq.n	80020e4 <HAL_RCC_OscConfig+0x140>
 8001fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001ff8:	fa93 f2a3 	rbit	r2, r3
 8001ffc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002000:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002002:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002006:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f043 0320 	orr.w	r3, r3, #32
 8002012:	b2db      	uxtb	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d102      	bne.n	8002024 <HAL_RCC_OscConfig+0x80>
 800201e:	4ba2      	ldr	r3, [pc, #648]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	e039      	b.n	8002098 <HAL_RCC_OscConfig+0xf4>
 8002024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002028:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002038:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800203a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f043 0320 	orr.w	r3, r3, #32
 800204a:	b2db      	uxtb	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d102      	bne.n	800205c <HAL_RCC_OscConfig+0xb8>
 8002056:	4b94      	ldr	r3, [pc, #592]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xf4>
 800205c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002060:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002068:	fa93 f2a3 	rbit	r2, r3
 800206c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002070:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002072:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f043 0320 	orr.w	r3, r3, #32
 8002082:	b2db      	uxtb	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b04      	cmp	r3, #4
 800208c:	d102      	bne.n	8002094 <HAL_RCC_OscConfig+0xf0>
 800208e:	4b86      	ldr	r3, [pc, #536]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	e001      	b.n	8002098 <HAL_RCC_OscConfig+0xf4>
 8002094:	4b84      	ldr	r3, [pc, #528]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800209c:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80020a4:	fa92 f1a2 	rbit	r1, r2
 80020a8:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80020ac:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020ae:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	fab2 f282 	clz	r2, r2
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f042 0220 	orr.w	r2, r2, #32
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	f002 021f 	and.w	r2, r2, #31
 80020c6:	40d3      	lsrs	r3, r2
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 8161 	beq.w	8002394 <HAL_RCC_OscConfig+0x3f0>
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f040 815b 	bne.w	8002394 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f001 b81a 	b.w	8003118 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x15a>
 80020f0:	4a6d      	ldr	r2, [pc, #436]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 80020f2:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	e030      	b.n	8002160 <HAL_RCC_OscConfig+0x1bc>
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10c      	bne.n	8002122 <HAL_RCC_OscConfig+0x17e>
 8002108:	4a67      	ldr	r2, [pc, #412]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 800210a:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4a64      	ldr	r2, [pc, #400]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002116:	4b64      	ldr	r3, [pc, #400]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	e01e      	b.n	8002160 <HAL_RCC_OscConfig+0x1bc>
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x1a4>
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002130:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4a5b      	ldr	r2, [pc, #364]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 800213c:	4b5a      	ldr	r3, [pc, #360]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0x1bc>
 8002148:	4a57      	ldr	r2, [pc, #348]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 800214a:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4a54      	ldr	r2, [pc, #336]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002156:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002160:	4951      	ldr	r1, [pc, #324]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002162:	4b51      	ldr	r3, [pc, #324]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f023 020f 	bic.w	r2, r3, #15
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4313      	orrs	r3, r2
 8002172:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8083 	beq.w	8002286 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7fe fcd2 	bl	8000b28 <HAL_GetTick>
 8002184:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218a:	f7fe fccd 	bl	8000b28 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d902      	bls.n	80021a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	f000 bfbc 	b.w	8003118 <HAL_RCC_OscConfig+0x1174>
 80021a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80021ac:	fa93 f2a3 	rbit	r2, r3
 80021b0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021b4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021ba:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f043 0320 	orr.w	r3, r3, #32
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d102      	bne.n	80021d8 <HAL_RCC_OscConfig+0x234>
 80021d2:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	e039      	b.n	800224c <HAL_RCC_OscConfig+0x2a8>
 80021d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021dc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80021e4:	fa93 f2a3 	rbit	r2, r3
 80021e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021ec:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021ee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f043 0320 	orr.w	r3, r3, #32
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d102      	bne.n	8002210 <HAL_RCC_OscConfig+0x26c>
 800220a:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	e01d      	b.n	800224c <HAL_RCC_OscConfig+0x2a8>
 8002210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002214:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002224:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002226:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f043 0320 	orr.w	r3, r3, #32
 8002236:	b2db      	uxtb	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b04      	cmp	r3, #4
 8002240:	d102      	bne.n	8002248 <HAL_RCC_OscConfig+0x2a4>
 8002242:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	e001      	b.n	800224c <HAL_RCC_OscConfig+0x2a8>
 8002248:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_RCC_OscConfig+0x304>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002250:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8002258:	fa92 f1a2 	rbit	r1, r2
 800225c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002260:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002262:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	f002 021f 	and.w	r2, r2, #31
 800227a:	40d3      	lsrs	r3, r2
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d082      	beq.n	800218a <HAL_RCC_OscConfig+0x1e6>
 8002284:	e087      	b.n	8002396 <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe fc4f 	bl	8000b28 <HAL_GetTick>
 800228a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e00d      	b.n	80022ac <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002290:	f7fe fc4a 	bl	8000b28 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d905      	bls.n	80022ac <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	f000 bf39 	b.w	8003118 <HAL_RCC_OscConfig+0x1174>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022c0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022c6:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f043 0320 	orr.w	r3, r3, #32
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d102      	bne.n	80022e4 <HAL_RCC_OscConfig+0x340>
 80022de:	4bb6      	ldr	r3, [pc, #728]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	e039      	b.n	8002358 <HAL_RCC_OscConfig+0x3b4>
 80022e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80022f0:	fa93 f2a3 	rbit	r2, r3
 80022f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022f8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f043 0320 	orr.w	r3, r3, #32
 800230a:	b2db      	uxtb	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d102      	bne.n	800231c <HAL_RCC_OscConfig+0x378>
 8002316:	4ba8      	ldr	r3, [pc, #672]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	e01d      	b.n	8002358 <HAL_RCC_OscConfig+0x3b4>
 800231c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002320:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002328:	fa93 f2a3 	rbit	r2, r3
 800232c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002330:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002332:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f043 0320 	orr.w	r3, r3, #32
 8002342:	b2db      	uxtb	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b04      	cmp	r3, #4
 800234c:	d102      	bne.n	8002354 <HAL_RCC_OscConfig+0x3b0>
 800234e:	4b9a      	ldr	r3, [pc, #616]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	e001      	b.n	8002358 <HAL_RCC_OscConfig+0x3b4>
 8002354:	4b98      	ldr	r3, [pc, #608]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800235c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002364:	fa92 f1a2 	rbit	r1, r2
 8002368:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800236c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800236e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	fab2 f282 	clz	r2, r2
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	f042 0220 	orr.w	r2, r2, #32
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f002 021f 	and.w	r2, r2, #31
 8002386:	40d3      	lsrs	r3, r2
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	f47f af7f 	bne.w	8002290 <HAL_RCC_OscConfig+0x2ec>
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 81f4 	beq.w	800278e <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023a6:	4b84      	ldr	r3, [pc, #528]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00d      	beq.n	80023ce <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023b2:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	f040 8099 	bne.w	80024f2 <HAL_RCC_OscConfig+0x54e>
 80023c0:	4b7d      	ldr	r3, [pc, #500]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 8092 	bne.w	80024f2 <HAL_RCC_OscConfig+0x54e>
 80023ce:	2302      	movs	r3, #2
 80023d0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80023e0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80023e6:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f043 0320 	orr.w	r3, r3, #32
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d102      	bne.n	8002404 <HAL_RCC_OscConfig+0x460>
 80023fe:	4b6e      	ldr	r3, [pc, #440]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	e037      	b.n	8002474 <HAL_RCC_OscConfig+0x4d0>
 8002404:	2302      	movs	r3, #2
 8002406:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002416:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002418:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f043 0320 	orr.w	r3, r3, #32
 8002428:	b2db      	uxtb	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d102      	bne.n	800243a <HAL_RCC_OscConfig+0x496>
 8002434:	4b60      	ldr	r3, [pc, #384]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	e01c      	b.n	8002474 <HAL_RCC_OscConfig+0x4d0>
 800243a:	2302      	movs	r3, #2
 800243c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002444:	fa93 f2a3 	rbit	r2, r3
 8002448:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800244c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800244e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f043 0320 	orr.w	r3, r3, #32
 800245e:	b2db      	uxtb	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b04      	cmp	r3, #4
 8002468:	d102      	bne.n	8002470 <HAL_RCC_OscConfig+0x4cc>
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	e001      	b.n	8002474 <HAL_RCC_OscConfig+0x4d0>
 8002470:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	2202      	movs	r2, #2
 8002476:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800247e:	fa92 f1a2 	rbit	r1, r2
 8002482:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002486:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002488:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	fab2 f282 	clz	r2, r2
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f042 0220 	orr.w	r2, r2, #32
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	f002 021f 	and.w	r2, r2, #31
 80024a0:	40d3      	lsrs	r3, r2
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <HAL_RCC_OscConfig+0x516>
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d002      	beq.n	80024ba <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f000 be2f 	b.w	8003118 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4c3f      	ldr	r4, [pc, #252]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 80024bc:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6959      	ldr	r1, [r3, #20]
 80024ca:	23f8      	movs	r3, #248	; 0xf8
 80024cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80024d4:	fa93 f0a3 	rbit	r0, r3
 80024d8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024dc:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80024de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	4313      	orrs	r3, r2
 80024ee:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f0:	e14d      	b.n	800278e <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80b3 	beq.w	8002664 <HAL_RCC_OscConfig+0x6c0>
 80024fe:	2301      	movs	r3, #1
 8002500:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002508:	fa93 f2a3 	rbit	r2, r3
 800250c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002510:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002512:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002516:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002522:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002526:	461a      	mov	r2, r3
 8002528:	2301      	movs	r3, #1
 800252a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7fe fafc 	bl	8000b28 <HAL_GetTick>
 8002530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002536:	f7fe faf7 	bl	8000b28 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d902      	bls.n	800254c <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	f000 bde6 	b.w	8003118 <HAL_RCC_OscConfig+0x1174>
 800254c:	2302      	movs	r3, #2
 800254e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800255e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002560:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002564:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	f043 0320 	orr.w	r3, r3, #32
 8002570:	b2db      	uxtb	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d102      	bne.n	8002582 <HAL_RCC_OscConfig+0x5de>
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	e039      	b.n	80025f6 <HAL_RCC_OscConfig+0x652>
 8002582:	2302      	movs	r3, #2
 8002584:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002594:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002596:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f043 0320 	orr.w	r3, r3, #32
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d104      	bne.n	80025bc <HAL_RCC_OscConfig+0x618>
 80025b2:	4b01      	ldr	r3, [pc, #4]	; (80025b8 <HAL_RCC_OscConfig+0x614>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	e01e      	b.n	80025f6 <HAL_RCC_OscConfig+0x652>
 80025b8:	40021000 	.word	0x40021000
 80025bc:	2302      	movs	r3, #2
 80025be:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80025c6:	fa93 f2a3 	rbit	r2, r3
 80025ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025ce:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f043 0320 	orr.w	r3, r3, #32
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0x64e>
 80025ec:	4bb9      	ldr	r3, [pc, #740]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	e001      	b.n	80025f6 <HAL_RCC_OscConfig+0x652>
 80025f2:	4bb8      	ldr	r3, [pc, #736]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	2202      	movs	r2, #2
 80025f8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002600:	fa92 f1a2 	rbit	r1, r2
 8002604:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002608:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800260a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f042 0220 	orr.w	r2, r2, #32
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	f002 021f 	and.w	r2, r2, #31
 8002622:	40d3      	lsrs	r3, r2
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d084      	beq.n	8002536 <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4ca9      	ldr	r4, [pc, #676]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 800262e:	4ba9      	ldr	r3, [pc, #676]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6959      	ldr	r1, [r3, #20]
 800263c:	23f8      	movs	r3, #248	; 0xf8
 800263e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002646:	fa93 f0a3 	rbit	r0, r3
 800264a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800264e:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002650:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	4313      	orrs	r3, r2
 8002660:	6023      	str	r3, [r4, #0]
 8002662:	e094      	b.n	800278e <HAL_RCC_OscConfig+0x7ea>
 8002664:	2301      	movs	r3, #1
 8002666:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002676:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002678:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800267c:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002688:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800268c:	461a      	mov	r2, r3
 800268e:	2300      	movs	r3, #0
 8002690:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe fa49 	bl	8000b28 <HAL_GetTick>
 8002696:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe fa44 	bl	8000b28 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d902      	bls.n	80026b2 <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	f000 bd33 	b.w	8003118 <HAL_RCC_OscConfig+0x1174>
 80026b2:	2302      	movs	r3, #2
 80026b4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026c4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026ca:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f043 0320 	orr.w	r3, r3, #32
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d102      	bne.n	80026e8 <HAL_RCC_OscConfig+0x744>
 80026e2:	4b7c      	ldr	r3, [pc, #496]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	e037      	b.n	8002758 <HAL_RCC_OscConfig+0x7b4>
 80026e8:	2302      	movs	r3, #2
 80026ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026f2:	fa93 f2a3 	rbit	r2, r3
 80026f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026fa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f043 0320 	orr.w	r3, r3, #32
 800270c:	b2db      	uxtb	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d102      	bne.n	800271e <HAL_RCC_OscConfig+0x77a>
 8002718:	4b6e      	ldr	r3, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x7b4>
 800271e:	2302      	movs	r3, #2
 8002720:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002730:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002732:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f043 0320 	orr.w	r3, r3, #32
 8002742:	b2db      	uxtb	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b04      	cmp	r3, #4
 800274c:	d102      	bne.n	8002754 <HAL_RCC_OscConfig+0x7b0>
 800274e:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	e001      	b.n	8002758 <HAL_RCC_OscConfig+0x7b4>
 8002754:	4b5f      	ldr	r3, [pc, #380]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	2202      	movs	r2, #2
 800275a:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002762:	fa92 f1a2 	rbit	r1, r2
 8002766:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800276a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800276c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	fab2 f282 	clz	r2, r2
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	f042 0220 	orr.w	r2, r2, #32
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f002 021f 	and.w	r2, r2, #31
 8002784:	40d3      	lsrs	r3, r2
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d186      	bne.n	800269c <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8132 	beq.w	8002a02 <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8099 	beq.w	80028dc <HAL_RCC_OscConfig+0x938>
 80027aa:	2301      	movs	r3, #1
 80027ac:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80027b4:	fa93 f2a3 	rbit	r2, r3
 80027b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027bc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027c2:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b42      	ldr	r3, [pc, #264]	; (80028d8 <HAL_RCC_OscConfig+0x934>)
 80027ce:	4413      	add	r3, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	2301      	movs	r3, #1
 80027d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d6:	f7fe f9a7 	bl	8000b28 <HAL_GetTick>
 80027da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e0:	f7fe f9a2 	bl	8000b28 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d902      	bls.n	80027f6 <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	f000 bc91 	b.w	8003118 <HAL_RCC_OscConfig+0x1174>
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002800:	fa93 f2a3 	rbit	r2, r3
 8002804:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002808:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800280a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800280e:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800281a:	b2db      	uxtb	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_RCC_OscConfig+0x888>
 8002826:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e037      	b.n	800289c <HAL_RCC_OscConfig+0x8f8>
 800282c:	2302      	movs	r3, #2
 800282e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002836:	fa93 f2a3 	rbit	r2, r3
 800283a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800283e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002840:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002850:	b2db      	uxtb	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d102      	bne.n	8002862 <HAL_RCC_OscConfig+0x8be>
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	e01c      	b.n	800289c <HAL_RCC_OscConfig+0x8f8>
 8002862:	2302      	movs	r3, #2
 8002864:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002874:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002876:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002886:	b2db      	uxtb	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b04      	cmp	r3, #4
 8002890:	d102      	bne.n	8002898 <HAL_RCC_OscConfig+0x8f4>
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	e001      	b.n	800289c <HAL_RCC_OscConfig+0x8f8>
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_RCC_OscConfig+0x930>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2202      	movs	r2, #2
 800289e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028a6:	fa92 f1a2 	rbit	r1, r2
 80028aa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028ae:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80028b0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	fab2 f282 	clz	r2, r2
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f002 021f 	and.w	r2, r2, #31
 80028c8:	40d3      	lsrs	r3, r2
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d086      	beq.n	80027e0 <HAL_RCC_OscConfig+0x83c>
 80028d2:	e096      	b.n	8002a02 <HAL_RCC_OscConfig+0xa5e>
 80028d4:	40021000 	.word	0x40021000
 80028d8:	42420480 	.word	0x42420480
 80028dc:	2301      	movs	r3, #1
 80028de:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80028e6:	fa93 f2a3 	rbit	r2, r3
 80028ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028ee:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80028f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	461a      	mov	r2, r3
 80028fe:	4bb5      	ldr	r3, [pc, #724]	; (8002bd4 <HAL_RCC_OscConfig+0xc30>)
 8002900:	4413      	add	r3, r2
 8002902:	461a      	mov	r2, r3
 8002904:	2300      	movs	r3, #0
 8002906:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002908:	f7fe f90e 	bl	8000b28 <HAL_GetTick>
 800290c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	e009      	b.n	8002926 <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002912:	f7fe f909 	bl	8000b28 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e3f8      	b.n	8003118 <HAL_RCC_OscConfig+0x1174>
 8002926:	2302      	movs	r3, #2
 8002928:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002930:	fa93 f2a3 	rbit	r2, r3
 8002934:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002938:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800293a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800293e:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800294a:	b2db      	uxtb	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_RCC_OscConfig+0x9b8>
 8002956:	4ba0      	ldr	r3, [pc, #640]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	e037      	b.n	80029cc <HAL_RCC_OscConfig+0xa28>
 800295c:	2302      	movs	r3, #2
 800295e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002966:	fa93 f2a3 	rbit	r2, r3
 800296a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800296e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002970:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002980:	b2db      	uxtb	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d102      	bne.n	8002992 <HAL_RCC_OscConfig+0x9ee>
 800298c:	4b92      	ldr	r3, [pc, #584]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	e01c      	b.n	80029cc <HAL_RCC_OscConfig+0xa28>
 8002992:	2302      	movs	r3, #2
 8002994:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800299c:	fa93 f2a3 	rbit	r2, r3
 80029a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029a4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80029a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d102      	bne.n	80029c8 <HAL_RCC_OscConfig+0xa24>
 80029c2:	4b85      	ldr	r3, [pc, #532]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	e001      	b.n	80029cc <HAL_RCC_OscConfig+0xa28>
 80029c8:	4b83      	ldr	r3, [pc, #524]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	2202      	movs	r2, #2
 80029ce:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80029d6:	fa92 f1a2 	rbit	r1, r2
 80029da:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80029de:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80029e0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	fab2 f282 	clz	r2, r2
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f002 021f 	and.w	r2, r2, #31
 80029f8:	40d3      	lsrs	r3, r2
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d187      	bne.n	8002912 <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 818f 	beq.w	8002d30 <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a18:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d112      	bne.n	8002a4a <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a24:	4a6c      	ldr	r2, [pc, #432]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002a26:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	61d3      	str	r3, [r2, #28]
 8002a30:	4b69      	ldr	r3, [pc, #420]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f107 030c 	add.w	r3, r7, #12
 8002a42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <HAL_RCC_OscConfig+0xc38>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d11a      	bne.n	8002a8c <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a56:	4a61      	ldr	r2, [pc, #388]	; (8002bdc <HAL_RCC_OscConfig+0xc38>)
 8002a58:	4b60      	ldr	r3, [pc, #384]	; (8002bdc <HAL_RCC_OscConfig+0xc38>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7fe f861 	bl	8000b28 <HAL_GetTick>
 8002a66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	e009      	b.n	8002a80 <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7fe f85c 	bl	8000b28 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	; 0x64
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e34b      	b.n	8003118 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b56      	ldr	r3, [pc, #344]	; (8002bdc <HAL_RCC_OscConfig+0xc38>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ef      	beq.n	8002a6c <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_OscConfig+0xb00>
 8002a96:	4a50      	ldr	r2, [pc, #320]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002a98:	4b4f      	ldr	r3, [pc, #316]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6213      	str	r3, [r2, #32]
 8002aa2:	e02f      	b.n	8002b04 <HAL_RCC_OscConfig+0xb60>
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xb24>
 8002aae:	4a4a      	ldr	r2, [pc, #296]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002ab0:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6213      	str	r3, [r2, #32]
 8002aba:	4a47      	ldr	r2, [pc, #284]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002abc:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f023 0304 	bic.w	r3, r3, #4
 8002ac4:	6213      	str	r3, [r2, #32]
 8002ac6:	e01d      	b.n	8002b04 <HAL_RCC_OscConfig+0xb60>
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0xb48>
 8002ad2:	4a41      	ldr	r2, [pc, #260]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002ad4:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	6213      	str	r3, [r2, #32]
 8002ade:	4a3e      	ldr	r2, [pc, #248]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002ae0:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6213      	str	r3, [r2, #32]
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_OscConfig+0xb60>
 8002aec:	4a3a      	ldr	r2, [pc, #232]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002aee:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	6213      	str	r3, [r2, #32]
 8002af8:	4a37      	ldr	r2, [pc, #220]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002afa:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f023 0304 	bic.w	r3, r3, #4
 8002b02:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8087 	beq.w	8002c1e <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fe f80a 	bl	8000b28 <HAL_GetTick>
 8002b14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	e00b      	b.n	8002b32 <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1a:	f7fe f805 	bl	8000b28 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e2f2      	b.n	8003118 <HAL_RCC_OscConfig+0x1174>
 8002b32:	2302      	movs	r3, #2
 8002b34:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b3c:	fa93 f2a3 	rbit	r2, r3
 8002b40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b44:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b4a:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d102      	bne.n	8002b68 <HAL_RCC_OscConfig+0xbc4>
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	e03d      	b.n	8002be4 <HAL_RCC_OscConfig+0xc40>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002b72:	fa93 f2a3 	rbit	r2, r3
 8002b76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b7a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d102      	bne.n	8002b9e <HAL_RCC_OscConfig+0xbfa>
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	e022      	b.n	8002be4 <HAL_RCC_OscConfig+0xc40>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ba8:	fa93 f2a3 	rbit	r2, r3
 8002bac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002bb0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002bb2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d108      	bne.n	8002be0 <HAL_RCC_OscConfig+0xc3c>
 8002bce:	4b02      	ldr	r3, [pc, #8]	; (8002bd8 <HAL_RCC_OscConfig+0xc34>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	e007      	b.n	8002be4 <HAL_RCC_OscConfig+0xc40>
 8002bd4:	42420480 	.word	0x42420480
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	4bbf      	ldr	r3, [pc, #764]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	2202      	movs	r2, #2
 8002be6:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002bee:	fa92 f1a2 	rbit	r1, r2
 8002bf2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002bf6:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002bf8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	fab2 f282 	clz	r2, r2
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f002 021f 	and.w	r2, r2, #31
 8002c10:	40d3      	lsrs	r3, r2
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f43f af7f 	beq.w	8002b1a <HAL_RCC_OscConfig+0xb76>
 8002c1c:	e07e      	b.n	8002d1c <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1e:	f7fd ff83 	bl	8000b28 <HAL_GetTick>
 8002c22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7fd ff7e 	bl	8000b28 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e26b      	b.n	8003118 <HAL_RCC_OscConfig+0x1174>
 8002c40:	2302      	movs	r3, #2
 8002c42:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c52:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c58:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d102      	bne.n	8002c76 <HAL_RCC_OscConfig+0xcd2>
 8002c70:	4b9b      	ldr	r3, [pc, #620]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	e037      	b.n	8002ce6 <HAL_RCC_OscConfig+0xd42>
 8002c76:	2302      	movs	r3, #2
 8002c78:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c80:	fa93 f2a3 	rbit	r2, r3
 8002c84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c88:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d102      	bne.n	8002cac <HAL_RCC_OscConfig+0xd08>
 8002ca6:	4b8e      	ldr	r3, [pc, #568]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	e01c      	b.n	8002ce6 <HAL_RCC_OscConfig+0xd42>
 8002cac:	2302      	movs	r3, #2
 8002cae:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002cb6:	fa93 f2a3 	rbit	r2, r3
 8002cba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cbe:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002cc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d102      	bne.n	8002ce2 <HAL_RCC_OscConfig+0xd3e>
 8002cdc:	4b80      	ldr	r3, [pc, #512]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	e001      	b.n	8002ce6 <HAL_RCC_OscConfig+0xd42>
 8002ce2:	4b7f      	ldr	r3, [pc, #508]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002cf0:	fa92 f1a2 	rbit	r1, r2
 8002cf4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002cf8:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002cfa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	fab2 f282 	clz	r2, r2
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	f002 021f 	and.w	r2, r2, #31
 8002d12:	40d3      	lsrs	r3, r2
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d185      	bne.n	8002c28 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d1c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d105      	bne.n	8002d30 <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d24:	4a6e      	ldr	r2, [pc, #440]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002d26:	4b6e      	ldr	r3, [pc, #440]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 81ed 	beq.w	8003116 <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d3c:	4b68      	ldr	r3, [pc, #416]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	f000 81e4 	beq.w	8003112 <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	f040 8144 	bne.w	8002fde <HAL_RCC_OscConfig+0x103a>
 8002d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d5a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d6a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002d7c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002d80:	461a      	mov	r2, r3
 8002d82:	2300      	movs	r3, #0
 8002d84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fd fecf 	bl	8000b28 <HAL_GetTick>
 8002d8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8e:	e009      	b.n	8002da4 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fd feca 	bl	8000b28 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1b9      	b.n	8003118 <HAL_RCC_OscConfig+0x1174>
 8002da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002db0:	fa93 f2a3 	rbit	r2, r3
 8002db4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002db8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002dba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002dbe:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f043 0320 	orr.w	r3, r3, #32
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d102      	bne.n	8002ddc <HAL_RCC_OscConfig+0xe38>
 8002dd6:	4b42      	ldr	r3, [pc, #264]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	e039      	b.n	8002e50 <HAL_RCC_OscConfig+0xeac>
 8002ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002de8:	fa93 f2a3 	rbit	r2, r3
 8002dec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002df0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002df2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f043 0320 	orr.w	r3, r3, #32
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d102      	bne.n	8002e14 <HAL_RCC_OscConfig+0xe70>
 8002e0e:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	e01d      	b.n	8002e50 <HAL_RCC_OscConfig+0xeac>
 8002e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e28:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f043 0320 	orr.w	r3, r3, #32
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d102      	bne.n	8002e4c <HAL_RCC_OscConfig+0xea8>
 8002e46:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	e001      	b.n	8002e50 <HAL_RCC_OscConfig+0xeac>
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e54:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002e5c:	fa92 f1a2 	rbit	r1, r2
 8002e60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e64:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	fab2 f282 	clz	r2, r2
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f042 0220 	orr.w	r2, r2, #32
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f002 021f 	and.w	r2, r2, #31
 8002e7e:	40d3      	lsrs	r3, r2
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d183      	bne.n	8002d90 <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e88:	4815      	ldr	r0, [pc, #84]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_RCC_OscConfig+0xf3c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	6043      	str	r3, [r0, #4]
 8002ea4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002eb0:	fa93 f2a3 	rbit	r2, r3
 8002eb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eb8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002eba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ebe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002eca:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fd fe28 	bl	8000b28 <HAL_GetTick>
 8002ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002edc:	e00c      	b.n	8002ef8 <HAL_RCC_OscConfig+0xf54>
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fd fe20 	bl	8000b28 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e10f      	b.n	8003118 <HAL_RCC_OscConfig+0x1174>
 8002ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002efc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f0c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f12:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f043 0320 	orr.w	r3, r3, #32
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d102      	bne.n	8002f30 <HAL_RCC_OscConfig+0xf8c>
 8002f2a:	4b7e      	ldr	r3, [pc, #504]	; (8003124 <HAL_RCC_OscConfig+0x1180>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	e039      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1000>
 8002f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f3c:	fa93 f2a3 	rbit	r2, r3
 8002f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f44:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f043 0320 	orr.w	r3, r3, #32
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d102      	bne.n	8002f68 <HAL_RCC_OscConfig+0xfc4>
 8002f62:	4b70      	ldr	r3, [pc, #448]	; (8003124 <HAL_RCC_OscConfig+0x1180>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	e01d      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1000>
 8002f68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f74:	fa93 f2a3 	rbit	r2, r3
 8002f78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f7c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f043 0320 	orr.w	r3, r3, #32
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d102      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xffc>
 8002f9a:	4b62      	ldr	r3, [pc, #392]	; (8003124 <HAL_RCC_OscConfig+0x1180>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	e001      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1000>
 8002fa0:	4b60      	ldr	r3, [pc, #384]	; (8003124 <HAL_RCC_OscConfig+0x1180>)
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002fb0:	fa92 f1a2 	rbit	r1, r2
 8002fb4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002fb8:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002fba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	fab2 f282 	clz	r2, r2
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	f042 0220 	orr.w	r2, r2, #32
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f002 021f 	and.w	r2, r2, #31
 8002fd2:	40d3      	lsrs	r3, r2
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d083      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xf40>
 8002fdc:	e09b      	b.n	8003116 <HAL_RCC_OscConfig+0x1172>
 8002fde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002fea:	fa93 f2a3 	rbit	r2, r3
 8002fee:	f107 0320 	add.w	r3, r7, #32
 8002ff2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ff4:	f107 0320 	add.w	r3, r7, #32
 8002ff8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8003004:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8003008:	461a      	mov	r2, r3
 800300a:	2300      	movs	r3, #0
 800300c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fd fd8b 	bl	8000b28 <HAL_GetTick>
 8003012:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003016:	e009      	b.n	800302c <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003018:	f7fd fd86 	bl	8000b28 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e075      	b.n	8003118 <HAL_RCC_OscConfig+0x1174>
 800302c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003030:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003038:	fa93 f2a3 	rbit	r2, r3
 800303c:	f107 031c 	add.w	r3, r7, #28
 8003040:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003042:	f107 031c 	add.w	r3, r7, #28
 8003046:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	f043 0320 	orr.w	r3, r3, #32
 8003052:	b2db      	uxtb	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d102      	bne.n	8003064 <HAL_RCC_OscConfig+0x10c0>
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_RCC_OscConfig+0x1180>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	e039      	b.n	80030d8 <HAL_RCC_OscConfig+0x1134>
 8003064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003068:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003070:	fa93 f2a3 	rbit	r2, r3
 8003074:	f107 0318 	add.w	r3, r7, #24
 8003078:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800307a:	f107 0318 	add.w	r3, r7, #24
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f043 0320 	orr.w	r3, r3, #32
 800308a:	b2db      	uxtb	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d102      	bne.n	800309c <HAL_RCC_OscConfig+0x10f8>
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <HAL_RCC_OscConfig+0x1180>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0x1134>
 800309c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030a8:	fa93 f2a3 	rbit	r2, r3
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f043 0320 	orr.w	r3, r3, #32
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d102      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1130>
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_RCC_OscConfig+0x1180>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	e001      	b.n	80030d8 <HAL_RCC_OscConfig+0x1134>
 80030d4:	4b13      	ldr	r3, [pc, #76]	; (8003124 <HAL_RCC_OscConfig+0x1180>)
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030dc:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80030e4:	fa92 f1a2 	rbit	r1, r2
 80030e8:	f107 0210 	add.w	r2, r7, #16
 80030ec:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80030ee:	f107 0210 	add.w	r2, r7, #16
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	f002 021f 	and.w	r2, r2, #31
 8003106:	40d3      	lsrs	r3, r2
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d183      	bne.n	8003018 <HAL_RCC_OscConfig+0x1074>
 8003110:	e001      	b.n	8003116 <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	f507 7701 	add.w	r7, r7, #516	; 0x204
 800311e:	46bd      	mov	sp, r7
 8003120:	bd90      	pop	{r4, r7, pc}
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000

08003128 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b09e      	sub	sp, #120	; 0x78
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003136:	4ba3      	ldr	r3, [pc, #652]	; (80033c4 <HAL_RCC_ClockConfig+0x29c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0207 	and.w	r2, r3, #7
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d210      	bcs.n	8003166 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003144:	499f      	ldr	r1, [pc, #636]	; (80033c4 <HAL_RCC_ClockConfig+0x29c>)
 8003146:	4b9f      	ldr	r3, [pc, #636]	; (80033c4 <HAL_RCC_ClockConfig+0x29c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 0207 	bic.w	r2, r3, #7
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003154:	4b9b      	ldr	r3, [pc, #620]	; (80033c4 <HAL_RCC_ClockConfig+0x29c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0207 	and.w	r2, r3, #7
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e1d0      	b.n	8003508 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003172:	4995      	ldr	r1, [pc, #596]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 8003174:	4b94      	ldr	r3, [pc, #592]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8168 	beq.w	8003462 <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d15c      	bne.n	8003254 <HAL_RCC_ClockConfig+0x12c>
 800319a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800319e:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80031a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f043 0320 	orr.w	r3, r3, #32
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d102      	bne.n	80031c6 <HAL_RCC_ClockConfig+0x9e>
 80031c0:	4b81      	ldr	r3, [pc, #516]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	e02d      	b.n	8003222 <HAL_RCC_ClockConfig+0xfa>
 80031c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ca:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80031d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f043 0320 	orr.w	r3, r3, #32
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xca>
 80031ec:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	e017      	b.n	8003222 <HAL_RCC_ClockConfig+0xfa>
 80031f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f6:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f043 0320 	orr.w	r3, r3, #32
 800320c:	b2db      	uxtb	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b04      	cmp	r3, #4
 8003216:	d102      	bne.n	800321e <HAL_RCC_ClockConfig+0xf6>
 8003218:	4b6b      	ldr	r3, [pc, #428]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	e001      	b.n	8003222 <HAL_RCC_ClockConfig+0xfa>
 800321e:	4b6a      	ldr	r3, [pc, #424]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003226:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800322a:	fa92 f2a2 	rbit	r2, r2
 800322e:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003232:	fab2 f282 	clz	r2, r2
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	f042 0220 	orr.w	r2, r2, #32
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f002 021f 	and.w	r2, r2, #31
 8003244:	40d3      	lsrs	r3, r2
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 80be 	bne.w	80033cc <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e159      	b.n	8003508 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d15b      	bne.n	8003314 <HAL_RCC_ClockConfig+0x1ec>
 800325c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003260:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f043 0320 	orr.w	r3, r3, #32
 8003276:	b2db      	uxtb	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d102      	bne.n	8003288 <HAL_RCC_ClockConfig+0x160>
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	e02d      	b.n	80032e4 <HAL_RCC_ClockConfig+0x1bc>
 8003288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328c:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	fab3 f383 	clz	r3, r3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f043 0320 	orr.w	r3, r3, #32
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d102      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x18c>
 80032ae:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	e017      	b.n	80032e4 <HAL_RCC_ClockConfig+0x1bc>
 80032b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032b8:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f043 0320 	orr.w	r3, r3, #32
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d102      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x1b8>
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	e001      	b.n	80032e4 <HAL_RCC_ClockConfig+0x1bc>
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e8:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032ec:	fa92 f2a2 	rbit	r2, r2
 80032f0:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80032f2:	6a3a      	ldr	r2, [r7, #32]
 80032f4:	fab2 f282 	clz	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f042 0220 	orr.w	r2, r2, #32
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	f002 021f 	and.w	r2, r2, #31
 8003306:	40d3      	lsrs	r3, r2
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d15d      	bne.n	80033cc <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0f9      	b.n	8003508 <HAL_RCC_ClockConfig+0x3e0>
 8003314:	2302      	movs	r3, #2
 8003316:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003320:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f043 0320 	orr.w	r3, r3, #32
 800332c:	b2db      	uxtb	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d102      	bne.n	800333e <HAL_RCC_ClockConfig+0x216>
 8003338:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	e02b      	b.n	8003396 <HAL_RCC_ClockConfig+0x26e>
 800333e:	2302      	movs	r3, #2
 8003340:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f043 0320 	orr.w	r3, r3, #32
 8003356:	b2db      	uxtb	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d102      	bne.n	8003368 <HAL_RCC_ClockConfig+0x240>
 8003362:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	e016      	b.n	8003396 <HAL_RCC_ClockConfig+0x26e>
 8003368:	2302      	movs	r3, #2
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f043 0320 	orr.w	r3, r3, #32
 8003380:	b2db      	uxtb	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b04      	cmp	r3, #4
 800338a:	d102      	bne.n	8003392 <HAL_RCC_ClockConfig+0x26a>
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	e001      	b.n	8003396 <HAL_RCC_ClockConfig+0x26e>
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <HAL_RCC_ClockConfig+0x2a0>)
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2202      	movs	r2, #2
 8003398:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800339c:	fa92 f2a2 	rbit	r2, r2
 80033a0:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	fab2 f282 	clz	r2, r2
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	f042 0220 	orr.w	r2, r2, #32
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f002 021f 	and.w	r2, r2, #31
 80033b6:	40d3      	lsrs	r3, r2
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0a1      	b.n	8003508 <HAL_RCC_ClockConfig+0x3e0>
 80033c4:	40022000 	.word	0x40022000
 80033c8:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033cc:	4950      	ldr	r1, [pc, #320]	; (8003510 <HAL_RCC_ClockConfig+0x3e8>)
 80033ce:	4b50      	ldr	r3, [pc, #320]	; (8003510 <HAL_RCC_ClockConfig+0x3e8>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f023 0203 	bic.w	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4313      	orrs	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033de:	f7fd fba3 	bl	8000b28 <HAL_GetTick>
 80033e2:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d112      	bne.n	8003412 <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ee:	f7fd fb9b 	bl	8000b28 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e081      	b.n	8003508 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003404:	4b42      	ldr	r3, [pc, #264]	; (8003510 <HAL_RCC_ClockConfig+0x3e8>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b04      	cmp	r3, #4
 800340e:	d1ee      	bne.n	80033ee <HAL_RCC_ClockConfig+0x2c6>
 8003410:	e027      	b.n	8003462 <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d11d      	bne.n	8003456 <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800341a:	e00a      	b.n	8003432 <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341c:	f7fd fb84 	bl	8000b28 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e06a      	b.n	8003508 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003432:	4b37      	ldr	r3, [pc, #220]	; (8003510 <HAL_RCC_ClockConfig+0x3e8>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b08      	cmp	r3, #8
 800343c:	d1ee      	bne.n	800341c <HAL_RCC_ClockConfig+0x2f4>
 800343e:	e010      	b.n	8003462 <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003440:	f7fd fb72 	bl	8000b28 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e058      	b.n	8003508 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003456:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <HAL_RCC_ClockConfig+0x3e8>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ee      	bne.n	8003440 <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003462:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_RCC_ClockConfig+0x3ec>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0207 	and.w	r2, r3, #7
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d910      	bls.n	8003492 <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003470:	4928      	ldr	r1, [pc, #160]	; (8003514 <HAL_RCC_ClockConfig+0x3ec>)
 8003472:	4b28      	ldr	r3, [pc, #160]	; (8003514 <HAL_RCC_ClockConfig+0x3ec>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 0207 	bic.w	r2, r3, #7
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003480:	4b24      	ldr	r3, [pc, #144]	; (8003514 <HAL_RCC_ClockConfig+0x3ec>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0207 	and.w	r2, r3, #7
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e03a      	b.n	8003508 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800349e:	491c      	ldr	r1, [pc, #112]	; (8003510 <HAL_RCC_ClockConfig+0x3e8>)
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_ClockConfig+0x3e8>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d009      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034bc:	4914      	ldr	r1, [pc, #80]	; (8003510 <HAL_RCC_ClockConfig+0x3e8>)
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <HAL_RCC_ClockConfig+0x3e8>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034d0:	f000 f826 	bl	8003520 <HAL_RCC_GetSysClockFreq>
 80034d4:	4601      	mov	r1, r0
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_RCC_ClockConfig+0x3e8>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034de:	23f0      	movs	r3, #240	; 0xf0
 80034e0:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
 80034f4:	4a08      	ldr	r2, [pc, #32]	; (8003518 <HAL_RCC_ClockConfig+0x3f0>)
 80034f6:	5cd3      	ldrb	r3, [r2, r3]
 80034f8:	fa21 f303 	lsr.w	r3, r1, r3
 80034fc:	4a07      	ldr	r2, [pc, #28]	; (800351c <HAL_RCC_ClockConfig+0x3f4>)
 80034fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003500:	2000      	movs	r0, #0
 8003502:	f7fd fae7 	bl	8000ad4 <HAL_InitTick>
  
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3778      	adds	r7, #120	; 0x78
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	40022000 	.word	0x40022000
 8003518:	080044d4 	.word	0x080044d4
 800351c:	20000428 	.word	0x20000428

08003520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	b08b      	sub	sp, #44	; 0x2c
 8003524:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800353a:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b04      	cmp	r3, #4
 8003548:	d002      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x30>
 800354a:	2b08      	cmp	r3, #8
 800354c:	d003      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0x36>
 800354e:	e03c      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003550:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003552:	623b      	str	r3, [r7, #32]
      break;
 8003554:	e03c      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800355c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003560:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	fa93 f3a3 	rbit	r3, r3
 8003568:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
 8003574:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003576:	5cd3      	ldrb	r3, [r2, r3]
 8003578:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800357a:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	f003 020f 	and.w	r2, r3, #15
 8003582:	230f      	movs	r3, #15
 8003584:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	fa93 f3a3 	rbit	r3, r3
 800358c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800359a:	5cd3      	ldrb	r3, [r2, r3]
 800359c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80035a8:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
 80035b8:	e004      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	4a0c      	ldr	r2, [pc, #48]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	623b      	str	r3, [r7, #32]
      break;
 80035c8:	e002      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035cc:	623b      	str	r3, [r7, #32]
      break;
 80035ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d0:	6a3b      	ldr	r3, [r7, #32]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	372c      	adds	r7, #44	; 0x2c
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	007a1200 	.word	0x007a1200
 80035e8:	080044ec 	.word	0x080044ec
 80035ec:	080044fc 	.word	0x080044fc
 80035f0:	003d0900 	.word	0x003d0900

080035f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <HAL_RCC_GetHCLKFreq+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000428 	.word	0x20000428

0800360c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003612:	f7ff ffef 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 8003616:	4601      	mov	r1, r0
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003620:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003624:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	fab3 f383 	clz	r3, r3
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
 8003638:	4a04      	ldr	r2, [pc, #16]	; (800364c <HAL_RCC_GetPCLK1Freq+0x40>)
 800363a:	5cd3      	ldrb	r3, [r2, r3]
 800363c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000
 800364c:	080044e4 	.word	0x080044e4

08003650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003656:	f7ff ffcd 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 800365a:	4601      	mov	r1, r0
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003664:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003668:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	fab3 f383 	clz	r3, r3
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	4a04      	ldr	r2, [pc, #16]	; (8003690 <HAL_RCC_GetPCLK2Freq+0x40>)
 800367e:	5cd3      	ldrb	r3, [r2, r3]
 8003680:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	080044e4 	.word	0x080044e4

08003694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b092      	sub	sp, #72	; 0x48
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80ef 	beq.w	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b8:	4b96      	ldr	r3, [pc, #600]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10e      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c4:	4a93      	ldr	r2, [pc, #588]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036c6:	4b93      	ldr	r3, [pc, #588]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ce:	61d3      	str	r3, [r2, #28]
 80036d0:	4b90      	ldr	r3, [pc, #576]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e2:	4b8d      	ldr	r3, [pc, #564]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d118      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ee:	4a8a      	ldr	r2, [pc, #552]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80036f0:	4b89      	ldr	r3, [pc, #548]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fa:	f7fd fa15 	bl	8000b28 <HAL_GetTick>
 80036fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	e008      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003702:	f7fd fa11 	bl	8000b28 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b64      	cmp	r3, #100	; 0x64
 800370e:	d901      	bls.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e0fa      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x276>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	4b80      	ldr	r3, [pc, #512]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003720:	4b7c      	ldr	r3, [pc, #496]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800372a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 809c 	beq.w	800386a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800373a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373c:	429a      	cmp	r2, r3
 800373e:	f000 8094 	beq.w	800386a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003742:	4b74      	ldr	r3, [pc, #464]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800374c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800375a:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800375c:	fab3 f383 	clz	r3, r3
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	461a      	mov	r2, r3
 8003764:	4b6d      	ldr	r3, [pc, #436]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003766:	4413      	add	r3, r2
 8003768:	461a      	mov	r2, r3
 800376a:	2301      	movs	r3, #1
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800377c:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	461a      	mov	r2, r3
 8003786:	4b65      	ldr	r3, [pc, #404]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003788:	4413      	add	r3, r2
 800378a:	461a      	mov	r2, r3
 800378c:	2300      	movs	r3, #0
 800378e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003790:	4a60      	ldr	r2, [pc, #384]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003794:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d064      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fd f9c2 	bl	8000b28 <HAL_GetTick>
 80037a4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a6:	e00a      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fd f9be 	bl	8000b28 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0a5      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80037be:	2302      	movs	r3, #2
 80037c0:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80037ca:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037e2:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	e02b      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80037e8:	2302      	movs	r3, #2
 80037ea:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003800:	b2db      	uxtb	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d102      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800380c:	4b41      	ldr	r3, [pc, #260]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	e016      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003812:	2302      	movs	r3, #2
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800382a:	b2db      	uxtb	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b04      	cmp	r3, #4
 8003834:	d102      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003836:	4b37      	ldr	r3, [pc, #220]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	e001      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800383c:	4b35      	ldr	r3, [pc, #212]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	2202      	movs	r2, #2
 8003842:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003846:	fa92 f2a2 	rbit	r2, r2
 800384a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	fab2 f282 	clz	r2, r2
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	f002 021f 	and.w	r2, r2, #31
 8003860:	40d3      	lsrs	r3, r2
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d09e      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800386a:	492a      	ldr	r1, [pc, #168]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800386c:	4b29      	ldr	r3, [pc, #164]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4313      	orrs	r3, r2
 800387a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800387c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003884:	4a23      	ldr	r2, [pc, #140]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003886:	4b23      	ldr	r3, [pc, #140]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389c:	491d      	ldr	r1, [pc, #116]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f023 0203 	bic.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ba:	4916      	ldr	r1, [pc, #88]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	f023 0210 	bic.w	r2, r3, #16
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038d8:	490e      	ldr	r1, [pc, #56]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038da:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038f6:	4907      	ldr	r1, [pc, #28]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3748      	adds	r7, #72	; 0x48
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	40007000 	.word	0x40007000
 800391c:	42420400 	.word	0x42420400

08003920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e043      	b.n	80039ba <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd f82a 	bl	80009a0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	; 0x24
 8003950:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f973 	bl	8003c50 <UART_SetConfig>
 800396a:	4603      	mov	r3, r0
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e022      	b.n	80039ba <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 facd 	bl	8003f1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	6852      	ldr	r2, [r2, #4]
 800398c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003990:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	6892      	ldr	r2, [r2, #8]
 800399c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fb54 	bl	8004060 <UART_CheckIdleState>
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop

080039c4 <HAL_UART_Transmit_DMA>:
  *       DMA half transfer complete, DMA transfer complete and DMA transfer
  *       error interrupts are enabled
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]

  /* Check if UART instance supports continuous communication using DMA */
  assert_param(IS_UART_DMA_INSTANCE(huart->Instance));

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d150      	bne.n	8003a80 <HAL_UART_Transmit_DMA+0xbc>
  {
    if((pData == NULL ) || (Size == 0))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_UART_Transmit_DMA+0x26>
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e049      	b.n	8003a82 <HAL_UART_Transmit_DMA+0xbe>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_UART_Transmit_DMA+0x38>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e042      	b.n	8003a82 <HAL_UART_Transmit_DMA+0xbe>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pTxBuffPtr = pData;
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2221      	movs	r2, #33	; 0x21
 8003a24:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2c:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <HAL_UART_Transmit_DMA+0xc8>)
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a34:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <HAL_UART_Transmit_DMA+0xcc>)
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <HAL_UART_Transmit_DMA+0xd0>)
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 8003a40:	f107 0308 	add.w	r3, r7, #8
 8003a44:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3328      	adds	r3, #40	; 0x28
 8003a54:	461a      	mov	r2, r3
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	f7fd fa08 	bl	8000e6c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2240      	movs	r2, #64	; 0x40
 8003a62:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	6892      	ldr	r2, [r2, #8]
 8003a6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a72:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e000      	b.n	8003a82 <HAL_UART_Transmit_DMA+0xbe>
  }
  else
  {
    return HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
  }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	08004221 	.word	0x08004221
 8003a90:	08004275 	.word	0x08004275
 8003a94:	08004291 	.word	0x08004291

08003a98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* UART parity error interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x38>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x38>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac8:	f043 0201 	orr.w	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART frame error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d010      	beq.n	8003b00 <HAL_UART_IRQHandler+0x68>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <HAL_UART_IRQHandler+0x68>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2202      	movs	r2, #2
 8003af2:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af8:	f043 0204 	orr.w	r2, r3, #4
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART noise error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d010      	beq.n	8003b30 <HAL_UART_IRQHandler+0x98>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d009      	beq.n	8003b30 <HAL_UART_IRQHandler+0x98>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2204      	movs	r2, #4
 8003b22:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b28:	f043 0202 	orr.w	r2, r3, #2
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART Over-Run interrupt occurred -----------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d010      	beq.n	8003b60 <HAL_UART_IRQHandler+0xc8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <HAL_UART_IRQHandler+0xc8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2208      	movs	r2, #8
 8003b52:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b58:	f043 0208 	orr.w	r2, r3, #8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART wakeup from Stop mode interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_UART_IRQHandler+0x104>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00f      	beq.n	8003b9c <HAL_UART_IRQHandler+0x104>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b84:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    HAL_UARTEx_WakeupCallback(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fc82 	bl	80044a0 <HAL_UARTEx_WakeupCallback>
  }

  /* UART in mode Receiver ---------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_UART_IRQHandler+0x126>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_UART_IRQHandler+0x126>
  {
    UART_Receive_IT(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fbfb 	bl	80043b4 <UART_Receive_IT>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <HAL_UART_IRQHandler+0x148>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_UART_IRQHandler+0x148>
  {
    UART_Transmit_IT(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fb7c 	bl	80042d8 <UART_Transmit_IT>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_UART_IRQHandler+0x16a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_UART_IRQHandler+0x16a>
  {
    UART_EndTransmit_IT(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fbc1 	bl	8004384 <UART_EndTransmit_IT>
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_UART_IRQHandler+0x188>
  {
    /* Set the UART state ready to be able to start again the Tx/Rx process */
    huart->gState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    HAL_UART_ErrorCallback(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fc fd5c 	bl	80006d8 <HAL_UART_ErrorCallback>
  }  
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart: UART handle.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000;
 8003c60:	2300      	movs	r3, #0
 8003c62:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000;
 8003c64:	2300      	movs	r3, #0
 8003c66:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6819      	ldr	r1, [r3, #0]
 8003c8e:	4b9e      	ldr	r3, [pc, #632]	; (8003f08 <UART_SetConfig+0x2b8>)
 8003c90:	400b      	ands	r3, r1
 8003c92:	68f9      	ldr	r1, [r7, #12]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	6852      	ldr	r2, [r2, #4]
 8003ca2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68d2      	ldr	r2, [r2, #12]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	6892      	ldr	r2, [r2, #8]
 8003cc4:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a8e      	ldr	r2, [pc, #568]	; (8003f0c <UART_SetConfig+0x2bc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d121      	bne.n	8003d1c <UART_SetConfig+0xcc>
 8003cd8:	4b8d      	ldr	r3, [pc, #564]	; (8003f10 <UART_SetConfig+0x2c0>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d817      	bhi.n	8003d14 <UART_SetConfig+0xc4>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <UART_SetConfig+0x9c>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003cfd 	.word	0x08003cfd
 8003cf0:	08003d09 	.word	0x08003d09
 8003cf4:	08003d0f 	.word	0x08003d0f
 8003cf8:	08003d03 	.word	0x08003d03
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	75fb      	strb	r3, [r7, #23]
 8003d00:	e01e      	b.n	8003d40 <UART_SetConfig+0xf0>
 8003d02:	2302      	movs	r3, #2
 8003d04:	75fb      	strb	r3, [r7, #23]
 8003d06:	e01b      	b.n	8003d40 <UART_SetConfig+0xf0>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	75fb      	strb	r3, [r7, #23]
 8003d0c:	e018      	b.n	8003d40 <UART_SetConfig+0xf0>
 8003d0e:	2308      	movs	r3, #8
 8003d10:	75fb      	strb	r3, [r7, #23]
 8003d12:	e015      	b.n	8003d40 <UART_SetConfig+0xf0>
 8003d14:	2310      	movs	r3, #16
 8003d16:	75fb      	strb	r3, [r7, #23]
 8003d18:	bf00      	nop
 8003d1a:	e011      	b.n	8003d40 <UART_SetConfig+0xf0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a7c      	ldr	r2, [pc, #496]	; (8003f14 <UART_SetConfig+0x2c4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d102      	bne.n	8003d2c <UART_SetConfig+0xdc>
 8003d26:	2300      	movs	r3, #0
 8003d28:	75fb      	strb	r3, [r7, #23]
 8003d2a:	e009      	b.n	8003d40 <UART_SetConfig+0xf0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a79      	ldr	r2, [pc, #484]	; (8003f18 <UART_SetConfig+0x2c8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d102      	bne.n	8003d3c <UART_SetConfig+0xec>
 8003d36:	2300      	movs	r3, #0
 8003d38:	75fb      	strb	r3, [r7, #23]
 8003d3a:	e001      	b.n	8003d40 <UART_SetConfig+0xf0>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	75fb      	strb	r3, [r7, #23]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d48:	d170      	bne.n	8003e2c <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d857      	bhi.n	8003e00 <UART_SetConfig+0x1b0>
 8003d50:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <UART_SetConfig+0x108>)
 8003d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d56:	bf00      	nop
 8003d58:	08003d7d 	.word	0x08003d7d
 8003d5c:	08003d99 	.word	0x08003d99
 8003d60:	08003db5 	.word	0x08003db5
 8003d64:	08003e01 	.word	0x08003e01
 8003d68:	08003dcf 	.word	0x08003dcf
 8003d6c:	08003e01 	.word	0x08003e01
 8003d70:	08003e01 	.word	0x08003e01
 8003d74:	08003e01 	.word	0x08003e01
 8003d78:	08003deb 	.word	0x08003deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d7c:	f7ff fc46 	bl	800360c <HAL_RCC_GetPCLK1Freq>
 8003d80:	4603      	mov	r3, r0
 8003d82:	005a      	lsls	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	441a      	add	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	82bb      	strh	r3, [r7, #20]
        break;
 8003d96:	e036      	b.n	8003e06 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d98:	f7ff fc5a 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	005a      	lsls	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	441a      	add	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	82bb      	strh	r3, [r7, #20]
        break;
 8003db2:	e028      	b.n	8003e06 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003dbe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6852      	ldr	r2, [r2, #4]
 8003dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dca:	82bb      	strh	r3, [r7, #20]
        break;
 8003dcc:	e01b      	b.n	8003e06 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003dce:	f7ff fba7 	bl	8003520 <HAL_RCC_GetSysClockFreq>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	005a      	lsls	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	441a      	add	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de6:	82bb      	strh	r3, [r7, #20]
        break;
 8003de8:	e00d      	b.n	8003e06 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	82bb      	strh	r3, [r7, #20]
        break;
 8003dfe:	e002      	b.n	8003e06 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	74fb      	strb	r3, [r7, #19]
        break;
 8003e04:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 8003e06:	8abb      	ldrh	r3, [r7, #20]
 8003e08:	f023 030f 	bic.w	r3, r3, #15
 8003e0c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8003e0e:	8abb      	ldrh	r3, [r7, #20]
 8003e10:	105b      	asrs	r3, r3, #1
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	897b      	ldrh	r3, [r7, #10]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	897a      	ldrh	r2, [r7, #10]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	e068      	b.n	8003efe <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d862      	bhi.n	8003ef8 <UART_SetConfig+0x2a8>
 8003e32:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <UART_SetConfig+0x1e8>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e7d 	.word	0x08003e7d
 8003e40:	08003e9d 	.word	0x08003e9d
 8003e44:	08003ef9 	.word	0x08003ef9
 8003e48:	08003ebd 	.word	0x08003ebd
 8003e4c:	08003ef9 	.word	0x08003ef9
 8003e50:	08003ef9 	.word	0x08003ef9
 8003e54:	08003ef9 	.word	0x08003ef9
 8003e58:	08003edd 	.word	0x08003edd
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681c      	ldr	r4, [r3, #0]
 8003e60:	f7ff fbd4 	bl	800360c <HAL_RCC_GetPCLK1Freq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	441a      	add	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	60e3      	str	r3, [r4, #12]
        break;
 8003e7a:	e040      	b.n	8003efe <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681c      	ldr	r4, [r3, #0]
 8003e80:	f7ff fbe6 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	441a      	add	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	60e3      	str	r3, [r4, #12]
        break;
 8003e9a:	e030      	b.n	8003efe <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003eaa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	6849      	ldr	r1, [r1, #4]
 8003eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	60d3      	str	r3, [r2, #12]
        break;
 8003eba:	e020      	b.n	8003efe <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681c      	ldr	r4, [r3, #0]
 8003ec0:	f7ff fb2e 	bl	8003520 <HAL_RCC_GetSysClockFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	441a      	add	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	60e3      	str	r3, [r4, #12]
        break;
 8003eda:	e010      	b.n	8003efe <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6852      	ldr	r2, [r2, #4]
 8003ee4:	0852      	lsrs	r2, r2, #1
 8003ee6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6852      	ldr	r2, [r2, #4]
 8003eee:	fbb1 f2f2 	udiv	r2, r1, r2
 8003ef2:	b292      	uxth	r2, r2
 8003ef4:	60da      	str	r2, [r3, #12]
        break;
 8003ef6:	e002      	b.n	8003efe <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	74fb      	strb	r3, [r7, #19]
        break;
 8003efc:	bf00      	nop
    }
  }

  return ret;
 8003efe:	7cfb      	ldrb	r3, [r7, #19]

}
 8003f00:	4618      	mov	r0, r3
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd90      	pop	{r4, r7, pc}
 8003f08:	efff69f3 	.word	0xefff69f3
 8003f0c:	40013800 	.word	0x40013800
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40004400 	.word	0x40004400
 8003f18:	40004800 	.word	0x40004800

08003f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	6852      	ldr	r2, [r2, #4]
 8003f3a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	6852      	ldr	r2, [r2, #4]
 8003f5c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	6852      	ldr	r2, [r2, #4]
 8003f7e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	6852      	ldr	r2, [r2, #4]
 8003fa0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	6892      	ldr	r2, [r2, #8]
 8003fc2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	6892      	ldr	r2, [r2, #8]
 8003fe4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fec:	430a      	orrs	r2, r1
 8003fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01a      	beq.n	8004032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	6852      	ldr	r2, [r2, #4]
 8004006:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800401a:	d10a      	bne.n	8004032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	6852      	ldr	r2, [r2, #4]
 8004026:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	6852      	ldr	r2, [r2, #4]
 8004048:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]
  }
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00c      	beq.n	8004096 <UART_CheckIdleState+0x36>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800407c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004080:	2200      	movs	r2, #0
 8004082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f82a 	bl	80040e0 <UART_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <UART_CheckIdleState+0x36>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e020      	b.n	80040d8 <UART_CheckIdleState+0x78>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00c      	beq.n	80040be <UART_CheckIdleState+0x5e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80040a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040a8:	2200      	movs	r2, #0
 80040aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f816 	bl	80040e0 <UART_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <UART_CheckIdleState+0x5e>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e00c      	b.n	80040d8 <UART_CheckIdleState+0x78>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 80040f0:	f7fc fd1a 	bl	8000b28 <HAL_GetTick>
 80040f4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f040 8084 	bne.w	8004206 <UART_WaitOnFlagUntilTimeout+0x126>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80040fe:	e03c      	b.n	800417a <UART_WaitOnFlagUntilTimeout+0x9a>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004106:	d038      	beq.n	800417a <UART_WaitOnFlagUntilTimeout+0x9a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0x3e>
 800410e:	f7fc fd0b 	bl	8000b28 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	1ad2      	subs	r2, r2, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d92d      	bls.n	800417a <UART_WaitOnFlagUntilTimeout+0x9a>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800412c:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	f022 0220 	bic.w	r2, r2, #32
 800413c:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800414c:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	6892      	ldr	r2, [r2, #8]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e04e      	b.n	8004218 <UART_WaitOnFlagUntilTimeout+0x138>
  uint32_t tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	401a      	ands	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	429a      	cmp	r2, r3
 8004188:	d1ba      	bne.n	8004100 <UART_WaitOnFlagUntilTimeout+0x20>
 800418a:	e044      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0x136>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	d038      	beq.n	8004206 <UART_WaitOnFlagUntilTimeout+0x126>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0xca>
 800419a:	f7fc fcc5 	bl	8000b28 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	1ad2      	subs	r2, r2, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d92d      	bls.n	8004206 <UART_WaitOnFlagUntilTimeout+0x126>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b8:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	f022 0220 	bic.w	r2, r2, #32
 80041c8:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d8:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	6892      	ldr	r2, [r2, #8]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e008      	b.n	8004218 <UART_WaitOnFlagUntilTimeout+0x138>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	401a      	ands	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	d0ba      	beq.n	800418c <UART_WaitOnFlagUntilTimeout+0xac>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	60fb      	str	r3, [r7, #12]
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d114      	bne.n	8004266 <UART_DMATransmitCplt+0x46>
  {  
    huart->TxXferCount = 0;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	6892      	ldr	r2, [r2, #8]
 800424e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004252:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004262:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8004264:	e002      	b.n	800426c <UART_DMATransmitCplt+0x4c>
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7fc fa26 	bl	80006b8 <HAL_UART_TxCpltCallback>
  }

}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f7ff fcd0 	bl	8003c28 <HAL_UART_TxHalfCpltCallback>
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->gState= HAL_UART_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c2:	f043 0210 	orr.w	r2, r3, #16
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7fc fa04 	bl	80006d8 <HAL_UART_ErrorCallback>
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b21      	cmp	r3, #33	; 0x21
 80042ea:	d144      	bne.n	8004376 <UART_Transmit_IT+0x9e>
  {

    if(huart->TxXferCount == 0)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d111      	bne.n	800431a <UART_Transmit_IT+0x42>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004304:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004314:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e02e      	b.n	8004378 <UART_Transmit_IT+0xa0>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004322:	d114      	bne.n	800434e <UART_Transmit_IT+0x76>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d110      	bne.n	800434e <UART_Transmit_IT+0x76>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004330:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	8812      	ldrh	r2, [r2, #0]
 800433a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800433e:	b292      	uxth	r2, r2
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	1c9a      	adds	r2, r3, #2
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	64da      	str	r2, [r3, #76]	; 0x4c
 800434c:	e009      	b.n	8004362 <UART_Transmit_IT+0x8a>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	1c58      	adds	r0, r3, #1
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	64c8      	str	r0, [r1, #76]	; 0x4c
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e000      	b.n	8004378 <UART_Transmit_IT+0xa0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7fc f987 	bl	80006b8 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043c2:	81fb      	strh	r3, [r7, #14]

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b22      	cmp	r3, #34	; 0x22
 80043ce:	d159      	bne.n	8004484 <UART_Receive_IT+0xd0>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d8:	d115      	bne.n	8004406 <UART_Receive_IT+0x52>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d111      	bne.n	8004406 <UART_Receive_IT+0x52>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	89fb      	ldrh	r3, [r7, #14]
 80043f2:	4013      	ands	r3, r2
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	1c9a      	adds	r2, r3, #2
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	655a      	str	r2, [r3, #84]	; 0x54
 8004404:	e00e      	b.n	8004424 <UART_Receive_IT+0x70>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	1c59      	adds	r1, r3, #1
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6551      	str	r1, [r2, #84]	; 0x54
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004416:	b292      	uxth	r2, r2
 8004418:	b2d1      	uxtb	r1, r2
 800441a:	89fa      	ldrh	r2, [r7, #14]
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	400a      	ands	r2, r1
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800443a:	2b00      	cmp	r3, #0
 800443c:	d120      	bne.n	8004480 <UART_Receive_IT+0xcc>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	f022 0220 	bic.w	r2, r2, #32
 800444c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800445c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	6892      	ldr	r2, [r2, #8]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fbe0 	bl	8003c3c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e00a      	b.n	8004496 <UART_Receive_IT+0xe2>
    }

    return HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	e008      	b.n	8004496 <UART_Receive_IT+0xe2>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	6992      	ldr	r2, [r2, #24]
 800448e:	f042 0208 	orr.w	r2, r2, #8
 8004492:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop

080044a0 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback
  * @param  huart: UART handle
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <_init>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	bf00      	nop
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr

080044c0 <_fini>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	bf00      	nop
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr
