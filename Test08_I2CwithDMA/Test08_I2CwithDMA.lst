
Test08_I2CwithDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009810  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080099d0  080099d0  000199d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009bd8  08009bd8  00019bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08009be0  08009be0  00019be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009be8  08009be8  00019be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000878  20000000  08009bec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020878  2**0
                  CONTENTS
  8 .bss          000005cc  20000878  20000878  00020878  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20000e44  20000e44  00020878  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020878  2**0
                  CONTENTS, READONLY
 11 .debug_line   00004ed7  00000000  00000000  000208a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000b0ab  00000000  00000000  0002577f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018de  00000000  00000000  0003082a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000938  00000000  00000000  00032108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000850  00000000  00000000  00032a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004d66  00000000  00000000  00033290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002f66  00000000  00000000  00037ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000006e  00000000  00000000  0003af5c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002b98  00000000  00000000  0003afcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c2:	4805      	ldr	r0, [pc, #20]	; (80001d8 <deregister_tm_clones+0x18>)
 80001c4:	1a1b      	subs	r3, r3, r0
 80001c6:	2b06      	cmp	r3, #6
 80001c8:	d902      	bls.n	80001d0 <deregister_tm_clones+0x10>
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <deregister_tm_clones+0x1c>)
 80001cc:	b103      	cbz	r3, 80001d0 <deregister_tm_clones+0x10>
 80001ce:	4718      	bx	r3
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	2000087b 	.word	0x2000087b
 80001d8:	20000878 	.word	0x20000878
 80001dc:	00000000 	.word	0x00000000

080001e0 <register_tm_clones>:
 80001e0:	4905      	ldr	r1, [pc, #20]	; (80001f8 <register_tm_clones+0x18>)
 80001e2:	4806      	ldr	r0, [pc, #24]	; (80001fc <register_tm_clones+0x1c>)
 80001e4:	1a09      	subs	r1, r1, r0
 80001e6:	1089      	asrs	r1, r1, #2
 80001e8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001ec:	1049      	asrs	r1, r1, #1
 80001ee:	d002      	beq.n	80001f6 <register_tm_clones+0x16>
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <register_tm_clones+0x20>)
 80001f2:	b103      	cbz	r3, 80001f6 <register_tm_clones+0x16>
 80001f4:	4718      	bx	r3
 80001f6:	4770      	bx	lr
 80001f8:	20000878 	.word	0x20000878
 80001fc:	20000878 	.word	0x20000878
 8000200:	00000000 	.word	0x00000000

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c06      	ldr	r4, [pc, #24]	; (8000220 <__do_global_dtors_aux+0x1c>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b943      	cbnz	r3, 800021e <__do_global_dtors_aux+0x1a>
 800020c:	f7ff ffd8 	bl	80001c0 <deregister_tm_clones>
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	b113      	cbz	r3, 800021a <__do_global_dtors_aux+0x16>
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <__do_global_dtors_aux+0x24>)
 8000216:	f3af 8000 	nop.w
 800021a:	2301      	movs	r3, #1
 800021c:	7023      	strb	r3, [r4, #0]
 800021e:	bd10      	pop	{r4, pc}
 8000220:	20000878 	.word	0x20000878
 8000224:	00000000 	.word	0x00000000
 8000228:	080099b8 	.word	0x080099b8

0800022c <frame_dummy>:
 800022c:	b508      	push	{r3, lr}
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <frame_dummy+0x24>)
 8000230:	b11b      	cbz	r3, 800023a <frame_dummy+0xe>
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <frame_dummy+0x28>)
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <frame_dummy+0x2c>)
 8000236:	f3af 8000 	nop.w
 800023a:	4808      	ldr	r0, [pc, #32]	; (800025c <frame_dummy+0x30>)
 800023c:	6803      	ldr	r3, [r0, #0]
 800023e:	b913      	cbnz	r3, 8000246 <frame_dummy+0x1a>
 8000240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000244:	e7cc      	b.n	80001e0 <register_tm_clones>
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <frame_dummy+0x34>)
 8000248:	2b00      	cmp	r3, #0
 800024a:	d0f9      	beq.n	8000240 <frame_dummy+0x14>
 800024c:	4798      	blx	r3
 800024e:	e7f7      	b.n	8000240 <frame_dummy+0x14>
 8000250:	00000000 	.word	0x00000000
 8000254:	2000087c 	.word	0x2000087c
 8000258:	080099b8 	.word	0x080099b8
 800025c:	20000878 	.word	0x20000878
 8000260:	00000000 	.word	0x00000000

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a2:	f1a4 0401 	sub.w	r4, r4, #1
 80003a6:	d1e9      	bne.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f092 0f00 	teq	r2, #0
 800054e:	bf14      	ite	ne
 8000550:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 7460 	mov.w	r4, #896	; 0x380
 800055c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000560:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000564:	e720      	b.n	80003a8 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_ul2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f04f 0500 	mov.w	r5, #0
 8000576:	e00a      	b.n	800058e <__aeabi_l2d+0x16>

08000578 <__aeabi_l2d>:
 8000578:	ea50 0201 	orrs.w	r2, r0, r1
 800057c:	bf08      	it	eq
 800057e:	4770      	bxeq	lr
 8000580:	b530      	push	{r4, r5, lr}
 8000582:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000586:	d502      	bpl.n	800058e <__aeabi_l2d+0x16>
 8000588:	4240      	negs	r0, r0
 800058a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800058e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000592:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000596:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800059a:	f43f aedc 	beq.w	8000356 <__adddf3+0xe6>
 800059e:	f04f 0203 	mov.w	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005b6:	f1c2 0320 	rsb	r3, r2, #32
 80005ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005c6:	ea40 000e 	orr.w	r0, r0, lr
 80005ca:	fa21 f102 	lsr.w	r1, r1, r2
 80005ce:	4414      	add	r4, r2
 80005d0:	e6c1      	b.n	8000356 <__adddf3+0xe6>
 80005d2:	bf00      	nop

080005d4 <memcpy>:
 80005d4:	4684      	mov	ip, r0
 80005d6:	ea41 0300 	orr.w	r3, r1, r0
 80005da:	f013 0303 	ands.w	r3, r3, #3
 80005de:	d16d      	bne.n	80006bc <memcpy+0xe8>
 80005e0:	3a40      	subs	r2, #64	; 0x40
 80005e2:	d341      	bcc.n	8000668 <memcpy+0x94>
 80005e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80005e8:	f840 3b04 	str.w	r3, [r0], #4
 80005ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80005f0:	f840 3b04 	str.w	r3, [r0], #4
 80005f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80005f8:	f840 3b04 	str.w	r3, [r0], #4
 80005fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000600:	f840 3b04 	str.w	r3, [r0], #4
 8000604:	f851 3b04 	ldr.w	r3, [r1], #4
 8000608:	f840 3b04 	str.w	r3, [r0], #4
 800060c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000610:	f840 3b04 	str.w	r3, [r0], #4
 8000614:	f851 3b04 	ldr.w	r3, [r1], #4
 8000618:	f840 3b04 	str.w	r3, [r0], #4
 800061c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000620:	f840 3b04 	str.w	r3, [r0], #4
 8000624:	f851 3b04 	ldr.w	r3, [r1], #4
 8000628:	f840 3b04 	str.w	r3, [r0], #4
 800062c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000630:	f840 3b04 	str.w	r3, [r0], #4
 8000634:	f851 3b04 	ldr.w	r3, [r1], #4
 8000638:	f840 3b04 	str.w	r3, [r0], #4
 800063c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000640:	f840 3b04 	str.w	r3, [r0], #4
 8000644:	f851 3b04 	ldr.w	r3, [r1], #4
 8000648:	f840 3b04 	str.w	r3, [r0], #4
 800064c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000650:	f840 3b04 	str.w	r3, [r0], #4
 8000654:	f851 3b04 	ldr.w	r3, [r1], #4
 8000658:	f840 3b04 	str.w	r3, [r0], #4
 800065c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000660:	f840 3b04 	str.w	r3, [r0], #4
 8000664:	3a40      	subs	r2, #64	; 0x40
 8000666:	d2bd      	bcs.n	80005e4 <memcpy+0x10>
 8000668:	3230      	adds	r2, #48	; 0x30
 800066a:	d311      	bcc.n	8000690 <memcpy+0xbc>
 800066c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000670:	f840 3b04 	str.w	r3, [r0], #4
 8000674:	f851 3b04 	ldr.w	r3, [r1], #4
 8000678:	f840 3b04 	str.w	r3, [r0], #4
 800067c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000680:	f840 3b04 	str.w	r3, [r0], #4
 8000684:	f851 3b04 	ldr.w	r3, [r1], #4
 8000688:	f840 3b04 	str.w	r3, [r0], #4
 800068c:	3a10      	subs	r2, #16
 800068e:	d2ed      	bcs.n	800066c <memcpy+0x98>
 8000690:	320c      	adds	r2, #12
 8000692:	d305      	bcc.n	80006a0 <memcpy+0xcc>
 8000694:	f851 3b04 	ldr.w	r3, [r1], #4
 8000698:	f840 3b04 	str.w	r3, [r0], #4
 800069c:	3a04      	subs	r2, #4
 800069e:	d2f9      	bcs.n	8000694 <memcpy+0xc0>
 80006a0:	3204      	adds	r2, #4
 80006a2:	d008      	beq.n	80006b6 <memcpy+0xe2>
 80006a4:	07d2      	lsls	r2, r2, #31
 80006a6:	bf1c      	itt	ne
 80006a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80006ac:	f800 3b01 	strbne.w	r3, [r0], #1
 80006b0:	d301      	bcc.n	80006b6 <memcpy+0xe2>
 80006b2:	880b      	ldrh	r3, [r1, #0]
 80006b4:	8003      	strh	r3, [r0, #0]
 80006b6:	4660      	mov	r0, ip
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	2a08      	cmp	r2, #8
 80006be:	d313      	bcc.n	80006e8 <memcpy+0x114>
 80006c0:	078b      	lsls	r3, r1, #30
 80006c2:	d08d      	beq.n	80005e0 <memcpy+0xc>
 80006c4:	f010 0303 	ands.w	r3, r0, #3
 80006c8:	d08a      	beq.n	80005e0 <memcpy+0xc>
 80006ca:	f1c3 0304 	rsb	r3, r3, #4
 80006ce:	1ad2      	subs	r2, r2, r3
 80006d0:	07db      	lsls	r3, r3, #31
 80006d2:	bf1c      	itt	ne
 80006d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80006d8:	f800 3b01 	strbne.w	r3, [r0], #1
 80006dc:	d380      	bcc.n	80005e0 <memcpy+0xc>
 80006de:	f831 3b02 	ldrh.w	r3, [r1], #2
 80006e2:	f820 3b02 	strh.w	r3, [r0], #2
 80006e6:	e77b      	b.n	80005e0 <memcpy+0xc>
 80006e8:	3a04      	subs	r2, #4
 80006ea:	d3d9      	bcc.n	80006a0 <memcpy+0xcc>
 80006ec:	3a01      	subs	r2, #1
 80006ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80006f2:	f800 3b01 	strb.w	r3, [r0], #1
 80006f6:	d2f9      	bcs.n	80006ec <memcpy+0x118>
 80006f8:	780b      	ldrb	r3, [r1, #0]
 80006fa:	7003      	strb	r3, [r0, #0]
 80006fc:	784b      	ldrb	r3, [r1, #1]
 80006fe:	7043      	strb	r3, [r0, #1]
 8000700:	788b      	ldrb	r3, [r1, #2]
 8000702:	7083      	strb	r3, [r0, #2]
 8000704:	4660      	mov	r0, ip
 8000706:	4770      	bx	lr
	...

08000710 <memchr>:
 8000710:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000714:	2a10      	cmp	r2, #16
 8000716:	db2b      	blt.n	8000770 <memchr+0x60>
 8000718:	f010 0f07 	tst.w	r0, #7
 800071c:	d008      	beq.n	8000730 <memchr+0x20>
 800071e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000722:	3a01      	subs	r2, #1
 8000724:	428b      	cmp	r3, r1
 8000726:	d02d      	beq.n	8000784 <memchr+0x74>
 8000728:	f010 0f07 	tst.w	r0, #7
 800072c:	b342      	cbz	r2, 8000780 <memchr+0x70>
 800072e:	d1f6      	bne.n	800071e <memchr+0xe>
 8000730:	b4f0      	push	{r4, r5, r6, r7}
 8000732:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000736:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800073a:	f022 0407 	bic.w	r4, r2, #7
 800073e:	f07f 0700 	mvns.w	r7, #0
 8000742:	2300      	movs	r3, #0
 8000744:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000748:	3c08      	subs	r4, #8
 800074a:	ea85 0501 	eor.w	r5, r5, r1
 800074e:	ea86 0601 	eor.w	r6, r6, r1
 8000752:	fa85 f547 	uadd8	r5, r5, r7
 8000756:	faa3 f587 	sel	r5, r3, r7
 800075a:	fa86 f647 	uadd8	r6, r6, r7
 800075e:	faa5 f687 	sel	r6, r5, r7
 8000762:	b98e      	cbnz	r6, 8000788 <memchr+0x78>
 8000764:	d1ee      	bne.n	8000744 <memchr+0x34>
 8000766:	bcf0      	pop	{r4, r5, r6, r7}
 8000768:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800076c:	f002 0207 	and.w	r2, r2, #7
 8000770:	b132      	cbz	r2, 8000780 <memchr+0x70>
 8000772:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000776:	3a01      	subs	r2, #1
 8000778:	ea83 0301 	eor.w	r3, r3, r1
 800077c:	b113      	cbz	r3, 8000784 <memchr+0x74>
 800077e:	d1f8      	bne.n	8000772 <memchr+0x62>
 8000780:	2000      	movs	r0, #0
 8000782:	4770      	bx	lr
 8000784:	3801      	subs	r0, #1
 8000786:	4770      	bx	lr
 8000788:	2d00      	cmp	r5, #0
 800078a:	bf06      	itte	eq
 800078c:	4635      	moveq	r5, r6
 800078e:	3803      	subeq	r0, #3
 8000790:	3807      	subne	r0, #7
 8000792:	f015 0f01 	tst.w	r5, #1
 8000796:	d107      	bne.n	80007a8 <memchr+0x98>
 8000798:	3001      	adds	r0, #1
 800079a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800079e:	bf02      	ittt	eq
 80007a0:	3001      	addeq	r0, #1
 80007a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80007a6:	3001      	addeq	r0, #1
 80007a8:	bcf0      	pop	{r4, r5, r6, r7}
 80007aa:	3801      	subs	r0, #1
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
	...

080007c0 <strlen>:
 80007c0:	f890 f000 	pld	[r0]
 80007c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 80007c8:	f020 0107 	bic.w	r1, r0, #7
 80007cc:	f06f 0c00 	mvn.w	ip, #0
 80007d0:	f010 0407 	ands.w	r4, r0, #7
 80007d4:	f891 f020 	pld	[r1, #32]
 80007d8:	f040 8049 	bne.w	800086e <strlen+0xae>
 80007dc:	f04f 0400 	mov.w	r4, #0
 80007e0:	f06f 0007 	mvn.w	r0, #7
 80007e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007e8:	f891 f040 	pld	[r1, #64]	; 0x40
 80007ec:	f100 0008 	add.w	r0, r0, #8
 80007f0:	fa82 f24c 	uadd8	r2, r2, ip
 80007f4:	faa4 f28c 	sel	r2, r4, ip
 80007f8:	fa83 f34c 	uadd8	r3, r3, ip
 80007fc:	faa2 f38c 	sel	r3, r2, ip
 8000800:	bb4b      	cbnz	r3, 8000856 <strlen+0x96>
 8000802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000806:	fa82 f24c 	uadd8	r2, r2, ip
 800080a:	f100 0008 	add.w	r0, r0, #8
 800080e:	faa4 f28c 	sel	r2, r4, ip
 8000812:	fa83 f34c 	uadd8	r3, r3, ip
 8000816:	faa2 f38c 	sel	r3, r2, ip
 800081a:	b9e3      	cbnz	r3, 8000856 <strlen+0x96>
 800081c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000820:	fa82 f24c 	uadd8	r2, r2, ip
 8000824:	f100 0008 	add.w	r0, r0, #8
 8000828:	faa4 f28c 	sel	r2, r4, ip
 800082c:	fa83 f34c 	uadd8	r3, r3, ip
 8000830:	faa2 f38c 	sel	r3, r2, ip
 8000834:	b97b      	cbnz	r3, 8000856 <strlen+0x96>
 8000836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800083a:	f101 0120 	add.w	r1, r1, #32
 800083e:	fa82 f24c 	uadd8	r2, r2, ip
 8000842:	f100 0008 	add.w	r0, r0, #8
 8000846:	faa4 f28c 	sel	r2, r4, ip
 800084a:	fa83 f34c 	uadd8	r3, r3, ip
 800084e:	faa2 f38c 	sel	r3, r2, ip
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0c6      	beq.n	80007e4 <strlen+0x24>
 8000856:	2a00      	cmp	r2, #0
 8000858:	bf04      	itt	eq
 800085a:	3004      	addeq	r0, #4
 800085c:	461a      	moveq	r2, r3
 800085e:	ba12      	rev	r2, r2
 8000860:	fab2 f282 	clz	r2, r2
 8000864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800086c:	4770      	bx	lr
 800086e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000872:	f004 0503 	and.w	r5, r4, #3
 8000876:	f1c4 0000 	rsb	r0, r4, #0
 800087a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800087e:	f014 0f04 	tst.w	r4, #4
 8000882:	f891 f040 	pld	[r1, #64]	; 0x40
 8000886:	fa0c f505 	lsl.w	r5, ip, r5
 800088a:	ea62 0205 	orn	r2, r2, r5
 800088e:	bf1c      	itt	ne
 8000890:	ea63 0305 	ornne	r3, r3, r5
 8000894:	4662      	movne	r2, ip
 8000896:	f04f 0400 	mov.w	r4, #0
 800089a:	e7a9      	b.n	80007f0 <strlen+0x30>

0800089c <__aeabi_dmul>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8de 	bleq	8000a78 <__aeabi_dmul+0x1dc>
 80008bc:	442c      	add	r4, r5
 80008be:	ea81 0603 	eor.w	r6, r1, r3
 80008c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008ce:	bf18      	it	ne
 80008d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008dc:	d038      	beq.n	8000950 <__aeabi_dmul+0xb4>
 80008de:	fba0 ce02 	umull	ip, lr, r0, r2
 80008e2:	f04f 0500 	mov.w	r5, #0
 80008e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008f2:	f04f 0600 	mov.w	r6, #0
 80008f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008fa:	f09c 0f00 	teq	ip, #0
 80008fe:	bf18      	it	ne
 8000900:	f04e 0e01 	orrne.w	lr, lr, #1
 8000904:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000908:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800090c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000910:	d204      	bcs.n	800091c <__aeabi_dmul+0x80>
 8000912:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000916:	416d      	adcs	r5, r5
 8000918:	eb46 0606 	adc.w	r6, r6, r6
 800091c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000920:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000924:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000928:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800092c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000930:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000934:	bf88      	it	hi
 8000936:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800093a:	d81e      	bhi.n	800097a <__aeabi_dmul+0xde>
 800093c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000940:	bf08      	it	eq
 8000942:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000954:	ea46 0101 	orr.w	r1, r6, r1
 8000958:	ea40 0002 	orr.w	r0, r0, r2
 800095c:	ea81 0103 	eor.w	r1, r1, r3
 8000960:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	f300 80ab 	bgt.w	8000ad4 <__aeabi_dmul+0x238>
 800097e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000982:	bfde      	ittt	le
 8000984:	2000      	movle	r0, #0
 8000986:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800098a:	bd70      	pople	{r4, r5, r6, pc}
 800098c:	f1c4 0400 	rsb	r4, r4, #0
 8000990:	3c20      	subs	r4, #32
 8000992:	da35      	bge.n	8000a00 <__aeabi_dmul+0x164>
 8000994:	340c      	adds	r4, #12
 8000996:	dc1b      	bgt.n	80009d0 <__aeabi_dmul+0x134>
 8000998:	f104 0414 	add.w	r4, r4, #20
 800099c:	f1c4 0520 	rsb	r5, r4, #32
 80009a0:	fa00 f305 	lsl.w	r3, r0, r5
 80009a4:	fa20 f004 	lsr.w	r0, r0, r4
 80009a8:	fa01 f205 	lsl.w	r2, r1, r5
 80009ac:	ea40 0002 	orr.w	r0, r0, r2
 80009b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80009b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009bc:	fa21 f604 	lsr.w	r6, r1, r4
 80009c0:	eb42 0106 	adc.w	r1, r2, r6
 80009c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009c8:	bf08      	it	eq
 80009ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f1c4 040c 	rsb	r4, r4, #12
 80009d4:	f1c4 0520 	rsb	r5, r4, #32
 80009d8:	fa00 f304 	lsl.w	r3, r0, r4
 80009dc:	fa20 f005 	lsr.w	r0, r0, r5
 80009e0:	fa01 f204 	lsl.w	r2, r1, r4
 80009e4:	ea40 0002 	orr.w	r0, r0, r2
 80009e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009f0:	f141 0100 	adc.w	r1, r1, #0
 80009f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009f8:	bf08      	it	eq
 80009fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f1c4 0520 	rsb	r5, r4, #32
 8000a04:	fa00 f205 	lsl.w	r2, r0, r5
 8000a08:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a0c:	fa20 f304 	lsr.w	r3, r0, r4
 8000a10:	fa01 f205 	lsl.w	r2, r1, r5
 8000a14:	ea43 0302 	orr.w	r3, r3, r2
 8000a18:	fa21 f004 	lsr.w	r0, r1, r4
 8000a1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a20:	fa21 f204 	lsr.w	r2, r1, r4
 8000a24:	ea20 0002 	bic.w	r0, r0, r2
 8000a28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a30:	bf08      	it	eq
 8000a32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a36:	bd70      	pop	{r4, r5, r6, pc}
 8000a38:	f094 0f00 	teq	r4, #0
 8000a3c:	d10f      	bne.n	8000a5e <__aeabi_dmul+0x1c2>
 8000a3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a42:	0040      	lsls	r0, r0, #1
 8000a44:	eb41 0101 	adc.w	r1, r1, r1
 8000a48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a4c:	bf08      	it	eq
 8000a4e:	3c01      	subeq	r4, #1
 8000a50:	d0f7      	beq.n	8000a42 <__aeabi_dmul+0x1a6>
 8000a52:	ea41 0106 	orr.w	r1, r1, r6
 8000a56:	f095 0f00 	teq	r5, #0
 8000a5a:	bf18      	it	ne
 8000a5c:	4770      	bxne	lr
 8000a5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a62:	0052      	lsls	r2, r2, #1
 8000a64:	eb43 0303 	adc.w	r3, r3, r3
 8000a68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a6c:	bf08      	it	eq
 8000a6e:	3d01      	subeq	r5, #1
 8000a70:	d0f7      	beq.n	8000a62 <__aeabi_dmul+0x1c6>
 8000a72:	ea43 0306 	orr.w	r3, r3, r6
 8000a76:	4770      	bx	lr
 8000a78:	ea94 0f0c 	teq	r4, ip
 8000a7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a80:	bf18      	it	ne
 8000a82:	ea95 0f0c 	teqne	r5, ip
 8000a86:	d00c      	beq.n	8000aa2 <__aeabi_dmul+0x206>
 8000a88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a8c:	bf18      	it	ne
 8000a8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a92:	d1d1      	bne.n	8000a38 <__aeabi_dmul+0x19c>
 8000a94:	ea81 0103 	eor.w	r1, r1, r3
 8000a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
 8000aa2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa6:	bf06      	itte	eq
 8000aa8:	4610      	moveq	r0, r2
 8000aaa:	4619      	moveq	r1, r3
 8000aac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab0:	d019      	beq.n	8000ae6 <__aeabi_dmul+0x24a>
 8000ab2:	ea94 0f0c 	teq	r4, ip
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dmul+0x222>
 8000ab8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000abc:	d113      	bne.n	8000ae6 <__aeabi_dmul+0x24a>
 8000abe:	ea95 0f0c 	teq	r5, ip
 8000ac2:	d105      	bne.n	8000ad0 <__aeabi_dmul+0x234>
 8000ac4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000ac8:	bf1c      	itt	ne
 8000aca:	4610      	movne	r0, r2
 8000acc:	4619      	movne	r1, r3
 8000ace:	d10a      	bne.n	8000ae6 <__aeabi_dmul+0x24a>
 8000ad0:	ea81 0103 	eor.w	r1, r1, r3
 8000ad4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ad8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000adc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	bd70      	pop	{r4, r5, r6, pc}
 8000ae6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000aee:	bd70      	pop	{r4, r5, r6, pc}

08000af0 <__aeabi_ddiv>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000af6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000afa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000afe:	bf1d      	ittte	ne
 8000b00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b04:	ea94 0f0c 	teqne	r4, ip
 8000b08:	ea95 0f0c 	teqne	r5, ip
 8000b0c:	f000 f8a7 	bleq	8000c5e <__aeabi_ddiv+0x16e>
 8000b10:	eba4 0405 	sub.w	r4, r4, r5
 8000b14:	ea81 0e03 	eor.w	lr, r1, r3
 8000b18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b20:	f000 8088 	beq.w	8000c34 <__aeabi_ddiv+0x144>
 8000b24:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b34:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b40:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b48:	429d      	cmp	r5, r3
 8000b4a:	bf08      	it	eq
 8000b4c:	4296      	cmpeq	r6, r2
 8000b4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b52:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b56:	d202      	bcs.n	8000b5e <__aeabi_ddiv+0x6e>
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b5e:	1ab6      	subs	r6, r6, r2
 8000b60:	eb65 0503 	sbc.w	r5, r5, r3
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b72:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b76:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b7a:	bf22      	ittt	cs
 8000b7c:	1ab6      	subcs	r6, r6, r2
 8000b7e:	4675      	movcs	r5, lr
 8000b80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b92:	bf22      	ittt	cs
 8000b94:	1ab6      	subcs	r6, r6, r2
 8000b96:	4675      	movcs	r5, lr
 8000b98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9c:	085b      	lsrs	r3, r3, #1
 8000b9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ba2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ba6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000baa:	bf22      	ittt	cs
 8000bac:	1ab6      	subcs	r6, r6, r2
 8000bae:	4675      	movcs	r5, lr
 8000bb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bb4:	085b      	lsrs	r3, r3, #1
 8000bb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bba:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bc2:	bf22      	ittt	cs
 8000bc4:	1ab6      	subcs	r6, r6, r2
 8000bc6:	4675      	movcs	r5, lr
 8000bc8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bcc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bd0:	d018      	beq.n	8000c04 <__aeabi_ddiv+0x114>
 8000bd2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000bd6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bda:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000be2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000be6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bee:	d1c0      	bne.n	8000b72 <__aeabi_ddiv+0x82>
 8000bf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bf4:	d10b      	bne.n	8000c0e <__aeabi_ddiv+0x11e>
 8000bf6:	ea41 0100 	orr.w	r1, r1, r0
 8000bfa:	f04f 0000 	mov.w	r0, #0
 8000bfe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000c02:	e7b6      	b.n	8000b72 <__aeabi_ddiv+0x82>
 8000c04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c08:	bf04      	itt	eq
 8000c0a:	4301      	orreq	r1, r0
 8000c0c:	2000      	moveq	r0, #0
 8000c0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c12:	bf88      	it	hi
 8000c14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c18:	f63f aeaf 	bhi.w	800097a <__aeabi_dmul+0xde>
 8000c1c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c20:	bf04      	itt	eq
 8000c22:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c2a:	f150 0000 	adcs.w	r0, r0, #0
 8000c2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c32:	bd70      	pop	{r4, r5, r6, pc}
 8000c34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c40:	bfc2      	ittt	gt
 8000c42:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c4a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c50:	f04f 0e00 	mov.w	lr, #0
 8000c54:	3c01      	subs	r4, #1
 8000c56:	e690      	b.n	800097a <__aeabi_dmul+0xde>
 8000c58:	ea45 0e06 	orr.w	lr, r5, r6
 8000c5c:	e68d      	b.n	800097a <__aeabi_dmul+0xde>
 8000c5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c62:	ea94 0f0c 	teq	r4, ip
 8000c66:	bf08      	it	eq
 8000c68:	ea95 0f0c 	teqeq	r5, ip
 8000c6c:	f43f af3b 	beq.w	8000ae6 <__aeabi_dmul+0x24a>
 8000c70:	ea94 0f0c 	teq	r4, ip
 8000c74:	d10a      	bne.n	8000c8c <__aeabi_ddiv+0x19c>
 8000c76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c7a:	f47f af34 	bne.w	8000ae6 <__aeabi_dmul+0x24a>
 8000c7e:	ea95 0f0c 	teq	r5, ip
 8000c82:	f47f af25 	bne.w	8000ad0 <__aeabi_dmul+0x234>
 8000c86:	4610      	mov	r0, r2
 8000c88:	4619      	mov	r1, r3
 8000c8a:	e72c      	b.n	8000ae6 <__aeabi_dmul+0x24a>
 8000c8c:	ea95 0f0c 	teq	r5, ip
 8000c90:	d106      	bne.n	8000ca0 <__aeabi_ddiv+0x1b0>
 8000c92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c96:	f43f aefd 	beq.w	8000a94 <__aeabi_dmul+0x1f8>
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	e722      	b.n	8000ae6 <__aeabi_dmul+0x24a>
 8000ca0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ca4:	bf18      	it	ne
 8000ca6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000caa:	f47f aec5 	bne.w	8000a38 <__aeabi_dmul+0x19c>
 8000cae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000cb2:	f47f af0d 	bne.w	8000ad0 <__aeabi_dmul+0x234>
 8000cb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000cba:	f47f aeeb 	bne.w	8000a94 <__aeabi_dmul+0x1f8>
 8000cbe:	e712      	b.n	8000ae6 <__aeabi_dmul+0x24a>

08000cc0 <__gedf2>:
 8000cc0:	f04f 3cff 	mov.w	ip, #4294967295
 8000cc4:	e006      	b.n	8000cd4 <__cmpdf2+0x4>
 8000cc6:	bf00      	nop

08000cc8 <__ledf2>:
 8000cc8:	f04f 0c01 	mov.w	ip, #1
 8000ccc:	e002      	b.n	8000cd4 <__cmpdf2+0x4>
 8000cce:	bf00      	nop

08000cd0 <__cmpdf2>:
 8000cd0:	f04f 0c01 	mov.w	ip, #1
 8000cd4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ce0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ce4:	bf18      	it	ne
 8000ce6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cea:	d01b      	beq.n	8000d24 <__cmpdf2+0x54>
 8000cec:	b001      	add	sp, #4
 8000cee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cf2:	bf0c      	ite	eq
 8000cf4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cf8:	ea91 0f03 	teqne	r1, r3
 8000cfc:	bf02      	ittt	eq
 8000cfe:	ea90 0f02 	teqeq	r0, r2
 8000d02:	2000      	moveq	r0, #0
 8000d04:	4770      	bxeq	lr
 8000d06:	f110 0f00 	cmn.w	r0, #0
 8000d0a:	ea91 0f03 	teq	r1, r3
 8000d0e:	bf58      	it	pl
 8000d10:	4299      	cmppl	r1, r3
 8000d12:	bf08      	it	eq
 8000d14:	4290      	cmpeq	r0, r2
 8000d16:	bf2c      	ite	cs
 8000d18:	17d8      	asrcs	r0, r3, #31
 8000d1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d1e:	f040 0001 	orr.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d2c:	d102      	bne.n	8000d34 <__cmpdf2+0x64>
 8000d2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d32:	d107      	bne.n	8000d44 <__cmpdf2+0x74>
 8000d34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d3c:	d1d6      	bne.n	8000cec <__cmpdf2+0x1c>
 8000d3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d42:	d0d3      	beq.n	8000cec <__cmpdf2+0x1c>
 8000d44:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <__aeabi_cdrcmple>:
 8000d4c:	4684      	mov	ip, r0
 8000d4e:	4610      	mov	r0, r2
 8000d50:	4662      	mov	r2, ip
 8000d52:	468c      	mov	ip, r1
 8000d54:	4619      	mov	r1, r3
 8000d56:	4663      	mov	r3, ip
 8000d58:	e000      	b.n	8000d5c <__aeabi_cdcmpeq>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_cdcmpeq>:
 8000d5c:	b501      	push	{r0, lr}
 8000d5e:	f7ff ffb7 	bl	8000cd0 <__cmpdf2>
 8000d62:	2800      	cmp	r0, #0
 8000d64:	bf48      	it	mi
 8000d66:	f110 0f00 	cmnmi.w	r0, #0
 8000d6a:	bd01      	pop	{r0, pc}

08000d6c <__aeabi_dcmpeq>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff fff4 	bl	8000d5c <__aeabi_cdcmpeq>
 8000d74:	bf0c      	ite	eq
 8000d76:	2001      	moveq	r0, #1
 8000d78:	2000      	movne	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_dcmplt>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffea 	bl	8000d5c <__aeabi_cdcmpeq>
 8000d88:	bf34      	ite	cc
 8000d8a:	2001      	movcc	r0, #1
 8000d8c:	2000      	movcs	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_dcmple>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffe0 	bl	8000d5c <__aeabi_cdcmpeq>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_dcmpge>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffce 	bl	8000d4c <__aeabi_cdrcmple>
 8000db0:	bf94      	ite	ls
 8000db2:	2001      	movls	r0, #1
 8000db4:	2000      	movhi	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_dcmpgt>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff ffc4 	bl	8000d4c <__aeabi_cdrcmple>
 8000dc4:	bf34      	ite	cc
 8000dc6:	2001      	movcc	r0, #1
 8000dc8:	2000      	movcs	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <__aeabi_d2iz>:
 8000dd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000dd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000dd8:	d215      	bcs.n	8000e06 <__aeabi_d2iz+0x36>
 8000dda:	d511      	bpl.n	8000e00 <__aeabi_d2iz+0x30>
 8000ddc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000de0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000de4:	d912      	bls.n	8000e0c <__aeabi_d2iz+0x3c>
 8000de6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000df2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000df6:	fa23 f002 	lsr.w	r0, r3, r2
 8000dfa:	bf18      	it	ne
 8000dfc:	4240      	negne	r0, r0
 8000dfe:	4770      	bx	lr
 8000e00:	f04f 0000 	mov.w	r0, #0
 8000e04:	4770      	bx	lr
 8000e06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e0a:	d105      	bne.n	8000e18 <__aeabi_d2iz+0x48>
 8000e0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e10:	bf08      	it	eq
 8000e12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e16:	4770      	bx	lr
 8000e18:	f04f 0000 	mov.w	r0, #0
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <__aeabi_uldivmod>:
 8000e20:	b953      	cbnz	r3, 8000e38 <__aeabi_uldivmod+0x18>
 8000e22:	b94a      	cbnz	r2, 8000e38 <__aeabi_uldivmod+0x18>
 8000e24:	2900      	cmp	r1, #0
 8000e26:	bf08      	it	eq
 8000e28:	2800      	cmpeq	r0, #0
 8000e2a:	bf1c      	itt	ne
 8000e2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e30:	f04f 30ff 	movne.w	r0, #4294967295
 8000e34:	f000 b97e 	b.w	8001134 <__aeabi_idiv0>
 8000e38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e40:	f000 f806 	bl	8000e50 <__udivmoddi4>
 8000e44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e4c:	b004      	add	sp, #16
 8000e4e:	4770      	bx	lr

08000e50 <__udivmoddi4>:
 8000e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e54:	468c      	mov	ip, r1
 8000e56:	460e      	mov	r6, r1
 8000e58:	4604      	mov	r4, r0
 8000e5a:	9d08      	ldr	r5, [sp, #32]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d150      	bne.n	8000f02 <__udivmoddi4+0xb2>
 8000e60:	428a      	cmp	r2, r1
 8000e62:	4617      	mov	r7, r2
 8000e64:	d96c      	bls.n	8000f40 <__udivmoddi4+0xf0>
 8000e66:	fab2 fe82 	clz	lr, r2
 8000e6a:	f1be 0f00 	cmp.w	lr, #0
 8000e6e:	d00b      	beq.n	8000e88 <__udivmoddi4+0x38>
 8000e70:	f1ce 0420 	rsb	r4, lr, #32
 8000e74:	fa20 f404 	lsr.w	r4, r0, r4
 8000e78:	fa01 f60e 	lsl.w	r6, r1, lr
 8000e7c:	ea44 0c06 	orr.w	ip, r4, r6
 8000e80:	fa02 f70e 	lsl.w	r7, r2, lr
 8000e84:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	0c22      	lsrs	r2, r4, #16
 8000e8e:	fbbc f0f9 	udiv	r0, ip, r9
 8000e92:	fa1f f887 	uxth.w	r8, r7
 8000e96:	fb09 c610 	mls	r6, r9, r0, ip
 8000e9a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000e9e:	fb00 f308 	mul.w	r3, r0, r8
 8000ea2:	42b3      	cmp	r3, r6
 8000ea4:	d909      	bls.n	8000eba <__udivmoddi4+0x6a>
 8000ea6:	19f6      	adds	r6, r6, r7
 8000ea8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eac:	f080 8122 	bcs.w	80010f4 <__udivmoddi4+0x2a4>
 8000eb0:	42b3      	cmp	r3, r6
 8000eb2:	f240 811f 	bls.w	80010f4 <__udivmoddi4+0x2a4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	443e      	add	r6, r7
 8000eba:	1af6      	subs	r6, r6, r3
 8000ebc:	b2a2      	uxth	r2, r4
 8000ebe:	fbb6 f3f9 	udiv	r3, r6, r9
 8000ec2:	fb09 6613 	mls	r6, r9, r3, r6
 8000ec6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000eca:	fb03 f808 	mul.w	r8, r3, r8
 8000ece:	45a0      	cmp	r8, r4
 8000ed0:	d909      	bls.n	8000ee6 <__udivmoddi4+0x96>
 8000ed2:	19e4      	adds	r4, r4, r7
 8000ed4:	f103 32ff 	add.w	r2, r3, #4294967295
 8000ed8:	f080 810a 	bcs.w	80010f0 <__udivmoddi4+0x2a0>
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	f240 8107 	bls.w	80010f0 <__udivmoddi4+0x2a0>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ebc8 0404 	rsb	r4, r8, r4
 8000eea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d062      	beq.n	8000fba <__udivmoddi4+0x16a>
 8000ef4:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ef8:	2300      	movs	r3, #0
 8000efa:	602c      	str	r4, [r5, #0]
 8000efc:	606b      	str	r3, [r5, #4]
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0xc6>
 8000f06:	2d00      	cmp	r5, #0
 8000f08:	d055      	beq.n	8000fb6 <__udivmoddi4+0x166>
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000f10:	4608      	mov	r0, r1
 8000f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f16:	fab3 f183 	clz	r1, r3
 8000f1a:	2900      	cmp	r1, #0
 8000f1c:	f040 8090 	bne.w	8001040 <__udivmoddi4+0x1f0>
 8000f20:	42b3      	cmp	r3, r6
 8000f22:	d302      	bcc.n	8000f2a <__udivmoddi4+0xda>
 8000f24:	4282      	cmp	r2, r0
 8000f26:	f200 80f8 	bhi.w	800111a <__udivmoddi4+0x2ca>
 8000f2a:	1a84      	subs	r4, r0, r2
 8000f2c:	eb66 0603 	sbc.w	r6, r6, r3
 8000f30:	2001      	movs	r0, #1
 8000f32:	46b4      	mov	ip, r6
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	d040      	beq.n	8000fba <__udivmoddi4+0x16a>
 8000f38:	e885 1010 	stmia.w	r5, {r4, ip}
 8000f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f40:	b912      	cbnz	r2, 8000f48 <__udivmoddi4+0xf8>
 8000f42:	2701      	movs	r7, #1
 8000f44:	fbb7 f7f2 	udiv	r7, r7, r2
 8000f48:	fab7 fe87 	clz	lr, r7
 8000f4c:	f1be 0f00 	cmp.w	lr, #0
 8000f50:	d135      	bne.n	8000fbe <__udivmoddi4+0x16e>
 8000f52:	1bf3      	subs	r3, r6, r7
 8000f54:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f58:	fa1f fc87 	uxth.w	ip, r7
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f62:	0c22      	lsrs	r2, r4, #16
 8000f64:	fb08 3610 	mls	r6, r8, r0, r3
 8000f68:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000f6c:	fb0c f300 	mul.w	r3, ip, r0
 8000f70:	42b3      	cmp	r3, r6
 8000f72:	d907      	bls.n	8000f84 <__udivmoddi4+0x134>
 8000f74:	19f6      	adds	r6, r6, r7
 8000f76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f7a:	d202      	bcs.n	8000f82 <__udivmoddi4+0x132>
 8000f7c:	42b3      	cmp	r3, r6
 8000f7e:	f200 80ce 	bhi.w	800111e <__udivmoddi4+0x2ce>
 8000f82:	4610      	mov	r0, r2
 8000f84:	1af6      	subs	r6, r6, r3
 8000f86:	b2a2      	uxth	r2, r4
 8000f88:	fbb6 f3f8 	udiv	r3, r6, r8
 8000f8c:	fb08 6613 	mls	r6, r8, r3, r6
 8000f90:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000f94:	fb0c fc03 	mul.w	ip, ip, r3
 8000f98:	45a4      	cmp	ip, r4
 8000f9a:	d907      	bls.n	8000fac <__udivmoddi4+0x15c>
 8000f9c:	19e4      	adds	r4, r4, r7
 8000f9e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000fa2:	d202      	bcs.n	8000faa <__udivmoddi4+0x15a>
 8000fa4:	45a4      	cmp	ip, r4
 8000fa6:	f200 80b5 	bhi.w	8001114 <__udivmoddi4+0x2c4>
 8000faa:	4613      	mov	r3, r2
 8000fac:	ebcc 0404 	rsb	r4, ip, r4
 8000fb0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fb4:	e79c      	b.n	8000ef0 <__udivmoddi4+0xa0>
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbe:	f1ce 0120 	rsb	r1, lr, #32
 8000fc2:	fa06 f30e 	lsl.w	r3, r6, lr
 8000fc6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000fca:	fa20 f901 	lsr.w	r9, r0, r1
 8000fce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000fd2:	40ce      	lsrs	r6, r1
 8000fd4:	ea49 0903 	orr.w	r9, r9, r3
 8000fd8:	fbb6 faf8 	udiv	sl, r6, r8
 8000fdc:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000fe0:	fb08 661a 	mls	r6, r8, sl, r6
 8000fe4:	fa1f fc87 	uxth.w	ip, r7
 8000fe8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000fec:	fb0a f20c 	mul.w	r2, sl, ip
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ff6:	d90a      	bls.n	800100e <__udivmoddi4+0x1be>
 8000ff8:	19db      	adds	r3, r3, r7
 8000ffa:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000ffe:	f080 8087 	bcs.w	8001110 <__udivmoddi4+0x2c0>
 8001002:	429a      	cmp	r2, r3
 8001004:	f240 8084 	bls.w	8001110 <__udivmoddi4+0x2c0>
 8001008:	f1aa 0a02 	sub.w	sl, sl, #2
 800100c:	443b      	add	r3, r7
 800100e:	1a9b      	subs	r3, r3, r2
 8001010:	fa1f f989 	uxth.w	r9, r9
 8001014:	fbb3 f1f8 	udiv	r1, r3, r8
 8001018:	fb08 3311 	mls	r3, r8, r1, r3
 800101c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8001020:	fb01 f60c 	mul.w	r6, r1, ip
 8001024:	429e      	cmp	r6, r3
 8001026:	d907      	bls.n	8001038 <__udivmoddi4+0x1e8>
 8001028:	19db      	adds	r3, r3, r7
 800102a:	f101 32ff 	add.w	r2, r1, #4294967295
 800102e:	d26b      	bcs.n	8001108 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d969      	bls.n	8001108 <__udivmoddi4+0x2b8>
 8001034:	3902      	subs	r1, #2
 8001036:	443b      	add	r3, r7
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800103e:	e78e      	b.n	8000f5e <__udivmoddi4+0x10e>
 8001040:	f1c1 0e20 	rsb	lr, r1, #32
 8001044:	fa22 f40e 	lsr.w	r4, r2, lr
 8001048:	408b      	lsls	r3, r1
 800104a:	4323      	orrs	r3, r4
 800104c:	fa20 f70e 	lsr.w	r7, r0, lr
 8001050:	fa06 f401 	lsl.w	r4, r6, r1
 8001054:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8001058:	fa26 f60e 	lsr.w	r6, r6, lr
 800105c:	433c      	orrs	r4, r7
 800105e:	fbb6 f9fc 	udiv	r9, r6, ip
 8001062:	0c27      	lsrs	r7, r4, #16
 8001064:	fb0c 6619 	mls	r6, ip, r9, r6
 8001068:	fa1f f883 	uxth.w	r8, r3
 800106c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8001070:	fb09 f708 	mul.w	r7, r9, r8
 8001074:	42b7      	cmp	r7, r6
 8001076:	fa02 f201 	lsl.w	r2, r2, r1
 800107a:	fa00 fa01 	lsl.w	sl, r0, r1
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x242>
 8001080:	18f6      	adds	r6, r6, r3
 8001082:	f109 30ff 	add.w	r0, r9, #4294967295
 8001086:	d241      	bcs.n	800110c <__udivmoddi4+0x2bc>
 8001088:	42b7      	cmp	r7, r6
 800108a:	d93f      	bls.n	800110c <__udivmoddi4+0x2bc>
 800108c:	f1a9 0902 	sub.w	r9, r9, #2
 8001090:	441e      	add	r6, r3
 8001092:	1bf6      	subs	r6, r6, r7
 8001094:	b2a0      	uxth	r0, r4
 8001096:	fbb6 f4fc 	udiv	r4, r6, ip
 800109a:	fb0c 6614 	mls	r6, ip, r4, r6
 800109e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 80010a2:	fb04 f808 	mul.w	r8, r4, r8
 80010a6:	45b8      	cmp	r8, r7
 80010a8:	d907      	bls.n	80010ba <__udivmoddi4+0x26a>
 80010aa:	18ff      	adds	r7, r7, r3
 80010ac:	f104 30ff 	add.w	r0, r4, #4294967295
 80010b0:	d228      	bcs.n	8001104 <__udivmoddi4+0x2b4>
 80010b2:	45b8      	cmp	r8, r7
 80010b4:	d926      	bls.n	8001104 <__udivmoddi4+0x2b4>
 80010b6:	3c02      	subs	r4, #2
 80010b8:	441f      	add	r7, r3
 80010ba:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 80010be:	ebc8 0707 	rsb	r7, r8, r7
 80010c2:	fba0 8902 	umull	r8, r9, r0, r2
 80010c6:	454f      	cmp	r7, r9
 80010c8:	4644      	mov	r4, r8
 80010ca:	464e      	mov	r6, r9
 80010cc:	d314      	bcc.n	80010f8 <__udivmoddi4+0x2a8>
 80010ce:	d029      	beq.n	8001124 <__udivmoddi4+0x2d4>
 80010d0:	b365      	cbz	r5, 800112c <__udivmoddi4+0x2dc>
 80010d2:	ebba 0304 	subs.w	r3, sl, r4
 80010d6:	eb67 0706 	sbc.w	r7, r7, r6
 80010da:	fa07 fe0e 	lsl.w	lr, r7, lr
 80010de:	40cb      	lsrs	r3, r1
 80010e0:	40cf      	lsrs	r7, r1
 80010e2:	ea4e 0303 	orr.w	r3, lr, r3
 80010e6:	e885 0088 	stmia.w	r5, {r3, r7}
 80010ea:	2100      	movs	r1, #0
 80010ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f0:	4613      	mov	r3, r2
 80010f2:	e6f8      	b.n	8000ee6 <__udivmoddi4+0x96>
 80010f4:	4610      	mov	r0, r2
 80010f6:	e6e0      	b.n	8000eba <__udivmoddi4+0x6a>
 80010f8:	ebb8 0402 	subs.w	r4, r8, r2
 80010fc:	eb69 0603 	sbc.w	r6, r9, r3
 8001100:	3801      	subs	r0, #1
 8001102:	e7e5      	b.n	80010d0 <__udivmoddi4+0x280>
 8001104:	4604      	mov	r4, r0
 8001106:	e7d8      	b.n	80010ba <__udivmoddi4+0x26a>
 8001108:	4611      	mov	r1, r2
 800110a:	e795      	b.n	8001038 <__udivmoddi4+0x1e8>
 800110c:	4681      	mov	r9, r0
 800110e:	e7c0      	b.n	8001092 <__udivmoddi4+0x242>
 8001110:	468a      	mov	sl, r1
 8001112:	e77c      	b.n	800100e <__udivmoddi4+0x1be>
 8001114:	3b02      	subs	r3, #2
 8001116:	443c      	add	r4, r7
 8001118:	e748      	b.n	8000fac <__udivmoddi4+0x15c>
 800111a:	4608      	mov	r0, r1
 800111c:	e70a      	b.n	8000f34 <__udivmoddi4+0xe4>
 800111e:	3802      	subs	r0, #2
 8001120:	443e      	add	r6, r7
 8001122:	e72f      	b.n	8000f84 <__udivmoddi4+0x134>
 8001124:	45c2      	cmp	sl, r8
 8001126:	d3e7      	bcc.n	80010f8 <__udivmoddi4+0x2a8>
 8001128:	463e      	mov	r6, r7
 800112a:	e7d1      	b.n	80010d0 <__udivmoddi4+0x280>
 800112c:	4629      	mov	r1, r5
 800112e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001132:	bf00      	nop

08001134 <__aeabi_idiv0>:
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <__libc_init_array>:
 8001138:	b570      	push	{r4, r5, r6, lr}
 800113a:	4e0f      	ldr	r6, [pc, #60]	; (8001178 <__libc_init_array+0x40>)
 800113c:	4d0f      	ldr	r5, [pc, #60]	; (800117c <__libc_init_array+0x44>)
 800113e:	1b76      	subs	r6, r6, r5
 8001140:	10b6      	asrs	r6, r6, #2
 8001142:	bf18      	it	ne
 8001144:	2400      	movne	r4, #0
 8001146:	d005      	beq.n	8001154 <__libc_init_array+0x1c>
 8001148:	3401      	adds	r4, #1
 800114a:	f855 3b04 	ldr.w	r3, [r5], #4
 800114e:	4798      	blx	r3
 8001150:	42a6      	cmp	r6, r4
 8001152:	d1f9      	bne.n	8001148 <__libc_init_array+0x10>
 8001154:	4e0a      	ldr	r6, [pc, #40]	; (8001180 <__libc_init_array+0x48>)
 8001156:	4d0b      	ldr	r5, [pc, #44]	; (8001184 <__libc_init_array+0x4c>)
 8001158:	1b76      	subs	r6, r6, r5
 800115a:	f008 fc2d 	bl	80099b8 <_init>
 800115e:	10b6      	asrs	r6, r6, #2
 8001160:	bf18      	it	ne
 8001162:	2400      	movne	r4, #0
 8001164:	d006      	beq.n	8001174 <__libc_init_array+0x3c>
 8001166:	3401      	adds	r4, #1
 8001168:	f855 3b04 	ldr.w	r3, [r5], #4
 800116c:	4798      	blx	r3
 800116e:	42a6      	cmp	r6, r4
 8001170:	d1f9      	bne.n	8001166 <__libc_init_array+0x2e>
 8001172:	bd70      	pop	{r4, r5, r6, pc}
 8001174:	bd70      	pop	{r4, r5, r6, pc}
 8001176:	bf00      	nop
 8001178:	08009be0 	.word	0x08009be0
 800117c:	08009be0 	.word	0x08009be0
 8001180:	08009be8 	.word	0x08009be8
 8001184:	08009be0 	.word	0x08009be0

08001188 <memset>:
 8001188:	b470      	push	{r4, r5, r6}
 800118a:	0784      	lsls	r4, r0, #30
 800118c:	d046      	beq.n	800121c <memset+0x94>
 800118e:	1e54      	subs	r4, r2, #1
 8001190:	2a00      	cmp	r2, #0
 8001192:	d041      	beq.n	8001218 <memset+0x90>
 8001194:	b2cd      	uxtb	r5, r1
 8001196:	4603      	mov	r3, r0
 8001198:	e002      	b.n	80011a0 <memset+0x18>
 800119a:	1e62      	subs	r2, r4, #1
 800119c:	b3e4      	cbz	r4, 8001218 <memset+0x90>
 800119e:	4614      	mov	r4, r2
 80011a0:	f803 5b01 	strb.w	r5, [r3], #1
 80011a4:	079a      	lsls	r2, r3, #30
 80011a6:	d1f8      	bne.n	800119a <memset+0x12>
 80011a8:	2c03      	cmp	r4, #3
 80011aa:	d92e      	bls.n	800120a <memset+0x82>
 80011ac:	b2cd      	uxtb	r5, r1
 80011ae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80011b2:	2c0f      	cmp	r4, #15
 80011b4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80011b8:	d919      	bls.n	80011ee <memset+0x66>
 80011ba:	f103 0210 	add.w	r2, r3, #16
 80011be:	4626      	mov	r6, r4
 80011c0:	3e10      	subs	r6, #16
 80011c2:	2e0f      	cmp	r6, #15
 80011c4:	f842 5c10 	str.w	r5, [r2, #-16]
 80011c8:	f842 5c0c 	str.w	r5, [r2, #-12]
 80011cc:	f842 5c08 	str.w	r5, [r2, #-8]
 80011d0:	f842 5c04 	str.w	r5, [r2, #-4]
 80011d4:	f102 0210 	add.w	r2, r2, #16
 80011d8:	d8f2      	bhi.n	80011c0 <memset+0x38>
 80011da:	f1a4 0210 	sub.w	r2, r4, #16
 80011de:	f022 020f 	bic.w	r2, r2, #15
 80011e2:	f004 040f 	and.w	r4, r4, #15
 80011e6:	3210      	adds	r2, #16
 80011e8:	2c03      	cmp	r4, #3
 80011ea:	4413      	add	r3, r2
 80011ec:	d90d      	bls.n	800120a <memset+0x82>
 80011ee:	461e      	mov	r6, r3
 80011f0:	4622      	mov	r2, r4
 80011f2:	3a04      	subs	r2, #4
 80011f4:	2a03      	cmp	r2, #3
 80011f6:	f846 5b04 	str.w	r5, [r6], #4
 80011fa:	d8fa      	bhi.n	80011f2 <memset+0x6a>
 80011fc:	1f22      	subs	r2, r4, #4
 80011fe:	f022 0203 	bic.w	r2, r2, #3
 8001202:	3204      	adds	r2, #4
 8001204:	4413      	add	r3, r2
 8001206:	f004 0403 	and.w	r4, r4, #3
 800120a:	b12c      	cbz	r4, 8001218 <memset+0x90>
 800120c:	b2c9      	uxtb	r1, r1
 800120e:	441c      	add	r4, r3
 8001210:	f803 1b01 	strb.w	r1, [r3], #1
 8001214:	42a3      	cmp	r3, r4
 8001216:	d1fb      	bne.n	8001210 <memset+0x88>
 8001218:	bc70      	pop	{r4, r5, r6}
 800121a:	4770      	bx	lr
 800121c:	4614      	mov	r4, r2
 800121e:	4603      	mov	r3, r0
 8001220:	e7c2      	b.n	80011a8 <memset+0x20>
 8001222:	bf00      	nop

08001224 <register_fini>:
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <register_fini+0xc>)
 8001226:	b113      	cbz	r3, 800122e <register_fini+0xa>
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <register_fini+0x10>)
 800122a:	f000 b805 	b.w	8001238 <atexit>
 800122e:	4770      	bx	lr
 8001230:	00000000 	.word	0x00000000
 8001234:	08001245 	.word	0x08001245

08001238 <atexit>:
 8001238:	2300      	movs	r3, #0
 800123a:	4601      	mov	r1, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 b814 	b.w	800126c <__register_exitproc>

08001244 <__libc_fini_array>:
 8001244:	b538      	push	{r3, r4, r5, lr}
 8001246:	4d07      	ldr	r5, [pc, #28]	; (8001264 <__libc_fini_array+0x20>)
 8001248:	4c07      	ldr	r4, [pc, #28]	; (8001268 <__libc_fini_array+0x24>)
 800124a:	1b2c      	subs	r4, r5, r4
 800124c:	10a4      	asrs	r4, r4, #2
 800124e:	d005      	beq.n	800125c <__libc_fini_array+0x18>
 8001250:	3c01      	subs	r4, #1
 8001252:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8001256:	4798      	blx	r3
 8001258:	2c00      	cmp	r4, #0
 800125a:	d1f9      	bne.n	8001250 <__libc_fini_array+0xc>
 800125c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001260:	f008 bbb0 	b.w	80099c4 <_fini>
 8001264:	08009bec 	.word	0x08009bec
 8001268:	08009be8 	.word	0x08009be8

0800126c <__register_exitproc>:
 800126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001270:	4c25      	ldr	r4, [pc, #148]	; (8001308 <__register_exitproc+0x9c>)
 8001272:	6825      	ldr	r5, [r4, #0]
 8001274:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8001278:	4606      	mov	r6, r0
 800127a:	4688      	mov	r8, r1
 800127c:	4692      	mov	sl, r2
 800127e:	4699      	mov	r9, r3
 8001280:	b3c4      	cbz	r4, 80012f4 <__register_exitproc+0x88>
 8001282:	6860      	ldr	r0, [r4, #4]
 8001284:	281f      	cmp	r0, #31
 8001286:	dc17      	bgt.n	80012b8 <__register_exitproc+0x4c>
 8001288:	1c43      	adds	r3, r0, #1
 800128a:	b176      	cbz	r6, 80012aa <__register_exitproc+0x3e>
 800128c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001290:	2201      	movs	r2, #1
 8001292:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8001296:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 800129a:	4082      	lsls	r2, r0
 800129c:	4311      	orrs	r1, r2
 800129e:	2e02      	cmp	r6, #2
 80012a0:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80012a4:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 80012a8:	d01e      	beq.n	80012e8 <__register_exitproc+0x7c>
 80012aa:	3002      	adds	r0, #2
 80012ac:	6063      	str	r3, [r4, #4]
 80012ae:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 80012b2:	2000      	movs	r0, #0
 80012b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <__register_exitproc+0xa0>)
 80012ba:	b303      	cbz	r3, 80012fe <__register_exitproc+0x92>
 80012bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80012c0:	f3af 8000 	nop.w
 80012c4:	4604      	mov	r4, r0
 80012c6:	b1d0      	cbz	r0, 80012fe <__register_exitproc+0x92>
 80012c8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80012cc:	2700      	movs	r7, #0
 80012ce:	e880 0088 	stmia.w	r0, {r3, r7}
 80012d2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80012d6:	4638      	mov	r0, r7
 80012d8:	2301      	movs	r3, #1
 80012da:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80012de:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 80012e2:	2e00      	cmp	r6, #0
 80012e4:	d0e1      	beq.n	80012aa <__register_exitproc+0x3e>
 80012e6:	e7d1      	b.n	800128c <__register_exitproc+0x20>
 80012e8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 80012ec:	430a      	orrs	r2, r1
 80012ee:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80012f2:	e7da      	b.n	80012aa <__register_exitproc+0x3e>
 80012f4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80012f8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80012fc:	e7c1      	b.n	8001282 <__register_exitproc+0x16>
 80012fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001306:	bf00      	nop
 8001308:	08009a1c 	.word	0x08009a1c
 800130c:	00000000 	.word	0x00000000

08001310 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001348 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001314:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001316:	e003      	b.n	8001320 <LoopCopyDataInit>

08001318 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800131a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800131c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800131e:	3104      	adds	r1, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001324:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001326:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001328:	d3f6      	bcc.n	8001318 <CopyDataInit>
	ldr	r2, =_sbss
 800132a:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <LoopForever+0x12>)
	b	LoopFillZerobss
 800132c:	e002      	b.n	8001334 <LoopFillZerobss>

0800132e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800132e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001330:	f842 3b04 	str.w	r3, [r2], #4

08001334 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <LoopForever+0x16>)
	cmp	r2, r3
 8001336:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001338:	d3f9      	bcc.n	800132e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800133a:	f000 fb25 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133e:	f7ff fefb 	bl	8001138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001342:	f000 f80f 	bl	8001364 <main>

08001346 <LoopForever>:

LoopForever:
    b LoopForever
 8001346:	e7fe      	b.n	8001346 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001348:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 800134c:	08009bec 	.word	0x08009bec
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001350:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001354:	20000878 	.word	0x20000878
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8001358:	20000878 	.word	0x20000878
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 800135c:	20000e44 	.word	0x20000e44

08001360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC1_2_IRQHandler>
	...

08001364 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8001364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001368:	b090      	sub	sp, #64	; 0x40
 800136a:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	//data value
	uint8_t counter=0;
 800136c:	2300      	movs	r3, #0
 800136e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t newline[]="\n";
 8001372:	230a      	movs	r3, #10
 8001374:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t read[]={0x00,0x00,0x00};
 8001376:	2300      	movs	r3, #0
 8001378:	f887 3020 	strb.w	r3, [r7, #32]
 800137c:	2300      	movs	r3, #0
 800137e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001382:	2300      	movs	r3, #0
 8001384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t tmp[]={0,0};
 8001388:	2300      	movs	r3, #0
 800138a:	773b      	strb	r3, [r7, #28]
 800138c:	2300      	movs	r3, #0
 800138e:	777b      	strb	r3, [r7, #29]
	float accel[]={0,0,0};
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
	uint8_t RESET = 0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
	uint8_t config_sensor = 0x12;
 80013a6:	2312      	movs	r3, #18
 80013a8:	73bb      	strb	r3, [r7, #14]
	//REGISTER
	uint8_t CONFIG			 = 0x1A;
 80013aa:	231a      	movs	r3, #26
 80013ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t ACCEL_XOUT_H = 0x43;//ACCX
 80013b0:	2343      	movs	r3, #67	; 0x43
 80013b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t ACCEL_XOUT_L = 0x44;//ACCX
 80013b6:	2344      	movs	r3, #68	; 0x44
 80013b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t ACCEL_YOUT_H = 0x45;//ACCY
 80013bc:	2345      	movs	r3, #69	; 0x45
 80013be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t ACCEL_YOUT_L = 0x46;//ACCY
 80013c2:	2346      	movs	r3, #70	; 0x46
 80013c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t ACCEL_ZOUT_H = 0x47;//ACCZ
 80013c8:	2347      	movs	r3, #71	; 0x47
 80013ca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t ACCEL_ZOUT_L = 0x48;//ACCZ
 80013ce:	2348      	movs	r3, #72	; 0x48
 80013d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t PWR_MGMT_1   = 0x6B;//PWR_MGMT_1
 80013d4:	236b      	movs	r3, #107	; 0x6b
 80013d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t WHO_AM_I	   = 0x75;//WHO_AM_I
 80013da:	2375      	movs	r3, #117	; 0x75
 80013dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t SMPLRT_DIV[2]  = {0x19,0x07};
 80013e0:	4a6c      	ldr	r2, [pc, #432]	; (8001594 <main+0x230>)
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4611      	mov	r1, r2
 80013e8:	2202      	movs	r2, #2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8f2 	bl	80005d4 <memcpy>
	uint8_t CONFIGU[2]      = {0x1A,0x00};
 80013f0:	231a      	movs	r3, #26
 80013f2:	723b      	strb	r3, [r7, #8]
 80013f4:	2300      	movs	r3, #0
 80013f6:	727b      	strb	r3, [r7, #9]
	uint8_t GYRO_CONFIG[2] = {0x1B,0x00};
 80013f8:	231b      	movs	r3, #27
 80013fa:	713b      	strb	r3, [r7, #4]
 80013fc:	2300      	movs	r3, #0
 80013fe:	717b      	strb	r3, [r7, #5]
	uint8_t ACCE_CONFIG[2] = {0x1C,0x00}; 
 8001400:	231c      	movs	r3, #28
 8001402:	703b      	strb	r3, [r7, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	707b      	strb	r3, [r7, #1]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001408:	f000 fc30 	bl	8001c6c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f8ce 	bl	80015ac <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001410:	f000 f9c6 	bl	80017a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001414:	f000 f9a6 	bl	8001764 <MX_DMA_Init>
  MX_I2C1_Init();
 8001418:	f000 f93e 	bl	8001698 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800141c:	f000 f972 	bl	8001704 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001420:	f000 f916 	bl	8001650 <MX_NVIC_Init>

  /* USER CODE BEGIN 2 */
  if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, sizeof(data))!=HAL_OK){
 8001424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001428:	495b      	ldr	r1, [pc, #364]	; (8001598 <main+0x234>)
 800142a:	485c      	ldr	r0, [pc, #368]	; (800159c <main+0x238>)
 800142c:	f004 f9a6 	bl	800577c <HAL_UART_Transmit_DMA>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <main+0xd6>
		Error_Handler();
 8001436:	f000 fa03 	bl	8001840 <Error_Handler>
	}
	while (Uartready != 1)
 800143a:	bf00      	nop
 800143c:	4b58      	ldr	r3, [pc, #352]	; (80015a0 <main+0x23c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d1fb      	bne.n	800143c <main+0xd8>
	{
	}
	Uartready=0;
 8001444:	4b56      	ldr	r3, [pc, #344]	; (80015a0 <main+0x23c>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

		/*who_am_i*/
		HAL_I2C_Mem_Read(&hi2c1,0xD0/*device ID*/,0x75/*WHO_AM_I*/,I2C_MEMADD_SIZE_8BIT/*Memory Address Size*/,&read[0]/*Data Buffer*/,1,10);
 800144a:	230a      	movs	r3, #10
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	2301      	movs	r3, #1
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2301      	movs	r3, #1
 800145a:	2275      	movs	r2, #117	; 0x75
 800145c:	21d0      	movs	r1, #208	; 0xd0
 800145e:	4851      	ldr	r0, [pc, #324]	; (80015a4 <main+0x240>)
 8001460:	f001 fc12 	bl	8002c88 <HAL_I2C_Mem_Read>

		//wakeup sensor
		HAL_I2C_Mem_Write(&hi2c1,0xD0,PWR_MGMT_1,I2C_MEMADD_SIZE_8BIT,&RESET,1,10);
 8001464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001468:	b29a      	uxth	r2, r3
 800146a:	230a      	movs	r3, #10
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2301      	movs	r3, #1
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	f107 030f 	add.w	r3, r7, #15
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	21d0      	movs	r1, #208	; 0xd0
 800147c:	4849      	ldr	r0, [pc, #292]	; (80015a4 <main+0x240>)
 800147e:	f001 fadd 	bl	8002a3c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Read(&hi2c1,0xD0,PWR_MGMT_1,I2C_MEMADD_SIZE_8BIT,&read[1],1,10);
 8001482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001486:	b29a      	uxth	r2, r3
 8001488:	230a      	movs	r3, #10
 800148a:	9302      	str	r3, [sp, #8]
 800148c:	2301      	movs	r3, #1
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	f107 0320 	add.w	r3, r7, #32
 8001494:	3301      	adds	r3, #1
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2301      	movs	r3, #1
 800149a:	21d0      	movs	r1, #208	; 0xd0
 800149c:	4841      	ldr	r0, [pc, #260]	; (80015a4 <main+0x240>)
 800149e:	f001 fbf3 	bl	8002c88 <HAL_I2C_Mem_Read>
		if(read == RESET)Error_Handler();
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	461a      	mov	r2, r3
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d101      	bne.n	80014b2 <main+0x14e>
 80014ae:	f000 f9c7 	bl	8001840 <Error_Handler>
		//configure sensor
		HAL_I2C_Mem_Write(&hi2c1,0xD0,CONFIG,I2C_MEMADD_SIZE_8BIT,&config_sensor,1,10);
 80014b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	230a      	movs	r3, #10
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	2301      	movs	r3, #1
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	f107 030e 	add.w	r3, r7, #14
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2301      	movs	r3, #1
 80014c8:	21d0      	movs	r1, #208	; 0xd0
 80014ca:	4836      	ldr	r0, [pc, #216]	; (80015a4 <main+0x240>)
 80014cc:	f001 fab6 	bl	8002a3c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Read(&hi2c1,0xD0,CONFIG,I2C_MEMADD_SIZE_8BIT,&read[2],1,10);
 80014d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	230a      	movs	r3, #10
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2301      	movs	r3, #1
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	3302      	adds	r3, #2
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	21d0      	movs	r1, #208	; 0xd0
 80014ea:	482e      	ldr	r0, [pc, #184]	; (80015a4 <main+0x240>)
 80014ec:	f001 fbcc 	bl	8002c88 <HAL_I2C_Mem_Read>
		if(read == config_sensor)Error_Handler();
 80014f0:	7bbb      	ldrb	r3, [r7, #14]
 80014f2:	461a      	mov	r2, r3
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d101      	bne.n	8001500 <main+0x19c>
 80014fc:	f000 f9a0 	bl	8001840 <Error_Handler>

		/*accel x*/
		//high
		HAL_I2C_Mem_Read(&hi2c1,0xD0,CONFIG,I2C_MEMADD_SIZE_8BIT,&tmp[0],1,10);
 8001500:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001504:	b29a      	uxth	r2, r3
 8001506:	230a      	movs	r3, #10
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2301      	movs	r3, #1
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	21d0      	movs	r1, #208	; 0xd0
 8001518:	4822      	ldr	r0, [pc, #136]	; (80015a4 <main+0x240>)
 800151a:	f001 fbb5 	bl	8002c88 <HAL_I2C_Mem_Read>
		//low
		HAL_I2C_Mem_Read(&hi2c1,0xD0,CONFIG,I2C_MEMADD_SIZE_8BIT,&tmp[1],1,10);
 800151e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001522:	b29a      	uxth	r2, r3
 8001524:	230a      	movs	r3, #10
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	3301      	adds	r3, #1
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	21d0      	movs	r1, #208	; 0xd0
 8001538:	481a      	ldr	r0, [pc, #104]	; (80015a4 <main+0x240>)
 800153a:	f001 fba5 	bl	8002c88 <HAL_I2C_Mem_Read>
		accel[0] = tmp[0]<<8 + tmp[1];
 800153e:	7f3b      	ldrb	r3, [r7, #28]
 8001540:	461a      	mov	r2, r3
 8001542:	7f7b      	ldrb	r3, [r7, #29]
 8001544:	3308      	adds	r3, #8
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001552:	edc7 7a04 	vstr	s15, [r7, #16]
		counter++;
 8001556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800155a:	3301      	adds	r3, #1
 800155c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		/*DMA Transfer Update*/
		sprintf(data," mpu6050 [whoami:0x%2x][pwrmgmt:0x%2x][config:0x%2x][accel x:%f] \n" ,read[0],read[1],read[2],accel[0]);
 8001560:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001564:	461e      	mov	r6, r3
 8001566:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800156a:	4698      	mov	r8, r3
 800156c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001570:	461d      	mov	r5, r3
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffd9 	bl	800052c <__aeabi_f2d>
 800157a:	4603      	mov	r3, r0
 800157c:	460c      	mov	r4, r1
 800157e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001582:	9500      	str	r5, [sp, #0]
 8001584:	4643      	mov	r3, r8
 8001586:	4632      	mov	r2, r6
 8001588:	4907      	ldr	r1, [pc, #28]	; (80015a8 <main+0x244>)
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <main+0x234>)
 800158c:	f004 fcb4 	bl	8005ef8 <sprintf>
  }
 8001590:	e75b      	b.n	800144a <main+0xe6>
 8001592:	bf00      	nop
 8001594:	08009a14 	.word	0x08009a14
 8001598:	20000a04 	.word	0x20000a04
 800159c:	2000091c 	.word	0x2000091c
 80015a0:	20000e04 	.word	0x20000e04
 80015a4:	20000894 	.word	0x20000894
 80015a8:	080099d0 	.word	0x080099d0

080015ac <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b096      	sub	sp, #88	; 0x58
 80015b0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b2:	2302      	movs	r3, #2
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b6:	2301      	movs	r3, #1
 80015b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80015ba:	2310      	movs	r3, #16
 80015bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fbc8 	bl	8003d5c <HAL_RCC_OscConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0x2a>
  {
    Error_Handler();
 80015d2:	f000 f935 	bl	8001840 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d6:	230f      	movs	r3, #15
 80015d8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fc75 	bl	8004ee0 <HAL_RCC_ClockConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80015fc:	f000 f920 	bl	8001840 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001600:	2321      	movs	r3, #33	; 0x21
 8001602:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4618      	mov	r0, r3
 8001610:	f003 ff1c 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800161a:	f000 f911 	bl	8001840 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800161e:	f003 fec5 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 8001622:	4602      	mov	r2, r0
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <SystemClock_Config+0xa0>)
 8001626:	fba3 2302 	umull	r2, r3, r3, r2
 800162a:	099b      	lsrs	r3, r3, #6
 800162c:	4618      	mov	r0, r3
 800162e:	f000 fc7d 	bl	8001f2c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001632:	2004      	movs	r0, #4
 8001634:	f000 fc86 	bl	8001f44 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f000 fc4a 	bl	8001ed8 <HAL_NVIC_SetPriority>
}
 8001644:	bf00      	nop
 8001646:	3758      	adds	r7, #88	; 0x58
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	10624dd3 	.word	0x10624dd3

08001650 <MX_NVIC_Init>:

/** NVIC Configuration
*/
static void MX_NVIC_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	200f      	movs	r0, #15
 800165a:	f000 fc3d 	bl	8001ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800165e:	200f      	movs	r0, #15
 8001660:	f000 fc56 	bl	8001f10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	200e      	movs	r0, #14
 800166a:	f000 fc35 	bl	8001ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800166e:	200e      	movs	r0, #14
 8001670:	f000 fc4e 	bl	8001f10 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	201f      	movs	r0, #31
 800167a:	f000 fc2d 	bl	8001ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800167e:	201f      	movs	r0, #31
 8001680:	f000 fc46 	bl	8001f10 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2020      	movs	r0, #32
 800168a:	f000 fc25 	bl	8001ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800168e:	2020      	movs	r0, #32
 8001690:	f000 fc3e 	bl	8001f10 <HAL_NVIC_EnableIRQ>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_I2C1_Init+0x60>)
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <MX_I2C1_Init+0x64>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_I2C1_Init+0x60>)
 80016a4:	4a16      	ldr	r2, [pc, #88]	; (8001700 <MX_I2C1_Init+0x68>)
 80016a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <MX_I2C1_Init+0x60>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_I2C1_Init+0x60>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <MX_I2C1_Init+0x60>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_I2C1_Init+0x60>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <MX_I2C1_Init+0x60>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_I2C1_Init+0x60>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_I2C1_Init+0x60>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d2:	4809      	ldr	r0, [pc, #36]	; (80016f8 <MX_I2C1_Init+0x60>)
 80016d4:	f001 f928 	bl	8002928 <HAL_I2C_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016de:	f000 f8af 	bl	8001840 <Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_I2C1_Init+0x60>)
 80016e6:	f002 faed 	bl	8003cc4 <HAL_I2CEx_ConfigAnalogFilter>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016f0:	f000 f8a6 	bl	8001840 <Error_Handler>
  }

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000894 	.word	0x20000894
 80016fc:	40005400 	.word	0x40005400
 8001700:	2000090e 	.word	0x2000090e

08001704 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_USART1_UART_Init+0x58>)
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <MX_USART1_UART_Init+0x5c>)
 800170c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001710:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_USART1_UART_Init+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_USART1_UART_Init+0x58>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_USART1_UART_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001748:	f003 ffc6 	bl	80056d8 <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001752:	f000 f875 	bl	8001840 <Error_Handler>
  }

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000091c 	.word	0x2000091c
 8001760:	40013800 	.word	0x40013800

08001764 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800176a:	4a0c      	ldr	r2, [pc, #48]	; (800179c <MX_DMA_Init+0x38>)
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_DMA_Init+0x38>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6153      	str	r3, [r2, #20]
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_DMA_Init+0x38>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	200d      	movs	r0, #13
 8001788:	f000 fba6 	bl	8001ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800178c:	200d      	movs	r0, #13
 800178e:	f000 fbbf 	bl	8001f10 <HAL_NVIC_EnableIRQ>

}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <MX_GPIO_Init+0x64>)
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_GPIO_Init+0x64>)
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_GPIO_Init+0x64>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <MX_GPIO_Init+0x64>)
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_GPIO_Init+0x64>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c8:	6153      	str	r3, [r2, #20]
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_GPIO_Init+0x64>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2108      	movs	r1, #8
 80017da:	480b      	ldr	r0, [pc, #44]	; (8001808 <MX_GPIO_Init+0x68>)
 80017dc:	f001 f87a 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80017e0:	2308      	movs	r3, #8
 80017e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4619      	mov	r1, r3
 80017f6:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_GPIO_Init+0x68>)
 80017f8:	f000 fef6 	bl	80025e8 <HAL_GPIO_Init>

}
 80017fc:	bf00      	nop
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40021000 	.word	0x40021000
 8001808:	48000400 	.word	0x48000400

0800180c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	Uartready = 1;
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <HAL_UART_TxCpltCallback+0x1c>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000e04 	.word	0x20000e04

0800182c <HAL_UART_ErrorCallback>:
void put_c(uint8_t *data){
}
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    Error_Handler();
 8001834:	f000 f804 	bl	8001840 <Error_Handler>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8001844:	2108      	movs	r1, #8
 8001846:	4803      	ldr	r0, [pc, #12]	; (8001854 <Error_Handler+0x14>)
 8001848:	f001 f85c 	bl	8002904 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 800184c:	2032      	movs	r0, #50	; 0x32
 800184e:	f000 fa59 	bl	8001d04 <HAL_Delay>
  }
 8001852:	e7f7      	b.n	8001844 <Error_Handler+0x4>
 8001854:	48000400 	.word	0x48000400

08001858 <_sbrk_r>:

/* Register name faking - works in collusion with the linker.  */
register char * stack_ptr asm ("sp");

caddr_t _sbrk_r (struct _reent *r, int incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  extern char   end asm ("end"); /* Defined by the linker.  */
  static char * heap_end;
  char *        prev_heap_end;

  if (heap_end == NULL)
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <_sbrk_r+0x54>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <_sbrk_r+0x18>
    heap_end = & end;
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_sbrk_r+0x54>)
 800186c:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <_sbrk_r+0x58>)
 800186e:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <_sbrk_r+0x54>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]
  
  if (heap_end + incr > stack_ptr)
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <_sbrk_r+0x54>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	4413      	add	r3, r2
 800187e:	466a      	mov	r2, sp
 8001880:	4293      	cmp	r3, r2
 8001882:	d907      	bls.n	8001894 <_sbrk_r+0x3c>

      _write (1, "_sbrk: Heap and stack collision\n", 32);
      
      abort ();
#else
      errno = ENOMEM;
 8001884:	f004 fb32 	bl	8005eec <__errno>
 8001888:	4602      	mov	r2, r0
 800188a:	230c      	movs	r3, #12
 800188c:	6013      	str	r3, [r2, #0]
      return (caddr_t) -1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e006      	b.n	80018a2 <_sbrk_r+0x4a>
#endif
  }
  
  heap_end += incr;
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <_sbrk_r+0x54>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a03      	ldr	r2, [pc, #12]	; (80018ac <_sbrk_r+0x54>)
 800189e:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 80018a0:	68fb      	ldr	r3, [r7, #12]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000e08 	.word	0x20000e08
 80018b0:	20000e48 	.word	0x20000e48

080018b4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop

080018c4 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 80018c8:	e7fe      	b.n	80018c8 <HardFault_Handler+0x4>
 80018ca:	bf00      	nop

080018cc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>
 80018d2:	bf00      	nop

080018d4 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 80018d8:	e7fe      	b.n	80018d8 <BusFault_Handler+0x4>
 80018da:	bf00      	nop

080018dc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>
 80018e2:	bf00      	nop

080018e4 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop

080018f4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop

08001904 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop

08001914 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001918:	f000 f9da 	bl	8001cd0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800191c:	f000 fb2e 	bl	8001f7c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}

08001924 <DMA1_Channel3_IRQHandler>:

/**
* @brief This function handles DMA1 channel3 global interrupt.
*/
void DMA1_Channel3_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <DMA1_Channel3_IRQHandler+0x10>)
 800192a:	f000 fc47 	bl	80021bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200008e0 	.word	0x200008e0

08001938 <DMA1_Channel4_IRQHandler>:

/**
* @brief This function handles DMA1 channel4 global interrupt.
*/
void DMA1_Channel4_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <DMA1_Channel4_IRQHandler+0x10>)
 800193e:	f000 fc3d 	bl	80021bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200009c8 	.word	0x200009c8

0800194c <DMA1_Channel5_IRQHandler>:

/**
* @brief This function handles DMA1 channel5 global interrupt.
*/
void DMA1_Channel5_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <DMA1_Channel5_IRQHandler+0x10>)
 8001952:	f000 fc33 	bl	80021bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000098c 	.word	0x2000098c

08001960 <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
*/
void I2C1_EV_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <I2C1_EV_IRQHandler+0x10>)
 8001966:	f001 fab5 	bl	8002ed4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000894 	.word	0x20000894

08001974 <I2C1_ER_IRQHandler>:

/**
* @brief This function handles I2C1 error interrupt.
*/
void I2C1_ER_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <I2C1_ER_IRQHandler+0x10>)
 800197a:	f001 fac5 	bl	8002f08 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000894 	.word	0x20000894

08001988 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <SystemInit+0x84>)
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <SystemInit+0x84>)
 8001990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800199c:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <SystemInit+0x88>)
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <SystemInit+0x88>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80019a8:	4919      	ldr	r1, [pc, #100]	; (8001a10 <SystemInit+0x88>)
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <SystemInit+0x88>)
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <SystemInit+0x8c>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019b4:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <SystemInit+0x88>)
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <SystemInit+0x88>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <SystemInit+0x88>)
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <SystemInit+0x88>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019d0:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <SystemInit+0x88>)
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <SystemInit+0x88>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80019da:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80019dc:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <SystemInit+0x88>)
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <SystemInit+0x88>)
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	f023 030f 	bic.w	r3, r3, #15
 80019e6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80019e8:	4909      	ldr	r1, [pc, #36]	; (8001a10 <SystemInit+0x88>)
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <SystemInit+0x88>)
 80019ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <SystemInit+0x90>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <SystemInit+0x88>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SystemInit+0x84>)
 80019fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a00:	609a      	str	r2, [r3, #8]
#endif
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	40021000 	.word	0x40021000
 8001a14:	f87fc00c 	.word	0xf87fc00c
 8001a18:	ff00fccc 	.word	0xff00fccc

08001a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <HAL_MspInit+0x80>)
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_MspInit+0x80>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6193      	str	r3, [r2, #24]
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_MspInit+0x80>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	f000 fa40 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	f06f 000b 	mvn.w	r0, #11
 8001a48:	f000 fa46 	bl	8001ed8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	f06f 000a 	mvn.w	r0, #10
 8001a54:	f000 fa40 	bl	8001ed8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	f06f 0009 	mvn.w	r0, #9
 8001a60:	f000 fa3a 	bl	8001ed8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	f06f 0004 	mvn.w	r0, #4
 8001a6c:	f000 fa34 	bl	8001ed8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	f06f 0003 	mvn.w	r0, #3
 8001a78:	f000 fa2e 	bl	8001ed8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	f06f 0001 	mvn.w	r0, #1
 8001a84:	f000 fa28 	bl	8001ed8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 fa22 	bl	8001ed8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <HAL_I2C_MspInit+0xac>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d147      	bne.n	8001b42 <HAL_I2C_MspInit+0xa2>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab2:	23c0      	movs	r3, #192	; 0xc0
 8001ab4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab6:	2312      	movs	r3, #18
 8001ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	4820      	ldr	r0, [pc, #128]	; (8001b50 <HAL_I2C_MspInit+0xb0>)
 8001ace:	f000 fd8b 	bl	80025e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ad2:	4a20      	ldr	r2, [pc, #128]	; (8001b54 <HAL_I2C_MspInit+0xb4>)
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_I2C_MspInit+0xb4>)
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_I2C_MspInit+0xb4>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral DMA init*/
  
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_I2C_MspInit+0xb8>)
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_I2C_MspInit+0xbc>)
 8001aee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_I2C_MspInit+0xb8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_I2C_MspInit+0xb8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_I2C_MspInit+0xb8>)
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_I2C_MspInit+0xb8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_I2C_MspInit+0xb8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_I2C_MspInit+0xb8>)
 8001b10:	2220      	movs	r2, #32
 8001b12:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_I2C_MspInit+0xb8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001b1a:	480f      	ldr	r0, [pc, #60]	; (8001b58 <HAL_I2C_MspInit+0xb8>)
 8001b1c:	f000 fa3c 	bl	8001f98 <HAL_DMA_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_MspInit+0x8a>
    {
      Error_Handler();
 8001b26:	f7ff fe8b 	bl	8001840 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_RX_DMA1_CH3);
 8001b2a:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_I2C_MspInit+0xc0>)
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_I2C_MspInit+0xc0>)
 8001b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b30:	f043 0310 	orr.w	r3, r3, #16
 8001b34:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_I2C_MspInit+0xb8>)
 8001b3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_I2C_MspInit+0xb8>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40005400 	.word	0x40005400
 8001b50:	48000400 	.word	0x48000400
 8001b54:	40021000 	.word	0x40021000
 8001b58:	200008e0 	.word	0x200008e0
 8001b5c:	40020030 	.word	0x40020030
 8001b60:	40010000 	.word	0x40010000

08001b64 <HAL_UART_MspInit>:
  /* USER CODE END I2C1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a38      	ldr	r2, [pc, #224]	; (8001c54 <HAL_UART_MspInit+0xf0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d169      	bne.n	8001c4a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b76:	4a38      	ldr	r2, [pc, #224]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001b78:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6193      	str	r3, [r2, #24]
 8001b82:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bae:	f000 fd1b 	bl	80025e8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bb4:	4a2a      	ldr	r2, [pc, #168]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001bb6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbe:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001bd6:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001be2:	481e      	ldr	r0, [pc, #120]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001be4:	f000 f9d8 	bl	8001f98 <HAL_DMA_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8001bee:	f7ff fe27 	bl	8001840 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bf6:	665a      	str	r2, [r3, #100]	; 0x64
 8001bf8:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6253      	str	r3, [r2, #36]	; 0x24

    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001c00:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <HAL_UART_MspInit+0x104>)
 8001c02:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001c06:	2210      	movs	r2, #16
 8001c08:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001c24:	2220      	movs	r2, #32
 8001c26:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001c2e:	480d      	ldr	r0, [pc, #52]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001c30:	f000 f9b2 	bl	8001f98 <HAL_DMA_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8001c3a:	f7ff fe01 	bl	8001840 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001c42:	661a      	str	r2, [r3, #96]	; 0x60
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	2000098c 	.word	0x2000098c
 8001c60:	40020058 	.word	0x40020058
 8001c64:	200009c8 	.word	0x200009c8
 8001c68:	40020044 	.word	0x40020044

08001c6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_Init+0x28>)
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_Init+0x28>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f043 0310 	orr.w	r3, r3, #16
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f91f 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff fec8 	bl	8001a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40022000 	.word	0x40022000

08001c98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_InitTick+0x30>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_InitTick+0x34>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 f93d 	bl	8001f2c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cba:	f000 f90d 	bl	8001ed8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	2000042c 	.word	0x2000042c
 8001ccc:	10624dd3 	.word	0x10624dd3

08001cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick++;
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <HAL_IncTick+0x18>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <HAL_IncTick+0x18>)
 8001cdc:	6013      	str	r3, [r2, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20000e0c 	.word	0x20000e0c

08001cec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000e0c 	.word	0x20000e0c

08001d04 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8001d12:	bf00      	nop
 8001d14:	f7ff ffea 	bl	8001cec <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad2      	subs	r2, r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3f7      	bcc.n	8001d14 <HAL_Delay+0x10>
  {
  }
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d80:	0a1b      	lsrs	r3, r3, #8
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001d9a:	4909      	ldr	r1, [pc, #36]	; (8001dc0 <NVIC_EnableIRQ+0x30>)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	79fa      	ldrb	r2, [r7, #7]
 8001da4:	f002 021f 	and.w	r2, r2, #31
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da0b      	bge.n	8001df0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	490d      	ldr	r1, [pc, #52]	; (8001e10 <NVIC_SetPriority+0x4c>)
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	3b04      	subs	r3, #4
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dee:	e009      	b.n	8001e04 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	4908      	ldr	r1, [pc, #32]	; (8001e14 <NVIC_SetPriority+0x50>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	401a      	ands	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5e:	2101      	movs	r1, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	1e59      	subs	r1, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001e6c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff90 	bl	8001dc4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff2f 	bl	8001d2c <NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop

08001ed8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eea:	f7ff ff43 	bl	8001d74 <NVIC_GetPriorityGrouping>
 8001eee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	6978      	ldr	r0, [r7, #20]
 8001ef6:	f7ff ff8f 	bl	8001e18 <NVIC_EncodePriority>
 8001efa:	4602      	mov	r2, r0
 8001efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff5e 	bl	8001dc4 <NVIC_SetPriority>
}
 8001f08:	bf00      	nop
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff36 	bl	8001d90 <NVIC_EnableIRQ>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ffa1 	bl	8001e7c <SysTick_Config>
 8001f3a:	4603      	mov	r3, r0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d106      	bne.n	8001f60 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001f52:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001f5e:	e005      	b.n	8001f6c <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001f60:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 0304 	bic.w	r3, r3, #4
 8001f6a:	6013      	str	r3, [r2, #0]
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f80:	f000 f802 	bl	8001f88 <HAL_SYSTICK_Callback>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop

08001f98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e039      	b.n	8002022 <HAL_DMA_Init+0x8a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d103      	bne.n	8001fc0 <HAL_DMA_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4313      	orrs	r3, r2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}  
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop

08002030 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_DMA_Start_IT+0x1c>
 8002048:	2302      	movs	r3, #2
 800204a:	e036      	b.n	80020ba <HAL_DMA_Start_IT+0x8a>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */  
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fa92 	bl	800259c <DMA_SetConfig>
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	f042 0202 	orr.w	r2, r2, #2
 8002086:	601a      	str	r2, [r3, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	f042 0204 	orr.w	r2, r2, #4
 8002096:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	f042 0208 	orr.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);   
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;    
 80020b8:	2300      	movs	r3, #0
} 
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop

080020c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d005      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2204      	movs	r2, #4
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e057      	b.n	8002196 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	f022 020e 	bic.w	r2, r2, #14
 80020f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	f022 0201 	bic.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002106:	4a26      	ldr	r2, [pc, #152]	; (80021a0 <HAL_DMA_Abort_IT+0xdc>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_DMA_Abort_IT+0xe0>)
 8002110:	4299      	cmp	r1, r3
 8002112:	d02e      	beq.n	8002172 <HAL_DMA_Abort_IT+0xae>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_DMA_Abort_IT+0xe4>)
 800211c:	4299      	cmp	r1, r3
 800211e:	d026      	beq.n	800216e <HAL_DMA_Abort_IT+0xaa>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_DMA_Abort_IT+0xe8>)
 8002128:	4299      	cmp	r1, r3
 800212a:	d01d      	beq.n	8002168 <HAL_DMA_Abort_IT+0xa4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_DMA_Abort_IT+0xec>)
 8002134:	4299      	cmp	r1, r3
 8002136:	d014      	beq.n	8002162 <HAL_DMA_Abort_IT+0x9e>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_DMA_Abort_IT+0xf0>)
 8002140:	4299      	cmp	r1, r3
 8002142:	d00b      	beq.n	800215c <HAL_DMA_Abort_IT+0x98>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_DMA_Abort_IT+0xf4>)
 800214c:	4299      	cmp	r1, r3
 800214e:	d102      	bne.n	8002156 <HAL_DMA_Abort_IT+0x92>
 8002150:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002154:	e00e      	b.n	8002174 <HAL_DMA_Abort_IT+0xb0>
 8002156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800215a:	e00b      	b.n	8002174 <HAL_DMA_Abort_IT+0xb0>
 800215c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002160:	e008      	b.n	8002174 <HAL_DMA_Abort_IT+0xb0>
 8002162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002166:	e005      	b.n	8002174 <HAL_DMA_Abort_IT+0xb0>
 8002168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800216c:	e002      	b.n	8002174 <HAL_DMA_Abort_IT+0xb0>
 800216e:	2310      	movs	r3, #16
 8002170:	e000      	b.n	8002174 <HAL_DMA_Abort_IT+0xb0>
 8002172:	2301      	movs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
    } 
  }
  return status;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40020008 	.word	0x40020008
 80021a8:	4002001c 	.word	0x4002001c
 80021ac:	40020030 	.word	0x40020030
 80021b0:	40020044 	.word	0x40020044
 80021b4:	40020058 	.word	0x40020058
 80021b8:	4002006c 	.word	0x4002006c

080021bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{        
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80021c4:	4b8f      	ldr	r3, [pc, #572]	; (8002404 <HAL_DMA_IRQHandler+0x248>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	4b8e      	ldr	r3, [pc, #568]	; (8002408 <HAL_DMA_IRQHandler+0x24c>)
 80021d0:	4299      	cmp	r1, r3
 80021d2:	d02e      	beq.n	8002232 <HAL_DMA_IRQHandler+0x76>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	4b8c      	ldr	r3, [pc, #560]	; (800240c <HAL_DMA_IRQHandler+0x250>)
 80021dc:	4299      	cmp	r1, r3
 80021de:	d026      	beq.n	800222e <HAL_DMA_IRQHandler+0x72>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	4b8a      	ldr	r3, [pc, #552]	; (8002410 <HAL_DMA_IRQHandler+0x254>)
 80021e8:	4299      	cmp	r1, r3
 80021ea:	d01d      	beq.n	8002228 <HAL_DMA_IRQHandler+0x6c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	4b88      	ldr	r3, [pc, #544]	; (8002414 <HAL_DMA_IRQHandler+0x258>)
 80021f4:	4299      	cmp	r1, r3
 80021f6:	d014      	beq.n	8002222 <HAL_DMA_IRQHandler+0x66>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	4b86      	ldr	r3, [pc, #536]	; (8002418 <HAL_DMA_IRQHandler+0x25c>)
 8002200:	4299      	cmp	r1, r3
 8002202:	d00b      	beq.n	800221c <HAL_DMA_IRQHandler+0x60>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	4b84      	ldr	r3, [pc, #528]	; (800241c <HAL_DMA_IRQHandler+0x260>)
 800220c:	4299      	cmp	r1, r3
 800220e:	d102      	bne.n	8002216 <HAL_DMA_IRQHandler+0x5a>
 8002210:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002214:	e00e      	b.n	8002234 <HAL_DMA_IRQHandler+0x78>
 8002216:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800221a:	e00b      	b.n	8002234 <HAL_DMA_IRQHandler+0x78>
 800221c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002220:	e008      	b.n	8002234 <HAL_DMA_IRQHandler+0x78>
 8002222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002226:	e005      	b.n	8002234 <HAL_DMA_IRQHandler+0x78>
 8002228:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800222c:	e002      	b.n	8002234 <HAL_DMA_IRQHandler+0x78>
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	e000      	b.n	8002234 <HAL_DMA_IRQHandler+0x78>
 8002232:	2308      	movs	r3, #8
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d05c      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x138>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d055      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x138>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	f022 0208 	bic.w	r2, r2, #8
 8002256:	601a      	str	r2, [r3, #0]
    
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002258:	4a6a      	ldr	r2, [pc, #424]	; (8002404 <HAL_DMA_IRQHandler+0x248>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	4b69      	ldr	r3, [pc, #420]	; (8002408 <HAL_DMA_IRQHandler+0x24c>)
 8002262:	4299      	cmp	r1, r3
 8002264:	d02e      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x108>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4619      	mov	r1, r3
 800226c:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_DMA_IRQHandler+0x250>)
 800226e:	4299      	cmp	r1, r3
 8002270:	d026      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x104>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4619      	mov	r1, r3
 8002278:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_DMA_IRQHandler+0x254>)
 800227a:	4299      	cmp	r1, r3
 800227c:	d01d      	beq.n	80022ba <HAL_DMA_IRQHandler+0xfe>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4619      	mov	r1, r3
 8002284:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_DMA_IRQHandler+0x258>)
 8002286:	4299      	cmp	r1, r3
 8002288:	d014      	beq.n	80022b4 <HAL_DMA_IRQHandler+0xf8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4619      	mov	r1, r3
 8002290:	4b61      	ldr	r3, [pc, #388]	; (8002418 <HAL_DMA_IRQHandler+0x25c>)
 8002292:	4299      	cmp	r1, r3
 8002294:	d00b      	beq.n	80022ae <HAL_DMA_IRQHandler+0xf2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_DMA_IRQHandler+0x260>)
 800229e:	4299      	cmp	r1, r3
 80022a0:	d102      	bne.n	80022a8 <HAL_DMA_IRQHandler+0xec>
 80022a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80022a6:	e00e      	b.n	80022c6 <HAL_DMA_IRQHandler+0x10a>
 80022a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022ac:	e00b      	b.n	80022c6 <HAL_DMA_IRQHandler+0x10a>
 80022ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022b2:	e008      	b.n	80022c6 <HAL_DMA_IRQHandler+0x10a>
 80022b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b8:	e005      	b.n	80022c6 <HAL_DMA_IRQHandler+0x10a>
 80022ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022be:	e002      	b.n	80022c6 <HAL_DMA_IRQHandler+0x10a>
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	e000      	b.n	80022c6 <HAL_DMA_IRQHandler+0x10a>
 80022c4:	2308      	movs	r3, #8
 80022c6:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;    
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2204      	movs	r2, #4
 80022d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2020 	strb.w	r2, [r3, #32]
    
      if (hdma->XferErrorCallback != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x138>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80022f4:	4b43      	ldr	r3, [pc, #268]	; (8002404 <HAL_DMA_IRQHandler+0x248>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	4b42      	ldr	r3, [pc, #264]	; (8002408 <HAL_DMA_IRQHandler+0x24c>)
 8002300:	4299      	cmp	r1, r3
 8002302:	d02e      	beq.n	8002362 <HAL_DMA_IRQHandler+0x1a6>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	4b40      	ldr	r3, [pc, #256]	; (800240c <HAL_DMA_IRQHandler+0x250>)
 800230c:	4299      	cmp	r1, r3
 800230e:	d026      	beq.n	800235e <HAL_DMA_IRQHandler+0x1a2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <HAL_DMA_IRQHandler+0x254>)
 8002318:	4299      	cmp	r1, r3
 800231a:	d01d      	beq.n	8002358 <HAL_DMA_IRQHandler+0x19c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <HAL_DMA_IRQHandler+0x258>)
 8002324:	4299      	cmp	r1, r3
 8002326:	d014      	beq.n	8002352 <HAL_DMA_IRQHandler+0x196>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <HAL_DMA_IRQHandler+0x25c>)
 8002330:	4299      	cmp	r1, r3
 8002332:	d00b      	beq.n	800234c <HAL_DMA_IRQHandler+0x190>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	4b38      	ldr	r3, [pc, #224]	; (800241c <HAL_DMA_IRQHandler+0x260>)
 800233c:	4299      	cmp	r1, r3
 800233e:	d102      	bne.n	8002346 <HAL_DMA_IRQHandler+0x18a>
 8002340:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002344:	e00e      	b.n	8002364 <HAL_DMA_IRQHandler+0x1a8>
 8002346:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800234a:	e00b      	b.n	8002364 <HAL_DMA_IRQHandler+0x1a8>
 800234c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002350:	e008      	b.n	8002364 <HAL_DMA_IRQHandler+0x1a8>
 8002352:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002356:	e005      	b.n	8002364 <HAL_DMA_IRQHandler+0x1a8>
 8002358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800235c:	e002      	b.n	8002364 <HAL_DMA_IRQHandler+0x1a8>
 800235e:	2340      	movs	r3, #64	; 0x40
 8002360:	e000      	b.n	8002364 <HAL_DMA_IRQHandler+0x1a8>
 8002362:	2304      	movs	r3, #4
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d068      	beq.n	800243c <HAL_DMA_IRQHandler+0x280>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d061      	beq.n	800243c <HAL_DMA_IRQHandler+0x280>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d107      	bne.n	8002396 <HAL_DMA_IRQHandler+0x1da>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	f022 0204 	bic.w	r2, r2, #4
 8002394:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <HAL_DMA_IRQHandler+0x248>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_DMA_IRQHandler+0x24c>)
 80023a0:	4299      	cmp	r1, r3
 80023a2:	d03d      	beq.n	8002420 <HAL_DMA_IRQHandler+0x264>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_DMA_IRQHandler+0x250>)
 80023ac:	4299      	cmp	r1, r3
 80023ae:	d026      	beq.n	80023fe <HAL_DMA_IRQHandler+0x242>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4619      	mov	r1, r3
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <HAL_DMA_IRQHandler+0x254>)
 80023b8:	4299      	cmp	r1, r3
 80023ba:	d01d      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x23c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_DMA_IRQHandler+0x258>)
 80023c4:	4299      	cmp	r1, r3
 80023c6:	d014      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x236>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_DMA_IRQHandler+0x25c>)
 80023d0:	4299      	cmp	r1, r3
 80023d2:	d00b      	beq.n	80023ec <HAL_DMA_IRQHandler+0x230>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_DMA_IRQHandler+0x260>)
 80023dc:	4299      	cmp	r1, r3
 80023de:	d102      	bne.n	80023e6 <HAL_DMA_IRQHandler+0x22a>
 80023e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023e4:	e01d      	b.n	8002422 <HAL_DMA_IRQHandler+0x266>
 80023e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80023ea:	e01a      	b.n	8002422 <HAL_DMA_IRQHandler+0x266>
 80023ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023f0:	e017      	b.n	8002422 <HAL_DMA_IRQHandler+0x266>
 80023f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023f6:	e014      	b.n	8002422 <HAL_DMA_IRQHandler+0x266>
 80023f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023fc:	e011      	b.n	8002422 <HAL_DMA_IRQHandler+0x266>
 80023fe:	2340      	movs	r3, #64	; 0x40
 8002400:	e00f      	b.n	8002422 <HAL_DMA_IRQHandler+0x266>
 8002402:	bf00      	nop
 8002404:	40020000 	.word	0x40020000
 8002408:	40020008 	.word	0x40020008
 800240c:	4002001c 	.word	0x4002001c
 8002410:	40020030 	.word	0x40020030
 8002414:	40020044 	.word	0x40020044
 8002418:	40020058 	.word	0x40020058
 800241c:	4002006c 	.word	0x4002006c
 8002420:	2304      	movs	r3, #4
 8002422:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2211      	movs	r2, #17
 8002428:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_DMA_IRQHandler+0x280>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_DMA_IRQHandler+0x3c4>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	4b4f      	ldr	r3, [pc, #316]	; (8002584 <HAL_DMA_IRQHandler+0x3c8>)
 8002448:	4299      	cmp	r1, r3
 800244a:	d02e      	beq.n	80024aa <HAL_DMA_IRQHandler+0x2ee>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	4b4d      	ldr	r3, [pc, #308]	; (8002588 <HAL_DMA_IRQHandler+0x3cc>)
 8002454:	4299      	cmp	r1, r3
 8002456:	d026      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x2ea>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_DMA_IRQHandler+0x3d0>)
 8002460:	4299      	cmp	r1, r3
 8002462:	d01d      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x2e4>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	4b49      	ldr	r3, [pc, #292]	; (8002590 <HAL_DMA_IRQHandler+0x3d4>)
 800246c:	4299      	cmp	r1, r3
 800246e:	d014      	beq.n	800249a <HAL_DMA_IRQHandler+0x2de>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_DMA_IRQHandler+0x3d8>)
 8002478:	4299      	cmp	r1, r3
 800247a:	d00b      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2d8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	4b45      	ldr	r3, [pc, #276]	; (8002598 <HAL_DMA_IRQHandler+0x3dc>)
 8002484:	4299      	cmp	r1, r3
 8002486:	d102      	bne.n	800248e <HAL_DMA_IRQHandler+0x2d2>
 8002488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800248c:	e00e      	b.n	80024ac <HAL_DMA_IRQHandler+0x2f0>
 800248e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002492:	e00b      	b.n	80024ac <HAL_DMA_IRQHandler+0x2f0>
 8002494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002498:	e008      	b.n	80024ac <HAL_DMA_IRQHandler+0x2f0>
 800249a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800249e:	e005      	b.n	80024ac <HAL_DMA_IRQHandler+0x2f0>
 80024a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a4:	e002      	b.n	80024ac <HAL_DMA_IRQHandler+0x2f0>
 80024a6:	2320      	movs	r3, #32
 80024a8:	e000      	b.n	80024ac <HAL_DMA_IRQHandler+0x2f0>
 80024aa:	2302      	movs	r3, #2
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d061      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3ba>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d05a      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3ba>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <HAL_DMA_IRQHandler+0x322>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	f022 0202 	bic.w	r2, r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024de:	4a28      	ldr	r2, [pc, #160]	; (8002580 <HAL_DMA_IRQHandler+0x3c4>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_DMA_IRQHandler+0x3c8>)
 80024e8:	4299      	cmp	r1, r3
 80024ea:	d02e      	beq.n	800254a <HAL_DMA_IRQHandler+0x38e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_DMA_IRQHandler+0x3cc>)
 80024f4:	4299      	cmp	r1, r3
 80024f6:	d026      	beq.n	8002546 <HAL_DMA_IRQHandler+0x38a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	4b23      	ldr	r3, [pc, #140]	; (800258c <HAL_DMA_IRQHandler+0x3d0>)
 8002500:	4299      	cmp	r1, r3
 8002502:	d01d      	beq.n	8002540 <HAL_DMA_IRQHandler+0x384>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	4b21      	ldr	r3, [pc, #132]	; (8002590 <HAL_DMA_IRQHandler+0x3d4>)
 800250c:	4299      	cmp	r1, r3
 800250e:	d014      	beq.n	800253a <HAL_DMA_IRQHandler+0x37e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <HAL_DMA_IRQHandler+0x3d8>)
 8002518:	4299      	cmp	r1, r3
 800251a:	d00b      	beq.n	8002534 <HAL_DMA_IRQHandler+0x378>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_DMA_IRQHandler+0x3dc>)
 8002524:	4299      	cmp	r1, r3
 8002526:	d102      	bne.n	800252e <HAL_DMA_IRQHandler+0x372>
 8002528:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800252c:	e00e      	b.n	800254c <HAL_DMA_IRQHandler+0x390>
 800252e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002532:	e00b      	b.n	800254c <HAL_DMA_IRQHandler+0x390>
 8002534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002538:	e008      	b.n	800254c <HAL_DMA_IRQHandler+0x390>
 800253a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253e:	e005      	b.n	800254c <HAL_DMA_IRQHandler+0x390>
 8002540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002544:	e002      	b.n	800254c <HAL_DMA_IRQHandler+0x390>
 8002546:	2320      	movs	r3, #32
 8002548:	e000      	b.n	800254c <HAL_DMA_IRQHandler+0x390>
 800254a:	2302      	movs	r3, #2
 800254c:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;    
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3ba>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
      }
    }
  }
}  
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40020000 	.word	0x40020000
 8002584:	40020008 	.word	0x40020008
 8002588:	4002001c 	.word	0x4002001c
 800258c:	40020030 	.word	0x40020030
 8002590:	40020044 	.word	0x40020044
 8002594:	40020058 	.word	0x40020058
 8002598:	4002006c 	.word	0x4002006c

0800259c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d108      	bne.n	80025cc <DMA_SetConfig+0x30>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025ca:	e007      	b.n	80025dc <DMA_SetConfig+0x40>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	60da      	str	r2, [r3, #12]
  }
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80025fe:	e14e      	b.n	800289e <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	4013      	ands	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8140 	beq.w	8002898 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x40>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b12      	cmp	r3, #18
 8002626:	d123      	bne.n	8002670 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	220f      	movs	r2, #15
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	6939      	ldr	r1, [r7, #16]
 800266c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0203 	and.w	r2, r3, #3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d00b      	beq.n	80026c4 <HAL_GPIO_Init+0xdc>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d007      	beq.n	80026c4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026b8:	2b11      	cmp	r3, #17
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b12      	cmp	r3, #18
 80026c2:	d130      	bne.n	8002726 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026fa:	2201      	movs	r2, #1
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f003 0201 	and.w	r2, r3, #1
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 809a 	beq.w	8002898 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002764:	4a55      	ldr	r2, [pc, #340]	; (80028bc <HAL_GPIO_Init+0x2d4>)
 8002766:	4b55      	ldr	r3, [pc, #340]	; (80028bc <HAL_GPIO_Init+0x2d4>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6193      	str	r3, [r2, #24]
 8002770:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_GPIO_Init+0x2d4>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800277c:	4a50      	ldr	r2, [pc, #320]	; (80028c0 <HAL_GPIO_Init+0x2d8>)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3302      	adds	r3, #2
 8002784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	220f      	movs	r2, #15
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027a6:	d013      	beq.n	80027d0 <HAL_GPIO_Init+0x1e8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a46      	ldr	r2, [pc, #280]	; (80028c4 <HAL_GPIO_Init+0x2dc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00d      	beq.n	80027cc <HAL_GPIO_Init+0x1e4>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a45      	ldr	r2, [pc, #276]	; (80028c8 <HAL_GPIO_Init+0x2e0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d007      	beq.n	80027c8 <HAL_GPIO_Init+0x1e0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a44      	ldr	r2, [pc, #272]	; (80028cc <HAL_GPIO_Init+0x2e4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_GPIO_Init+0x1dc>
 80027c0:	2303      	movs	r3, #3
 80027c2:	e006      	b.n	80027d2 <HAL_GPIO_Init+0x1ea>
 80027c4:	2305      	movs	r3, #5
 80027c6:	e004      	b.n	80027d2 <HAL_GPIO_Init+0x1ea>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e002      	b.n	80027d2 <HAL_GPIO_Init+0x1ea>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_GPIO_Init+0x1ea>
 80027d0:	2300      	movs	r3, #0
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	f002 0203 	and.w	r2, r2, #3
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	4093      	lsls	r3, r2
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027e2:	4937      	ldr	r1, [pc, #220]	; (80028c0 <HAL_GPIO_Init+0x2d8>)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f0:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <HAL_GPIO_Init+0x2e8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002814:	4a2e      	ldr	r2, [pc, #184]	; (80028d0 <HAL_GPIO_Init+0x2e8>)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800281a:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_GPIO_Init+0x2e8>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800283e:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <HAL_GPIO_Init+0x2e8>)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_GPIO_Init+0x2e8>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	43db      	mvns	r3, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_GPIO_Init+0x2e8>)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_GPIO_Init+0x2e8>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002892:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <HAL_GPIO_Init+0x2e8>)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3301      	adds	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f47f aea9 	bne.w	8002600 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40010000 	.word	0x40010000
 80028c4:	48000400 	.word	0x48000400
 80028c8:	48000800 	.word	0x48000800
 80028cc:	48000c00 	.word	0x48000c00
 80028d0:	40010400 	.word	0x40010400

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	887b      	ldrh	r3, [r7, #2]
 8002916:	405a      	eors	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	615a      	str	r2, [r3, #20]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07c      	b.n	8002a34 <HAL_I2C_Init+0x10c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff f8a6 	bl	8001aa0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2224      	movs	r2, #36	; 0x24
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6852      	ldr	r2, [r2, #4]
 8002974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002978:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	6892      	ldr	r2, [r2, #8]
 8002984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002988:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d012      	beq.n	80029b8 <HAL_I2C_Init+0x90>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_I2C_Init+0x82>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6892      	ldr	r2, [r2, #8]
 80029a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	e006      	b.n	80029b8 <HAL_I2C_Init+0x90>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6892      	ldr	r2, [r2, #8]
 80029b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029b6:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d104      	bne.n	80029ca <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6911      	ldr	r1, [r2, #16]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6952      	ldr	r2, [r2, #20]
 80029ea:	4311      	orrs	r1, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6992      	ldr	r2, [r2, #24]
 80029f0:	0212      	lsls	r2, r2, #8
 80029f2:	430a      	orrs	r2, r1
 80029f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	69d1      	ldr	r1, [r2, #28]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6a12      	ldr	r2, [r2, #32]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	813b      	strh	r3, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	f040 8109 	bne.w	8002c7a <HAL_I2C_Mem_Write+0x23e>
  { 
    if((pData == NULL) || (Size == 0U))
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_I2C_Mem_Write+0x38>
 8002a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e101      	b.n	8002c7c <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_I2C_Mem_Write+0x4a>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e0fa      	b.n	8002c7c <HAL_I2C_Mem_Write+0x240>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a8e:	f7ff f92d 	bl	8001cec <HAL_GetTick>
 8002a92:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2319      	movs	r3, #25
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 ff67 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e0e5      	b.n	8002c7c <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2221      	movs	r2, #33	; 0x21
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ad8:	88f8      	ldrh	r0, [r7, #6]
 8002ada:	893a      	ldrh	r2, [r7, #8]
 8002adc:	8979      	ldrh	r1, [r7, #10]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fb93 	bl	8003214 <I2C_RequestMemoryWrite>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00f      	beq.n	8002b14 <HAL_I2C_Mem_Write+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d105      	bne.n	8002b08 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b9      	b.n	8002c7c <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0b3      	b.n	8002c7c <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2bff      	cmp	r3, #255	; 0xff
 8002b1c:	d90e      	bls.n	8002b3c <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	8979      	ldrh	r1, [r7, #10]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f001 f831 	bl	8003b9c <I2C_TransferConfig>
 8002b3a:	e00f      	b.n	8002b5c <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	8979      	ldrh	r1, [r7, #10]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f001 f820 	bl	8003b9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 ff41 	bl	80039e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x140>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d101      	bne.n	8002b78 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e081      	b.n	8002c7c <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e07f      	b.n	8002c7c <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c58      	adds	r0, r3, #1
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	6248      	str	r0, [r1, #36]	; 0x24
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d135      	bne.n	8002c1c <HAL_I2C_Mem_Write+0x1e0>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d030      	beq.n	8002c1c <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fed5 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e053      	b.n	8002c7c <HAL_I2C_Mem_Write+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2bff      	cmp	r3, #255	; 0xff
 8002bdc:	d90e      	bls.n	8002bfc <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	22ff      	movs	r2, #255	; 0xff
 8002be2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	8979      	ldrh	r1, [r7, #10]
 8002bec:	2300      	movs	r3, #0
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 ffd1 	bl	8003b9c <I2C_TransferConfig>
 8002bfa:	e00f      	b.n	8002c1c <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	8979      	ldrh	r1, [r7, #10]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 ffc0 	bl	8003b9c <I2C_TransferConfig>
        }
      }

    }while(hi2c->XferCount > 0U);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d19a      	bne.n	8002b5c <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 ff1c 	bl	8003a68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <HAL_I2C_Mem_Write+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e01c      	b.n	8002c7c <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e01a      	b.n	8002c7c <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_I2C_Mem_Write+0x248>)
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	fe00e800 	.word	0xfe00e800

08002c88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	817b      	strh	r3, [r7, #10]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	813b      	strh	r3, [r7, #8]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	f040 8109 	bne.w	8002ec6 <HAL_I2C_Mem_Read+0x23e>
  {
    if((pData == NULL) || (Size == 0U))
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_I2C_Mem_Read+0x38>
 8002cba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e101      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2C_Mem_Read+0x4a>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e0fa      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x240>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cda:	f7ff f807 	bl	8001cec <HAL_GetTick>
 8002cde:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2319      	movs	r3, #25
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fe41 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0e5      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2222      	movs	r2, #34	; 0x22
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2240      	movs	r2, #64	; 0x40
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a3a      	ldr	r2, [r7, #32]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d24:	88f8      	ldrh	r0, [r7, #6]
 8002d26:	893a      	ldrh	r2, [r7, #8]
 8002d28:	8979      	ldrh	r1, [r7, #10]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	4603      	mov	r3, r0
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 facd 	bl	80032d4 <I2C_RequestMemoryRead>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00f      	beq.n	8002d60 <HAL_I2C_Mem_Read+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d105      	bne.n	8002d54 <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0b9      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0b3      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x240>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2bff      	cmp	r3, #255	; 0xff
 8002d68:	d90f      	bls.n	8002d8a <HAL_I2C_Mem_Read+0x102>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	22ff      	movs	r2, #255	; 0xff
 8002d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	8979      	ldrh	r1, [r7, #10]
 8002d78:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 ff0a 	bl	8003b9c <I2C_TransferConfig>
 8002d88:	e010      	b.n	8002dac <HAL_I2C_Mem_Read+0x124>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	8979      	ldrh	r1, [r7, #10]
 8002d9c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fef8 	bl	8003b9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	2200      	movs	r2, #0
 8002db4:	2104      	movs	r1, #4
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fddc 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Mem_Read+0x13e>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e080      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x240>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	1c59      	adds	r1, r3, #1
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	6251      	str	r1, [r2, #36]	; 0x24
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d135      	bne.n	8002e68 <HAL_I2C_Mem_Read+0x1e0>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d030      	beq.n	8002e68 <HAL_I2C_Mem_Read+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fdaf 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_I2C_Mem_Read+0x198>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e053      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2bff      	cmp	r3, #255	; 0xff
 8002e28:	d90e      	bls.n	8002e48 <HAL_I2C_Mem_Read+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	22ff      	movs	r2, #255	; 0xff
 8002e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	8979      	ldrh	r1, [r7, #10]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 feab 	bl	8003b9c <I2C_TransferConfig>
 8002e46:	e00f      	b.n	8002e68 <HAL_I2C_Mem_Read+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	8979      	ldrh	r1, [r7, #10]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fe9a 	bl	8003b9c <I2C_TransferConfig>
        }
      }
    }while(hi2c->XferCount > 0U);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d19c      	bne.n	8002dac <HAL_I2C_Mem_Read+0x124>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fdf6 	bl	8003a68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <HAL_I2C_Mem_Read+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d101      	bne.n	8002e8e <HAL_I2C_Mem_Read+0x206>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e01c      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e01a      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2220      	movs	r2, #32
 8002e98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <HAL_I2C_Mem_Read+0x248>)
 8002ea6:	400b      	ands	r3, r1
 8002ea8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e000      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x240>
  }
  else
  {
    return HAL_BUSY;
 8002ec6:	2302      	movs	r3, #2
  }
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	fe00e800 	.word	0xfe00e800

08002ed4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if(hi2c->XferISR != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
  }
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if(((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00f      	beq.n	8002f4a <HAL_I2C_ER_IRQHandler+0x42>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	f043 0201 	orr.w	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f48:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if(((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00f      	beq.n	8002f74 <HAL_I2C_ER_IRQHandler+0x6c>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f043 0208 	orr.w	r2, r3, #8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f72:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if(((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00f      	beq.n	8002f9e <HAL_I2C_ER_IRQHandler+0x96>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	f043 0202 	orr.w	r2, r3, #2
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9c:	61da      	str	r2, [r3, #28]
  }

  /* Call the Error Callback in case of Error detected */
  if((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f003 030b 	and.w	r3, r3, #11
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fbd3 	bl	800375c <I2C_ITError>
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop

08002fc0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */ 
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */ 
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources) 
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <I2C_Slave_ISR_IT+0x1a>
 8003056:	2302      	movs	r3, #2
 8003058:	e0d8      	b.n	800320c <I2C_Slave_ISR_IT+0x1cc>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	d045      	beq.n	80030f8 <I2C_Slave_ISR_IT+0xb8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d040      	beq.n	80030f8 <I2C_Slave_ISR_IT+0xb8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if(hi2c->XferCount == 0U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d12f      	bne.n	80030e0 <I2C_Slave_ISR_IT+0xa0>
    {
      if(((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003088:	d004      	beq.n	8003094 <I2C_Slave_ISR_IT+0x54>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003092:	d10a      	bne.n	80030aa <I2C_Slave_ISR_IT+0x6a>
        (hi2c->State == HAL_I2C_STATE_LISTEN))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309a:	b2db      	uxtb	r3, r3
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if(hi2c->XferCount == 0U)
    {
      if(((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 800309c:	2b28      	cmp	r3, #40	; 0x28
 800309e:	d104      	bne.n	80030aa <I2C_Slave_ISR_IT+0x6a>
        (hi2c->State == HAL_I2C_STATE_LISTEN))
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, ITFlags);
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fb08 	bl	80036b8 <I2C_ITListenCplt>
 80030a8:	e025      	b.n	80030f6 <I2C_Slave_ISR_IT+0xb6>
      }
      else if((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030b2:	d010      	beq.n	80030d6 <I2C_Slave_ISR_IT+0x96>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b29      	cmp	r3, #41	; 0x29
 80030be:	d10a      	bne.n	80030d6 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2210      	movs	r2, #16
 80030c6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fc03 	bl	80038d4 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f9e6 	bl	80034a0 <I2C_ITSlaveSequentialCplt>
 80030d4:	e00f      	b.n	80030f6 <I2C_Slave_ISR_IT+0xb6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2210      	movs	r2, #16
 80030dc:	61da      	str	r2, [r3, #28]
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if(hi2c->XferCount == 0U)
 80030de:	e082      	b.n	80031e6 <I2C_Slave_ISR_IT+0x1a6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2210      	movs	r2, #16
 80030e6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f043 0204 	orr.w	r2, r3, #4
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if(hi2c->XferCount == 0U)
 80030f4:	e077      	b.n	80031e6 <I2C_Slave_ISR_IT+0x1a6>
 80030f6:	e076      	b.n	80031e6 <I2C_Slave_ISR_IT+0x1a6>

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    }
  }
  else if(((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d02e      	beq.n	8003160 <I2C_Slave_ISR_IT+0x120>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d029      	beq.n	8003160 <I2C_Slave_ISR_IT+0x120>
  {
    if(hi2c->XferCount > 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <I2C_Slave_ISR_IT+0x104>
    {
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	1c59      	adds	r1, r3, #1
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	6251      	str	r1, [r2, #36]	; 0x24
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if((hi2c->XferCount == 0U) && \
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d14a      	bne.n	80031e4 <I2C_Slave_ISR_IT+0x1a4>
       (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
      hi2c->XferCount--;
    }

    if((hi2c->XferCount == 0U) && \
 8003152:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003156:	d045      	beq.n	80031e4 <I2C_Slave_ISR_IT+0x1a4>
       (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSequentialCplt(hi2c);
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f9a1 	bl	80034a0 <I2C_ITSlaveSequentialCplt>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
      hi2c->XferCount--;
    }

    if((hi2c->XferCount == 0U) && \
 800315e:	e041      	b.n	80031e4 <I2C_Slave_ISR_IT+0x1a4>
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSequentialCplt(hi2c);
   }
  }
  else if(((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <I2C_Slave_ISR_IT+0x13e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d004      	beq.n	800317e <I2C_Slave_ISR_IT+0x13e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f90a 	bl	8003390 <I2C_ITAddrCplt>
 800317c:	e033      	b.n	80031e6 <I2C_Slave_ISR_IT+0x1a6>
  }
  else if(((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02e      	beq.n	80031e6 <I2C_Slave_ISR_IT+0x1a6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d029      	beq.n	80031e6 <I2C_Slave_ISR_IT+0x1a6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if(hi2c->XferCount > 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d016      	beq.n	80031ca <I2C_Slave_ISR_IT+0x18a>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c58      	adds	r0, r3, #1
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	6248      	str	r0, [r1, #36]	; 0x24
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	; 0x28
 80031c8:	e00d      	b.n	80031e6 <I2C_Slave_ISR_IT+0x1a6>
    }
    else
    {
      if((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d2:	d003      	beq.n	80031dc <I2C_Slave_ISR_IT+0x19c>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d104      	bne.n	80031e6 <I2C_Slave_ISR_IT+0x1a6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f95f 	bl	80034a0 <I2C_ITSlaveSequentialCplt>
 80031e2:	e000      	b.n	80031e6 <I2C_Slave_ISR_IT+0x1a6>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
      hi2c->XferCount--;
    }

    if((hi2c->XferCount == 0U) && \
 80031e4:	bf00      	nop
      }
    }
  }

  /* Check if STOPF is set */
  if(((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <I2C_Slave_ISR_IT+0x1c2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <I2C_Slave_ISR_IT+0x1c2>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f98d 	bl	800351c <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4603      	mov	r3, r0
 8003224:	817b      	strh	r3, [r7, #10]
 8003226:	460b      	mov	r3, r1
 8003228:	813b      	strh	r3, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	8979      	ldrh	r1, [r7, #10]
 8003234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fcac 	bl	8003b9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	69b9      	ldr	r1, [r7, #24]
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fbcd 	bl	80039e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <I2C_RequestMemoryWrite+0x50>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	2b04      	cmp	r3, #4
 800325a:	d101      	bne.n	8003260 <I2C_RequestMemoryWrite+0x4c>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e034      	b.n	80032ca <I2C_RequestMemoryWrite+0xb6>
    }
    else
    {
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e032      	b.n	80032ca <I2C_RequestMemoryWrite+0xb6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d105      	bne.n	8003276 <I2C_RequestMemoryWrite+0x62>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	893a      	ldrh	r2, [r7, #8]
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
 8003274:	e01b      	b.n	80032ae <I2C_RequestMemoryWrite+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	893a      	ldrh	r2, [r7, #8]
 800327c:	0a12      	lsrs	r2, r2, #8
 800327e:	b292      	uxth	r2, r2
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	69b9      	ldr	r1, [r7, #24]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fbad 	bl	80039e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <I2C_RequestMemoryWrite+0x90>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	2b04      	cmp	r3, #4
 800329a:	d101      	bne.n	80032a0 <I2C_RequestMemoryWrite+0x8c>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e014      	b.n	80032ca <I2C_RequestMemoryWrite+0xb6>
      }
      else
      {
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e012      	b.n	80032ca <I2C_RequestMemoryWrite+0xb6>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	893a      	ldrh	r2, [r7, #8]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fb5b 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <I2C_RequestMemoryWrite+0xb4>
  {
    return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e000      	b.n	80032ca <I2C_RequestMemoryWrite+0xb6>
  }

return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop

080032d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	461a      	mov	r2, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	817b      	strh	r3, [r7, #10]
 80032e6:	460b      	mov	r3, r1
 80032e8:	813b      	strh	r3, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	8979      	ldrh	r1, [r7, #10]
 80032f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2300      	movs	r3, #0
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fc4d 	bl	8003b9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	69b9      	ldr	r1, [r7, #24]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fb6e 	bl	80039e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <I2C_RequestMemoryRead+0x4e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	2b04      	cmp	r3, #4
 8003318:	d101      	bne.n	800331e <I2C_RequestMemoryRead+0x4a>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e034      	b.n	8003388 <I2C_RequestMemoryRead+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e032      	b.n	8003388 <I2C_RequestMemoryRead+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d105      	bne.n	8003334 <I2C_RequestMemoryRead+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	893a      	ldrh	r2, [r7, #8]
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
 8003332:	e01b      	b.n	800336c <I2C_RequestMemoryRead+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	893a      	ldrh	r2, [r7, #8]
 800333a:	0a12      	lsrs	r2, r2, #8
 800333c:	b292      	uxth	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	69b9      	ldr	r1, [r7, #24]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fb4e 	bl	80039e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <I2C_RequestMemoryRead+0x8e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	2b04      	cmp	r3, #4
 8003358:	d101      	bne.n	800335e <I2C_RequestMemoryRead+0x8a>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e014      	b.n	8003388 <I2C_RequestMemoryRead+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e012      	b.n	8003388 <I2C_RequestMemoryRead+0xb4>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	893a      	ldrh	r2, [r7, #8]
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2200      	movs	r2, #0
 8003374:	2140      	movs	r1, #64	; 0x40
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fafc 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_RequestMemoryRead+0xb2>
  {
    return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e000      	b.n	8003388 <I2C_RequestMemoryRead+0xb4>
  }
  
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint8_t transferdirection = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]
  uint16_t slaveaddrcode = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	81bb      	strh	r3, [r7, #12]
  uint16_t ownadd1code = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	817b      	strh	r3, [r7, #10]
  uint16_t ownadd2code = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	813b      	strh	r3, [r7, #8]

  /* In case of Listen state, need to inform upper layer of address match code event */
  if((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033b6:	2b28      	cmp	r3, #40	; 0x28
 80033b8:	d165      	bne.n	8003486 <I2C_ITAddrCplt+0xf6>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80033f0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d136      	bne.n	8003468 <I2C_ITAddrCplt+0xd8>
    {
      if((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80033fa:	89bb      	ldrh	r3, [r7, #12]
 80033fc:	897a      	ldrh	r2, [r7, #10]
 80033fe:	09d2      	lsrs	r2, r2, #7
 8003400:	b292      	uxth	r2, r2
 8003402:	4053      	eors	r3, r2
 8003404:	f003 0306 	and.w	r3, r3, #6
 8003408:	2b00      	cmp	r3, #0
 800340a:	d11c      	bne.n	8003446 <I2C_ITAddrCplt+0xb6>
      {
        slaveaddrcode = ownadd1code;
 800340c:	897b      	ldrh	r3, [r7, #10]
 800340e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	649a      	str	r2, [r3, #72]	; 0x48
        if(hi2c->AddrEventCount == 2U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341e:	2b02      	cmp	r3, #2
 8003420:	d139      	bne.n	8003496 <I2C_ITAddrCplt+0x106>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c,I2C_FLAG_ADDR);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2208      	movs	r2, #8
 800342e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003438:	89ba      	ldrh	r2, [r7, #12]
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff fdd2 	bl	8002fe8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003444:	e027      	b.n	8003496 <I2C_ITAddrCplt+0x106>
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
        }
      }
      else
      {
        slaveaddrcode = ownadd2code;
 8003446:	893b      	ldrh	r3, [r7, #8]
 8003448:	81bb      	strh	r3, [r7, #12]

        /* Disable ADDR Interrupts */
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800344a:	2104      	movs	r1, #4
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fbd3 	bl	8003bf8 <I2C_Disable_IRQ>

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Call Slave Addr callback */
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800345a:	89ba      	ldrh	r2, [r7, #12]
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fdc1 	bl	8002fe8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003466:	e016      	b.n	8003496 <I2C_ITAddrCplt+0x106>
    }
    /* else 7 bits addressing mode is selected */
    else
    {
      /* Disable ADDR Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003468:	2104      	movs	r1, #4
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fbc4 	bl	8003bf8 <I2C_Disable_IRQ>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Call Slave Addr callback */
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003478:	89ba      	ldrh	r2, [r7, #12]
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff fdb2 	bl	8002fe8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003484:	e007      	b.n	8003496 <I2C_ITAddrCplt+0x106>
  }
  /* Else clear address flag only */
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2208      	movs	r2, #8
 800348c:	61da      	str	r2, [r3, #28]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop

080034a0 <I2C_ITSlaveSequentialCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSequentialCplt(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b29      	cmp	r3, #41	; 0x29
 80034ba:	d112      	bne.n	80034e2 <I2C_ITSlaveSequentialCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2228      	movs	r2, #40	; 0x28
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2221      	movs	r2, #33	; 0x21
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034ca:	2101      	movs	r1, #1
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fb93 	bl	8003bf8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the Tx complete callback to inform upper layer of the end of transmit process */
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fd70 	bl	8002fc0 <HAL_I2C_SlaveTxCpltCallback>
    __HAL_UNLOCK(hi2c);

    /* Call the Rx complete callback to inform upper layer of the end of receive process */
    HAL_I2C_SlaveRxCpltCallback(hi2c);
  }
}
 80034e0:	e017      	b.n	8003512 <I2C_ITSlaveSequentialCplt+0x72>

    /* Call the Tx complete callback to inform upper layer of the end of transmit process */
    HAL_I2C_SlaveTxCpltCallback(hi2c);
  }

  else if(hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b2a      	cmp	r3, #42	; 0x2a
 80034ec:	d111      	bne.n	8003512 <I2C_ITSlaveSequentialCplt+0x72>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_RX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2228      	movs	r2, #40	; 0x28
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2222      	movs	r2, #34	; 0x22
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80034fc:	2102      	movs	r1, #2
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fb7a 	bl	8003bf8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the Rx complete callback to inform upper layer of the end of receive process */
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff fd61 	bl	8002fd4 <HAL_I2C_SlaveRxCpltCallback>
  }
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop

0800351c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2220      	movs	r2, #32
 800352c:	61da      	str	r2, [r3, #28]

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_FLAG(hi2c,I2C_FLAG_ADDR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2208      	movs	r2, #8
 8003534:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003536:	2107      	movs	r1, #7
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fb5d 	bl	8003bf8 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	6852      	ldr	r2, [r2, #4]
 8003548:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800354c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	4b55      	ldr	r3, [pc, #340]	; (80036b0 <I2C_ITSlaveCplt+0x194>)
 800355a:	400b      	ands	r3, r1
 800355c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f9b8 	bl	80038d4 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if(((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <I2C_ITSlaveCplt+0x64>
     ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);

  /* If a DMA is ongoing, Update handle size context */
  if(((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800357c:	2b00      	cmp	r3, #0
 800357e:	d012      	beq.n	80035a6 <I2C_ITSlaveCplt+0x8a>
     ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
  {
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b21      	cmp	r3, #33	; 0x21
 800358a:	d105      	bne.n	8003598 <I2C_ITSlaveCplt+0x7c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	b29b      	uxth	r3, r3
 8003596:	e004      	b.n	80035a2 <I2C_ITSlaveCplt+0x86>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	8553      	strh	r3, [r2, #42]	; 0x2a
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <I2C_ITSlaveCplt+0xa0>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Store Last receive data if any */
  if(((ITFlags & I2C_FLAG_RXNE) != RESET))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d020      	beq.n	8003608 <I2C_ITSlaveCplt+0xec>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	1c59      	adds	r1, r3, #1
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6251      	str	r1, [r2, #36]	; 0x24
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]

    if((hi2c->XferSize > 0U))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d012      	beq.n	8003608 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferSize--;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	f043 0204 	orr.w	r2, r3, #4
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	635a      	str	r2, [r3, #52]	; 0x34

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	2b00      	cmp	r3, #0
 8003622:	d010      	beq.n	8003646 <I2C_ITSlaveCplt+0x12a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f896 	bl	800375c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if(hi2c->State == HAL_I2C_STATE_LISTEN)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b28      	cmp	r3, #40	; 0x28
 800363a:	d135      	bne.n	80036a8 <I2C_ITSlaveCplt+0x18c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, ITFlags);
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f83a 	bl	80036b8 <I2C_ITListenCplt>
    __HAL_UNLOCK(hi2c);

    /* Call the Slave Tx Complete callback */
    HAL_I2C_SlaveTxCpltCallback(hi2c);
  }
}
 8003644:	e030      	b.n	80036a8 <I2C_ITSlaveCplt+0x18c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, ITFlags);
    }
  }
  else if(hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800364e:	d00e      	beq.n	800366e <I2C_ITSlaveCplt+0x152>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <I2C_ITSlaveCplt+0x198>)
 8003654:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fccc 	bl	8003004 <HAL_I2C_ListenCpltCallback>
    __HAL_UNLOCK(hi2c);

    /* Call the Slave Tx Complete callback */
    HAL_I2C_SlaveTxCpltCallback(hi2c);
  }
}
 800366c:	e01c      	b.n	80036a8 <I2C_ITSlaveCplt+0x18c>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
  }
  /* Call the corresponding callback to inform upper layer of End of Transfer */
  else if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b22      	cmp	r3, #34	; 0x22
 8003678:	d10b      	bne.n	8003692 <I2C_ITSlaveCplt+0x176>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the Slave Rx Complete callback */
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff fca2 	bl	8002fd4 <HAL_I2C_SlaveRxCpltCallback>
    __HAL_UNLOCK(hi2c);

    /* Call the Slave Tx Complete callback */
    HAL_I2C_SlaveTxCpltCallback(hi2c);
  }
}
 8003690:	e00a      	b.n	80036a8 <I2C_ITSlaveCplt+0x18c>
    /* Call the Slave Rx Complete callback */
    HAL_I2C_SlaveRxCpltCallback(hi2c);
  }
  else
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the Slave Tx Complete callback */
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fc8c 	bl	8002fc0 <HAL_I2C_SlaveTxCpltCallback>
  }
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	fe00e800 	.word	0xfe00e800
 80036b4:	ffff0000 	.word	0xffff0000

080036b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a24      	ldr	r2, [pc, #144]	; (8003758 <I2C_ITListenCplt+0xa0>)
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if(((ITFlags & I2C_FLAG_RXNE) != RESET))
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d020      	beq.n	8003730 <I2C_ITListenCplt+0x78>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	1c59      	adds	r1, r3, #1
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6251      	str	r1, [r2, #36]	; 0x24
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

    if((hi2c->XferSize > 0U))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	2b00      	cmp	r3, #0
 8003708:	d012      	beq.n	8003730 <I2C_ITListenCplt+0x78>
    {
      hi2c->XferSize--;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003730:	2107      	movs	r1, #7
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fa60 	bl	8003bf8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2210      	movs	r2, #16
 800373e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
  HAL_I2C_ListenCpltCallback(hi2c);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff fc5b 	bl	8003004 <HAL_I2C_ListenCpltCallback>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	ffff0000 	.word	0xffff0000

0800375c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a55      	ldr	r2, [pc, #340]	; (80038c8 <I2C_ITError+0x16c>)
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b28      	cmp	r3, #40	; 0x28
 8003790:	d00b      	beq.n	80037aa <I2C_ITError+0x4e>
     (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003798:	b2db      	uxtb	r3, r3

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;

  /* Disable Interrupts */
  if((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 800379a:	2b29      	cmp	r3, #41	; 0x29
 800379c:	d005      	beq.n	80037aa <I2C_ITError+0x4e>
     (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
     (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a4:	b2db      	uxtb	r3, r3
  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;

  /* Disable Interrupts */
  if((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
     (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80037a6:	2b2a      	cmp	r3, #42	; 0x2a
 80037a8:	d10e      	bne.n	80037c8 <I2C_ITError+0x6c>
     (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037aa:	2103      	movs	r1, #3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fa23 	bl	8003bf8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2228      	movs	r2, #40	; 0x28
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a42      	ldr	r2, [pc, #264]	; (80038cc <I2C_ITError+0x170>)
 80037c4:	635a      	str	r2, [r3, #52]	; 0x34
 80037c6:	e013      	b.n	80037f0 <I2C_ITError+0x94>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037c8:	2107      	movs	r1, #7
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fa14 	bl	8003bf8 <I2C_Disable_IRQ>
    
    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if(hi2c->State != HAL_I2C_STATE_ABORT)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b60      	cmp	r3, #96	; 0x60
 80037da:	d003      	beq.n	80037e4 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01f      	beq.n	800383e <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800380c:	601a      	str	r2, [r3, #0]

    /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	4a2f      	ldr	r2, [pc, #188]	; (80038d0 <I2C_ITError+0x174>)
 8003814:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Abort DMA TX */
    if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fc4e 	bl	80020c4 <HAL_DMA_Abort_IT>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d047      	beq.n	80038be <I2C_ITError+0x162>
    {
      /* Call Directly XferAbortCallback function in case of error */
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003838:	4610      	mov	r0, r2
 800383a:	4798      	blx	r3
    __HAL_UNLOCK(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 800383c:	e03f      	b.n	80038be <I2C_ITError+0x162>
      /* Call Directly XferAbortCallback function in case of error */
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
    }
  }
  /* Abort DMA RX transfer if any */
  else if((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01f      	beq.n	800388c <I2C_ITError+0x130>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800385a:	601a      	str	r2, [r3, #0]

    /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <I2C_ITError+0x174>)
 8003862:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Abort DMA RX */
    if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe fc27 	bl	80020c4 <HAL_DMA_Abort_IT>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <I2C_ITError+0x162>
    {
      /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003886:	4610      	mov	r0, r2
 8003888:	4798      	blx	r3
    __HAL_UNLOCK(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 800388a:	e018      	b.n	80038be <I2C_ITError+0x162>
    {
      /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b60      	cmp	r3, #96	; 0x60
 8003896:	d10b      	bne.n	80038b0 <I2C_ITError+0x154>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff fbbf 	bl	800302c <HAL_I2C_AbortCpltCallback>
    __HAL_UNLOCK(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 80038ae:	e006      	b.n	80038be <I2C_ITError+0x162>
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff fbad 	bl	8003018 <HAL_I2C_ErrorCallback>
  }
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	ffff0000 	.word	0xffff0000
 80038cc:	08003041 	.word	0x08003041
 80038d0:	0800391d 	.word	0x0800391d

080038d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	6992      	ldr	r2, [r2, #24]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	619a      	str	r2, [r3, #24]
  }
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	6852      	ldr	r2, [r2, #4]
 8003934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003938:	605a      	str	r2, [r3, #4]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	2200      	movs	r2, #0
 8003940:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	2200      	movs	r2, #0
 8003948:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b60      	cmp	r3, #96	; 0x60
 8003954:	d107      	bne.n	8003966 <I2C_DMAAbort+0x4a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff fb64 	bl	800302c <HAL_I2C_AbortCpltCallback>
  else
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8003964:	e002      	b.n	800396c <I2C_DMAAbort+0x50>
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff fb56 	bl	8003018 <HAL_I2C_ErrorCallback>
  }
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003984:	e01c      	b.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d018      	beq.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003994:	f7fe f9aa 	bl	8001cec <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	1ad2      	subs	r2, r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d90d      	bls.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e00f      	b.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x6c>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	401a      	ands	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d0d3      	beq.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x12>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039f4:	e02c      	b.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f870 	bl	8003ae0 <I2C_IsAcknowledgeFailed>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e02a      	b.n	8003a60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d01e      	beq.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a18:	f7fe f968 	bl	8001cec <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	1ad2      	subs	r2, r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d913      	bls.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e007      	b.n	8003a60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0cb      	beq.n	80039f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a74:	e028      	b.n	8003ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f830 	bl	8003ae0 <I2C_IsAcknowledgeFailed>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e026      	b.n	8003ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d007      	beq.n	8003aa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a90:	f7fe f92c 	bl	8001cec <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	1ad2      	subs	r2, r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d913      	bls.n	8003ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	f043 0220 	orr.w	r2, r3, #32
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e007      	b.n	8003ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0cf      	beq.n	8003a76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d048      	beq.n	8003b8c <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003afa:	e01c      	b.n	8003b36 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b02:	d018      	beq.n	8003b36 <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <I2C_IsAcknowledgeFailed+0x3a>
 8003b0a:	f7fe f8ef 	bl	8001cec <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	1ad2      	subs	r2, r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d90d      	bls.n	8003b36 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e02b      	b.n	8003b8e <I2C_IsAcknowledgeFailed+0xae>
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0db      	beq.n	8003afc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2210      	movs	r2, #16
 8003b4a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2220      	movs	r2, #32
 8003b52:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f7ff febd 	bl	80038d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <I2C_IsAcknowledgeFailed+0xb8>)
 8003b66:	400b      	ands	r3, r1
 8003b68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	fe00e800 	.word	0xfe00e800

08003b9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	817b      	strh	r3, [r7, #10]
 8003baa:	4613      	mov	r3, r2
 8003bac:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <I2C_TransferConfig+0x58>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bc8:	7a7b      	ldrb	r3, [r7, #9]
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	605a      	str	r2, [r3, #4]
}
 8003be8:	bf00      	nop
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	fc009800 	.word	0xfc009800

08003bf8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]

  if((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c08:	887b      	ldrh	r3, [r7, #2]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00f      	beq.n	8003c32 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003c18:	60fb      	str	r3, [r7, #12]

    if((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c26:	2b28      	cmp	r3, #40	; 0x28
 8003c28:	d003      	beq.n	8003c32 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003c30:	60fb      	str	r3, [r7, #12]
    }
  }

  if((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00f      	beq.n	8003c5c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003c42:	60fb      	str	r3, [r7, #12]

    if((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c50:	2b28      	cmp	r3, #40	; 0x28
 8003c52:	d003      	beq.n	8003c5c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003c5a:	60fb      	str	r3, [r7, #12]
    }
  }

  if((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c5c:	887b      	ldrh	r3, [r7, #2]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c6c:	60fb      	str	r3, [r7, #12]
  }

  if((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003c6e:	887b      	ldrh	r3, [r7, #2]
 8003c70:	f003 0311 	and.w	r3, r3, #17
 8003c74:	2b11      	cmp	r3, #17
 8003c76:	d103      	bne.n	8003c80 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c7e:	60fb      	str	r3, [r7, #12]
  }

  if((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003c80:	887b      	ldrh	r3, [r7, #2]
 8003c82:	f003 0312 	and.w	r3, r3, #18
 8003c86:	2b12      	cmp	r3, #18
 8003c88:	d103      	bne.n	8003c92 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f043 0320 	orr.w	r3, r3, #32
 8003c90:	60fb      	str	r3, [r7, #12]
  }
  
  if((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8003c92:	887b      	ldrh	r3, [r7, #2]
 8003c94:	f003 0312 	and.w	r3, r3, #18
 8003c98:	2b12      	cmp	r3, #18
 8003c9a:	d103      	bne.n	8003ca4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	6811      	ldr	r1, [r2, #0]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	43d2      	mvns	r2, r2
 8003cb2:	400a      	ands	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d138      	bne.n	8003d4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  { 
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e032      	b.n	8003d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	; 0x24
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
    
    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d16:	601a      	str	r2, [r3, #0]
    
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	6811      	ldr	r1, [r2, #0]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
    
    __HAL_I2C_ENABLE(hi2c); 
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    return HAL_OK; 
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop

08003d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d5c:	b590      	push	{r4, r7, lr}
 8003d5e:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 81e8 	beq.w	800414e <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d7e:	4bb8      	ldr	r3, [pc, #736]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d00c      	beq.n	8003da4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d8a:	4bb5      	ldr	r3, [pc, #724]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	f040 8082 	bne.w	8003e9c <HAL_RCC_OscConfig+0x140>
 8003d98:	4bb1      	ldr	r3, [pc, #708]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d07b      	beq.n	8003e9c <HAL_RCC_OscConfig+0x140>
 8003da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003da8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003db0:	fa93 f2a3 	rbit	r2, r3
 8003db4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003db8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003dba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003dbe:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	fab3 f383 	clz	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f043 0320 	orr.w	r3, r3, #32
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d102      	bne.n	8003ddc <HAL_RCC_OscConfig+0x80>
 8003dd6:	4ba2      	ldr	r3, [pc, #648]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	e039      	b.n	8003e50 <HAL_RCC_OscConfig+0xf4>
 8003ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003de0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003de8:	fa93 f2a3 	rbit	r2, r3
 8003dec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003df0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003df2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	fab3 f383 	clz	r3, r3
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f043 0320 	orr.w	r3, r3, #32
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d102      	bne.n	8003e14 <HAL_RCC_OscConfig+0xb8>
 8003e0e:	4b94      	ldr	r3, [pc, #592]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	e01d      	b.n	8003e50 <HAL_RCC_OscConfig+0xf4>
 8003e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e18:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003e20:	fa93 f2a3 	rbit	r2, r3
 8003e24:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e28:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003e2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	fab3 f383 	clz	r3, r3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f043 0320 	orr.w	r3, r3, #32
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d102      	bne.n	8003e4c <HAL_RCC_OscConfig+0xf0>
 8003e46:	4b86      	ldr	r3, [pc, #536]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	e001      	b.n	8003e50 <HAL_RCC_OscConfig+0xf4>
 8003e4c:	4b84      	ldr	r3, [pc, #528]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e54:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8003e5c:	fa92 f1a2 	rbit	r1, r2
 8003e60:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8003e64:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003e66:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	fab2 f282 	clz	r2, r2
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	f042 0220 	orr.w	r2, r2, #32
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	f002 021f 	and.w	r2, r2, #31
 8003e7e:	40d3      	lsrs	r3, r2
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8161 	beq.w	800414c <HAL_RCC_OscConfig+0x3f0>
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f040 815b 	bne.w	800414c <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f001 b81a 	b.w	8004ed0 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e9c:	1d3b      	adds	r3, r7, #4
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea6:	d106      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x15a>
 8003ea8:	4a6d      	ldr	r2, [pc, #436]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003eaa:	4b6d      	ldr	r3, [pc, #436]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	e030      	b.n	8003f18 <HAL_RCC_OscConfig+0x1bc>
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10c      	bne.n	8003eda <HAL_RCC_OscConfig+0x17e>
 8003ec0:	4a67      	ldr	r2, [pc, #412]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003ec2:	4b67      	ldr	r3, [pc, #412]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4a64      	ldr	r2, [pc, #400]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003ece:	4b64      	ldr	r3, [pc, #400]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e01e      	b.n	8003f18 <HAL_RCC_OscConfig+0x1bc>
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x1a4>
 8003ee6:	4a5e      	ldr	r2, [pc, #376]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003ee8:	4b5d      	ldr	r3, [pc, #372]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4a5b      	ldr	r2, [pc, #364]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003ef4:	4b5a      	ldr	r3, [pc, #360]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0x1bc>
 8003f00:	4a57      	ldr	r2, [pc, #348]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003f02:	4b57      	ldr	r3, [pc, #348]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	4a54      	ldr	r2, [pc, #336]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003f0e:	4b54      	ldr	r3, [pc, #336]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f16:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f18:	4951      	ldr	r1, [pc, #324]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003f1a:	4b51      	ldr	r3, [pc, #324]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	f023 020f 	bic.w	r2, r3, #15
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f2c:	1d3b      	adds	r3, r7, #4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8083 	beq.w	800403e <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fd fed8 	bl	8001cec <HAL_GetTick>
 8003f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f42:	f7fd fed3 	bl	8001cec <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d902      	bls.n	8003f58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	f000 bfbc 	b.w	8004ed0 <HAL_RCC_OscConfig+0x1174>
 8003f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f5c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003f64:	fa93 f2a3 	rbit	r2, r3
 8003f68:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003f6c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003f6e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003f72:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f043 0320 	orr.w	r3, r3, #32
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d102      	bne.n	8003f90 <HAL_RCC_OscConfig+0x234>
 8003f8a:	4b35      	ldr	r3, [pc, #212]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	e039      	b.n	8004004 <HAL_RCC_OscConfig+0x2a8>
 8003f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f94:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f98:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f9c:	fa93 f2a3 	rbit	r2, r3
 8003fa0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003fa4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003fa6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f043 0320 	orr.w	r3, r3, #32
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d102      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x26c>
 8003fc2:	4b27      	ldr	r3, [pc, #156]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	e01d      	b.n	8004004 <HAL_RCC_OscConfig+0x2a8>
 8003fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fcc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003fd4:	fa93 f2a3 	rbit	r2, r3
 8003fd8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003fdc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003fde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	fab3 f383 	clz	r3, r3
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f043 0320 	orr.w	r3, r3, #32
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d102      	bne.n	8004000 <HAL_RCC_OscConfig+0x2a4>
 8003ffa:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	e001      	b.n	8004004 <HAL_RCC_OscConfig+0x2a8>
 8004000:	4b17      	ldr	r3, [pc, #92]	; (8004060 <HAL_RCC_OscConfig+0x304>)
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004008:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8004010:	fa92 f1a2 	rbit	r1, r2
 8004014:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8004018:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800401a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	fab2 f282 	clz	r2, r2
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	f042 0220 	orr.w	r2, r2, #32
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f002 021f 	and.w	r2, r2, #31
 8004032:	40d3      	lsrs	r3, r2
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d082      	beq.n	8003f42 <HAL_RCC_OscConfig+0x1e6>
 800403c:	e087      	b.n	800414e <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fd fe55 	bl	8001cec <HAL_GetTick>
 8004042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	e00d      	b.n	8004064 <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004048:	f7fd fe50 	bl	8001cec <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	; 0x64
 8004056:	d905      	bls.n	8004064 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	f000 bf39 	b.w	8004ed0 <HAL_RCC_OscConfig+0x1174>
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004068:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004070:	fa93 f2a3 	rbit	r2, r3
 8004074:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004078:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800407a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800407e:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f043 0320 	orr.w	r3, r3, #32
 800408a:	b2db      	uxtb	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b01      	cmp	r3, #1
 8004094:	d102      	bne.n	800409c <HAL_RCC_OscConfig+0x340>
 8004096:	4bb6      	ldr	r3, [pc, #728]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	e039      	b.n	8004110 <HAL_RCC_OscConfig+0x3b4>
 800409c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80040a8:	fa93 f2a3 	rbit	r2, r3
 80040ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040b0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80040b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f043 0320 	orr.w	r3, r3, #32
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d102      	bne.n	80040d4 <HAL_RCC_OscConfig+0x378>
 80040ce:	4ba8      	ldr	r3, [pc, #672]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	e01d      	b.n	8004110 <HAL_RCC_OscConfig+0x3b4>
 80040d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80040e0:	fa93 f2a3 	rbit	r2, r3
 80040e4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80040e8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80040ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f043 0320 	orr.w	r3, r3, #32
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b04      	cmp	r3, #4
 8004104:	d102      	bne.n	800410c <HAL_RCC_OscConfig+0x3b0>
 8004106:	4b9a      	ldr	r3, [pc, #616]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	e001      	b.n	8004110 <HAL_RCC_OscConfig+0x3b4>
 800410c:	4b98      	ldr	r3, [pc, #608]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004114:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004118:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800411c:	fa92 f1a2 	rbit	r1, r2
 8004120:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8004124:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004126:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	fab2 f282 	clz	r2, r2
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	f042 0220 	orr.w	r2, r2, #32
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	f002 021f 	and.w	r2, r2, #31
 800413e:	40d3      	lsrs	r3, r2
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	f47f af7f 	bne.w	8004048 <HAL_RCC_OscConfig+0x2ec>
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 81f4 	beq.w	8004546 <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800415e:	4b84      	ldr	r3, [pc, #528]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800416a:	4b81      	ldr	r3, [pc, #516]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b08      	cmp	r3, #8
 8004174:	f040 8099 	bne.w	80042aa <HAL_RCC_OscConfig+0x54e>
 8004178:	4b7d      	ldr	r3, [pc, #500]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004180:	2b00      	cmp	r3, #0
 8004182:	f040 8092 	bne.w	80042aa <HAL_RCC_OscConfig+0x54e>
 8004186:	2302      	movs	r3, #2
 8004188:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8004190:	fa93 f2a3 	rbit	r2, r3
 8004194:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004198:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800419a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800419e:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f043 0320 	orr.w	r3, r3, #32
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d102      	bne.n	80041bc <HAL_RCC_OscConfig+0x460>
 80041b6:	4b6e      	ldr	r3, [pc, #440]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	e037      	b.n	800422c <HAL_RCC_OscConfig+0x4d0>
 80041bc:	2302      	movs	r3, #2
 80041be:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80041c6:	fa93 f2a3 	rbit	r2, r3
 80041ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041ce:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80041d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f043 0320 	orr.w	r3, r3, #32
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_OscConfig+0x496>
 80041ec:	4b60      	ldr	r3, [pc, #384]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	e01c      	b.n	800422c <HAL_RCC_OscConfig+0x4d0>
 80041f2:	2302      	movs	r3, #2
 80041f4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80041fc:	fa93 f2a3 	rbit	r2, r3
 8004200:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004204:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004206:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	fab3 f383 	clz	r3, r3
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f043 0320 	orr.w	r3, r3, #32
 8004216:	b2db      	uxtb	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b04      	cmp	r3, #4
 8004220:	d102      	bne.n	8004228 <HAL_RCC_OscConfig+0x4cc>
 8004222:	4b53      	ldr	r3, [pc, #332]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	e001      	b.n	800422c <HAL_RCC_OscConfig+0x4d0>
 8004228:	4b51      	ldr	r3, [pc, #324]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2202      	movs	r2, #2
 800422e:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8004236:	fa92 f1a2 	rbit	r1, r2
 800423a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800423e:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004240:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	fab2 f282 	clz	r2, r2
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	f042 0220 	orr.w	r2, r2, #32
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	f002 021f 	and.w	r2, r2, #31
 8004258:	40d3      	lsrs	r3, r2
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <HAL_RCC_OscConfig+0x516>
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d002      	beq.n	8004272 <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f000 be2f 	b.w	8004ed0 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004272:	4c3f      	ldr	r4, [pc, #252]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 8004274:	4b3e      	ldr	r3, [pc, #248]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6959      	ldr	r1, [r3, #20]
 8004282:	23f8      	movs	r3, #248	; 0xf8
 8004284:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004288:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800428c:	fa93 f0a3 	rbit	r0, r3
 8004290:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004294:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004296:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	fab3 f383 	clz	r3, r3
 80042a0:	fa01 f303 	lsl.w	r3, r1, r3
 80042a4:	4313      	orrs	r3, r2
 80042a6:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a8:	e14d      	b.n	8004546 <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80b3 	beq.w	800441c <HAL_RCC_OscConfig+0x6c0>
 80042b6:	2301      	movs	r3, #1
 80042b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80042c0:	fa93 f2a3 	rbit	r2, r3
 80042c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80042c8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80042ca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80042ce:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d0:	fab3 f383 	clz	r3, r3
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80042da:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80042de:	461a      	mov	r2, r3
 80042e0:	2301      	movs	r3, #1
 80042e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7fd fd02 	bl	8001cec <HAL_GetTick>
 80042e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ec:	e00a      	b.n	8004304 <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ee:	f7fd fcfd 	bl	8001cec <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d902      	bls.n	8004304 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	f000 bde6 	b.w	8004ed0 <HAL_RCC_OscConfig+0x1174>
 8004304:	2302      	movs	r3, #2
 8004306:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800430e:	fa93 f2a3 	rbit	r2, r3
 8004312:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004316:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004318:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800431c:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431e:	fab3 f383 	clz	r3, r3
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f043 0320 	orr.w	r3, r3, #32
 8004328:	b2db      	uxtb	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d102      	bne.n	800433a <HAL_RCC_OscConfig+0x5de>
 8004334:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	e039      	b.n	80043ae <HAL_RCC_OscConfig+0x652>
 800433a:	2302      	movs	r3, #2
 800433c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004344:	fa93 f2a3 	rbit	r2, r3
 8004348:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800434c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800434e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f043 0320 	orr.w	r3, r3, #32
 800435e:	b2db      	uxtb	r3, r3
 8004360:	b2db      	uxtb	r3, r3
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d104      	bne.n	8004374 <HAL_RCC_OscConfig+0x618>
 800436a:	4b01      	ldr	r3, [pc, #4]	; (8004370 <HAL_RCC_OscConfig+0x614>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	e01e      	b.n	80043ae <HAL_RCC_OscConfig+0x652>
 8004370:	40021000 	.word	0x40021000
 8004374:	2302      	movs	r3, #2
 8004376:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800437e:	fa93 f2a3 	rbit	r2, r3
 8004382:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004386:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004388:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f043 0320 	orr.w	r3, r3, #32
 8004398:	b2db      	uxtb	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d102      	bne.n	80043aa <HAL_RCC_OscConfig+0x64e>
 80043a4:	4bb9      	ldr	r3, [pc, #740]	; (800468c <HAL_RCC_OscConfig+0x930>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	e001      	b.n	80043ae <HAL_RCC_OscConfig+0x652>
 80043aa:	4bb8      	ldr	r3, [pc, #736]	; (800468c <HAL_RCC_OscConfig+0x930>)
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2202      	movs	r2, #2
 80043b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80043b8:	fa92 f1a2 	rbit	r1, r2
 80043bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80043c0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80043c2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	fab2 f282 	clz	r2, r2
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	f042 0220 	orr.w	r2, r2, #32
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	f002 021f 	and.w	r2, r2, #31
 80043da:	40d3      	lsrs	r3, r2
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d084      	beq.n	80042ee <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e4:	4ca9      	ldr	r4, [pc, #676]	; (800468c <HAL_RCC_OscConfig+0x930>)
 80043e6:	4ba9      	ldr	r3, [pc, #676]	; (800468c <HAL_RCC_OscConfig+0x930>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6959      	ldr	r1, [r3, #20]
 80043f4:	23f8      	movs	r3, #248	; 0xf8
 80043f6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80043fe:	fa93 f0a3 	rbit	r0, r3
 8004402:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004406:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004408:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	4313      	orrs	r3, r2
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	e094      	b.n	8004546 <HAL_RCC_OscConfig+0x7ea>
 800441c:	2301      	movs	r3, #1
 800441e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004426:	fa93 f2a3 	rbit	r2, r3
 800442a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800442e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004430:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004434:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004436:	fab3 f383 	clz	r3, r3
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004440:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004444:	461a      	mov	r2, r3
 8004446:	2300      	movs	r3, #0
 8004448:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fd fc4f 	bl	8001cec <HAL_GetTick>
 800444e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004454:	f7fd fc4a 	bl	8001cec <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d902      	bls.n	800446a <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	f000 bd33 	b.w	8004ed0 <HAL_RCC_OscConfig+0x1174>
 800446a:	2302      	movs	r3, #2
 800446c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004470:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004474:	fa93 f2a3 	rbit	r2, r3
 8004478:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800447c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800447e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004482:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004484:	fab3 f383 	clz	r3, r3
 8004488:	b2db      	uxtb	r3, r3
 800448a:	f043 0320 	orr.w	r3, r3, #32
 800448e:	b2db      	uxtb	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d102      	bne.n	80044a0 <HAL_RCC_OscConfig+0x744>
 800449a:	4b7c      	ldr	r3, [pc, #496]	; (800468c <HAL_RCC_OscConfig+0x930>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	e037      	b.n	8004510 <HAL_RCC_OscConfig+0x7b4>
 80044a0:	2302      	movs	r3, #2
 80044a2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80044aa:	fa93 f2a3 	rbit	r2, r3
 80044ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80044b2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80044b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f043 0320 	orr.w	r3, r3, #32
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d102      	bne.n	80044d6 <HAL_RCC_OscConfig+0x77a>
 80044d0:	4b6e      	ldr	r3, [pc, #440]	; (800468c <HAL_RCC_OscConfig+0x930>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	e01c      	b.n	8004510 <HAL_RCC_OscConfig+0x7b4>
 80044d6:	2302      	movs	r3, #2
 80044d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80044e0:	fa93 f2a3 	rbit	r2, r3
 80044e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80044e8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80044ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	fab3 f383 	clz	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f043 0320 	orr.w	r3, r3, #32
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b04      	cmp	r3, #4
 8004504:	d102      	bne.n	800450c <HAL_RCC_OscConfig+0x7b0>
 8004506:	4b61      	ldr	r3, [pc, #388]	; (800468c <HAL_RCC_OscConfig+0x930>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	e001      	b.n	8004510 <HAL_RCC_OscConfig+0x7b4>
 800450c:	4b5f      	ldr	r3, [pc, #380]	; (800468c <HAL_RCC_OscConfig+0x930>)
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	2202      	movs	r2, #2
 8004512:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800451a:	fa92 f1a2 	rbit	r1, r2
 800451e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8004522:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004524:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	fab2 f282 	clz	r2, r2
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	f042 0220 	orr.w	r2, r2, #32
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	f002 021f 	and.w	r2, r2, #31
 800453c:	40d3      	lsrs	r3, r2
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d186      	bne.n	8004454 <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004546:	1d3b      	adds	r3, r7, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8132 	beq.w	80047ba <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004556:	1d3b      	adds	r3, r7, #4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8099 	beq.w	8004694 <HAL_RCC_OscConfig+0x938>
 8004562:	2301      	movs	r3, #1
 8004564:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800456c:	fa93 f2a3 	rbit	r2, r3
 8004570:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004574:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004576:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800457a:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	461a      	mov	r2, r3
 8004584:	4b42      	ldr	r3, [pc, #264]	; (8004690 <HAL_RCC_OscConfig+0x934>)
 8004586:	4413      	add	r3, r2
 8004588:	461a      	mov	r2, r3
 800458a:	2301      	movs	r3, #1
 800458c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7fd fbad 	bl	8001cec <HAL_GetTick>
 8004592:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	e00a      	b.n	80045ae <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004598:	f7fd fba8 	bl	8001cec <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d902      	bls.n	80045ae <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	f000 bc91 	b.w	8004ed0 <HAL_RCC_OscConfig+0x1174>
 80045ae:	2302      	movs	r3, #2
 80045b0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80045b8:	fa93 f2a3 	rbit	r2, r3
 80045bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80045c0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80045c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80045c6:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c8:	fab3 f383 	clz	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d102      	bne.n	80045e4 <HAL_RCC_OscConfig+0x888>
 80045de:	4b2b      	ldr	r3, [pc, #172]	; (800468c <HAL_RCC_OscConfig+0x930>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	e037      	b.n	8004654 <HAL_RCC_OscConfig+0x8f8>
 80045e4:	2302      	movs	r3, #2
 80045e6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80045ee:	fa93 f2a3 	rbit	r2, r3
 80045f2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80045f6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80045f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	fab3 f383 	clz	r3, r3
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004608:	b2db      	uxtb	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d102      	bne.n	800461a <HAL_RCC_OscConfig+0x8be>
 8004614:	4b1d      	ldr	r3, [pc, #116]	; (800468c <HAL_RCC_OscConfig+0x930>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	e01c      	b.n	8004654 <HAL_RCC_OscConfig+0x8f8>
 800461a:	2302      	movs	r3, #2
 800461c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004624:	fa93 f2a3 	rbit	r2, r3
 8004628:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800462c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800462e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	fab3 f383 	clz	r3, r3
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800463e:	b2db      	uxtb	r3, r3
 8004640:	b2db      	uxtb	r3, r3
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b04      	cmp	r3, #4
 8004648:	d102      	bne.n	8004650 <HAL_RCC_OscConfig+0x8f4>
 800464a:	4b10      	ldr	r3, [pc, #64]	; (800468c <HAL_RCC_OscConfig+0x930>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	e001      	b.n	8004654 <HAL_RCC_OscConfig+0x8f8>
 8004650:	4b0e      	ldr	r3, [pc, #56]	; (800468c <HAL_RCC_OscConfig+0x930>)
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	2202      	movs	r2, #2
 8004656:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800465e:	fa92 f1a2 	rbit	r1, r2
 8004662:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004666:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004668:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	fab2 f282 	clz	r2, r2
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	f002 021f 	and.w	r2, r2, #31
 8004680:	40d3      	lsrs	r3, r2
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d086      	beq.n	8004598 <HAL_RCC_OscConfig+0x83c>
 800468a:	e096      	b.n	80047ba <HAL_RCC_OscConfig+0xa5e>
 800468c:	40021000 	.word	0x40021000
 8004690:	42420480 	.word	0x42420480
 8004694:	2301      	movs	r3, #1
 8004696:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800469e:	fa93 f2a3 	rbit	r2, r3
 80046a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80046a6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80046a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80046ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	461a      	mov	r2, r3
 80046b6:	4bb5      	ldr	r3, [pc, #724]	; (800498c <HAL_RCC_OscConfig+0xc30>)
 80046b8:	4413      	add	r3, r2
 80046ba:	461a      	mov	r2, r3
 80046bc:	2300      	movs	r3, #0
 80046be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c0:	f7fd fb14 	bl	8001cec <HAL_GetTick>
 80046c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c8:	e009      	b.n	80046de <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ca:	f7fd fb0f 	bl	8001cec <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e3f8      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1174>
 80046de:	2302      	movs	r3, #2
 80046e0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80046e8:	fa93 f2a3 	rbit	r2, r3
 80046ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80046f0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80046f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80046f6:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f8:	fab3 f383 	clz	r3, r3
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004702:	b2db      	uxtb	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d102      	bne.n	8004714 <HAL_RCC_OscConfig+0x9b8>
 800470e:	4ba0      	ldr	r3, [pc, #640]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	e037      	b.n	8004784 <HAL_RCC_OscConfig+0xa28>
 8004714:	2302      	movs	r3, #2
 8004716:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800471e:	fa93 f2a3 	rbit	r2, r3
 8004722:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004726:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004728:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004738:	b2db      	uxtb	r3, r3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d102      	bne.n	800474a <HAL_RCC_OscConfig+0x9ee>
 8004744:	4b92      	ldr	r3, [pc, #584]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	e01c      	b.n	8004784 <HAL_RCC_OscConfig+0xa28>
 800474a:	2302      	movs	r3, #2
 800474c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004754:	fa93 f2a3 	rbit	r2, r3
 8004758:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800475c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800475e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800476e:	b2db      	uxtb	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b04      	cmp	r3, #4
 8004778:	d102      	bne.n	8004780 <HAL_RCC_OscConfig+0xa24>
 800477a:	4b85      	ldr	r3, [pc, #532]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	e001      	b.n	8004784 <HAL_RCC_OscConfig+0xa28>
 8004780:	4b83      	ldr	r3, [pc, #524]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2202      	movs	r2, #2
 8004786:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800478e:	fa92 f1a2 	rbit	r1, r2
 8004792:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004796:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004798:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	fab2 f282 	clz	r2, r2
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	f002 021f 	and.w	r2, r2, #31
 80047b0:	40d3      	lsrs	r3, r2
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d187      	bne.n	80046ca <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 818f 	beq.w	8004ae8 <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047d0:	4b6f      	ldr	r3, [pc, #444]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d112      	bne.n	8004802 <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047dc:	4a6c      	ldr	r2, [pc, #432]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 80047de:	4b6c      	ldr	r3, [pc, #432]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e6:	61d3      	str	r3, [r2, #28]
 80047e8:	4b69      	ldr	r3, [pc, #420]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80047f0:	f107 030c 	add.w	r3, r7, #12
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	f107 030c 	add.w	r3, r7, #12
 80047fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004802:	4b64      	ldr	r3, [pc, #400]	; (8004994 <HAL_RCC_OscConfig+0xc38>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d11a      	bne.n	8004844 <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800480e:	4a61      	ldr	r2, [pc, #388]	; (8004994 <HAL_RCC_OscConfig+0xc38>)
 8004810:	4b60      	ldr	r3, [pc, #384]	; (8004994 <HAL_RCC_OscConfig+0xc38>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004818:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481a:	f7fd fa67 	bl	8001cec <HAL_GetTick>
 800481e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004822:	e009      	b.n	8004838 <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004824:	f7fd fa62 	bl	8001cec <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b64      	cmp	r3, #100	; 0x64
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e34b      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004838:	4b56      	ldr	r3, [pc, #344]	; (8004994 <HAL_RCC_OscConfig+0xc38>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ef      	beq.n	8004824 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004844:	1d3b      	adds	r3, r7, #4
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d106      	bne.n	800485c <HAL_RCC_OscConfig+0xb00>
 800484e:	4a50      	ldr	r2, [pc, #320]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 8004850:	4b4f      	ldr	r3, [pc, #316]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	6213      	str	r3, [r2, #32]
 800485a:	e02f      	b.n	80048bc <HAL_RCC_OscConfig+0xb60>
 800485c:	1d3b      	adds	r3, r7, #4
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10c      	bne.n	8004880 <HAL_RCC_OscConfig+0xb24>
 8004866:	4a4a      	ldr	r2, [pc, #296]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 8004868:	4b49      	ldr	r3, [pc, #292]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	6213      	str	r3, [r2, #32]
 8004872:	4a47      	ldr	r2, [pc, #284]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 8004874:	4b46      	ldr	r3, [pc, #280]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f023 0304 	bic.w	r3, r3, #4
 800487c:	6213      	str	r3, [r2, #32]
 800487e:	e01d      	b.n	80048bc <HAL_RCC_OscConfig+0xb60>
 8004880:	1d3b      	adds	r3, r7, #4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	2b05      	cmp	r3, #5
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0xb48>
 800488a:	4a41      	ldr	r2, [pc, #260]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 800488c:	4b40      	ldr	r3, [pc, #256]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f043 0304 	orr.w	r3, r3, #4
 8004894:	6213      	str	r3, [r2, #32]
 8004896:	4a3e      	ldr	r2, [pc, #248]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 8004898:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	6213      	str	r3, [r2, #32]
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0xb60>
 80048a4:	4a3a      	ldr	r2, [pc, #232]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 80048a6:	4b3a      	ldr	r3, [pc, #232]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	6213      	str	r3, [r2, #32]
 80048b0:	4a37      	ldr	r2, [pc, #220]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 80048b2:	4b37      	ldr	r3, [pc, #220]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f023 0304 	bic.w	r3, r3, #4
 80048ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048bc:	1d3b      	adds	r3, r7, #4
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 8087 	beq.w	80049d6 <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c8:	f7fd fa10 	bl	8001cec <HAL_GetTick>
 80048cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d0:	e00b      	b.n	80048ea <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fd fa0b 	bl	8001cec <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e2f2      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1174>
 80048ea:	2302      	movs	r3, #2
 80048ec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80048f4:	fa93 f2a3 	rbit	r2, r3
 80048f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048fc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80048fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004902:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004904:	fab3 f383 	clz	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800490e:	b2db      	uxtb	r3, r3
 8004910:	b2db      	uxtb	r3, r3
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d102      	bne.n	8004920 <HAL_RCC_OscConfig+0xbc4>
 800491a:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	e03d      	b.n	800499c <HAL_RCC_OscConfig+0xc40>
 8004920:	2302      	movs	r3, #2
 8004922:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004926:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800492a:	fa93 f2a3 	rbit	r2, r3
 800492e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004932:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004934:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	fab3 f383 	clz	r3, r3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004944:	b2db      	uxtb	r3, r3
 8004946:	b2db      	uxtb	r3, r3
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d102      	bne.n	8004956 <HAL_RCC_OscConfig+0xbfa>
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	e022      	b.n	800499c <HAL_RCC_OscConfig+0xc40>
 8004956:	2302      	movs	r3, #2
 8004958:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004960:	fa93 f2a3 	rbit	r2, r3
 8004964:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004968:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800496a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	fab3 f383 	clz	r3, r3
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800497a:	b2db      	uxtb	r3, r3
 800497c:	b2db      	uxtb	r3, r3
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b04      	cmp	r3, #4
 8004984:	d108      	bne.n	8004998 <HAL_RCC_OscConfig+0xc3c>
 8004986:	4b02      	ldr	r3, [pc, #8]	; (8004990 <HAL_RCC_OscConfig+0xc34>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	e007      	b.n	800499c <HAL_RCC_OscConfig+0xc40>
 800498c:	42420480 	.word	0x42420480
 8004990:	40021000 	.word	0x40021000
 8004994:	40007000 	.word	0x40007000
 8004998:	4bbf      	ldr	r3, [pc, #764]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	2202      	movs	r2, #2
 800499e:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80049a6:	fa92 f1a2 	rbit	r1, r2
 80049aa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80049ae:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80049b0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	fab2 f282 	clz	r2, r2
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	f002 021f 	and.w	r2, r2, #31
 80049c8:	40d3      	lsrs	r3, r2
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f43f af7f 	beq.w	80048d2 <HAL_RCC_OscConfig+0xb76>
 80049d4:	e07e      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d6:	f7fd f989 	bl	8001cec <HAL_GetTick>
 80049da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049de:	e00b      	b.n	80049f8 <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e0:	f7fd f984 	bl	8001cec <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e26b      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1174>
 80049f8:	2302      	movs	r3, #2
 80049fa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004a02:	fa93 f2a3 	rbit	r2, r3
 8004a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a0a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a10:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a12:	fab3 f383 	clz	r3, r3
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d102      	bne.n	8004a2e <HAL_RCC_OscConfig+0xcd2>
 8004a28:	4b9b      	ldr	r3, [pc, #620]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	e037      	b.n	8004a9e <HAL_RCC_OscConfig+0xd42>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a38:	fa93 f2a3 	rbit	r2, r3
 8004a3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a40:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	fab3 f383 	clz	r3, r3
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d102      	bne.n	8004a64 <HAL_RCC_OscConfig+0xd08>
 8004a5e:	4b8e      	ldr	r3, [pc, #568]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	e01c      	b.n	8004a9e <HAL_RCC_OscConfig+0xd42>
 8004a64:	2302      	movs	r3, #2
 8004a66:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004a6e:	fa93 f2a3 	rbit	r2, r3
 8004a72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a76:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d102      	bne.n	8004a9a <HAL_RCC_OscConfig+0xd3e>
 8004a94:	4b80      	ldr	r3, [pc, #512]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	e001      	b.n	8004a9e <HAL_RCC_OscConfig+0xd42>
 8004a9a:	4b7f      	ldr	r3, [pc, #508]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004aa8:	fa92 f1a2 	rbit	r1, r2
 8004aac:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004ab0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ab2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	fab2 f282 	clz	r2, r2
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	f002 021f 	and.w	r2, r2, #31
 8004aca:	40d3      	lsrs	r3, r2
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d185      	bne.n	80049e0 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ad4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d105      	bne.n	8004ae8 <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004adc:	4a6e      	ldr	r2, [pc, #440]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004ade:	4b6e      	ldr	r3, [pc, #440]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae8:	1d3b      	adds	r3, r7, #4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 81ed 	beq.w	8004ece <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004af4:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	f000 81e4 	beq.w	8004eca <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	f040 8144 	bne.w	8004d96 <HAL_RCC_OscConfig+0x103a>
 8004b0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b12:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004b1a:	fa93 f2a3 	rbit	r2, r3
 8004b1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b22:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b28:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2a:	fab3 f383 	clz	r3, r3
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004b34:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3e:	f7fd f8d5 	bl	8001cec <HAL_GetTick>
 8004b42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b46:	e009      	b.n	8004b5c <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b48:	f7fd f8d0 	bl	8001cec <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e1b9      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1174>
 8004b5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b60:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b64:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004b68:	fa93 f2a3 	rbit	r2, r3
 8004b6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b70:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b76:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b78:	fab3 f383 	clz	r3, r3
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	f043 0320 	orr.w	r3, r3, #32
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d102      	bne.n	8004b94 <HAL_RCC_OscConfig+0xe38>
 8004b8e:	4b42      	ldr	r3, [pc, #264]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	e039      	b.n	8004c08 <HAL_RCC_OscConfig+0xeac>
 8004b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ba0:	fa93 f2a3 	rbit	r2, r3
 8004ba4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ba8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004baa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	fab3 f383 	clz	r3, r3
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	f043 0320 	orr.w	r3, r3, #32
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d102      	bne.n	8004bcc <HAL_RCC_OscConfig+0xe70>
 8004bc6:	4b34      	ldr	r3, [pc, #208]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	e01d      	b.n	8004c08 <HAL_RCC_OscConfig+0xeac>
 8004bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bd0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bd8:	fa93 f2a3 	rbit	r2, r3
 8004bdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004be0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	fab3 f383 	clz	r3, r3
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f043 0320 	orr.w	r3, r3, #32
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d102      	bne.n	8004c04 <HAL_RCC_OscConfig+0xea8>
 8004bfe:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	e001      	b.n	8004c08 <HAL_RCC_OscConfig+0xeac>
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c0c:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004c14:	fa92 f1a2 	rbit	r1, r2
 8004c18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c1c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004c1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	fab2 f282 	clz	r2, r2
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	f042 0220 	orr.w	r2, r2, #32
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	f002 021f 	and.w	r2, r2, #31
 8004c36:	40d3      	lsrs	r3, r2
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d183      	bne.n	8004b48 <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c40:	4815      	ldr	r0, [pc, #84]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <HAL_RCC_OscConfig+0xf3c>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c50:	1d3b      	adds	r3, r7, #4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	430b      	orrs	r3, r1
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	6043      	str	r3, [r0, #4]
 8004c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c68:	fa93 f2a3 	rbit	r2, r3
 8004c6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c70:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004c72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c76:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c78:	fab3 f383 	clz	r3, r3
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004c82:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004c86:	461a      	mov	r2, r3
 8004c88:	2301      	movs	r3, #1
 8004c8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fd f82e 	bl	8001cec <HAL_GetTick>
 8004c90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c94:	e00c      	b.n	8004cb0 <HAL_RCC_OscConfig+0xf54>
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c9c:	f7fd f826 	bl	8001cec <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e10f      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1174>
 8004cb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cbc:	fa93 f2a3 	rbit	r2, r3
 8004cc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cc4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004cc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cca:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ccc:	fab3 f383 	clz	r3, r3
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f043 0320 	orr.w	r3, r3, #32
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RCC_OscConfig+0xf8c>
 8004ce2:	4b7e      	ldr	r3, [pc, #504]	; (8004edc <HAL_RCC_OscConfig+0x1180>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	e039      	b.n	8004d5c <HAL_RCC_OscConfig+0x1000>
 8004ce8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004cf4:	fa93 f2a3 	rbit	r2, r3
 8004cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cfc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	fab3 f383 	clz	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	f043 0320 	orr.w	r3, r3, #32
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d102      	bne.n	8004d20 <HAL_RCC_OscConfig+0xfc4>
 8004d1a:	4b70      	ldr	r3, [pc, #448]	; (8004edc <HAL_RCC_OscConfig+0x1180>)
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	e01d      	b.n	8004d5c <HAL_RCC_OscConfig+0x1000>
 8004d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d2c:	fa93 f2a3 	rbit	r2, r3
 8004d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d34:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	fab3 f383 	clz	r3, r3
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f043 0320 	orr.w	r3, r3, #32
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d102      	bne.n	8004d58 <HAL_RCC_OscConfig+0xffc>
 8004d52:	4b62      	ldr	r3, [pc, #392]	; (8004edc <HAL_RCC_OscConfig+0x1180>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	e001      	b.n	8004d5c <HAL_RCC_OscConfig+0x1000>
 8004d58:	4b60      	ldr	r3, [pc, #384]	; (8004edc <HAL_RCC_OscConfig+0x1180>)
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d60:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d64:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004d68:	fa92 f1a2 	rbit	r1, r2
 8004d6c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004d70:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d72:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	fab2 f282 	clz	r2, r2
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	f042 0220 	orr.w	r2, r2, #32
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	f002 021f 	and.w	r2, r2, #31
 8004d8a:	40d3      	lsrs	r3, r2
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d083      	beq.n	8004c9c <HAL_RCC_OscConfig+0xf40>
 8004d94:	e09b      	b.n	8004ece <HAL_RCC_OscConfig+0x1172>
 8004d96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004da2:	fa93 f2a3 	rbit	r2, r3
 8004da6:	f107 0320 	add.w	r3, r7, #32
 8004daa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004dac:	f107 0320 	add.w	r3, r7, #32
 8004db0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db2:	fab3 f383 	clz	r3, r3
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004dbc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc6:	f7fc ff91 	bl	8001cec <HAL_GetTick>
 8004dca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dce:	e009      	b.n	8004de4 <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fc ff8c 	bl	8001cec <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e075      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1174>
 8004de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004de8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df0:	fa93 f2a3 	rbit	r2, r3
 8004df4:	f107 031c 	add.w	r3, r7, #28
 8004df8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004dfa:	f107 031c 	add.w	r3, r7, #28
 8004dfe:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e00:	fab3 f383 	clz	r3, r3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f043 0320 	orr.w	r3, r3, #32
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d102      	bne.n	8004e1c <HAL_RCC_OscConfig+0x10c0>
 8004e16:	4b31      	ldr	r3, [pc, #196]	; (8004edc <HAL_RCC_OscConfig+0x1180>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	e039      	b.n	8004e90 <HAL_RCC_OscConfig+0x1134>
 8004e1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e28:	fa93 f2a3 	rbit	r2, r3
 8004e2c:	f107 0318 	add.w	r3, r7, #24
 8004e30:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e32:	f107 0318 	add.w	r3, r7, #24
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	fab3 f383 	clz	r3, r3
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	f043 0320 	orr.w	r3, r3, #32
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d102      	bne.n	8004e54 <HAL_RCC_OscConfig+0x10f8>
 8004e4e:	4b23      	ldr	r3, [pc, #140]	; (8004edc <HAL_RCC_OscConfig+0x1180>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	e01d      	b.n	8004e90 <HAL_RCC_OscConfig+0x1134>
 8004e54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e60:	fa93 f2a3 	rbit	r2, r3
 8004e64:	f107 0314 	add.w	r3, r7, #20
 8004e68:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e6a:	f107 0314 	add.w	r3, r7, #20
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	fab3 f383 	clz	r3, r3
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f043 0320 	orr.w	r3, r3, #32
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d102      	bne.n	8004e8c <HAL_RCC_OscConfig+0x1130>
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <HAL_RCC_OscConfig+0x1180>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	e001      	b.n	8004e90 <HAL_RCC_OscConfig+0x1134>
 8004e8c:	4b13      	ldr	r3, [pc, #76]	; (8004edc <HAL_RCC_OscConfig+0x1180>)
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e94:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e98:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004e9c:	fa92 f1a2 	rbit	r1, r2
 8004ea0:	f107 0210 	add.w	r2, r7, #16
 8004ea4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ea6:	f107 0210 	add.w	r2, r7, #16
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	fab2 f282 	clz	r2, r2
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	f042 0220 	orr.w	r2, r2, #32
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	f002 021f 	and.w	r2, r2, #31
 8004ebe:	40d3      	lsrs	r3, r2
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d183      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x1074>
 8004ec8:	e001      	b.n	8004ece <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd90      	pop	{r4, r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000

08004ee0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b09e      	sub	sp, #120	; 0x78
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004eee:	4ba3      	ldr	r3, [pc, #652]	; (800517c <HAL_RCC_ClockConfig+0x29c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0207 	and.w	r2, r3, #7
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d210      	bcs.n	8004f1e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efc:	499f      	ldr	r1, [pc, #636]	; (800517c <HAL_RCC_ClockConfig+0x29c>)
 8004efe:	4b9f      	ldr	r3, [pc, #636]	; (800517c <HAL_RCC_ClockConfig+0x29c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 0207 	bic.w	r2, r3, #7
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f0c:	4b9b      	ldr	r3, [pc, #620]	; (800517c <HAL_RCC_ClockConfig+0x29c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0207 	and.w	r2, r3, #7
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d001      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e1d0      	b.n	80052c0 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f2a:	4995      	ldr	r1, [pc, #596]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 8004f2c:	4b94      	ldr	r3, [pc, #592]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8168 	beq.w	800521a <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d15c      	bne.n	800500c <HAL_RCC_ClockConfig+0x12c>
 8004f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f56:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f5a:	fa93 f3a3 	rbit	r3, r3
 8004f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	fab3 f383 	clz	r3, r3
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	f043 0320 	orr.w	r3, r3, #32
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d102      	bne.n	8004f7e <HAL_RCC_ClockConfig+0x9e>
 8004f78:	4b81      	ldr	r3, [pc, #516]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	e02d      	b.n	8004fda <HAL_RCC_ClockConfig+0xfa>
 8004f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f82:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	fab3 f383 	clz	r3, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f043 0320 	orr.w	r3, r3, #32
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d102      	bne.n	8004faa <HAL_RCC_ClockConfig+0xca>
 8004fa4:	4b76      	ldr	r3, [pc, #472]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	e017      	b.n	8004fda <HAL_RCC_ClockConfig+0xfa>
 8004faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fae:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fba:	fab3 f383 	clz	r3, r3
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	f043 0320 	orr.w	r3, r3, #32
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d102      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xf6>
 8004fd0:	4b6b      	ldr	r3, [pc, #428]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	e001      	b.n	8004fda <HAL_RCC_ClockConfig+0xfa>
 8004fd6:	4b6a      	ldr	r3, [pc, #424]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fde:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fe2:	fa92 f2a2 	rbit	r2, r2
 8004fe6:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fea:	fab2 f282 	clz	r2, r2
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	f042 0220 	orr.w	r2, r2, #32
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	f002 021f 	and.w	r2, r2, #31
 8004ffc:	40d3      	lsrs	r3, r2
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 80be 	bne.w	8005184 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e159      	b.n	80052c0 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d15b      	bne.n	80050cc <HAL_RCC_ClockConfig+0x1ec>
 8005014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005018:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800501c:	fa93 f3a3 	rbit	r3, r3
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005024:	fab3 f383 	clz	r3, r3
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f043 0320 	orr.w	r3, r3, #32
 800502e:	b2db      	uxtb	r3, r3
 8005030:	b2db      	uxtb	r3, r3
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	d102      	bne.n	8005040 <HAL_RCC_ClockConfig+0x160>
 800503a:	4b51      	ldr	r3, [pc, #324]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	e02d      	b.n	800509c <HAL_RCC_ClockConfig+0x1bc>
 8005040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005044:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005048:	fa93 f3a3 	rbit	r3, r3
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	fab3 f383 	clz	r3, r3
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f043 0320 	orr.w	r3, r3, #32
 800505a:	b2db      	uxtb	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d102      	bne.n	800506c <HAL_RCC_ClockConfig+0x18c>
 8005066:	4b46      	ldr	r3, [pc, #280]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	e017      	b.n	800509c <HAL_RCC_ClockConfig+0x1bc>
 800506c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005070:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005074:	fa93 f3a3 	rbit	r3, r3
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f043 0320 	orr.w	r3, r3, #32
 8005086:	b2db      	uxtb	r3, r3
 8005088:	b2db      	uxtb	r3, r3
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b04      	cmp	r3, #4
 8005090:	d102      	bne.n	8005098 <HAL_RCC_ClockConfig+0x1b8>
 8005092:	4b3b      	ldr	r3, [pc, #236]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	e001      	b.n	800509c <HAL_RCC_ClockConfig+0x1bc>
 8005098:	4b39      	ldr	r3, [pc, #228]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050a0:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050a4:	fa92 f2a2 	rbit	r2, r2
 80050a8:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80050aa:	6a3a      	ldr	r2, [r7, #32]
 80050ac:	fab2 f282 	clz	r2, r2
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	f042 0220 	orr.w	r2, r2, #32
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	f002 021f 	and.w	r2, r2, #31
 80050be:	40d3      	lsrs	r3, r2
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d15d      	bne.n	8005184 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0f9      	b.n	80052c0 <HAL_RCC_ClockConfig+0x3e0>
 80050cc:	2302      	movs	r3, #2
 80050ce:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050d2:	fa93 f3a3 	rbit	r3, r3
 80050d6:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80050d8:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050da:	fab3 f383 	clz	r3, r3
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f043 0320 	orr.w	r3, r3, #32
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d102      	bne.n	80050f6 <HAL_RCC_ClockConfig+0x216>
 80050f0:	4b23      	ldr	r3, [pc, #140]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	e02b      	b.n	800514e <HAL_RCC_ClockConfig+0x26e>
 80050f6:	2302      	movs	r3, #2
 80050f8:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050fc:	fa93 f3a3 	rbit	r3, r3
 8005100:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	fab3 f383 	clz	r3, r3
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f043 0320 	orr.w	r3, r3, #32
 800510e:	b2db      	uxtb	r3, r3
 8005110:	b2db      	uxtb	r3, r3
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d102      	bne.n	8005120 <HAL_RCC_ClockConfig+0x240>
 800511a:	4b19      	ldr	r3, [pc, #100]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	e016      	b.n	800514e <HAL_RCC_ClockConfig+0x26e>
 8005120:	2302      	movs	r3, #2
 8005122:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005126:	fa93 f3a3 	rbit	r3, r3
 800512a:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	fab3 f383 	clz	r3, r3
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f043 0320 	orr.w	r3, r3, #32
 8005138:	b2db      	uxtb	r3, r3
 800513a:	b2db      	uxtb	r3, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b04      	cmp	r3, #4
 8005142:	d102      	bne.n	800514a <HAL_RCC_ClockConfig+0x26a>
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	e001      	b.n	800514e <HAL_RCC_ClockConfig+0x26e>
 800514a:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <HAL_RCC_ClockConfig+0x2a0>)
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	2202      	movs	r2, #2
 8005150:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005154:	fa92 f2a2 	rbit	r2, r2
 8005158:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	fab2 f282 	clz	r2, r2
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	f042 0220 	orr.w	r2, r2, #32
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	f002 021f 	and.w	r2, r2, #31
 800516e:	40d3      	lsrs	r3, r2
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d105      	bne.n	8005184 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0a1      	b.n	80052c0 <HAL_RCC_ClockConfig+0x3e0>
 800517c:	40022000 	.word	0x40022000
 8005180:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005184:	4950      	ldr	r1, [pc, #320]	; (80052c8 <HAL_RCC_ClockConfig+0x3e8>)
 8005186:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <HAL_RCC_ClockConfig+0x3e8>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f023 0203 	bic.w	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4313      	orrs	r3, r2
 8005194:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005196:	f7fc fda9 	bl	8001cec <HAL_GetTick>
 800519a:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d112      	bne.n	80051ca <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051a4:	e00a      	b.n	80051bc <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a6:	f7fc fda1 	bl	8001cec <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e081      	b.n	80052c0 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051bc:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <HAL_RCC_ClockConfig+0x3e8>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f003 030c 	and.w	r3, r3, #12
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d1ee      	bne.n	80051a6 <HAL_RCC_ClockConfig+0x2c6>
 80051c8:	e027      	b.n	800521a <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d11d      	bne.n	800520e <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051d2:	e00a      	b.n	80051ea <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d4:	f7fc fd8a 	bl	8001cec <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e06a      	b.n	80052c0 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ea:	4b37      	ldr	r3, [pc, #220]	; (80052c8 <HAL_RCC_ClockConfig+0x3e8>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f003 030c 	and.w	r3, r3, #12
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d1ee      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x2f4>
 80051f6:	e010      	b.n	800521a <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f8:	f7fc fd78 	bl	8001cec <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	; 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e058      	b.n	80052c0 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800520e:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <HAL_RCC_ClockConfig+0x3e8>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1ee      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800521a:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_RCC_ClockConfig+0x3ec>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0207 	and.w	r2, r3, #7
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d910      	bls.n	800524a <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005228:	4928      	ldr	r1, [pc, #160]	; (80052cc <HAL_RCC_ClockConfig+0x3ec>)
 800522a:	4b28      	ldr	r3, [pc, #160]	; (80052cc <HAL_RCC_ClockConfig+0x3ec>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f023 0207 	bic.w	r2, r3, #7
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	4313      	orrs	r3, r2
 8005236:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005238:	4b24      	ldr	r3, [pc, #144]	; (80052cc <HAL_RCC_ClockConfig+0x3ec>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0207 	and.w	r2, r3, #7
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d001      	beq.n	800524a <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e03a      	b.n	80052c0 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005256:	491c      	ldr	r1, [pc, #112]	; (80052c8 <HAL_RCC_ClockConfig+0x3e8>)
 8005258:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <HAL_RCC_ClockConfig+0x3e8>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b00      	cmp	r3, #0
 8005272:	d009      	beq.n	8005288 <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005274:	4914      	ldr	r1, [pc, #80]	; (80052c8 <HAL_RCC_ClockConfig+0x3e8>)
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <HAL_RCC_ClockConfig+0x3e8>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005288:	f000 f826 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 800528c:	4601      	mov	r1, r0
 800528e:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <HAL_RCC_ClockConfig+0x3e8>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005296:	23f0      	movs	r3, #240	; 0xf0
 8005298:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800529c:	fa93 f3a3 	rbit	r3, r3
 80052a0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	fab3 f383 	clz	r3, r3
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ac:	4a08      	ldr	r2, [pc, #32]	; (80052d0 <HAL_RCC_ClockConfig+0x3f0>)
 80052ae:	5cd3      	ldrb	r3, [r2, r3]
 80052b0:	fa21 f303 	lsr.w	r3, r1, r3
 80052b4:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <HAL_RCC_ClockConfig+0x3f4>)
 80052b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80052b8:	2000      	movs	r0, #0
 80052ba:	f7fc fced 	bl	8001c98 <HAL_InitTick>
  
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3778      	adds	r7, #120	; 0x78
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40021000 	.word	0x40021000
 80052cc:	40022000 	.word	0x40022000
 80052d0:	08009a20 	.word	0x08009a20
 80052d4:	2000042c 	.word	0x2000042c

080052d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	b08b      	sub	sp, #44	; 0x2c
 80052dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	2300      	movs	r3, #0
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	2300      	movs	r3, #0
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80052f2:	4b29      	ldr	r3, [pc, #164]	; (8005398 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 030c 	and.w	r3, r3, #12
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d002      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x30>
 8005302:	2b08      	cmp	r3, #8
 8005304:	d003      	beq.n	800530e <HAL_RCC_GetSysClockFreq+0x36>
 8005306:	e03c      	b.n	8005382 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005308:	4b24      	ldr	r3, [pc, #144]	; (800539c <HAL_RCC_GetSysClockFreq+0xc4>)
 800530a:	623b      	str	r3, [r7, #32]
      break;
 800530c:	e03c      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005314:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8005318:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	fa93 f3a3 	rbit	r3, r3
 8005320:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	fab3 f383 	clz	r3, r3
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800532e:	5cd3      	ldrb	r3, [r2, r3]
 8005330:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005332:	4b19      	ldr	r3, [pc, #100]	; (8005398 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	f003 020f 	and.w	r2, r3, #15
 800533a:	230f      	movs	r3, #15
 800533c:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	fa93 f3a3 	rbit	r3, r3
 8005344:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	fab3 f383 	clz	r3, r3
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
 8005350:	4a14      	ldr	r2, [pc, #80]	; (80053a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005352:	5cd3      	ldrb	r3, [r2, r3]
 8005354:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8005360:	4a0e      	ldr	r2, [pc, #56]	; (800539c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
 8005370:	e004      	b.n	800537c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	4a0c      	ldr	r2, [pc, #48]	; (80053a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	623b      	str	r3, [r7, #32]
      break;
 8005380:	e002      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005382:	4b06      	ldr	r3, [pc, #24]	; (800539c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005384:	623b      	str	r3, [r7, #32]
      break;
 8005386:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005388:	6a3b      	ldr	r3, [r7, #32]
}
 800538a:	4618      	mov	r0, r3
 800538c:	372c      	adds	r7, #44	; 0x2c
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000
 800539c:	007a1200 	.word	0x007a1200
 80053a0:	08009a38 	.word	0x08009a38
 80053a4:	08009a48 	.word	0x08009a48
 80053a8:	003d0900 	.word	0x003d0900

080053ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b0:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053b2:	681b      	ldr	r3, [r3, #0]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	2000042c 	.word	0x2000042c

080053c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80053ca:	f7ff ffef 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053ce:	4601      	mov	r1, r0
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053d8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80053dc:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	fa93 f3a3 	rbit	r3, r3
 80053e4:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	fab3 f383 	clz	r3, r3
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x40>)
 80053f2:	5cd3      	ldrb	r3, [r2, r3]
 80053f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40021000 	.word	0x40021000
 8005404:	08009a30 	.word	0x08009a30

08005408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800540e:	f7ff ffcd 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 8005412:	4601      	mov	r1, r0
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800541c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005420:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	fa93 f3a3 	rbit	r3, r3
 8005428:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	fab3 f383 	clz	r3, r3
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
 8005434:	4a04      	ldr	r2, [pc, #16]	; (8005448 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005436:	5cd3      	ldrb	r3, [r2, r3]
 8005438:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	08009a30 	.word	0x08009a30

0800544c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b092      	sub	sp, #72	; 0x48
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 80ef 	beq.w	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800546a:	2300      	movs	r3, #0
 800546c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005470:	4b96      	ldr	r3, [pc, #600]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10e      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800547c:	4a93      	ldr	r2, [pc, #588]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547e:	4b93      	ldr	r3, [pc, #588]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005486:	61d3      	str	r3, [r2, #28]
 8005488:	4b90      	ldr	r3, [pc, #576]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549a:	4b8d      	ldr	r3, [pc, #564]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d118      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a6:	4a8a      	ldr	r2, [pc, #552]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054a8:	4b89      	ldr	r3, [pc, #548]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b2:	f7fc fc1b 	bl	8001cec <HAL_GetTick>
 80054b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b8:	e008      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ba:	f7fc fc17 	bl	8001cec <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b64      	cmp	r3, #100	; 0x64
 80054c6:	d901      	bls.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e0fa      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054cc:	4b80      	ldr	r3, [pc, #512]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d8:	4b7c      	ldr	r3, [pc, #496]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 809c 	beq.w	8005622 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80054f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f4:	429a      	cmp	r2, r3
 80054f6:	f000 8094 	beq.w	8005622 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054fa:	4b74      	ldr	r3, [pc, #464]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005508:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550c:	fa93 f3a3 	rbit	r3, r3
 8005510:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005512:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005514:	fab3 f383 	clz	r3, r3
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	461a      	mov	r2, r3
 800551c:	4b6d      	ldr	r3, [pc, #436]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800551e:	4413      	add	r3, r2
 8005520:	461a      	mov	r2, r3
 8005522:	2301      	movs	r3, #1
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	fa93 f3a3 	rbit	r3, r3
 8005532:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005534:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005536:	fab3 f383 	clz	r3, r3
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	461a      	mov	r2, r3
 800553e:	4b65      	ldr	r3, [pc, #404]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005540:	4413      	add	r3, r2
 8005542:	461a      	mov	r2, r3
 8005544:	2300      	movs	r3, #0
 8005546:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005548:	4a60      	ldr	r2, [pc, #384]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800554a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800554e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d064      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005558:	f7fc fbc8 	bl	8001cec <HAL_GetTick>
 800555c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555e:	e00a      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fc fbc4 	bl	8001cec <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e0a5      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005576:	2302      	movs	r3, #2
 8005578:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	fa93 f3a3 	rbit	r3, r3
 8005580:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005582:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005584:	fab3 f383 	clz	r3, r3
 8005588:	b2db      	uxtb	r3, r3
 800558a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800558e:	b2db      	uxtb	r3, r3
 8005590:	b2db      	uxtb	r3, r3
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d102      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800559a:	4b4c      	ldr	r3, [pc, #304]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	e02b      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80055a0:	2302      	movs	r3, #2
 80055a2:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	fa93 f3a3 	rbit	r3, r3
 80055aa:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	fab3 f383 	clz	r3, r3
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d102      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80055c4:	4b41      	ldr	r3, [pc, #260]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	e016      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80055ca:	2302      	movs	r3, #2
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d0:	fa93 f3a3 	rbit	r3, r3
 80055d4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	fab3 f383 	clz	r3, r3
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d102      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80055ee:	4b37      	ldr	r3, [pc, #220]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	e001      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80055f4:	4b35      	ldr	r3, [pc, #212]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	2202      	movs	r2, #2
 80055fa:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055fe:	fa92 f2a2 	rbit	r2, r2
 8005602:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	fab2 f282 	clz	r2, r2
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	f002 021f 	and.w	r2, r2, #31
 8005618:	40d3      	lsrs	r3, r2
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d09e      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005622:	492a      	ldr	r1, [pc, #168]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005624:	4b29      	ldr	r3, [pc, #164]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4313      	orrs	r3, r2
 8005632:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005634:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005638:	2b01      	cmp	r3, #1
 800563a:	d105      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800563c:	4a23      	ldr	r2, [pc, #140]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800563e:	4b23      	ldr	r3, [pc, #140]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005646:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005654:	491d      	ldr	r1, [pc, #116]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005656:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	f023 0203 	bic.w	r2, r3, #3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4313      	orrs	r3, r2
 8005664:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d008      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005672:	4916      	ldr	r1, [pc, #88]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005674:	4b15      	ldr	r3, [pc, #84]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	f023 0210 	bic.w	r2, r3, #16
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005690:	490e      	ldr	r1, [pc, #56]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005692:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d008      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80056ae:	4907      	ldr	r1, [pc, #28]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3748      	adds	r7, #72	; 0x48
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40021000 	.word	0x40021000
 80056d0:	40007000 	.word	0x40007000
 80056d4:	42420400 	.word	0x42420400

080056d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e043      	b.n	8005772 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fc fa30 	bl	8001b64 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f8a1 	bl	8005864 <UART_SetConfig>
 8005722:	4603      	mov	r3, r0
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e022      	b.n	8005772 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f9fb 	bl	8005b30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	6852      	ldr	r2, [r2, #4]
 8005744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005748:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	6892      	ldr	r2, [r2, #8]
 8005754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005758:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	f042 0201 	orr.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa82 	bl	8005c74 <UART_CheckIdleState>
 8005770:	4603      	mov	r3, r0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop

0800577c <HAL_UART_Transmit_DMA>:
  *       DMA half transfer complete, DMA transfer complete and DMA transfer
  *       error interrupts are enabled
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]

  /* Check if UART instance supports continuous communication using DMA */
  assert_param(IS_UART_DMA_INSTANCE(huart->Instance));

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b20      	cmp	r3, #32
 8005794:	d150      	bne.n	8005838 <HAL_UART_Transmit_DMA+0xbc>
  {
    if((pData == NULL ) || (Size == 0))
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_UART_Transmit_DMA+0x26>
 800579c:	88fb      	ldrh	r3, [r7, #6]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e049      	b.n	800583a <HAL_UART_Transmit_DMA+0xbe>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_UART_Transmit_DMA+0x38>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e042      	b.n	800583a <HAL_UART_Transmit_DMA+0xbe>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pTxBuffPtr = pData;
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	88fa      	ldrh	r2, [r7, #6]
 80057ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2221      	movs	r2, #33	; 0x21
 80057dc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e4:	4a17      	ldr	r2, [pc, #92]	; (8005844 <HAL_UART_Transmit_DMA+0xc8>)
 80057e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ec:	4a16      	ldr	r2, [pc, #88]	; (8005848 <HAL_UART_Transmit_DMA+0xcc>)
 80057ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f4:	4a15      	ldr	r2, [pc, #84]	; (800584c <HAL_UART_Transmit_DMA+0xd0>)
 80057f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 80057f8:	f107 0308 	add.w	r3, r7, #8
 80057fc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	6819      	ldr	r1, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3328      	adds	r3, #40	; 0x28
 800580c:	461a      	mov	r2, r3
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	f7fc fc0e 	bl	8002030 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2240      	movs	r2, #64	; 0x40
 800581a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	6892      	ldr	r2, [r2, #8]
 8005826:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800582a:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	e000      	b.n	800583a <HAL_UART_Transmit_DMA+0xbe>
  }
  else
  {
    return HAL_BUSY;
 8005838:	2302      	movs	r3, #2
  }
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	08005e35 	.word	0x08005e35
 8005848:	08005e89 	.word	0x08005e89
 800584c:	08005ea5 	.word	0x08005ea5

08005850 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart: UART handle.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005870:	2310      	movs	r3, #16
 8005872:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000;
 8005874:	2300      	movs	r3, #0
 8005876:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000;
 8005878:	2300      	movs	r3, #0
 800587a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6819      	ldr	r1, [r3, #0]
 80058a2:	4b9e      	ldr	r3, [pc, #632]	; (8005b1c <UART_SetConfig+0x2b8>)
 80058a4:	400b      	ands	r3, r1
 80058a6:	68f9      	ldr	r1, [r7, #12]
 80058a8:	430b      	orrs	r3, r1
 80058aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	6852      	ldr	r2, [r2, #4]
 80058b6:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68d2      	ldr	r2, [r2, #12]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	6892      	ldr	r2, [r2, #8]
 80058d8:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	430a      	orrs	r2, r1
 80058e0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a8e      	ldr	r2, [pc, #568]	; (8005b20 <UART_SetConfig+0x2bc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d121      	bne.n	8005930 <UART_SetConfig+0xcc>
 80058ec:	4b8d      	ldr	r3, [pc, #564]	; (8005b24 <UART_SetConfig+0x2c0>)
 80058ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d817      	bhi.n	8005928 <UART_SetConfig+0xc4>
 80058f8:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0x9c>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005911 	.word	0x08005911
 8005904:	0800591d 	.word	0x0800591d
 8005908:	08005923 	.word	0x08005923
 800590c:	08005917 	.word	0x08005917
 8005910:	2300      	movs	r3, #0
 8005912:	75fb      	strb	r3, [r7, #23]
 8005914:	e01e      	b.n	8005954 <UART_SetConfig+0xf0>
 8005916:	2302      	movs	r3, #2
 8005918:	75fb      	strb	r3, [r7, #23]
 800591a:	e01b      	b.n	8005954 <UART_SetConfig+0xf0>
 800591c:	2304      	movs	r3, #4
 800591e:	75fb      	strb	r3, [r7, #23]
 8005920:	e018      	b.n	8005954 <UART_SetConfig+0xf0>
 8005922:	2308      	movs	r3, #8
 8005924:	75fb      	strb	r3, [r7, #23]
 8005926:	e015      	b.n	8005954 <UART_SetConfig+0xf0>
 8005928:	2310      	movs	r3, #16
 800592a:	75fb      	strb	r3, [r7, #23]
 800592c:	bf00      	nop
 800592e:	e011      	b.n	8005954 <UART_SetConfig+0xf0>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a7c      	ldr	r2, [pc, #496]	; (8005b28 <UART_SetConfig+0x2c4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d102      	bne.n	8005940 <UART_SetConfig+0xdc>
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]
 800593e:	e009      	b.n	8005954 <UART_SetConfig+0xf0>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a79      	ldr	r2, [pc, #484]	; (8005b2c <UART_SetConfig+0x2c8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d102      	bne.n	8005950 <UART_SetConfig+0xec>
 800594a:	2300      	movs	r3, #0
 800594c:	75fb      	strb	r3, [r7, #23]
 800594e:	e001      	b.n	8005954 <UART_SetConfig+0xf0>
 8005950:	2310      	movs	r3, #16
 8005952:	75fb      	strb	r3, [r7, #23]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595c:	d170      	bne.n	8005a40 <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	2b08      	cmp	r3, #8
 8005962:	d857      	bhi.n	8005a14 <UART_SetConfig+0x1b0>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0x108>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	08005991 	.word	0x08005991
 8005970:	080059ad 	.word	0x080059ad
 8005974:	080059c9 	.word	0x080059c9
 8005978:	08005a15 	.word	0x08005a15
 800597c:	080059e3 	.word	0x080059e3
 8005980:	08005a15 	.word	0x08005a15
 8005984:	08005a15 	.word	0x08005a15
 8005988:	08005a15 	.word	0x08005a15
 800598c:	080059ff 	.word	0x080059ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005990:	f7ff fd18 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 8005994:	4603      	mov	r3, r0
 8005996:	005a      	lsls	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	441a      	add	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a8:	82bb      	strh	r3, [r7, #20]
        break;
 80059aa:	e036      	b.n	8005a1a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80059ac:	f7ff fd2c 	bl	8005408 <HAL_RCC_GetPCLK2Freq>
 80059b0:	4603      	mov	r3, r0
 80059b2:	005a      	lsls	r2, r3, #1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	441a      	add	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	82bb      	strh	r3, [r7, #20]
        break;
 80059c6:	e028      	b.n	8005a1a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80059d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6852      	ldr	r2, [r2, #4]
 80059da:	fbb3 f3f2 	udiv	r3, r3, r2
 80059de:	82bb      	strh	r3, [r7, #20]
        break;
 80059e0:	e01b      	b.n	8005a1a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80059e2:	f7ff fc79 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 80059e6:	4603      	mov	r3, r0
 80059e8:	005a      	lsls	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	441a      	add	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fa:	82bb      	strh	r3, [r7, #20]
        break;
 80059fc:	e00d      	b.n	8005a1a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	82bb      	strh	r3, [r7, #20]
        break;
 8005a12:	e002      	b.n	8005a1a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	74fb      	strb	r3, [r7, #19]
        break;
 8005a18:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 8005a1a:	8abb      	ldrh	r3, [r7, #20]
 8005a1c:	f023 030f 	bic.w	r3, r3, #15
 8005a20:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8005a22:	8abb      	ldrh	r3, [r7, #20]
 8005a24:	105b      	asrs	r3, r3, #1
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	897b      	ldrh	r3, [r7, #10]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	897a      	ldrh	r2, [r7, #10]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	e068      	b.n	8005b12 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d862      	bhi.n	8005b0c <UART_SetConfig+0x2a8>
 8005a46:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <UART_SetConfig+0x1e8>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005a71 	.word	0x08005a71
 8005a50:	08005a91 	.word	0x08005a91
 8005a54:	08005ab1 	.word	0x08005ab1
 8005a58:	08005b0d 	.word	0x08005b0d
 8005a5c:	08005ad1 	.word	0x08005ad1
 8005a60:	08005b0d 	.word	0x08005b0d
 8005a64:	08005b0d 	.word	0x08005b0d
 8005a68:	08005b0d 	.word	0x08005b0d
 8005a6c:	08005af1 	.word	0x08005af1
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681c      	ldr	r4, [r3, #0]
 8005a74:	f7ff fca6 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	441a      	add	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	60e3      	str	r3, [r4, #12]
        break;
 8005a8e:	e040      	b.n	8005b12 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681c      	ldr	r4, [r3, #0]
 8005a94:	f7ff fcb8 	bl	8005408 <HAL_RCC_GetPCLK2Freq>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	441a      	add	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	60e3      	str	r3, [r4, #12]
        break;
 8005aae:	e030      	b.n	8005b12 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005abe:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	6849      	ldr	r1, [r1, #4]
 8005ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	60d3      	str	r3, [r2, #12]
        break;
 8005ace:	e020      	b.n	8005b12 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681c      	ldr	r4, [r3, #0]
 8005ad4:	f7ff fc00 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	441a      	add	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	60e3      	str	r3, [r4, #12]
        break;
 8005aee:	e010      	b.n	8005b12 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6852      	ldr	r2, [r2, #4]
 8005af8:	0852      	lsrs	r2, r2, #1
 8005afa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6852      	ldr	r2, [r2, #4]
 8005b02:	fbb1 f2f2 	udiv	r2, r1, r2
 8005b06:	b292      	uxth	r2, r2
 8005b08:	60da      	str	r2, [r3, #12]
        break;
 8005b0a:	e002      	b.n	8005b12 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	74fb      	strb	r3, [r7, #19]
        break;
 8005b10:	bf00      	nop
    }
  }

  return ret;
 8005b12:	7cfb      	ldrb	r3, [r7, #19]

}
 8005b14:	4618      	mov	r0, r3
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd90      	pop	{r4, r7, pc}
 8005b1c:	efff69f3 	.word	0xefff69f3
 8005b20:	40013800 	.word	0x40013800
 8005b24:	40021000 	.word	0x40021000
 8005b28:	40004400 	.word	0x40004400
 8005b2c:	40004800 	.word	0x40004800

08005b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	6852      	ldr	r2, [r2, #4]
 8005b4e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	6852      	ldr	r2, [r2, #4]
 8005b70:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	6852      	ldr	r2, [r2, #4]
 8005b92:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	6852      	ldr	r2, [r2, #4]
 8005bb4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	6892      	ldr	r2, [r2, #8]
 8005bd6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bde:	430a      	orrs	r2, r1
 8005be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	6892      	ldr	r2, [r2, #8]
 8005bf8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c00:	430a      	orrs	r2, r1
 8005c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01a      	beq.n	8005c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	6852      	ldr	r2, [r2, #4]
 8005c1a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c2e:	d10a      	bne.n	8005c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	6852      	ldr	r2, [r2, #4]
 8005c3a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	6852      	ldr	r2, [r2, #4]
 8005c5c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c64:	430a      	orrs	r2, r1
 8005c66:	605a      	str	r2, [r3, #4]
  }
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00c      	beq.n	8005caa <UART_CheckIdleState+0x36>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c94:	2200      	movs	r2, #0
 8005c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f82a 	bl	8005cf4 <UART_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <UART_CheckIdleState+0x36>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e020      	b.n	8005cec <UART_CheckIdleState+0x78>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00c      	beq.n	8005cd2 <UART_CheckIdleState+0x5e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005cb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f816 	bl	8005cf4 <UART_WaitOnFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <UART_CheckIdleState+0x5e>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e00c      	b.n	8005cec <UART_CheckIdleState+0x78>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	4613      	mov	r3, r2
 8005d02:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 8005d04:	f7fb fff2 	bl	8001cec <HAL_GetTick>
 8005d08:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 8084 	bne.w	8005e1a <UART_WaitOnFlagUntilTimeout+0x126>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8005d12:	e03c      	b.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x9a>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d038      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x9a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x3e>
 8005d22:	f7fb ffe3 	bl	8001cec <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	1ad2      	subs	r2, r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d92d      	bls.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x9a>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d40:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	f022 0220 	bic.w	r2, r2, #32
 8005d50:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d60:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	6892      	ldr	r2, [r2, #8]
 8005d6c:	f022 0201 	bic.w	r2, r2, #1
 8005d70:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e04e      	b.n	8005e2c <UART_WaitOnFlagUntilTimeout+0x138>
  uint32_t tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	401a      	ands	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d1ba      	bne.n	8005d14 <UART_WaitOnFlagUntilTimeout+0x20>
 8005d9e:	e044      	b.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x136>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d038      	beq.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x126>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xca>
 8005dae:	f7fb ff9d 	bl	8001cec <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d92d      	bls.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x126>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dcc:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	6812      	ldr	r2, [r2, #0]
 8005dd8:	f022 0220 	bic.w	r2, r2, #32
 8005ddc:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	6812      	ldr	r2, [r2, #0]
 8005de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dec:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	6892      	ldr	r2, [r2, #8]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e008      	b.n	8005e2c <UART_WaitOnFlagUntilTimeout+0x138>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	401a      	ands	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d0ba      	beq.n	8005da0 <UART_WaitOnFlagUntilTimeout+0xac>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	60fb      	str	r3, [r7, #12]
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d114      	bne.n	8005e7a <UART_DMATransmitCplt+0x46>
  {  
    huart->TxXferCount = 0;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	6892      	ldr	r2, [r2, #8]
 8005e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e66:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	6812      	ldr	r2, [r2, #0]
 8005e70:	6812      	ldr	r2, [r2, #0]
 8005e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e76:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8005e78:	e002      	b.n	8005e80 <UART_DMATransmitCplt+0x4c>
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7fb fcc6 	bl	800180c <HAL_UART_TxCpltCallback>
  }

}
 8005e80:	bf00      	nop
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f7ff fcda 	bl	8005850 <HAL_UART_TxHalfCpltCallback>
}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->gState= HAL_UART_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed6:	f043 0210 	orr.w	r2, r3, #16
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7fb fca4 	bl	800182c <HAL_UART_ErrorCallback>
}
 8005ee4:	bf00      	nop
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <__errno>:
 8005eec:	4b01      	ldr	r3, [pc, #4]	; (8005ef4 <__errno+0x8>)
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000428 	.word	0x20000428

08005ef8 <sprintf>:
 8005ef8:	b40e      	push	{r1, r2, r3}
 8005efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efc:	b09c      	sub	sp, #112	; 0x70
 8005efe:	ab21      	add	r3, sp, #132	; 0x84
 8005f00:	490f      	ldr	r1, [pc, #60]	; (8005f40 <sprintf+0x48>)
 8005f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	4605      	mov	r5, r0
 8005f0a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8005f0e:	6808      	ldr	r0, [r1, #0]
 8005f10:	9502      	str	r5, [sp, #8]
 8005f12:	f44f 7702 	mov.w	r7, #520	; 0x208
 8005f16:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005f1a:	a902      	add	r1, sp, #8
 8005f1c:	9506      	str	r5, [sp, #24]
 8005f1e:	f8ad 7014 	strh.w	r7, [sp, #20]
 8005f22:	9404      	str	r4, [sp, #16]
 8005f24:	9407      	str	r4, [sp, #28]
 8005f26:	f8ad 6016 	strh.w	r6, [sp, #22]
 8005f2a:	f000 f80d 	bl	8005f48 <_svfprintf_r>
 8005f2e:	9b02      	ldr	r3, [sp, #8]
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	b01c      	add	sp, #112	; 0x70
 8005f36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005f3a:	b003      	add	sp, #12
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	20000428 	.word	0x20000428
 8005f44:	00000000 	.word	0x00000000

08005f48 <_svfprintf_r>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	b0bd      	sub	sp, #244	; 0xf4
 8005f4e:	460c      	mov	r4, r1
 8005f50:	9104      	str	r1, [sp, #16]
 8005f52:	4692      	mov	sl, r2
 8005f54:	930a      	str	r3, [sp, #40]	; 0x28
 8005f56:	9006      	str	r0, [sp, #24]
 8005f58:	f002 faf4 	bl	8008544 <_localeconv_r>
 8005f5c:	6803      	ldr	r3, [r0, #0]
 8005f5e:	9311      	str	r3, [sp, #68]	; 0x44
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fa fc2d 	bl	80007c0 <strlen>
 8005f66:	89a3      	ldrh	r3, [r4, #12]
 8005f68:	9012      	str	r0, [sp, #72]	; 0x48
 8005f6a:	061d      	lsls	r5, r3, #24
 8005f6c:	d503      	bpl.n	8005f76 <_svfprintf_r+0x2e>
 8005f6e:	6923      	ldr	r3, [r4, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f001 8136 	beq.w	80071e2 <_svfprintf_r+0x129a>
 8005f76:	ed9f 7ba4 	vldr	d7, [pc, #656]	; 8006208 <_svfprintf_r+0x2c0>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005f80:	9310      	str	r3, [sp, #64]	; 0x40
 8005f82:	9321      	str	r3, [sp, #132]	; 0x84
 8005f84:	9320      	str	r3, [sp, #128]	; 0x80
 8005f86:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f88:	9307      	str	r3, [sp, #28]
 8005f8a:	ab2c      	add	r3, sp, #176	; 0xb0
 8005f8c:	931f      	str	r3, [sp, #124]	; 0x7c
 8005f8e:	4699      	mov	r9, r3
 8005f90:	f89a 3000 	ldrb.w	r3, [sl]
 8005f94:	4654      	mov	r4, sl
 8005f96:	b1eb      	cbz	r3, 8005fd4 <_svfprintf_r+0x8c>
 8005f98:	2b25      	cmp	r3, #37	; 0x25
 8005f9a:	d102      	bne.n	8005fa2 <_svfprintf_r+0x5a>
 8005f9c:	e01a      	b.n	8005fd4 <_svfprintf_r+0x8c>
 8005f9e:	2b25      	cmp	r3, #37	; 0x25
 8005fa0:	d003      	beq.n	8005faa <_svfprintf_r+0x62>
 8005fa2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f9      	bne.n	8005f9e <_svfprintf_r+0x56>
 8005faa:	ebca 0504 	rsb	r5, sl, r4
 8005fae:	b18d      	cbz	r5, 8005fd4 <_svfprintf_r+0x8c>
 8005fb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fb2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fb4:	f8c9 a000 	str.w	sl, [r9]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	442a      	add	r2, r5
 8005fbc:	2b07      	cmp	r3, #7
 8005fbe:	f8c9 5004 	str.w	r5, [r9, #4]
 8005fc2:	9221      	str	r2, [sp, #132]	; 0x84
 8005fc4:	9320      	str	r3, [sp, #128]	; 0x80
 8005fc6:	f300 80a6 	bgt.w	8006116 <_svfprintf_r+0x1ce>
 8005fca:	f109 0908 	add.w	r9, r9, #8
 8005fce:	9b07      	ldr	r3, [sp, #28]
 8005fd0:	442b      	add	r3, r5
 8005fd2:	9307      	str	r3, [sp, #28]
 8005fd4:	7823      	ldrb	r3, [r4, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 80a6 	beq.w	8006128 <_svfprintf_r+0x1e0>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	9308      	str	r3, [sp, #32]
 8005fe8:	9303      	str	r3, [sp, #12]
 8005fea:	f04f 3bff 	mov.w	fp, #4294967295
 8005fee:	7863      	ldrb	r3, [r4, #1]
 8005ff0:	f104 0a01 	add.w	sl, r4, #1
 8005ff4:	465d      	mov	r5, fp
 8005ff6:	f10a 0a01 	add.w	sl, sl, #1
 8005ffa:	f1a3 0020 	sub.w	r0, r3, #32
 8005ffe:	2858      	cmp	r0, #88	; 0x58
 8006000:	f200 841f 	bhi.w	8006842 <_svfprintf_r+0x8fa>
 8006004:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006008:	041d038b 	.word	0x041d038b
 800600c:	0393041d 	.word	0x0393041d
 8006010:	041d041d 	.word	0x041d041d
 8006014:	041d041d 	.word	0x041d041d
 8006018:	041d041d 	.word	0x041d041d
 800601c:	03a8039a 	.word	0x03a8039a
 8006020:	005d041d 	.word	0x005d041d
 8006024:	041d00e2 	.word	0x041d00e2
 8006028:	010d0106 	.word	0x010d0106
 800602c:	010d010d 	.word	0x010d010d
 8006030:	010d010d 	.word	0x010d010d
 8006034:	010d010d 	.word	0x010d010d
 8006038:	010d010d 	.word	0x010d010d
 800603c:	041d041d 	.word	0x041d041d
 8006040:	041d041d 	.word	0x041d041d
 8006044:	041d041d 	.word	0x041d041d
 8006048:	041d041d 	.word	0x041d041d
 800604c:	041d041d 	.word	0x041d041d
 8006050:	0285011d 	.word	0x0285011d
 8006054:	0285041d 	.word	0x0285041d
 8006058:	041d041d 	.word	0x041d041d
 800605c:	041d041d 	.word	0x041d041d
 8006060:	041d02c0 	.word	0x041d02c0
 8006064:	02c7041d 	.word	0x02c7041d
 8006068:	041d041d 	.word	0x041d041d
 800606c:	041d041d 	.word	0x041d041d
 8006070:	02fa041d 	.word	0x02fa041d
 8006074:	041d041d 	.word	0x041d041d
 8006078:	041d0328 	.word	0x041d0328
 800607c:	041d041d 	.word	0x041d041d
 8006080:	041d041d 	.word	0x041d041d
 8006084:	041d041d 	.word	0x041d041d
 8006088:	041d041d 	.word	0x041d041d
 800608c:	0369041d 	.word	0x0369041d
 8006090:	0285037c 	.word	0x0285037c
 8006094:	02850285 	.word	0x02850285
 8006098:	037c0384 	.word	0x037c0384
 800609c:	041d041d 	.word	0x041d041d
 80060a0:	041d03f2 	.word	0x041d03f2
 80060a4:	00a303fd 	.word	0x00a303fd
 80060a8:	03ad0064 	.word	0x03ad0064
 80060ac:	03b4041d 	.word	0x03b4041d
 80060b0:	03d5041d 	.word	0x03d5041d
 80060b4:	041d041d 	.word	0x041d041d
 80060b8:	03dd      	.short	0x03dd
 80060ba:	9808      	ldr	r0, [sp, #32]
 80060bc:	930a      	str	r3, [sp, #40]	; 0x28
 80060be:	4240      	negs	r0, r0
 80060c0:	9008      	str	r0, [sp, #32]
 80060c2:	9b03      	ldr	r3, [sp, #12]
 80060c4:	f043 0304 	orr.w	r3, r3, #4
 80060c8:	9303      	str	r3, [sp, #12]
 80060ca:	f89a 3000 	ldrb.w	r3, [sl]
 80060ce:	e792      	b.n	8005ff6 <_svfprintf_r+0xae>
 80060d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80060d2:	46ab      	mov	fp, r5
 80060d4:	2100      	movs	r1, #0
 80060d6:	6804      	ldr	r4, [r0, #0]
 80060d8:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80060dc:	1d07      	adds	r7, r0, #4
 80060de:	9803      	ldr	r0, [sp, #12]
 80060e0:	2330      	movs	r3, #48	; 0x30
 80060e2:	2278      	movs	r2, #120	; 0x78
 80060e4:	458b      	cmp	fp, r1
 80060e6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80060ea:	f04f 0500 	mov.w	r5, #0
 80060ee:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80060f2:	f040 0302 	orr.w	r3, r0, #2
 80060f6:	f2c0 83c1 	blt.w	800687c <_svfprintf_r+0x934>
 80060fa:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 80060fe:	f043 0302 	orr.w	r3, r3, #2
 8006102:	9303      	str	r3, [sp, #12]
 8006104:	ea54 0305 	orrs.w	r3, r4, r5
 8006108:	970a      	str	r7, [sp, #40]	; 0x28
 800610a:	f000 838d 	beq.w	8006828 <_svfprintf_r+0x8e0>
 800610e:	460f      	mov	r7, r1
 8006110:	920c      	str	r2, [sp, #48]	; 0x30
 8006112:	483f      	ldr	r0, [pc, #252]	; (8006210 <_svfprintf_r+0x2c8>)
 8006114:	e2d1      	b.n	80066ba <_svfprintf_r+0x772>
 8006116:	aa1f      	add	r2, sp, #124	; 0x7c
 8006118:	9904      	ldr	r1, [sp, #16]
 800611a:	9806      	ldr	r0, [sp, #24]
 800611c:	f003 f812 	bl	8009144 <__ssprint_r>
 8006120:	b948      	cbnz	r0, 8006136 <_svfprintf_r+0x1ee>
 8006122:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006126:	e752      	b.n	8005fce <_svfprintf_r+0x86>
 8006128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800612a:	b123      	cbz	r3, 8006136 <_svfprintf_r+0x1ee>
 800612c:	9806      	ldr	r0, [sp, #24]
 800612e:	9904      	ldr	r1, [sp, #16]
 8006130:	aa1f      	add	r2, sp, #124	; 0x7c
 8006132:	f003 f807 	bl	8009144 <__ssprint_r>
 8006136:	9b04      	ldr	r3, [sp, #16]
 8006138:	899b      	ldrh	r3, [r3, #12]
 800613a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800613e:	9b07      	ldr	r3, [sp, #28]
 8006140:	bf18      	it	ne
 8006142:	f04f 33ff 	movne.w	r3, #4294967295
 8006146:	4618      	mov	r0, r3
 8006148:	b03d      	add	sp, #244	; 0xf4
 800614a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614e:	930c      	str	r3, [sp, #48]	; 0x30
 8006150:	46ab      	mov	fp, r5
 8006152:	2a00      	cmp	r2, #0
 8006154:	f041 822d 	bne.w	80075b2 <_svfprintf_r+0x166a>
 8006158:	9a03      	ldr	r2, [sp, #12]
 800615a:	f012 0320 	ands.w	r3, r2, #32
 800615e:	f000 8228 	beq.w	80065b2 <_svfprintf_r+0x66a>
 8006162:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006164:	3707      	adds	r7, #7
 8006166:	f027 0307 	bic.w	r3, r7, #7
 800616a:	2700      	movs	r7, #0
 800616c:	f103 0108 	add.w	r1, r3, #8
 8006170:	45bb      	cmp	fp, r7
 8006172:	910a      	str	r1, [sp, #40]	; 0x28
 8006174:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006178:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 800617c:	f2c0 86d5 	blt.w	8006f2a <_svfprintf_r+0xfe2>
 8006180:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006184:	9303      	str	r3, [sp, #12]
 8006186:	ea54 0305 	orrs.w	r3, r4, r5
 800618a:	f000 836f 	beq.w	800686c <_svfprintf_r+0x924>
 800618e:	ae2c      	add	r6, sp, #176	; 0xb0
 8006190:	08e2      	lsrs	r2, r4, #3
 8006192:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8006196:	08e9      	lsrs	r1, r5, #3
 8006198:	f004 0307 	and.w	r3, r4, #7
 800619c:	460d      	mov	r5, r1
 800619e:	4614      	mov	r4, r2
 80061a0:	3330      	adds	r3, #48	; 0x30
 80061a2:	ea54 0205 	orrs.w	r2, r4, r5
 80061a6:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80061aa:	d1f1      	bne.n	8006190 <_svfprintf_r+0x248>
 80061ac:	9a03      	ldr	r2, [sp, #12]
 80061ae:	07d1      	lsls	r1, r2, #31
 80061b0:	f140 808c 	bpl.w	80062cc <_svfprintf_r+0x384>
 80061b4:	2b30      	cmp	r3, #48	; 0x30
 80061b6:	f000 8089 	beq.w	80062cc <_svfprintf_r+0x384>
 80061ba:	2230      	movs	r2, #48	; 0x30
 80061bc:	1e73      	subs	r3, r6, #1
 80061be:	f806 2c01 	strb.w	r2, [r6, #-1]
 80061c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80061c4:	1ad2      	subs	r2, r2, r3
 80061c6:	9209      	str	r2, [sp, #36]	; 0x24
 80061c8:	461e      	mov	r6, r3
 80061ca:	e082      	b.n	80062d2 <_svfprintf_r+0x38a>
 80061cc:	f89a 3000 	ldrb.w	r3, [sl]
 80061d0:	2b2a      	cmp	r3, #42	; 0x2a
 80061d2:	f10a 0401 	add.w	r4, sl, #1
 80061d6:	f001 81ad 	beq.w	8007534 <_svfprintf_r+0x15ec>
 80061da:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80061de:	2809      	cmp	r0, #9
 80061e0:	bf98      	it	ls
 80061e2:	2500      	movls	r5, #0
 80061e4:	f201 80f8 	bhi.w	80073d8 <_svfprintf_r+0x1490>
 80061e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80061ec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80061f0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80061f4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80061f8:	2809      	cmp	r0, #9
 80061fa:	d9f5      	bls.n	80061e8 <_svfprintf_r+0x2a0>
 80061fc:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8006200:	46a2      	mov	sl, r4
 8006202:	e6fa      	b.n	8005ffa <_svfprintf_r+0xb2>
 8006204:	f3af 8000 	nop.w
	...
 8006210:	08009a8c 	.word	0x08009a8c
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621a:	9303      	str	r3, [sp, #12]
 800621c:	f89a 3000 	ldrb.w	r3, [sl]
 8006220:	e6e9      	b.n	8005ff6 <_svfprintf_r+0xae>
 8006222:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006226:	2300      	movs	r3, #0
 8006228:	461c      	mov	r4, r3
 800622a:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800622e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006232:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8006236:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800623a:	2809      	cmp	r0, #9
 800623c:	d9f5      	bls.n	800622a <_svfprintf_r+0x2e2>
 800623e:	9408      	str	r4, [sp, #32]
 8006240:	e6db      	b.n	8005ffa <_svfprintf_r+0xb2>
 8006242:	930c      	str	r3, [sp, #48]	; 0x30
 8006244:	46ab      	mov	fp, r5
 8006246:	2a00      	cmp	r2, #0
 8006248:	f041 81bb 	bne.w	80075c2 <_svfprintf_r+0x167a>
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	f043 0310 	orr.w	r3, r3, #16
 8006252:	9303      	str	r3, [sp, #12]
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	069c      	lsls	r4, r3, #26
 8006258:	f140 8521 	bpl.w	8006c9e <_svfprintf_r+0xd56>
 800625c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800625e:	3707      	adds	r7, #7
 8006260:	f027 0707 	bic.w	r7, r7, #7
 8006264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006268:	f107 0108 	add.w	r1, r7, #8
 800626c:	910a      	str	r1, [sp, #40]	; 0x28
 800626e:	4614      	mov	r4, r2
 8006270:	461d      	mov	r5, r3
 8006272:	2a00      	cmp	r2, #0
 8006274:	f173 0300 	sbcs.w	r3, r3, #0
 8006278:	f2c0 854e 	blt.w	8006d18 <_svfprintf_r+0xdd0>
 800627c:	f1bb 0f00 	cmp.w	fp, #0
 8006280:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8006284:	f2c0 8529 	blt.w	8006cda <_svfprintf_r+0xd92>
 8006288:	9b03      	ldr	r3, [sp, #12]
 800628a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628e:	9303      	str	r3, [sp, #12]
 8006290:	ea54 0305 	orrs.w	r3, r4, r5
 8006294:	f000 81d6 	beq.w	8006644 <_svfprintf_r+0x6fc>
 8006298:	2d00      	cmp	r5, #0
 800629a:	bf08      	it	eq
 800629c:	2c0a      	cmpeq	r4, #10
 800629e:	f0c0 81d6 	bcc.w	800664e <_svfprintf_r+0x706>
 80062a2:	ae2c      	add	r6, sp, #176	; 0xb0
 80062a4:	4620      	mov	r0, r4
 80062a6:	4629      	mov	r1, r5
 80062a8:	220a      	movs	r2, #10
 80062aa:	2300      	movs	r3, #0
 80062ac:	f7fa fdb8 	bl	8000e20 <__aeabi_uldivmod>
 80062b0:	3230      	adds	r2, #48	; 0x30
 80062b2:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	2300      	movs	r3, #0
 80062bc:	220a      	movs	r2, #10
 80062be:	f7fa fdaf 	bl	8000e20 <__aeabi_uldivmod>
 80062c2:	4604      	mov	r4, r0
 80062c4:	460d      	mov	r5, r1
 80062c6:	ea54 0305 	orrs.w	r3, r4, r5
 80062ca:	d1eb      	bne.n	80062a4 <_svfprintf_r+0x35c>
 80062cc:	ab2c      	add	r3, sp, #176	; 0xb0
 80062ce:	1b9b      	subs	r3, r3, r6
 80062d0:	9309      	str	r3, [sp, #36]	; 0x24
 80062d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d4:	455b      	cmp	r3, fp
 80062d6:	bfb8      	it	lt
 80062d8:	465b      	movlt	r3, fp
 80062da:	9305      	str	r3, [sp, #20]
 80062dc:	2300      	movs	r3, #0
 80062de:	930d      	str	r3, [sp, #52]	; 0x34
 80062e0:	b117      	cbz	r7, 80062e8 <_svfprintf_r+0x3a0>
 80062e2:	9b05      	ldr	r3, [sp, #20]
 80062e4:	3301      	adds	r3, #1
 80062e6:	9305      	str	r3, [sp, #20]
 80062e8:	9b03      	ldr	r3, [sp, #12]
 80062ea:	f013 0302 	ands.w	r3, r3, #2
 80062ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80062f0:	d002      	beq.n	80062f8 <_svfprintf_r+0x3b0>
 80062f2:	9b05      	ldr	r3, [sp, #20]
 80062f4:	3302      	adds	r3, #2
 80062f6:	9305      	str	r3, [sp, #20]
 80062f8:	9b03      	ldr	r3, [sp, #12]
 80062fa:	f013 0884 	ands.w	r8, r3, #132	; 0x84
 80062fe:	f040 82ca 	bne.w	8006896 <_svfprintf_r+0x94e>
 8006302:	9b08      	ldr	r3, [sp, #32]
 8006304:	9a05      	ldr	r2, [sp, #20]
 8006306:	1a9d      	subs	r5, r3, r2
 8006308:	2d00      	cmp	r5, #0
 800630a:	f340 82c4 	ble.w	8006896 <_svfprintf_r+0x94e>
 800630e:	2d10      	cmp	r5, #16
 8006310:	9921      	ldr	r1, [sp, #132]	; 0x84
 8006312:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006314:	4fb5      	ldr	r7, [pc, #724]	; (80065ec <_svfprintf_r+0x6a4>)
 8006316:	dd23      	ble.n	8006360 <_svfprintf_r+0x418>
 8006318:	4648      	mov	r0, r9
 800631a:	2410      	movs	r4, #16
 800631c:	46c1      	mov	r9, r8
 800631e:	46b0      	mov	r8, r6
 8006320:	9e06      	ldr	r6, [sp, #24]
 8006322:	e004      	b.n	800632e <_svfprintf_r+0x3e6>
 8006324:	3d10      	subs	r5, #16
 8006326:	2d10      	cmp	r5, #16
 8006328:	f100 0008 	add.w	r0, r0, #8
 800632c:	dd15      	ble.n	800635a <_svfprintf_r+0x412>
 800632e:	3201      	adds	r2, #1
 8006330:	3110      	adds	r1, #16
 8006332:	2a07      	cmp	r2, #7
 8006334:	9121      	str	r1, [sp, #132]	; 0x84
 8006336:	9220      	str	r2, [sp, #128]	; 0x80
 8006338:	6007      	str	r7, [r0, #0]
 800633a:	6044      	str	r4, [r0, #4]
 800633c:	ddf2      	ble.n	8006324 <_svfprintf_r+0x3dc>
 800633e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006340:	9904      	ldr	r1, [sp, #16]
 8006342:	4630      	mov	r0, r6
 8006344:	f002 fefe 	bl	8009144 <__ssprint_r>
 8006348:	2800      	cmp	r0, #0
 800634a:	f47f aef4 	bne.w	8006136 <_svfprintf_r+0x1ee>
 800634e:	3d10      	subs	r5, #16
 8006350:	2d10      	cmp	r5, #16
 8006352:	9921      	ldr	r1, [sp, #132]	; 0x84
 8006354:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006356:	a82c      	add	r0, sp, #176	; 0xb0
 8006358:	dce9      	bgt.n	800632e <_svfprintf_r+0x3e6>
 800635a:	4646      	mov	r6, r8
 800635c:	46c8      	mov	r8, r9
 800635e:	4681      	mov	r9, r0
 8006360:	3201      	adds	r2, #1
 8006362:	186c      	adds	r4, r5, r1
 8006364:	2a07      	cmp	r2, #7
 8006366:	9421      	str	r4, [sp, #132]	; 0x84
 8006368:	9220      	str	r2, [sp, #128]	; 0x80
 800636a:	f8c9 7000 	str.w	r7, [r9]
 800636e:	f8c9 5004 	str.w	r5, [r9, #4]
 8006372:	f300 8420 	bgt.w	8006bb6 <_svfprintf_r+0xc6e>
 8006376:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 800637a:	f109 0908 	add.w	r9, r9, #8
 800637e:	b177      	cbz	r7, 800639e <_svfprintf_r+0x456>
 8006380:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006382:	3301      	adds	r3, #1
 8006384:	3401      	adds	r4, #1
 8006386:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 800638a:	2201      	movs	r2, #1
 800638c:	2b07      	cmp	r3, #7
 800638e:	9421      	str	r4, [sp, #132]	; 0x84
 8006390:	9320      	str	r3, [sp, #128]	; 0x80
 8006392:	e889 0006 	stmia.w	r9, {r1, r2}
 8006396:	f300 8397 	bgt.w	8006ac8 <_svfprintf_r+0xb80>
 800639a:	f109 0908 	add.w	r9, r9, #8
 800639e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063a0:	b16b      	cbz	r3, 80063be <_svfprintf_r+0x476>
 80063a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063a4:	3301      	adds	r3, #1
 80063a6:	3402      	adds	r4, #2
 80063a8:	a918      	add	r1, sp, #96	; 0x60
 80063aa:	2202      	movs	r2, #2
 80063ac:	2b07      	cmp	r3, #7
 80063ae:	9421      	str	r4, [sp, #132]	; 0x84
 80063b0:	9320      	str	r3, [sp, #128]	; 0x80
 80063b2:	e889 0006 	stmia.w	r9, {r1, r2}
 80063b6:	f300 8393 	bgt.w	8006ae0 <_svfprintf_r+0xb98>
 80063ba:	f109 0908 	add.w	r9, r9, #8
 80063be:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80063c2:	f000 82d4 	beq.w	800696e <_svfprintf_r+0xa26>
 80063c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c8:	ebc3 070b 	rsb	r7, r3, fp
 80063cc:	2f00      	cmp	r7, #0
 80063ce:	dd3a      	ble.n	8006446 <_svfprintf_r+0x4fe>
 80063d0:	2f10      	cmp	r7, #16
 80063d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063d4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 80065f8 <_svfprintf_r+0x6b0>
 80063d8:	dd28      	ble.n	800642c <_svfprintf_r+0x4e4>
 80063da:	4641      	mov	r1, r8
 80063dc:	4622      	mov	r2, r4
 80063de:	46b0      	mov	r8, r6
 80063e0:	f04f 0b10 	mov.w	fp, #16
 80063e4:	9d06      	ldr	r5, [sp, #24]
 80063e6:	9c04      	ldr	r4, [sp, #16]
 80063e8:	460e      	mov	r6, r1
 80063ea:	e004      	b.n	80063f6 <_svfprintf_r+0x4ae>
 80063ec:	3f10      	subs	r7, #16
 80063ee:	2f10      	cmp	r7, #16
 80063f0:	f109 0908 	add.w	r9, r9, #8
 80063f4:	dd16      	ble.n	8006424 <_svfprintf_r+0x4dc>
 80063f6:	3301      	adds	r3, #1
 80063f8:	3210      	adds	r2, #16
 80063fa:	2b07      	cmp	r3, #7
 80063fc:	9221      	str	r2, [sp, #132]	; 0x84
 80063fe:	9320      	str	r3, [sp, #128]	; 0x80
 8006400:	e889 0840 	stmia.w	r9, {r6, fp}
 8006404:	ddf2      	ble.n	80063ec <_svfprintf_r+0x4a4>
 8006406:	aa1f      	add	r2, sp, #124	; 0x7c
 8006408:	4621      	mov	r1, r4
 800640a:	4628      	mov	r0, r5
 800640c:	f002 fe9a 	bl	8009144 <__ssprint_r>
 8006410:	2800      	cmp	r0, #0
 8006412:	f47f ae90 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006416:	3f10      	subs	r7, #16
 8006418:	2f10      	cmp	r7, #16
 800641a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800641c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800641e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006422:	dce8      	bgt.n	80063f6 <_svfprintf_r+0x4ae>
 8006424:	4614      	mov	r4, r2
 8006426:	4632      	mov	r2, r6
 8006428:	4646      	mov	r6, r8
 800642a:	4690      	mov	r8, r2
 800642c:	3301      	adds	r3, #1
 800642e:	443c      	add	r4, r7
 8006430:	2b07      	cmp	r3, #7
 8006432:	9421      	str	r4, [sp, #132]	; 0x84
 8006434:	9320      	str	r3, [sp, #128]	; 0x80
 8006436:	f8c9 8000 	str.w	r8, [r9]
 800643a:	f8c9 7004 	str.w	r7, [r9, #4]
 800643e:	f300 8337 	bgt.w	8006ab0 <_svfprintf_r+0xb68>
 8006442:	f109 0908 	add.w	r9, r9, #8
 8006446:	9b03      	ldr	r3, [sp, #12]
 8006448:	05da      	lsls	r2, r3, #23
 800644a:	f100 8226 	bmi.w	800689a <_svfprintf_r+0x952>
 800644e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006450:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006452:	f8c9 6000 	str.w	r6, [r9]
 8006456:	3301      	adds	r3, #1
 8006458:	440c      	add	r4, r1
 800645a:	2b07      	cmp	r3, #7
 800645c:	9421      	str	r4, [sp, #132]	; 0x84
 800645e:	f8c9 1004 	str.w	r1, [r9, #4]
 8006462:	9320      	str	r3, [sp, #128]	; 0x80
 8006464:	f300 830e 	bgt.w	8006a84 <_svfprintf_r+0xb3c>
 8006468:	f109 0908 	add.w	r9, r9, #8
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	0759      	lsls	r1, r3, #29
 8006470:	d53f      	bpl.n	80064f2 <_svfprintf_r+0x5aa>
 8006472:	9b08      	ldr	r3, [sp, #32]
 8006474:	9a05      	ldr	r2, [sp, #20]
 8006476:	1a9d      	subs	r5, r3, r2
 8006478:	2d00      	cmp	r5, #0
 800647a:	dd3a      	ble.n	80064f2 <_svfprintf_r+0x5aa>
 800647c:	2d10      	cmp	r5, #16
 800647e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006480:	4f5a      	ldr	r7, [pc, #360]	; (80065ec <_svfprintf_r+0x6a4>)
 8006482:	dd23      	ble.n	80064cc <_svfprintf_r+0x584>
 8006484:	2610      	movs	r6, #16
 8006486:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800648a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800648e:	e004      	b.n	800649a <_svfprintf_r+0x552>
 8006490:	3d10      	subs	r5, #16
 8006492:	2d10      	cmp	r5, #16
 8006494:	f109 0908 	add.w	r9, r9, #8
 8006498:	dd18      	ble.n	80064cc <_svfprintf_r+0x584>
 800649a:	3301      	adds	r3, #1
 800649c:	3410      	adds	r4, #16
 800649e:	2b07      	cmp	r3, #7
 80064a0:	9421      	str	r4, [sp, #132]	; 0x84
 80064a2:	9320      	str	r3, [sp, #128]	; 0x80
 80064a4:	f8c9 7000 	str.w	r7, [r9]
 80064a8:	f8c9 6004 	str.w	r6, [r9, #4]
 80064ac:	ddf0      	ble.n	8006490 <_svfprintf_r+0x548>
 80064ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80064b0:	4659      	mov	r1, fp
 80064b2:	4640      	mov	r0, r8
 80064b4:	f002 fe46 	bl	8009144 <__ssprint_r>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	f47f ae3c 	bne.w	8006136 <_svfprintf_r+0x1ee>
 80064be:	3d10      	subs	r5, #16
 80064c0:	2d10      	cmp	r5, #16
 80064c2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80064c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80064c6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80064ca:	dce6      	bgt.n	800649a <_svfprintf_r+0x552>
 80064cc:	3301      	adds	r3, #1
 80064ce:	442c      	add	r4, r5
 80064d0:	2b07      	cmp	r3, #7
 80064d2:	9421      	str	r4, [sp, #132]	; 0x84
 80064d4:	9320      	str	r3, [sp, #128]	; 0x80
 80064d6:	f8c9 7000 	str.w	r7, [r9]
 80064da:	f8c9 5004 	str.w	r5, [r9, #4]
 80064de:	dd08      	ble.n	80064f2 <_svfprintf_r+0x5aa>
 80064e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80064e2:	9904      	ldr	r1, [sp, #16]
 80064e4:	9806      	ldr	r0, [sp, #24]
 80064e6:	f002 fe2d 	bl	8009144 <__ssprint_r>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	f47f ae23 	bne.w	8006136 <_svfprintf_r+0x1ee>
 80064f0:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80064f2:	9b07      	ldr	r3, [sp, #28]
 80064f4:	9a08      	ldr	r2, [sp, #32]
 80064f6:	9905      	ldr	r1, [sp, #20]
 80064f8:	428a      	cmp	r2, r1
 80064fa:	bfac      	ite	ge
 80064fc:	189b      	addge	r3, r3, r2
 80064fe:	185b      	addlt	r3, r3, r1
 8006500:	9307      	str	r3, [sp, #28]
 8006502:	2c00      	cmp	r4, #0
 8006504:	f040 82ca 	bne.w	8006a9c <_svfprintf_r+0xb54>
 8006508:	2300      	movs	r3, #0
 800650a:	9320      	str	r3, [sp, #128]	; 0x80
 800650c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006510:	e53e      	b.n	8005f90 <_svfprintf_r+0x48>
 8006512:	930c      	str	r3, [sp, #48]	; 0x30
 8006514:	46ab      	mov	fp, r5
 8006516:	2a00      	cmp	r2, #0
 8006518:	f041 804f 	bne.w	80075ba <_svfprintf_r+0x1672>
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006520:	071a      	lsls	r2, r3, #28
 8006522:	f107 0707 	add.w	r7, r7, #7
 8006526:	f140 84c7 	bpl.w	8006eb8 <_svfprintf_r+0xf70>
 800652a:	f027 0307 	bic.w	r3, r7, #7
 800652e:	ed93 7b00 	vldr	d7, [r3]
 8006532:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006536:	f103 0208 	add.w	r2, r3, #8
 800653a:	920a      	str	r2, [sp, #40]	; 0x28
 800653c:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8006540:	ec45 4b10 	vmov	d0, r4, r5
 8006544:	f002 fdd0 	bl	80090e8 <__fpclassifyd>
 8006548:	2801      	cmp	r0, #1
 800654a:	f040 849b 	bne.w	8006e84 <_svfprintf_r+0xf3c>
 800654e:	2200      	movs	r2, #0
 8006550:	2300      	movs	r3, #0
 8006552:	4620      	mov	r0, r4
 8006554:	4629      	mov	r1, r5
 8006556:	f7fa fc13 	bl	8000d80 <__aeabi_dcmplt>
 800655a:	2800      	cmp	r0, #0
 800655c:	f040 86d9 	bne.w	8007312 <_svfprintf_r+0x13ca>
 8006560:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8006564:	9903      	ldr	r1, [sp, #12]
 8006566:	4e22      	ldr	r6, [pc, #136]	; (80065f0 <_svfprintf_r+0x6a8>)
 8006568:	4b22      	ldr	r3, [pc, #136]	; (80065f4 <_svfprintf_r+0x6ac>)
 800656a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800656e:	9103      	str	r1, [sp, #12]
 8006570:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006572:	2203      	movs	r2, #3
 8006574:	f04f 0b00 	mov.w	fp, #0
 8006578:	9205      	str	r2, [sp, #20]
 800657a:	2947      	cmp	r1, #71	; 0x47
 800657c:	bfd8      	it	le
 800657e:	461e      	movle	r6, r3
 8006580:	9209      	str	r2, [sp, #36]	; 0x24
 8006582:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006586:	e6ab      	b.n	80062e0 <_svfprintf_r+0x398>
 8006588:	9b03      	ldr	r3, [sp, #12]
 800658a:	f043 0308 	orr.w	r3, r3, #8
 800658e:	9303      	str	r3, [sp, #12]
 8006590:	f89a 3000 	ldrb.w	r3, [sl]
 8006594:	e52f      	b.n	8005ff6 <_svfprintf_r+0xae>
 8006596:	930c      	str	r3, [sp, #48]	; 0x30
 8006598:	46ab      	mov	fp, r5
 800659a:	2a00      	cmp	r2, #0
 800659c:	f041 8003 	bne.w	80075a6 <_svfprintf_r+0x165e>
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	f043 0310 	orr.w	r3, r3, #16
 80065a6:	9303      	str	r3, [sp, #12]
 80065a8:	9a03      	ldr	r2, [sp, #12]
 80065aa:	f012 0320 	ands.w	r3, r2, #32
 80065ae:	f47f add8 	bne.w	8006162 <_svfprintf_r+0x21a>
 80065b2:	9903      	ldr	r1, [sp, #12]
 80065b4:	f011 0210 	ands.w	r2, r1, #16
 80065b8:	f000 84a5 	beq.w	8006f06 <_svfprintf_r+0xfbe>
 80065bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80065be:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80065c2:	f1bb 0f00 	cmp.w	fp, #0
 80065c6:	6804      	ldr	r4, [r0, #0]
 80065c8:	f100 0704 	add.w	r7, r0, #4
 80065cc:	f04f 0500 	mov.w	r5, #0
 80065d0:	f2c0 84aa 	blt.w	8006f28 <_svfprintf_r+0xfe0>
 80065d4:	460a      	mov	r2, r1
 80065d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065da:	9203      	str	r2, [sp, #12]
 80065dc:	ea54 0205 	orrs.w	r2, r4, r5
 80065e0:	970a      	str	r7, [sp, #40]	; 0x28
 80065e2:	f000 8143 	beq.w	800686c <_svfprintf_r+0x924>
 80065e6:	461f      	mov	r7, r3
 80065e8:	e5d1      	b.n	800618e <_svfprintf_r+0x246>
 80065ea:	bf00      	nop
 80065ec:	08009a58 	.word	0x08009a58
 80065f0:	08009a6c 	.word	0x08009a6c
 80065f4:	08009a68 	.word	0x08009a68
 80065f8:	08009aac 	.word	0x08009aac
 80065fc:	930c      	str	r3, [sp, #48]	; 0x30
 80065fe:	46ab      	mov	fp, r5
 8006600:	2a00      	cmp	r2, #0
 8006602:	f040 87cc 	bne.w	800759e <_svfprintf_r+0x1656>
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	f043 0310 	orr.w	r3, r3, #16
 800660c:	9303      	str	r3, [sp, #12]
 800660e:	9a03      	ldr	r2, [sp, #12]
 8006610:	f012 0320 	ands.w	r3, r2, #32
 8006614:	f000 8328 	beq.w	8006c68 <_svfprintf_r+0xd20>
 8006618:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800661a:	3707      	adds	r7, #7
 800661c:	f027 0307 	bic.w	r3, r7, #7
 8006620:	2700      	movs	r7, #0
 8006622:	f103 0108 	add.w	r1, r3, #8
 8006626:	45bb      	cmp	fp, r7
 8006628:	910a      	str	r1, [sp, #40]	; 0x28
 800662a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800662e:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8006632:	f2c0 8352 	blt.w	8006cda <_svfprintf_r+0xd92>
 8006636:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800663a:	9303      	str	r3, [sp, #12]
 800663c:	ea54 0305 	orrs.w	r3, r4, r5
 8006640:	f47f ae2a 	bne.w	8006298 <_svfprintf_r+0x350>
 8006644:	f1bb 0f00 	cmp.w	fp, #0
 8006648:	f000 80f5 	beq.w	8006836 <_svfprintf_r+0x8ee>
 800664c:	2400      	movs	r4, #0
 800664e:	ae3c      	add	r6, sp, #240	; 0xf0
 8006650:	3430      	adds	r4, #48	; 0x30
 8006652:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8006656:	e639      	b.n	80062cc <_svfprintf_r+0x384>
 8006658:	930c      	str	r3, [sp, #48]	; 0x30
 800665a:	46ab      	mov	fp, r5
 800665c:	2a00      	cmp	r2, #0
 800665e:	f040 879a 	bne.w	8007596 <_svfprintf_r+0x164e>
 8006662:	9b03      	ldr	r3, [sp, #12]
 8006664:	48af      	ldr	r0, [pc, #700]	; (8006924 <_svfprintf_r+0x9dc>)
 8006666:	069d      	lsls	r5, r3, #26
 8006668:	f140 80b5 	bpl.w	80067d6 <_svfprintf_r+0x88e>
 800666c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800666e:	3707      	adds	r7, #7
 8006670:	f027 0307 	bic.w	r3, r7, #7
 8006674:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006678:	f103 0208 	add.w	r2, r3, #8
 800667c:	920a      	str	r2, [sp, #40]	; 0x28
 800667e:	9a03      	ldr	r2, [sp, #12]
 8006680:	f012 0701 	ands.w	r7, r2, #1
 8006684:	f000 8238 	beq.w	8006af8 <_svfprintf_r+0xbb0>
 8006688:	ea54 0305 	orrs.w	r3, r4, r5
 800668c:	f000 8487 	beq.w	8006f9e <_svfprintf_r+0x1056>
 8006690:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8006694:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8006698:	2700      	movs	r7, #0
 800669a:	9a03      	ldr	r2, [sp, #12]
 800669c:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 80066a0:	2330      	movs	r3, #48	; 0x30
 80066a2:	45bb      	cmp	fp, r7
 80066a4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80066a8:	f042 0302 	orr.w	r3, r2, #2
 80066ac:	f2c0 862e 	blt.w	800730c <_svfprintf_r+0x13c4>
 80066b0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80066b4:	f043 0302 	orr.w	r3, r3, #2
 80066b8:	9303      	str	r3, [sp, #12]
 80066ba:	ae2c      	add	r6, sp, #176	; 0xb0
 80066bc:	0923      	lsrs	r3, r4, #4
 80066be:	f004 010f 	and.w	r1, r4, #15
 80066c2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80066c6:	092a      	lsrs	r2, r5, #4
 80066c8:	461c      	mov	r4, r3
 80066ca:	4615      	mov	r5, r2
 80066cc:	5c43      	ldrb	r3, [r0, r1]
 80066ce:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80066d2:	ea54 0305 	orrs.w	r3, r4, r5
 80066d6:	d1f1      	bne.n	80066bc <_svfprintf_r+0x774>
 80066d8:	e5f8      	b.n	80062cc <_svfprintf_r+0x384>
 80066da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066dc:	930c      	str	r3, [sp, #48]	; 0x30
 80066de:	680a      	ldr	r2, [r1, #0]
 80066e0:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80066e4:	2300      	movs	r3, #0
 80066e6:	460a      	mov	r2, r1
 80066e8:	461f      	mov	r7, r3
 80066ea:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80066ee:	3204      	adds	r2, #4
 80066f0:	2301      	movs	r3, #1
 80066f2:	9305      	str	r3, [sp, #20]
 80066f4:	46bb      	mov	fp, r7
 80066f6:	970d      	str	r7, [sp, #52]	; 0x34
 80066f8:	920a      	str	r2, [sp, #40]	; 0x28
 80066fa:	9309      	str	r3, [sp, #36]	; 0x24
 80066fc:	ae22      	add	r6, sp, #136	; 0x88
 80066fe:	e5f3      	b.n	80062e8 <_svfprintf_r+0x3a0>
 8006700:	930c      	str	r3, [sp, #48]	; 0x30
 8006702:	46ab      	mov	fp, r5
 8006704:	2a00      	cmp	r2, #0
 8006706:	f43f ada5 	beq.w	8006254 <_svfprintf_r+0x30c>
 800670a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800670e:	e5a1      	b.n	8006254 <_svfprintf_r+0x30c>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006716:	9303      	str	r3, [sp, #12]
 8006718:	f89a 3000 	ldrb.w	r3, [sl]
 800671c:	e46b      	b.n	8005ff6 <_svfprintf_r+0xae>
 800671e:	f89a 3000 	ldrb.w	r3, [sl]
 8006722:	2900      	cmp	r1, #0
 8006724:	f47f ac67 	bne.w	8005ff6 <_svfprintf_r+0xae>
 8006728:	2201      	movs	r2, #1
 800672a:	2120      	movs	r1, #32
 800672c:	e463      	b.n	8005ff6 <_svfprintf_r+0xae>
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	f043 0301 	orr.w	r3, r3, #1
 8006734:	9303      	str	r3, [sp, #12]
 8006736:	f89a 3000 	ldrb.w	r3, [sl]
 800673a:	e45c      	b.n	8005ff6 <_svfprintf_r+0xae>
 800673c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	9308      	str	r3, [sp, #32]
 8006742:	4618      	mov	r0, r3
 8006744:	2800      	cmp	r0, #0
 8006746:	4623      	mov	r3, r4
 8006748:	f103 0304 	add.w	r3, r3, #4
 800674c:	f6ff acb5 	blt.w	80060ba <_svfprintf_r+0x172>
 8006750:	930a      	str	r3, [sp, #40]	; 0x28
 8006752:	f89a 3000 	ldrb.w	r3, [sl]
 8006756:	e44e      	b.n	8005ff6 <_svfprintf_r+0xae>
 8006758:	f89a 3000 	ldrb.w	r3, [sl]
 800675c:	2201      	movs	r2, #1
 800675e:	212b      	movs	r1, #43	; 0x2b
 8006760:	e449      	b.n	8005ff6 <_svfprintf_r+0xae>
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	f043 0320 	orr.w	r3, r3, #32
 8006768:	9303      	str	r3, [sp, #12]
 800676a:	f89a 3000 	ldrb.w	r3, [sl]
 800676e:	e442      	b.n	8005ff6 <_svfprintf_r+0xae>
 8006770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006772:	930c      	str	r3, [sp, #48]	; 0x30
 8006774:	6816      	ldr	r6, [r2, #0]
 8006776:	2400      	movs	r4, #0
 8006778:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
 800677c:	1d17      	adds	r7, r2, #4
 800677e:	2e00      	cmp	r6, #0
 8006780:	f000 85ab 	beq.w	80072da <_svfprintf_r+0x1392>
 8006784:	2d00      	cmp	r5, #0
 8006786:	f2c0 8567 	blt.w	8007258 <_svfprintf_r+0x1310>
 800678a:	462a      	mov	r2, r5
 800678c:	4621      	mov	r1, r4
 800678e:	4630      	mov	r0, r6
 8006790:	f7f9 ffbe 	bl	8000710 <memchr>
 8006794:	2800      	cmp	r0, #0
 8006796:	f000 85db 	beq.w	8007350 <_svfprintf_r+0x1408>
 800679a:	1b83      	subs	r3, r0, r6
 800679c:	9309      	str	r3, [sp, #36]	; 0x24
 800679e:	46a3      	mov	fp, r4
 80067a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80067a4:	970a      	str	r7, [sp, #40]	; 0x28
 80067a6:	9305      	str	r3, [sp, #20]
 80067a8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80067ac:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 80067b0:	e596      	b.n	80062e0 <_svfprintf_r+0x398>
 80067b2:	930c      	str	r3, [sp, #48]	; 0x30
 80067b4:	46ab      	mov	fp, r5
 80067b6:	2a00      	cmp	r2, #0
 80067b8:	f43f af29 	beq.w	800660e <_svfprintf_r+0x6c6>
 80067bc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80067c0:	e725      	b.n	800660e <_svfprintf_r+0x6c6>
 80067c2:	930c      	str	r3, [sp, #48]	; 0x30
 80067c4:	46ab      	mov	fp, r5
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	f040 8703 	bne.w	80075d2 <_svfprintf_r+0x168a>
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	4856      	ldr	r0, [pc, #344]	; (8006928 <_svfprintf_r+0x9e0>)
 80067d0:	069d      	lsls	r5, r3, #26
 80067d2:	f53f af4b 	bmi.w	800666c <_svfprintf_r+0x724>
 80067d6:	9b03      	ldr	r3, [sp, #12]
 80067d8:	06dc      	lsls	r4, r3, #27
 80067da:	f140 83c0 	bpl.w	8006f5e <_svfprintf_r+0x1016>
 80067de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067e0:	4613      	mov	r3, r2
 80067e2:	3304      	adds	r3, #4
 80067e4:	6814      	ldr	r4, [r2, #0]
 80067e6:	930a      	str	r3, [sp, #40]	; 0x28
 80067e8:	2500      	movs	r5, #0
 80067ea:	e748      	b.n	800667e <_svfprintf_r+0x736>
 80067ec:	f89a 3000 	ldrb.w	r3, [sl]
 80067f0:	2b6c      	cmp	r3, #108	; 0x6c
 80067f2:	f000 8452 	beq.w	800709a <_svfprintf_r+0x1152>
 80067f6:	9803      	ldr	r0, [sp, #12]
 80067f8:	f040 0010 	orr.w	r0, r0, #16
 80067fc:	9003      	str	r0, [sp, #12]
 80067fe:	f7ff bbfa 	b.w	8005ff6 <_svfprintf_r+0xae>
 8006802:	2a00      	cmp	r2, #0
 8006804:	f040 86e1 	bne.w	80075ca <_svfprintf_r+0x1682>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	069b      	lsls	r3, r3, #26
 800680c:	f140 8390 	bpl.w	8006f30 <_svfprintf_r+0xfe8>
 8006810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006812:	9907      	ldr	r1, [sp, #28]
 8006814:	6813      	ldr	r3, [r2, #0]
 8006816:	17cd      	asrs	r5, r1, #31
 8006818:	4608      	mov	r0, r1
 800681a:	3204      	adds	r2, #4
 800681c:	4629      	mov	r1, r5
 800681e:	920a      	str	r2, [sp, #40]	; 0x28
 8006820:	e9c3 0100 	strd	r0, r1, [r3]
 8006824:	f7ff bbb4 	b.w	8005f90 <_svfprintf_r+0x48>
 8006828:	483f      	ldr	r0, [pc, #252]	; (8006928 <_svfprintf_r+0x9e0>)
 800682a:	920c      	str	r2, [sp, #48]	; 0x30
 800682c:	f1bb 0f00 	cmp.w	fp, #0
 8006830:	f040 8173 	bne.w	8006b1a <_svfprintf_r+0xbd2>
 8006834:	465f      	mov	r7, fp
 8006836:	f04f 0b00 	mov.w	fp, #0
 800683a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800683e:	ae2c      	add	r6, sp, #176	; 0xb0
 8006840:	e547      	b.n	80062d2 <_svfprintf_r+0x38a>
 8006842:	930c      	str	r3, [sp, #48]	; 0x30
 8006844:	2a00      	cmp	r2, #0
 8006846:	f040 86a2 	bne.w	800758e <_svfprintf_r+0x1646>
 800684a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800684c:	2a00      	cmp	r2, #0
 800684e:	f43f ac6b 	beq.w	8006128 <_svfprintf_r+0x1e0>
 8006852:	2300      	movs	r3, #0
 8006854:	2101      	movs	r1, #1
 8006856:	461f      	mov	r7, r3
 8006858:	9105      	str	r1, [sp, #20]
 800685a:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800685e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006862:	469b      	mov	fp, r3
 8006864:	930d      	str	r3, [sp, #52]	; 0x34
 8006866:	9109      	str	r1, [sp, #36]	; 0x24
 8006868:	ae22      	add	r6, sp, #136	; 0x88
 800686a:	e53d      	b.n	80062e8 <_svfprintf_r+0x3a0>
 800686c:	f1bb 0f00 	cmp.w	fp, #0
 8006870:	f000 866e 	beq.w	8007550 <_svfprintf_r+0x1608>
 8006874:	2700      	movs	r7, #0
 8006876:	2400      	movs	r4, #0
 8006878:	2500      	movs	r5, #0
 800687a:	e488      	b.n	800618e <_svfprintf_r+0x246>
 800687c:	482a      	ldr	r0, [pc, #168]	; (8006928 <_svfprintf_r+0x9e0>)
 800687e:	9303      	str	r3, [sp, #12]
 8006880:	920c      	str	r2, [sp, #48]	; 0x30
 8006882:	ea54 0305 	orrs.w	r3, r4, r5
 8006886:	970a      	str	r7, [sp, #40]	; 0x28
 8006888:	f04f 0700 	mov.w	r7, #0
 800688c:	f47f af15 	bne.w	80066ba <_svfprintf_r+0x772>
 8006890:	2400      	movs	r4, #0
 8006892:	2500      	movs	r5, #0
 8006894:	e711      	b.n	80066ba <_svfprintf_r+0x772>
 8006896:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006898:	e571      	b.n	800637e <_svfprintf_r+0x436>
 800689a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800689c:	2b65      	cmp	r3, #101	; 0x65
 800689e:	f340 80a9 	ble.w	80069f4 <_svfprintf_r+0xaac>
 80068a2:	2200      	movs	r2, #0
 80068a4:	2300      	movs	r3, #0
 80068a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80068aa:	f7fa fa5f 	bl	8000d6c <__aeabi_dcmpeq>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f000 8135 	beq.w	8006b1e <_svfprintf_r+0xbd6>
 80068b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068b6:	4a1d      	ldr	r2, [pc, #116]	; (800692c <_svfprintf_r+0x9e4>)
 80068b8:	f8c9 2000 	str.w	r2, [r9]
 80068bc:	3301      	adds	r3, #1
 80068be:	3401      	adds	r4, #1
 80068c0:	2201      	movs	r2, #1
 80068c2:	2b07      	cmp	r3, #7
 80068c4:	9421      	str	r4, [sp, #132]	; 0x84
 80068c6:	9320      	str	r3, [sp, #128]	; 0x80
 80068c8:	f8c9 2004 	str.w	r2, [r9, #4]
 80068cc:	f300 8372 	bgt.w	8006fb4 <_svfprintf_r+0x106c>
 80068d0:	f109 0908 	add.w	r9, r9, #8
 80068d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068d8:	4293      	cmp	r3, r2
 80068da:	db03      	blt.n	80068e4 <_svfprintf_r+0x99c>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	07db      	lsls	r3, r3, #31
 80068e0:	f57f adc4 	bpl.w	800646c <_svfprintf_r+0x524>
 80068e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068e6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80068e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80068ea:	f8c9 2000 	str.w	r2, [r9]
 80068ee:	3301      	adds	r3, #1
 80068f0:	440c      	add	r4, r1
 80068f2:	2b07      	cmp	r3, #7
 80068f4:	9421      	str	r4, [sp, #132]	; 0x84
 80068f6:	f8c9 1004 	str.w	r1, [r9, #4]
 80068fa:	9320      	str	r3, [sp, #128]	; 0x80
 80068fc:	f300 83d7 	bgt.w	80070ae <_svfprintf_r+0x1166>
 8006900:	f109 0908 	add.w	r9, r9, #8
 8006904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006906:	1e5d      	subs	r5, r3, #1
 8006908:	2d00      	cmp	r5, #0
 800690a:	f77f adaf 	ble.w	800646c <_svfprintf_r+0x524>
 800690e:	2d10      	cmp	r5, #16
 8006910:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006912:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8006930 <_svfprintf_r+0x9e8>
 8006916:	f340 81e6 	ble.w	8006ce6 <_svfprintf_r+0xd9e>
 800691a:	2610      	movs	r6, #16
 800691c:	9f06      	ldr	r7, [sp, #24]
 800691e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006922:	e00d      	b.n	8006940 <_svfprintf_r+0x9f8>
 8006924:	08009a78 	.word	0x08009a78
 8006928:	08009a8c 	.word	0x08009a8c
 800692c:	08009aa8 	.word	0x08009aa8
 8006930:	08009aac 	.word	0x08009aac
 8006934:	f109 0908 	add.w	r9, r9, #8
 8006938:	3d10      	subs	r5, #16
 800693a:	2d10      	cmp	r5, #16
 800693c:	f340 81d3 	ble.w	8006ce6 <_svfprintf_r+0xd9e>
 8006940:	3301      	adds	r3, #1
 8006942:	3410      	adds	r4, #16
 8006944:	2b07      	cmp	r3, #7
 8006946:	9421      	str	r4, [sp, #132]	; 0x84
 8006948:	9320      	str	r3, [sp, #128]	; 0x80
 800694a:	f8c9 8000 	str.w	r8, [r9]
 800694e:	f8c9 6004 	str.w	r6, [r9, #4]
 8006952:	ddef      	ble.n	8006934 <_svfprintf_r+0x9ec>
 8006954:	aa1f      	add	r2, sp, #124	; 0x7c
 8006956:	4659      	mov	r1, fp
 8006958:	4638      	mov	r0, r7
 800695a:	f002 fbf3 	bl	8009144 <__ssprint_r>
 800695e:	2800      	cmp	r0, #0
 8006960:	f47f abe9 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006964:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006966:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006968:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800696c:	e7e4      	b.n	8006938 <_svfprintf_r+0x9f0>
 800696e:	9b08      	ldr	r3, [sp, #32]
 8006970:	9a05      	ldr	r2, [sp, #20]
 8006972:	1a9f      	subs	r7, r3, r2
 8006974:	2f00      	cmp	r7, #0
 8006976:	f77f ad26 	ble.w	80063c6 <_svfprintf_r+0x47e>
 800697a:	2f10      	cmp	r7, #16
 800697c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800697e:	f8df 8754 	ldr.w	r8, [pc, #1876]	; 80070d4 <_svfprintf_r+0x118c>
 8006982:	dd29      	ble.n	80069d8 <_svfprintf_r+0xa90>
 8006984:	4640      	mov	r0, r8
 8006986:	464a      	mov	r2, r9
 8006988:	4621      	mov	r1, r4
 800698a:	46b0      	mov	r8, r6
 800698c:	2510      	movs	r5, #16
 800698e:	9c06      	ldr	r4, [sp, #24]
 8006990:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8006994:	4606      	mov	r6, r0
 8006996:	e004      	b.n	80069a2 <_svfprintf_r+0xa5a>
 8006998:	3f10      	subs	r7, #16
 800699a:	2f10      	cmp	r7, #16
 800699c:	f102 0208 	add.w	r2, r2, #8
 80069a0:	dd15      	ble.n	80069ce <_svfprintf_r+0xa86>
 80069a2:	3301      	adds	r3, #1
 80069a4:	3110      	adds	r1, #16
 80069a6:	2b07      	cmp	r3, #7
 80069a8:	9121      	str	r1, [sp, #132]	; 0x84
 80069aa:	9320      	str	r3, [sp, #128]	; 0x80
 80069ac:	6016      	str	r6, [r2, #0]
 80069ae:	6055      	str	r5, [r2, #4]
 80069b0:	ddf2      	ble.n	8006998 <_svfprintf_r+0xa50>
 80069b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80069b4:	4649      	mov	r1, r9
 80069b6:	4620      	mov	r0, r4
 80069b8:	f002 fbc4 	bl	8009144 <__ssprint_r>
 80069bc:	2800      	cmp	r0, #0
 80069be:	f47f abba 	bne.w	8006136 <_svfprintf_r+0x1ee>
 80069c2:	3f10      	subs	r7, #16
 80069c4:	2f10      	cmp	r7, #16
 80069c6:	9921      	ldr	r1, [sp, #132]	; 0x84
 80069c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80069ca:	aa2c      	add	r2, sp, #176	; 0xb0
 80069cc:	dce9      	bgt.n	80069a2 <_svfprintf_r+0xa5a>
 80069ce:	4691      	mov	r9, r2
 80069d0:	4632      	mov	r2, r6
 80069d2:	460c      	mov	r4, r1
 80069d4:	4646      	mov	r6, r8
 80069d6:	4690      	mov	r8, r2
 80069d8:	3301      	adds	r3, #1
 80069da:	443c      	add	r4, r7
 80069dc:	2b07      	cmp	r3, #7
 80069de:	9421      	str	r4, [sp, #132]	; 0x84
 80069e0:	9320      	str	r3, [sp, #128]	; 0x80
 80069e2:	f8c9 8000 	str.w	r8, [r9]
 80069e6:	f8c9 7004 	str.w	r7, [r9, #4]
 80069ea:	f300 823e 	bgt.w	8006e6a <_svfprintf_r+0xf22>
 80069ee:	f109 0908 	add.w	r9, r9, #8
 80069f2:	e4e8      	b.n	80063c6 <_svfprintf_r+0x47e>
 80069f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069f6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	f340 820b 	ble.w	8006e14 <_svfprintf_r+0xecc>
 80069fe:	3501      	adds	r5, #1
 8006a00:	3401      	adds	r4, #1
 8006a02:	2301      	movs	r3, #1
 8006a04:	2d07      	cmp	r5, #7
 8006a06:	9421      	str	r4, [sp, #132]	; 0x84
 8006a08:	9520      	str	r5, [sp, #128]	; 0x80
 8006a0a:	f8c9 6000 	str.w	r6, [r9]
 8006a0e:	f8c9 3004 	str.w	r3, [r9, #4]
 8006a12:	f300 8210 	bgt.w	8006e36 <_svfprintf_r+0xeee>
 8006a16:	f109 0908 	add.w	r9, r9, #8
 8006a1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a1e:	f8c9 3000 	str.w	r3, [r9]
 8006a22:	3501      	adds	r5, #1
 8006a24:	4414      	add	r4, r2
 8006a26:	2d07      	cmp	r5, #7
 8006a28:	9421      	str	r4, [sp, #132]	; 0x84
 8006a2a:	9520      	str	r5, [sp, #128]	; 0x80
 8006a2c:	f8c9 2004 	str.w	r2, [r9, #4]
 8006a30:	f300 820e 	bgt.w	8006e50 <_svfprintf_r+0xf08>
 8006a34:	f109 0908 	add.w	r9, r9, #8
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006a40:	f7fa f994 	bl	8000d6c <__aeabi_dcmpeq>
 8006a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a46:	2800      	cmp	r0, #0
 8006a48:	f040 80c4 	bne.w	8006bd4 <_svfprintf_r+0xc8c>
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	3501      	adds	r5, #1
 8006a50:	3601      	adds	r6, #1
 8006a52:	441c      	add	r4, r3
 8006a54:	2d07      	cmp	r5, #7
 8006a56:	9520      	str	r5, [sp, #128]	; 0x80
 8006a58:	9421      	str	r4, [sp, #132]	; 0x84
 8006a5a:	f8c9 6000 	str.w	r6, [r9]
 8006a5e:	f8c9 3004 	str.w	r3, [r9, #4]
 8006a62:	f300 80f4 	bgt.w	8006c4e <_svfprintf_r+0xd06>
 8006a66:	f109 0908 	add.w	r9, r9, #8
 8006a6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a6c:	f8c9 2004 	str.w	r2, [r9, #4]
 8006a70:	3501      	adds	r5, #1
 8006a72:	4414      	add	r4, r2
 8006a74:	ab1b      	add	r3, sp, #108	; 0x6c
 8006a76:	2d07      	cmp	r5, #7
 8006a78:	9421      	str	r4, [sp, #132]	; 0x84
 8006a7a:	9520      	str	r5, [sp, #128]	; 0x80
 8006a7c:	f8c9 3000 	str.w	r3, [r9]
 8006a80:	f77f acf2 	ble.w	8006468 <_svfprintf_r+0x520>
 8006a84:	aa1f      	add	r2, sp, #124	; 0x7c
 8006a86:	9904      	ldr	r1, [sp, #16]
 8006a88:	9806      	ldr	r0, [sp, #24]
 8006a8a:	f002 fb5b 	bl	8009144 <__ssprint_r>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f47f ab51 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006a94:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006a96:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006a9a:	e4e7      	b.n	800646c <_svfprintf_r+0x524>
 8006a9c:	aa1f      	add	r2, sp, #124	; 0x7c
 8006a9e:	9904      	ldr	r1, [sp, #16]
 8006aa0:	9806      	ldr	r0, [sp, #24]
 8006aa2:	f002 fb4f 	bl	8009144 <__ssprint_r>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f43f ad2e 	beq.w	8006508 <_svfprintf_r+0x5c0>
 8006aac:	f7ff bb43 	b.w	8006136 <_svfprintf_r+0x1ee>
 8006ab0:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ab2:	9904      	ldr	r1, [sp, #16]
 8006ab4:	9806      	ldr	r0, [sp, #24]
 8006ab6:	f002 fb45 	bl	8009144 <__ssprint_r>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	f47f ab3b 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006ac0:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006ac2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006ac6:	e4be      	b.n	8006446 <_svfprintf_r+0x4fe>
 8006ac8:	aa1f      	add	r2, sp, #124	; 0x7c
 8006aca:	9904      	ldr	r1, [sp, #16]
 8006acc:	9806      	ldr	r0, [sp, #24]
 8006ace:	f002 fb39 	bl	8009144 <__ssprint_r>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f47f ab2f 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006ad8:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006ada:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006ade:	e45e      	b.n	800639e <_svfprintf_r+0x456>
 8006ae0:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ae2:	9904      	ldr	r1, [sp, #16]
 8006ae4:	9806      	ldr	r0, [sp, #24]
 8006ae6:	f002 fb2d 	bl	8009144 <__ssprint_r>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	f47f ab23 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006af0:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006af2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006af6:	e462      	b.n	80063be <_svfprintf_r+0x476>
 8006af8:	f1bb 0f00 	cmp.w	fp, #0
 8006afc:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8006b00:	f2c0 8264 	blt.w	8006fcc <_svfprintf_r+0x1084>
 8006b04:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006b08:	9303      	str	r3, [sp, #12]
 8006b0a:	ea54 0305 	orrs.w	r3, r4, r5
 8006b0e:	f47f add4 	bne.w	80066ba <_svfprintf_r+0x772>
 8006b12:	f1bb 0f00 	cmp.w	fp, #0
 8006b16:	f43f ae8d 	beq.w	8006834 <_svfprintf_r+0x8ec>
 8006b1a:	2700      	movs	r7, #0
 8006b1c:	e6b8      	b.n	8006890 <_svfprintf_r+0x948>
 8006b1e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006b20:	2d00      	cmp	r5, #0
 8006b22:	f340 8255 	ble.w	8006fd0 <_svfprintf_r+0x1088>
 8006b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	bfa8      	it	ge
 8006b2e:	4613      	movge	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	461d      	mov	r5, r3
 8006b34:	dd0d      	ble.n	8006b52 <_svfprintf_r+0xc0a>
 8006b36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b38:	f8c9 6000 	str.w	r6, [r9]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	442c      	add	r4, r5
 8006b40:	2b07      	cmp	r3, #7
 8006b42:	9421      	str	r4, [sp, #132]	; 0x84
 8006b44:	f8c9 5004 	str.w	r5, [r9, #4]
 8006b48:	9320      	str	r3, [sp, #128]	; 0x80
 8006b4a:	f300 838d 	bgt.w	8007268 <_svfprintf_r+0x1320>
 8006b4e:	f109 0908 	add.w	r9, r9, #8
 8006b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b54:	2d00      	cmp	r5, #0
 8006b56:	bfa8      	it	ge
 8006b58:	1b5b      	subge	r3, r3, r5
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	461d      	mov	r5, r3
 8006b5e:	f340 80f7 	ble.w	8006d50 <_svfprintf_r+0xe08>
 8006b62:	2d10      	cmp	r5, #16
 8006b64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b66:	f8df 856c 	ldr.w	r8, [pc, #1388]	; 80070d4 <_svfprintf_r+0x118c>
 8006b6a:	f340 820a 	ble.w	8006f82 <_svfprintf_r+0x103a>
 8006b6e:	4641      	mov	r1, r8
 8006b70:	4622      	mov	r2, r4
 8006b72:	46b0      	mov	r8, r6
 8006b74:	2710      	movs	r7, #16
 8006b76:	f8dd b018 	ldr.w	fp, [sp, #24]
 8006b7a:	9c04      	ldr	r4, [sp, #16]
 8006b7c:	460e      	mov	r6, r1
 8006b7e:	e005      	b.n	8006b8c <_svfprintf_r+0xc44>
 8006b80:	f109 0908 	add.w	r9, r9, #8
 8006b84:	3d10      	subs	r5, #16
 8006b86:	2d10      	cmp	r5, #16
 8006b88:	f340 81f7 	ble.w	8006f7a <_svfprintf_r+0x1032>
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	3210      	adds	r2, #16
 8006b90:	2b07      	cmp	r3, #7
 8006b92:	9221      	str	r2, [sp, #132]	; 0x84
 8006b94:	9320      	str	r3, [sp, #128]	; 0x80
 8006b96:	e889 00c0 	stmia.w	r9, {r6, r7}
 8006b9a:	ddf1      	ble.n	8006b80 <_svfprintf_r+0xc38>
 8006b9c:	aa1f      	add	r2, sp, #124	; 0x7c
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	4658      	mov	r0, fp
 8006ba2:	f002 facf 	bl	8009144 <__ssprint_r>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	f47f aac5 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006bac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006bb0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006bb4:	e7e6      	b.n	8006b84 <_svfprintf_r+0xc3c>
 8006bb6:	aa1f      	add	r2, sp, #124	; 0x7c
 8006bb8:	9904      	ldr	r1, [sp, #16]
 8006bba:	9806      	ldr	r0, [sp, #24]
 8006bbc:	f002 fac2 	bl	8009144 <__ssprint_r>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	f47f aab8 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006bc6:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8006bca:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006bcc:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006bd0:	f7ff bbd5 	b.w	800637e <_svfprintf_r+0x436>
 8006bd4:	1e5e      	subs	r6, r3, #1
 8006bd6:	2e00      	cmp	r6, #0
 8006bd8:	f77f af47 	ble.w	8006a6a <_svfprintf_r+0xb22>
 8006bdc:	2e10      	cmp	r6, #16
 8006bde:	f8df 84f4 	ldr.w	r8, [pc, #1268]	; 80070d4 <_svfprintf_r+0x118c>
 8006be2:	dd29      	ble.n	8006c38 <_svfprintf_r+0xcf0>
 8006be4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006be8:	2710      	movs	r7, #16
 8006bea:	46c2      	mov	sl, r8
 8006bec:	f8dd b018 	ldr.w	fp, [sp, #24]
 8006bf0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006bf4:	e004      	b.n	8006c00 <_svfprintf_r+0xcb8>
 8006bf6:	3e10      	subs	r6, #16
 8006bf8:	2e10      	cmp	r6, #16
 8006bfa:	f109 0908 	add.w	r9, r9, #8
 8006bfe:	dd18      	ble.n	8006c32 <_svfprintf_r+0xcea>
 8006c00:	3501      	adds	r5, #1
 8006c02:	3410      	adds	r4, #16
 8006c04:	2d07      	cmp	r5, #7
 8006c06:	9421      	str	r4, [sp, #132]	; 0x84
 8006c08:	9520      	str	r5, [sp, #128]	; 0x80
 8006c0a:	f8c9 a000 	str.w	sl, [r9]
 8006c0e:	f8c9 7004 	str.w	r7, [r9, #4]
 8006c12:	ddf0      	ble.n	8006bf6 <_svfprintf_r+0xcae>
 8006c14:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c16:	4641      	mov	r1, r8
 8006c18:	4658      	mov	r0, fp
 8006c1a:	f002 fa93 	bl	8009144 <__ssprint_r>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f47f aa89 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006c24:	3e10      	subs	r6, #16
 8006c26:	2e10      	cmp	r6, #16
 8006c28:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006c2a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006c2c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006c30:	dce6      	bgt.n	8006c00 <_svfprintf_r+0xcb8>
 8006c32:	46d0      	mov	r8, sl
 8006c34:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006c38:	f8c9 8000 	str.w	r8, [r9]
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	4434      	add	r4, r6
 8006c40:	2d07      	cmp	r5, #7
 8006c42:	9421      	str	r4, [sp, #132]	; 0x84
 8006c44:	9520      	str	r5, [sp, #128]	; 0x80
 8006c46:	f8c9 6004 	str.w	r6, [r9, #4]
 8006c4a:	f77f af0c 	ble.w	8006a66 <_svfprintf_r+0xb1e>
 8006c4e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c50:	9904      	ldr	r1, [sp, #16]
 8006c52:	9806      	ldr	r0, [sp, #24]
 8006c54:	f002 fa76 	bl	8009144 <__ssprint_r>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	f47f aa6c 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006c5e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006c60:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006c62:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006c66:	e700      	b.n	8006a6a <_svfprintf_r+0xb22>
 8006c68:	9903      	ldr	r1, [sp, #12]
 8006c6a:	f011 0210 	ands.w	r2, r1, #16
 8006c6e:	f000 812e 	beq.w	8006ece <_svfprintf_r+0xf86>
 8006c72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c74:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006c78:	f1bb 0f00 	cmp.w	fp, #0
 8006c7c:	6804      	ldr	r4, [r0, #0]
 8006c7e:	f100 0704 	add.w	r7, r0, #4
 8006c82:	f04f 0500 	mov.w	r5, #0
 8006c86:	db26      	blt.n	8006cd6 <_svfprintf_r+0xd8e>
 8006c88:	460a      	mov	r2, r1
 8006c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c8e:	9203      	str	r2, [sp, #12]
 8006c90:	ea54 0205 	orrs.w	r2, r4, r5
 8006c94:	970a      	str	r7, [sp, #40]	; 0x28
 8006c96:	461f      	mov	r7, r3
 8006c98:	f47f aafe 	bne.w	8006298 <_svfprintf_r+0x350>
 8006c9c:	e4d2      	b.n	8006644 <_svfprintf_r+0x6fc>
 8006c9e:	9b03      	ldr	r3, [sp, #12]
 8006ca0:	06d8      	lsls	r0, r3, #27
 8006ca2:	d42c      	bmi.n	8006cfe <_svfprintf_r+0xdb6>
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	0659      	lsls	r1, r3, #25
 8006ca8:	d529      	bpl.n	8006cfe <_svfprintf_r+0xdb6>
 8006caa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cac:	f9b1 4000 	ldrsh.w	r4, [r1]
 8006cb0:	3104      	adds	r1, #4
 8006cb2:	17e5      	asrs	r5, r4, #31
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	462b      	mov	r3, r5
 8006cb8:	910a      	str	r1, [sp, #40]	; 0x28
 8006cba:	f7ff bada 	b.w	8006272 <_svfprintf_r+0x32a>
 8006cbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cc0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006cc4:	f1bb 0f00 	cmp.w	fp, #0
 8006cc8:	680c      	ldr	r4, [r1, #0]
 8006cca:	f101 0704 	add.w	r7, r1, #4
 8006cce:	f04f 0500 	mov.w	r5, #0
 8006cd2:	f280 81e0 	bge.w	8007096 <_svfprintf_r+0x114e>
 8006cd6:	970a      	str	r7, [sp, #40]	; 0x28
 8006cd8:	461f      	mov	r7, r3
 8006cda:	ea54 0305 	orrs.w	r3, r4, r5
 8006cde:	f47f aadb 	bne.w	8006298 <_svfprintf_r+0x350>
 8006ce2:	e4b4      	b.n	800664e <_svfprintf_r+0x706>
 8006ce4:	46b8      	mov	r8, r7
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	442c      	add	r4, r5
 8006cea:	2b07      	cmp	r3, #7
 8006cec:	9421      	str	r4, [sp, #132]	; 0x84
 8006cee:	9320      	str	r3, [sp, #128]	; 0x80
 8006cf0:	f8c9 8000 	str.w	r8, [r9]
 8006cf4:	f8c9 5004 	str.w	r5, [r9, #4]
 8006cf8:	f77f abb6 	ble.w	8006468 <_svfprintf_r+0x520>
 8006cfc:	e6c2      	b.n	8006a84 <_svfprintf_r+0xb3c>
 8006cfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d00:	6814      	ldr	r4, [r2, #0]
 8006d02:	4613      	mov	r3, r2
 8006d04:	3304      	adds	r3, #4
 8006d06:	17e5      	asrs	r5, r4, #31
 8006d08:	4622      	mov	r2, r4
 8006d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d0c:	2a00      	cmp	r2, #0
 8006d0e:	462b      	mov	r3, r5
 8006d10:	f173 0300 	sbcs.w	r3, r3, #0
 8006d14:	f6bf aab2 	bge.w	800627c <_svfprintf_r+0x334>
 8006d18:	4264      	negs	r4, r4
 8006d1a:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8006d1e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006d22:	f1bb 0f00 	cmp.w	fp, #0
 8006d26:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8006d2a:	f6ff aab5 	blt.w	8006298 <_svfprintf_r+0x350>
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d34:	9303      	str	r3, [sp, #12]
 8006d36:	f7ff baaf 	b.w	8006298 <_svfprintf_r+0x350>
 8006d3a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d3c:	9904      	ldr	r1, [sp, #16]
 8006d3e:	9806      	ldr	r0, [sp, #24]
 8006d40:	f002 fa00 	bl	8009144 <__ssprint_r>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f47f a9f6 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006d4a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006d4c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006d50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d54:	4432      	add	r2, r6
 8006d56:	4617      	mov	r7, r2
 8006d58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	db49      	blt.n	8006df2 <_svfprintf_r+0xeaa>
 8006d5e:	9a03      	ldr	r2, [sp, #12]
 8006d60:	07d5      	lsls	r5, r2, #31
 8006d62:	d446      	bmi.n	8006df2 <_svfprintf_r+0xeaa>
 8006d64:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006d66:	440e      	add	r6, r1
 8006d68:	1bf5      	subs	r5, r6, r7
 8006d6a:	1acb      	subs	r3, r1, r3
 8006d6c:	429d      	cmp	r5, r3
 8006d6e:	bfa8      	it	ge
 8006d70:	461d      	movge	r5, r3
 8006d72:	2d00      	cmp	r5, #0
 8006d74:	462e      	mov	r6, r5
 8006d76:	dd0d      	ble.n	8006d94 <_svfprintf_r+0xe4c>
 8006d78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d7a:	f8c9 7000 	str.w	r7, [r9]
 8006d7e:	3201      	adds	r2, #1
 8006d80:	442c      	add	r4, r5
 8006d82:	2a07      	cmp	r2, #7
 8006d84:	9421      	str	r4, [sp, #132]	; 0x84
 8006d86:	f8c9 5004 	str.w	r5, [r9, #4]
 8006d8a:	9220      	str	r2, [sp, #128]	; 0x80
 8006d8c:	f300 8296 	bgt.w	80072bc <_svfprintf_r+0x1374>
 8006d90:	f109 0908 	add.w	r9, r9, #8
 8006d94:	2e00      	cmp	r6, #0
 8006d96:	bfac      	ite	ge
 8006d98:	1b9d      	subge	r5, r3, r6
 8006d9a:	461d      	movlt	r5, r3
 8006d9c:	2d00      	cmp	r5, #0
 8006d9e:	f77f ab65 	ble.w	800646c <_svfprintf_r+0x524>
 8006da2:	2d10      	cmp	r5, #16
 8006da4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006da6:	f8df 832c 	ldr.w	r8, [pc, #812]	; 80070d4 <_svfprintf_r+0x118c>
 8006daa:	dd9c      	ble.n	8006ce6 <_svfprintf_r+0xd9e>
 8006dac:	4647      	mov	r7, r8
 8006dae:	2610      	movs	r6, #16
 8006db0:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006db4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006db8:	e004      	b.n	8006dc4 <_svfprintf_r+0xe7c>
 8006dba:	f109 0908 	add.w	r9, r9, #8
 8006dbe:	3d10      	subs	r5, #16
 8006dc0:	2d10      	cmp	r5, #16
 8006dc2:	dd8f      	ble.n	8006ce4 <_svfprintf_r+0xd9c>
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	3410      	adds	r4, #16
 8006dc8:	2b07      	cmp	r3, #7
 8006dca:	9421      	str	r4, [sp, #132]	; 0x84
 8006dcc:	9320      	str	r3, [sp, #128]	; 0x80
 8006dce:	f8c9 7000 	str.w	r7, [r9]
 8006dd2:	f8c9 6004 	str.w	r6, [r9, #4]
 8006dd6:	ddf0      	ble.n	8006dba <_svfprintf_r+0xe72>
 8006dd8:	aa1f      	add	r2, sp, #124	; 0x7c
 8006dda:	4659      	mov	r1, fp
 8006ddc:	4640      	mov	r0, r8
 8006dde:	f002 f9b1 	bl	8009144 <__ssprint_r>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	f47f a9a7 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006de8:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006dea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006dec:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006df0:	e7e5      	b.n	8006dbe <_svfprintf_r+0xe76>
 8006df2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006df4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006df6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006df8:	f8c9 1000 	str.w	r1, [r9]
 8006dfc:	3201      	adds	r2, #1
 8006dfe:	4404      	add	r4, r0
 8006e00:	2a07      	cmp	r2, #7
 8006e02:	9421      	str	r4, [sp, #132]	; 0x84
 8006e04:	f8c9 0004 	str.w	r0, [r9, #4]
 8006e08:	9220      	str	r2, [sp, #128]	; 0x80
 8006e0a:	f300 824a 	bgt.w	80072a2 <_svfprintf_r+0x135a>
 8006e0e:	f109 0908 	add.w	r9, r9, #8
 8006e12:	e7a7      	b.n	8006d64 <_svfprintf_r+0xe1c>
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	07d8      	lsls	r0, r3, #31
 8006e18:	f53f adf1 	bmi.w	80069fe <_svfprintf_r+0xab6>
 8006e1c:	3501      	adds	r5, #1
 8006e1e:	3401      	adds	r4, #1
 8006e20:	2301      	movs	r3, #1
 8006e22:	2d07      	cmp	r5, #7
 8006e24:	9421      	str	r4, [sp, #132]	; 0x84
 8006e26:	9520      	str	r5, [sp, #128]	; 0x80
 8006e28:	f8c9 6000 	str.w	r6, [r9]
 8006e2c:	f8c9 3004 	str.w	r3, [r9, #4]
 8006e30:	f77f ae19 	ble.w	8006a66 <_svfprintf_r+0xb1e>
 8006e34:	e70b      	b.n	8006c4e <_svfprintf_r+0xd06>
 8006e36:	aa1f      	add	r2, sp, #124	; 0x7c
 8006e38:	9904      	ldr	r1, [sp, #16]
 8006e3a:	9806      	ldr	r0, [sp, #24]
 8006e3c:	f002 f982 	bl	8009144 <__ssprint_r>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	f47f a978 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006e46:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006e48:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006e4a:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006e4e:	e5e4      	b.n	8006a1a <_svfprintf_r+0xad2>
 8006e50:	aa1f      	add	r2, sp, #124	; 0x7c
 8006e52:	9904      	ldr	r1, [sp, #16]
 8006e54:	9806      	ldr	r0, [sp, #24]
 8006e56:	f002 f975 	bl	8009144 <__ssprint_r>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	f47f a96b 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006e60:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006e62:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006e64:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006e68:	e5e6      	b.n	8006a38 <_svfprintf_r+0xaf0>
 8006e6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006e6c:	9904      	ldr	r1, [sp, #16]
 8006e6e:	9806      	ldr	r0, [sp, #24]
 8006e70:	f002 f968 	bl	8009144 <__ssprint_r>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	f47f a95e 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006e7a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006e7c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006e80:	f7ff baa1 	b.w	80063c6 <_svfprintf_r+0x47e>
 8006e84:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8006e88:	f002 f92e 	bl	80090e8 <__fpclassifyd>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f040 8123 	bne.w	80070d8 <_svfprintf_r+0x1190>
 8006e92:	9903      	ldr	r1, [sp, #12]
 8006e94:	4e8c      	ldr	r6, [pc, #560]	; (80070c8 <_svfprintf_r+0x1180>)
 8006e96:	4b8d      	ldr	r3, [pc, #564]	; (80070cc <_svfprintf_r+0x1184>)
 8006e98:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8006e9c:	900d      	str	r0, [sp, #52]	; 0x34
 8006e9e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ea2:	9103      	str	r1, [sp, #12]
 8006ea4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	4683      	mov	fp, r0
 8006eaa:	9205      	str	r2, [sp, #20]
 8006eac:	2947      	cmp	r1, #71	; 0x47
 8006eae:	bfd8      	it	le
 8006eb0:	461e      	movle	r6, r3
 8006eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8006eb4:	f7ff ba14 	b.w	80062e0 <_svfprintf_r+0x398>
 8006eb8:	f027 0707 	bic.w	r7, r7, #7
 8006ebc:	ed97 7b00 	vldr	d7, [r7]
 8006ec0:	f107 0308 	add.w	r3, r7, #8
 8006ec4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8006eca:	f7ff bb37 	b.w	800653c <_svfprintf_r+0x5f4>
 8006ece:	9903      	ldr	r1, [sp, #12]
 8006ed0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8006ed4:	f43f aef3 	beq.w	8006cbe <_svfprintf_r+0xd76>
 8006ed8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006eda:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006ede:	f1bb 0f00 	cmp.w	fp, #0
 8006ee2:	8804      	ldrh	r4, [r0, #0]
 8006ee4:	f100 0704 	add.w	r7, r0, #4
 8006ee8:	f04f 0500 	mov.w	r5, #0
 8006eec:	f2c0 8198 	blt.w	8007220 <_svfprintf_r+0x12d8>
 8006ef0:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 8006ef4:	9303      	str	r3, [sp, #12]
 8006ef6:	ea54 0305 	orrs.w	r3, r4, r5
 8006efa:	970a      	str	r7, [sp, #40]	; 0x28
 8006efc:	4617      	mov	r7, r2
 8006efe:	f47f a9cb 	bne.w	8006298 <_svfprintf_r+0x350>
 8006f02:	f7ff bb9f 	b.w	8006644 <_svfprintf_r+0x6fc>
 8006f06:	9903      	ldr	r1, [sp, #12]
 8006f08:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8006f0c:	f000 80b4 	beq.w	8007078 <_svfprintf_r+0x1130>
 8006f10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f12:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006f16:	f1bb 0f00 	cmp.w	fp, #0
 8006f1a:	8804      	ldrh	r4, [r0, #0]
 8006f1c:	f100 0704 	add.w	r7, r0, #4
 8006f20:	f04f 0500 	mov.w	r5, #0
 8006f24:	f280 8152 	bge.w	80071cc <_svfprintf_r+0x1284>
 8006f28:	970a      	str	r7, [sp, #40]	; 0x28
 8006f2a:	2700      	movs	r7, #0
 8006f2c:	f7ff b92f 	b.w	800618e <_svfprintf_r+0x246>
 8006f30:	9b03      	ldr	r3, [sp, #12]
 8006f32:	06df      	lsls	r7, r3, #27
 8006f34:	d40b      	bmi.n	8006f4e <_svfprintf_r+0x1006>
 8006f36:	9b03      	ldr	r3, [sp, #12]
 8006f38:	065e      	lsls	r6, r3, #25
 8006f3a:	d508      	bpl.n	8006f4e <_svfprintf_r+0x1006>
 8006f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f3e:	6813      	ldr	r3, [r2, #0]
 8006f40:	3204      	adds	r2, #4
 8006f42:	920a      	str	r2, [sp, #40]	; 0x28
 8006f44:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	f7ff b821 	b.w	8005f90 <_svfprintf_r+0x48>
 8006f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f50:	6813      	ldr	r3, [r2, #0]
 8006f52:	3204      	adds	r2, #4
 8006f54:	920a      	str	r2, [sp, #40]	; 0x28
 8006f56:	9a07      	ldr	r2, [sp, #28]
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	f7ff b819 	b.w	8005f90 <_svfprintf_r+0x48>
 8006f5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f60:	9b03      	ldr	r3, [sp, #12]
 8006f62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f66:	4613      	mov	r3, r2
 8006f68:	f103 0304 	add.w	r3, r3, #4
 8006f6c:	bf0c      	ite	eq
 8006f6e:	6814      	ldreq	r4, [r2, #0]
 8006f70:	8814      	ldrhne	r4, [r2, #0]
 8006f72:	930a      	str	r3, [sp, #40]	; 0x28
 8006f74:	2500      	movs	r5, #0
 8006f76:	f7ff bb82 	b.w	800667e <_svfprintf_r+0x736>
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	4632      	mov	r2, r6
 8006f7e:	4646      	mov	r6, r8
 8006f80:	4690      	mov	r8, r2
 8006f82:	3301      	adds	r3, #1
 8006f84:	442c      	add	r4, r5
 8006f86:	2b07      	cmp	r3, #7
 8006f88:	9421      	str	r4, [sp, #132]	; 0x84
 8006f8a:	9320      	str	r3, [sp, #128]	; 0x80
 8006f8c:	f8c9 8000 	str.w	r8, [r9]
 8006f90:	f8c9 5004 	str.w	r5, [r9, #4]
 8006f94:	f73f aed1 	bgt.w	8006d3a <_svfprintf_r+0xdf2>
 8006f98:	f109 0908 	add.w	r9, r9, #8
 8006f9c:	e6d8      	b.n	8006d50 <_svfprintf_r+0xe08>
 8006f9e:	2700      	movs	r7, #0
 8006fa0:	45bb      	cmp	fp, r7
 8006fa2:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8006fa6:	f6ff ac73 	blt.w	8006890 <_svfprintf_r+0x948>
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fb0:	9303      	str	r3, [sp, #12]
 8006fb2:	e43b      	b.n	800682c <_svfprintf_r+0x8e4>
 8006fb4:	aa1f      	add	r2, sp, #124	; 0x7c
 8006fb6:	9904      	ldr	r1, [sp, #16]
 8006fb8:	9806      	ldr	r0, [sp, #24]
 8006fba:	f002 f8c3 	bl	8009144 <__ssprint_r>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	f47f a8b9 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8006fc4:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006fc6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006fca:	e483      	b.n	80068d4 <_svfprintf_r+0x98c>
 8006fcc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006fce:	e458      	b.n	8006882 <_svfprintf_r+0x93a>
 8006fd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006fd2:	4a3f      	ldr	r2, [pc, #252]	; (80070d0 <_svfprintf_r+0x1188>)
 8006fd4:	f8c9 2000 	str.w	r2, [r9]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	3401      	adds	r4, #1
 8006fdc:	2201      	movs	r2, #1
 8006fde:	2b07      	cmp	r3, #7
 8006fe0:	9421      	str	r4, [sp, #132]	; 0x84
 8006fe2:	9320      	str	r3, [sp, #128]	; 0x80
 8006fe4:	f8c9 2004 	str.w	r2, [r9, #4]
 8006fe8:	f300 810a 	bgt.w	8007200 <_svfprintf_r+0x12b8>
 8006fec:	f109 0908 	add.w	r9, r9, #8
 8006ff0:	b92d      	cbnz	r5, 8006ffe <_svfprintf_r+0x10b6>
 8006ff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ff4:	b91b      	cbnz	r3, 8006ffe <_svfprintf_r+0x10b6>
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	07df      	lsls	r7, r3, #31
 8006ffa:	f57f aa37 	bpl.w	800646c <_svfprintf_r+0x524>
 8006ffe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007000:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007002:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007004:	f8c9 2000 	str.w	r2, [r9]
 8007008:	3301      	adds	r3, #1
 800700a:	440c      	add	r4, r1
 800700c:	2b07      	cmp	r3, #7
 800700e:	9421      	str	r4, [sp, #132]	; 0x84
 8007010:	f8c9 1004 	str.w	r1, [r9, #4]
 8007014:	9320      	str	r3, [sp, #128]	; 0x80
 8007016:	f300 81d1 	bgt.w	80073bc <_svfprintf_r+0x1474>
 800701a:	f109 0908 	add.w	r9, r9, #8
 800701e:	426d      	negs	r5, r5
 8007020:	2d00      	cmp	r5, #0
 8007022:	f340 810c 	ble.w	800723e <_svfprintf_r+0x12f6>
 8007026:	2d10      	cmp	r5, #16
 8007028:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80070d4 <_svfprintf_r+0x118c>
 800702c:	f340 812c 	ble.w	8007288 <_svfprintf_r+0x1340>
 8007030:	4641      	mov	r1, r8
 8007032:	4622      	mov	r2, r4
 8007034:	46b0      	mov	r8, r6
 8007036:	2710      	movs	r7, #16
 8007038:	f8dd b018 	ldr.w	fp, [sp, #24]
 800703c:	9c04      	ldr	r4, [sp, #16]
 800703e:	460e      	mov	r6, r1
 8007040:	e005      	b.n	800704e <_svfprintf_r+0x1106>
 8007042:	f109 0908 	add.w	r9, r9, #8
 8007046:	3d10      	subs	r5, #16
 8007048:	2d10      	cmp	r5, #16
 800704a:	f340 8119 	ble.w	8007280 <_svfprintf_r+0x1338>
 800704e:	3301      	adds	r3, #1
 8007050:	3210      	adds	r2, #16
 8007052:	2b07      	cmp	r3, #7
 8007054:	9221      	str	r2, [sp, #132]	; 0x84
 8007056:	9320      	str	r3, [sp, #128]	; 0x80
 8007058:	e889 00c0 	stmia.w	r9, {r6, r7}
 800705c:	ddf1      	ble.n	8007042 <_svfprintf_r+0x10fa>
 800705e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007060:	4621      	mov	r1, r4
 8007062:	4658      	mov	r0, fp
 8007064:	f002 f86e 	bl	8009144 <__ssprint_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	f47f a864 	bne.w	8006136 <_svfprintf_r+0x1ee>
 800706e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007070:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007072:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8007076:	e7e6      	b.n	8007046 <_svfprintf_r+0x10fe>
 8007078:	990a      	ldr	r1, [sp, #40]	; 0x28
 800707a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800707e:	f1bb 0f00 	cmp.w	fp, #0
 8007082:	680c      	ldr	r4, [r1, #0]
 8007084:	f101 0704 	add.w	r7, r1, #4
 8007088:	f04f 0500 	mov.w	r5, #0
 800708c:	f6ff af4c 	blt.w	8006f28 <_svfprintf_r+0xfe0>
 8007090:	9a03      	ldr	r2, [sp, #12]
 8007092:	f7ff baa0 	b.w	80065d6 <_svfprintf_r+0x68e>
 8007096:	9a03      	ldr	r2, [sp, #12]
 8007098:	e5f7      	b.n	8006c8a <_svfprintf_r+0xd42>
 800709a:	9b03      	ldr	r3, [sp, #12]
 800709c:	f043 0320 	orr.w	r3, r3, #32
 80070a0:	9303      	str	r3, [sp, #12]
 80070a2:	f10a 0a01 	add.w	sl, sl, #1
 80070a6:	f89a 3000 	ldrb.w	r3, [sl]
 80070aa:	f7fe bfa4 	b.w	8005ff6 <_svfprintf_r+0xae>
 80070ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80070b0:	9904      	ldr	r1, [sp, #16]
 80070b2:	9806      	ldr	r0, [sp, #24]
 80070b4:	f002 f846 	bl	8009144 <__ssprint_r>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	f47f a83c 	bne.w	8006136 <_svfprintf_r+0x1ee>
 80070be:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80070c0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80070c4:	e41e      	b.n	8006904 <_svfprintf_r+0x9bc>
 80070c6:	bf00      	nop
 80070c8:	08009a74 	.word	0x08009a74
 80070cc:	08009a70 	.word	0x08009a70
 80070d0:	08009aa8 	.word	0x08009aa8
 80070d4:	08009aac 	.word	0x08009aac
 80070d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070da:	f1bb 3fff 	cmp.w	fp, #4294967295
 80070de:	f023 0720 	bic.w	r7, r3, #32
 80070e2:	f000 809a 	beq.w	800721a <_svfprintf_r+0x12d2>
 80070e6:	2f47      	cmp	r7, #71	; 0x47
 80070e8:	d104      	bne.n	80070f4 <_svfprintf_r+0x11ac>
 80070ea:	f1bb 0f00 	cmp.w	fp, #0
 80070ee:	bf08      	it	eq
 80070f0:	f04f 0b01 	moveq.w	fp, #1
 80070f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070f6:	9a03      	ldr	r2, [sp, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8007100:	f2c0 8184 	blt.w	800740c <_svfprintf_r+0x14c4>
 8007104:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8007108:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800710c:	f04f 0800 	mov.w	r8, #0
 8007110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007112:	2b66      	cmp	r3, #102	; 0x66
 8007114:	f000 8164 	beq.w	80073e0 <_svfprintf_r+0x1498>
 8007118:	2b46      	cmp	r3, #70	; 0x46
 800711a:	f000 819c 	beq.w	8007456 <_svfprintf_r+0x150e>
 800711e:	2f45      	cmp	r7, #69	; 0x45
 8007120:	bf0c      	ite	eq
 8007122:	f10b 0501 	addeq.w	r5, fp, #1
 8007126:	465d      	movne	r5, fp
 8007128:	aa1d      	add	r2, sp, #116	; 0x74
 800712a:	ab1a      	add	r3, sp, #104	; 0x68
 800712c:	9201      	str	r2, [sp, #4]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	462a      	mov	r2, r5
 8007132:	ab19      	add	r3, sp, #100	; 0x64
 8007134:	2102      	movs	r1, #2
 8007136:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800713a:	9806      	ldr	r0, [sp, #24]
 800713c:	f000 fae8 	bl	8007710 <_dtoa_r>
 8007140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007142:	2b67      	cmp	r3, #103	; 0x67
 8007144:	4606      	mov	r6, r0
 8007146:	f000 80fb 	beq.w	8007340 <_svfprintf_r+0x13f8>
 800714a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800714c:	2b47      	cmp	r3, #71	; 0x47
 800714e:	f000 80e5 	beq.w	800731c <_svfprintf_r+0x13d4>
 8007152:	1974      	adds	r4, r6, r5
 8007154:	2200      	movs	r2, #0
 8007156:	2300      	movs	r3, #0
 8007158:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800715c:	f7f9 fe06 	bl	8000d6c <__aeabi_dcmpeq>
 8007160:	2800      	cmp	r0, #0
 8007162:	f040 80f3 	bne.w	800734c <_svfprintf_r+0x1404>
 8007166:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007168:	429c      	cmp	r4, r3
 800716a:	d906      	bls.n	800717a <_svfprintf_r+0x1232>
 800716c:	2130      	movs	r1, #48	; 0x30
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	921d      	str	r2, [sp, #116]	; 0x74
 8007172:	7019      	strb	r1, [r3, #0]
 8007174:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007176:	429c      	cmp	r4, r3
 8007178:	d8f9      	bhi.n	800716e <_svfprintf_r+0x1226>
 800717a:	1b9b      	subs	r3, r3, r6
 800717c:	2f47      	cmp	r7, #71	; 0x47
 800717e:	9310      	str	r3, [sp, #64]	; 0x40
 8007180:	f000 80d7 	beq.w	8007332 <_svfprintf_r+0x13ea>
 8007184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007186:	2b65      	cmp	r3, #101	; 0x65
 8007188:	f340 8211 	ble.w	80075ae <_svfprintf_r+0x1666>
 800718c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800718e:	2b66      	cmp	r3, #102	; 0x66
 8007190:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007192:	930d      	str	r3, [sp, #52]	; 0x34
 8007194:	f000 8152 	beq.w	800743c <_svfprintf_r+0x14f4>
 8007198:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800719a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800719c:	428a      	cmp	r2, r1
 800719e:	f2c0 813e 	blt.w	800741e <_svfprintf_r+0x14d6>
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	07d9      	lsls	r1, r3, #31
 80071a6:	f100 81a2 	bmi.w	80074ee <_svfprintf_r+0x15a6>
 80071aa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80071ae:	9209      	str	r2, [sp, #36]	; 0x24
 80071b0:	2267      	movs	r2, #103	; 0x67
 80071b2:	920c      	str	r2, [sp, #48]	; 0x30
 80071b4:	f1b8 0f00 	cmp.w	r8, #0
 80071b8:	f040 809e 	bne.w	80072f8 <_svfprintf_r+0x13b0>
 80071bc:	9305      	str	r3, [sp, #20]
 80071be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071c0:	9303      	str	r3, [sp, #12]
 80071c2:	46c3      	mov	fp, r8
 80071c4:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 80071c8:	f7ff b88a 	b.w	80062e0 <_svfprintf_r+0x398>
 80071cc:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 80071d0:	9303      	str	r3, [sp, #12]
 80071d2:	ea54 0305 	orrs.w	r3, r4, r5
 80071d6:	970a      	str	r7, [sp, #40]	; 0x28
 80071d8:	f43f ab48 	beq.w	800686c <_svfprintf_r+0x924>
 80071dc:	4617      	mov	r7, r2
 80071de:	f7fe bfd6 	b.w	800618e <_svfprintf_r+0x246>
 80071e2:	2140      	movs	r1, #64	; 0x40
 80071e4:	9806      	ldr	r0, [sp, #24]
 80071e6:	f001 f9b1 	bl	800854c <_malloc_r>
 80071ea:	9a04      	ldr	r2, [sp, #16]
 80071ec:	6010      	str	r0, [r2, #0]
 80071ee:	6110      	str	r0, [r2, #16]
 80071f0:	2800      	cmp	r0, #0
 80071f2:	f000 81c5 	beq.w	8007580 <_svfprintf_r+0x1638>
 80071f6:	9a04      	ldr	r2, [sp, #16]
 80071f8:	2340      	movs	r3, #64	; 0x40
 80071fa:	6153      	str	r3, [r2, #20]
 80071fc:	f7fe bebb 	b.w	8005f76 <_svfprintf_r+0x2e>
 8007200:	aa1f      	add	r2, sp, #124	; 0x7c
 8007202:	9904      	ldr	r1, [sp, #16]
 8007204:	9806      	ldr	r0, [sp, #24]
 8007206:	f001 ff9d 	bl	8009144 <__ssprint_r>
 800720a:	2800      	cmp	r0, #0
 800720c:	f47e af93 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8007210:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007212:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8007214:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8007218:	e6ea      	b.n	8006ff0 <_svfprintf_r+0x10a8>
 800721a:	f04f 0b06 	mov.w	fp, #6
 800721e:	e769      	b.n	80070f4 <_svfprintf_r+0x11ac>
 8007220:	970a      	str	r7, [sp, #40]	; 0x28
 8007222:	4617      	mov	r7, r2
 8007224:	e559      	b.n	8006cda <_svfprintf_r+0xd92>
 8007226:	aa1f      	add	r2, sp, #124	; 0x7c
 8007228:	9904      	ldr	r1, [sp, #16]
 800722a:	9806      	ldr	r0, [sp, #24]
 800722c:	f001 ff8a 	bl	8009144 <__ssprint_r>
 8007230:	2800      	cmp	r0, #0
 8007232:	f47e af80 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8007236:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8007238:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800723a:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800723e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007240:	f8c9 6000 	str.w	r6, [r9]
 8007244:	3301      	adds	r3, #1
 8007246:	440c      	add	r4, r1
 8007248:	2b07      	cmp	r3, #7
 800724a:	9421      	str	r4, [sp, #132]	; 0x84
 800724c:	9320      	str	r3, [sp, #128]	; 0x80
 800724e:	f8c9 1004 	str.w	r1, [r9, #4]
 8007252:	f77f a909 	ble.w	8006468 <_svfprintf_r+0x520>
 8007256:	e415      	b.n	8006a84 <_svfprintf_r+0xb3c>
 8007258:	4630      	mov	r0, r6
 800725a:	f7f9 fab1 	bl	80007c0 <strlen>
 800725e:	46a3      	mov	fp, r4
 8007260:	4603      	mov	r3, r0
 8007262:	9009      	str	r0, [sp, #36]	; 0x24
 8007264:	f7ff ba9c 	b.w	80067a0 <_svfprintf_r+0x858>
 8007268:	aa1f      	add	r2, sp, #124	; 0x7c
 800726a:	9904      	ldr	r1, [sp, #16]
 800726c:	9806      	ldr	r0, [sp, #24]
 800726e:	f001 ff69 	bl	8009144 <__ssprint_r>
 8007272:	2800      	cmp	r0, #0
 8007274:	f47e af5f 	bne.w	8006136 <_svfprintf_r+0x1ee>
 8007278:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800727a:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800727e:	e468      	b.n	8006b52 <_svfprintf_r+0xc0a>
 8007280:	4614      	mov	r4, r2
 8007282:	4632      	mov	r2, r6
 8007284:	4646      	mov	r6, r8
 8007286:	4690      	mov	r8, r2
 8007288:	3301      	adds	r3, #1
 800728a:	442c      	add	r4, r5
 800728c:	2b07      	cmp	r3, #7
 800728e:	9421      	str	r4, [sp, #132]	; 0x84
 8007290:	9320      	str	r3, [sp, #128]	; 0x80
 8007292:	f8c9 8000 	str.w	r8, [r9]
 8007296:	f8c9 5004 	str.w	r5, [r9, #4]
 800729a:	dcc4      	bgt.n	8007226 <_svfprintf_r+0x12de>
 800729c:	f109 0908 	add.w	r9, r9, #8
 80072a0:	e7cd      	b.n	800723e <_svfprintf_r+0x12f6>
 80072a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80072a4:	9904      	ldr	r1, [sp, #16]
 80072a6:	9806      	ldr	r0, [sp, #24]
 80072a8:	f001 ff4c 	bl	8009144 <__ssprint_r>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	f47e af42 	bne.w	8006136 <_svfprintf_r+0x1ee>
 80072b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072b4:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80072b6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80072ba:	e553      	b.n	8006d64 <_svfprintf_r+0xe1c>
 80072bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80072be:	9904      	ldr	r1, [sp, #16]
 80072c0:	9806      	ldr	r0, [sp, #24]
 80072c2:	f001 ff3f 	bl	8009144 <__ssprint_r>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	f47e af35 	bne.w	8006136 <_svfprintf_r+0x1ee>
 80072cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072d0:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80072d8:	e55c      	b.n	8006d94 <_svfprintf_r+0xe4c>
 80072da:	2d06      	cmp	r5, #6
 80072dc:	462b      	mov	r3, r5
 80072de:	bf28      	it	cs
 80072e0:	2306      	movcs	r3, #6
 80072e2:	9309      	str	r3, [sp, #36]	; 0x24
 80072e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80072e8:	46b3      	mov	fp, r6
 80072ea:	970a      	str	r7, [sp, #40]	; 0x28
 80072ec:	960d      	str	r6, [sp, #52]	; 0x34
 80072ee:	4637      	mov	r7, r6
 80072f0:	9305      	str	r3, [sp, #20]
 80072f2:	4eba      	ldr	r6, [pc, #744]	; (80075dc <_svfprintf_r+0x1694>)
 80072f4:	f7fe bff4 	b.w	80062e0 <_svfprintf_r+0x398>
 80072f8:	272d      	movs	r7, #45	; 0x2d
 80072fa:	9305      	str	r3, [sp, #20]
 80072fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072fe:	9303      	str	r3, [sp, #12]
 8007300:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8007304:	f04f 0b00 	mov.w	fp, #0
 8007308:	f7fe bfeb 	b.w	80062e2 <_svfprintf_r+0x39a>
 800730c:	9303      	str	r3, [sp, #12]
 800730e:	f7ff b9d4 	b.w	80066ba <_svfprintf_r+0x772>
 8007312:	272d      	movs	r7, #45	; 0x2d
 8007314:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8007318:	f7ff b924 	b.w	8006564 <_svfprintf_r+0x61c>
 800731c:	9b03      	ldr	r3, [sp, #12]
 800731e:	07db      	lsls	r3, r3, #31
 8007320:	f100 80a7 	bmi.w	8007472 <_svfprintf_r+0x152a>
 8007324:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007326:	2f47      	cmp	r7, #71	; 0x47
 8007328:	eba3 0306 	sub.w	r3, r3, r6
 800732c:	9310      	str	r3, [sp, #64]	; 0x40
 800732e:	f040 813e 	bne.w	80075ae <_svfprintf_r+0x1666>
 8007332:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007334:	1cdd      	adds	r5, r3, #3
 8007336:	db16      	blt.n	8007366 <_svfprintf_r+0x141e>
 8007338:	459b      	cmp	fp, r3
 800733a:	db14      	blt.n	8007366 <_svfprintf_r+0x141e>
 800733c:	930d      	str	r3, [sp, #52]	; 0x34
 800733e:	e72b      	b.n	8007198 <_svfprintf_r+0x1250>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	07da      	lsls	r2, r3, #31
 8007344:	f53f af05 	bmi.w	8007152 <_svfprintf_r+0x120a>
 8007348:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800734a:	e716      	b.n	800717a <_svfprintf_r+0x1232>
 800734c:	4623      	mov	r3, r4
 800734e:	e714      	b.n	800717a <_svfprintf_r+0x1232>
 8007350:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007354:	970a      	str	r7, [sp, #40]	; 0x28
 8007356:	9305      	str	r3, [sp, #20]
 8007358:	9509      	str	r5, [sp, #36]	; 0x24
 800735a:	4683      	mov	fp, r0
 800735c:	900d      	str	r0, [sp, #52]	; 0x34
 800735e:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8007362:	f7fe bfbd 	b.w	80062e0 <_svfprintf_r+0x398>
 8007366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007368:	3a02      	subs	r2, #2
 800736a:	920c      	str	r2, [sp, #48]	; 0x30
 800736c:	3b01      	subs	r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8007374:	9319      	str	r3, [sp, #100]	; 0x64
 8007376:	bfb8      	it	lt
 8007378:	425b      	neglt	r3, r3
 800737a:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800737e:	bfb4      	ite	lt
 8007380:	222d      	movlt	r2, #45	; 0x2d
 8007382:	222b      	movge	r2, #43	; 0x2b
 8007384:	2b09      	cmp	r3, #9
 8007386:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800738a:	dc78      	bgt.n	800747e <_svfprintf_r+0x1536>
 800738c:	3330      	adds	r3, #48	; 0x30
 800738e:	2230      	movs	r2, #48	; 0x30
 8007390:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8007394:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8007398:	ab1c      	add	r3, sp, #112	; 0x70
 800739a:	aa1b      	add	r2, sp, #108	; 0x6c
 800739c:	1a9b      	subs	r3, r3, r2
 800739e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80073a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80073a2:	2a01      	cmp	r2, #1
 80073a4:	4413      	add	r3, r2
 80073a6:	9309      	str	r3, [sp, #36]	; 0x24
 80073a8:	f340 80ba 	ble.w	8007520 <_svfprintf_r+0x15d8>
 80073ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ae:	2200      	movs	r2, #0
 80073b0:	3301      	adds	r3, #1
 80073b2:	9309      	str	r3, [sp, #36]	; 0x24
 80073b4:	920d      	str	r2, [sp, #52]	; 0x34
 80073b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073ba:	e6fb      	b.n	80071b4 <_svfprintf_r+0x126c>
 80073bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80073be:	9904      	ldr	r1, [sp, #16]
 80073c0:	9806      	ldr	r0, [sp, #24]
 80073c2:	f001 febf 	bl	8009144 <__ssprint_r>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	f47e aeb5 	bne.w	8006136 <_svfprintf_r+0x1ee>
 80073cc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80073ce:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80073d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073d2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80073d6:	e622      	b.n	800701e <_svfprintf_r+0x10d6>
 80073d8:	46a2      	mov	sl, r4
 80073da:	2500      	movs	r5, #0
 80073dc:	f7fe be0d 	b.w	8005ffa <_svfprintf_r+0xb2>
 80073e0:	aa1d      	add	r2, sp, #116	; 0x74
 80073e2:	ab1a      	add	r3, sp, #104	; 0x68
 80073e4:	9201      	str	r2, [sp, #4]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	465a      	mov	r2, fp
 80073ea:	ab19      	add	r3, sp, #100	; 0x64
 80073ec:	2103      	movs	r1, #3
 80073ee:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80073f2:	9806      	ldr	r0, [sp, #24]
 80073f4:	f000 f98c 	bl	8007710 <_dtoa_r>
 80073f8:	465d      	mov	r5, fp
 80073fa:	4606      	mov	r6, r0
 80073fc:	eb00 040b 	add.w	r4, r0, fp
 8007400:	7833      	ldrb	r3, [r6, #0]
 8007402:	2b30      	cmp	r3, #48	; 0x30
 8007404:	d066      	beq.n	80074d4 <_svfprintf_r+0x158c>
 8007406:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007408:	442c      	add	r4, r5
 800740a:	e6a3      	b.n	8007154 <_svfprintf_r+0x120c>
 800740c:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8007410:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8007414:	9114      	str	r1, [sp, #80]	; 0x50
 8007416:	9315      	str	r3, [sp, #84]	; 0x54
 8007418:	f04f 082d 	mov.w	r8, #45	; 0x2d
 800741c:	e678      	b.n	8007110 <_svfprintf_r+0x11c8>
 800741e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007420:	2b00      	cmp	r3, #0
 8007422:	bfd8      	it	le
 8007424:	f1c3 0502 	rsble	r5, r3, #2
 8007428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800742a:	bfc8      	it	gt
 800742c:	2501      	movgt	r5, #1
 800742e:	18eb      	adds	r3, r5, r3
 8007430:	2267      	movs	r2, #103	; 0x67
 8007432:	9309      	str	r3, [sp, #36]	; 0x24
 8007434:	920c      	str	r2, [sp, #48]	; 0x30
 8007436:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800743a:	e6bb      	b.n	80071b4 <_svfprintf_r+0x126c>
 800743c:	2b00      	cmp	r3, #0
 800743e:	dd66      	ble.n	800750e <_svfprintf_r+0x15c6>
 8007440:	f1bb 0f00 	cmp.w	fp, #0
 8007444:	d15b      	bne.n	80074fe <_svfprintf_r+0x15b6>
 8007446:	9a03      	ldr	r2, [sp, #12]
 8007448:	07d4      	lsls	r4, r2, #31
 800744a:	d458      	bmi.n	80074fe <_svfprintf_r+0x15b6>
 800744c:	461a      	mov	r2, r3
 800744e:	9209      	str	r2, [sp, #36]	; 0x24
 8007450:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007454:	e6ae      	b.n	80071b4 <_svfprintf_r+0x126c>
 8007456:	aa1d      	add	r2, sp, #116	; 0x74
 8007458:	ab1a      	add	r3, sp, #104	; 0x68
 800745a:	9201      	str	r2, [sp, #4]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	465a      	mov	r2, fp
 8007460:	ab19      	add	r3, sp, #100	; 0x64
 8007462:	2103      	movs	r1, #3
 8007464:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8007468:	9806      	ldr	r0, [sp, #24]
 800746a:	f000 f951 	bl	8007710 <_dtoa_r>
 800746e:	465d      	mov	r5, fp
 8007470:	4606      	mov	r6, r0
 8007472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007474:	2b46      	cmp	r3, #70	; 0x46
 8007476:	eb06 0405 	add.w	r4, r6, r5
 800747a:	d0c1      	beq.n	8007400 <_svfprintf_r+0x14b8>
 800747c:	e66a      	b.n	8007154 <_svfprintf_r+0x120c>
 800747e:	f10d 047b 	add.w	r4, sp, #123	; 0x7b
 8007482:	4620      	mov	r0, r4
 8007484:	4a56      	ldr	r2, [pc, #344]	; (80075e0 <_svfprintf_r+0x1698>)
 8007486:	fb82 2103 	smull	r2, r1, r2, r3
 800748a:	17da      	asrs	r2, r3, #31
 800748c:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8007490:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007494:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8007498:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800749c:	2a09      	cmp	r2, #9
 800749e:	4613      	mov	r3, r2
 80074a0:	f800 1d01 	strb.w	r1, [r0, #-1]!
 80074a4:	dcee      	bgt.n	8007484 <_svfprintf_r+0x153c>
 80074a6:	4602      	mov	r2, r0
 80074a8:	3330      	adds	r3, #48	; 0x30
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80074b0:	4294      	cmp	r4, r2
 80074b2:	d962      	bls.n	800757a <_svfprintf_r+0x1632>
 80074b4:	f10d 016e 	add.w	r1, sp, #110	; 0x6e
 80074b8:	4602      	mov	r2, r0
 80074ba:	e001      	b.n	80074c0 <_svfprintf_r+0x1578>
 80074bc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80074c0:	f801 3b01 	strb.w	r3, [r1], #1
 80074c4:	4294      	cmp	r4, r2
 80074c6:	d1f9      	bne.n	80074bc <_svfprintf_r+0x1574>
 80074c8:	1c63      	adds	r3, r4, #1
 80074ca:	1a1b      	subs	r3, r3, r0
 80074cc:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 80074d0:	4413      	add	r3, r2
 80074d2:	e762      	b.n	800739a <_svfprintf_r+0x1452>
 80074d4:	2200      	movs	r2, #0
 80074d6:	2300      	movs	r3, #0
 80074d8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80074dc:	f7f9 fc46 	bl	8000d6c <__aeabi_dcmpeq>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d190      	bne.n	8007406 <_svfprintf_r+0x14be>
 80074e4:	f1c5 0501 	rsb	r5, r5, #1
 80074e8:	9519      	str	r5, [sp, #100]	; 0x64
 80074ea:	442c      	add	r4, r5
 80074ec:	e632      	b.n	8007154 <_svfprintf_r+0x120c>
 80074ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074f0:	2267      	movs	r2, #103	; 0x67
 80074f2:	3301      	adds	r3, #1
 80074f4:	9309      	str	r3, [sp, #36]	; 0x24
 80074f6:	920c      	str	r2, [sp, #48]	; 0x30
 80074f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074fc:	e65a      	b.n	80071b4 <_svfprintf_r+0x126c>
 80074fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007500:	f10b 0501 	add.w	r5, fp, #1
 8007504:	442b      	add	r3, r5
 8007506:	9309      	str	r3, [sp, #36]	; 0x24
 8007508:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800750c:	e652      	b.n	80071b4 <_svfprintf_r+0x126c>
 800750e:	f1bb 0f00 	cmp.w	fp, #0
 8007512:	d12c      	bne.n	800756e <_svfprintf_r+0x1626>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	07d8      	lsls	r0, r3, #31
 8007518:	d429      	bmi.n	800756e <_svfprintf_r+0x1626>
 800751a:	2301      	movs	r3, #1
 800751c:	9309      	str	r3, [sp, #36]	; 0x24
 800751e:	e649      	b.n	80071b4 <_svfprintf_r+0x126c>
 8007520:	9b03      	ldr	r3, [sp, #12]
 8007522:	f013 0301 	ands.w	r3, r3, #1
 8007526:	f47f af41 	bne.w	80073ac <_svfprintf_r+0x1464>
 800752a:	930d      	str	r3, [sp, #52]	; 0x34
 800752c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007532:	e63f      	b.n	80071b4 <_svfprintf_r+0x126c>
 8007534:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007536:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800753a:	6805      	ldr	r5, [r0, #0]
 800753c:	3004      	adds	r0, #4
 800753e:	2d00      	cmp	r5, #0
 8007540:	900a      	str	r0, [sp, #40]	; 0x28
 8007542:	46a2      	mov	sl, r4
 8007544:	f6be ad57 	bge.w	8005ff6 <_svfprintf_r+0xae>
 8007548:	f04f 35ff 	mov.w	r5, #4294967295
 800754c:	f7fe bd53 	b.w	8005ff6 <_svfprintf_r+0xae>
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	07db      	lsls	r3, r3, #31
 8007554:	465f      	mov	r7, fp
 8007556:	d505      	bpl.n	8007564 <_svfprintf_r+0x161c>
 8007558:	ae3c      	add	r6, sp, #240	; 0xf0
 800755a:	2330      	movs	r3, #48	; 0x30
 800755c:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8007560:	f7fe beb4 	b.w	80062cc <_svfprintf_r+0x384>
 8007564:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007568:	ae2c      	add	r6, sp, #176	; 0xb0
 800756a:	f7fe beb2 	b.w	80062d2 <_svfprintf_r+0x38a>
 800756e:	f10b 0302 	add.w	r3, fp, #2
 8007572:	9309      	str	r3, [sp, #36]	; 0x24
 8007574:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007578:	e61c      	b.n	80071b4 <_svfprintf_r+0x126c>
 800757a:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800757e:	e70c      	b.n	800739a <_svfprintf_r+0x1452>
 8007580:	9a06      	ldr	r2, [sp, #24]
 8007582:	230c      	movs	r3, #12
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	f04f 30ff 	mov.w	r0, #4294967295
 800758a:	f7fe bddd 	b.w	8006148 <_svfprintf_r+0x200>
 800758e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8007592:	f7ff b95a 	b.w	800684a <_svfprintf_r+0x902>
 8007596:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800759a:	f7ff b862 	b.w	8006662 <_svfprintf_r+0x71a>
 800759e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80075a2:	f7ff b830 	b.w	8006606 <_svfprintf_r+0x6be>
 80075a6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80075aa:	f7fe bff9 	b.w	80065a0 <_svfprintf_r+0x658>
 80075ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075b0:	e6dc      	b.n	800736c <_svfprintf_r+0x1424>
 80075b2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80075b6:	f7fe bdcf 	b.w	8006158 <_svfprintf_r+0x210>
 80075ba:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80075be:	f7fe bfad 	b.w	800651c <_svfprintf_r+0x5d4>
 80075c2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80075c6:	f7fe be41 	b.w	800624c <_svfprintf_r+0x304>
 80075ca:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80075ce:	f7ff b91b 	b.w	8006808 <_svfprintf_r+0x8c0>
 80075d2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80075d6:	f7ff b8f9 	b.w	80067cc <_svfprintf_r+0x884>
 80075da:	bf00      	nop
 80075dc:	08009aa0 	.word	0x08009aa0
 80075e0:	66666667 	.word	0x66666667

080075e4 <quorem>:
 80075e4:	6902      	ldr	r2, [r0, #16]
 80075e6:	690b      	ldr	r3, [r1, #16]
 80075e8:	4293      	cmp	r3, r2
 80075ea:	f300 808d 	bgt.w	8007708 <quorem+0x124>
 80075ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80075f6:	f101 0714 	add.w	r7, r1, #20
 80075fa:	f100 0b14 	add.w	fp, r0, #20
 80075fe:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8007602:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8007606:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800760a:	b083      	sub	sp, #12
 800760c:	3201      	adds	r2, #1
 800760e:	fbb3 f9f2 	udiv	r9, r3, r2
 8007612:	eb0b 0304 	add.w	r3, fp, r4
 8007616:	9400      	str	r4, [sp, #0]
 8007618:	eb07 0a04 	add.w	sl, r7, r4
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	f1b9 0f00 	cmp.w	r9, #0
 8007622:	d039      	beq.n	8007698 <quorem+0xb4>
 8007624:	2500      	movs	r5, #0
 8007626:	46bc      	mov	ip, r7
 8007628:	46de      	mov	lr, fp
 800762a:	462b      	mov	r3, r5
 800762c:	f85c 6b04 	ldr.w	r6, [ip], #4
 8007630:	f8de 2000 	ldr.w	r2, [lr]
 8007634:	b2b4      	uxth	r4, r6
 8007636:	fb09 5504 	mla	r5, r9, r4, r5
 800763a:	0c36      	lsrs	r6, r6, #16
 800763c:	0c2c      	lsrs	r4, r5, #16
 800763e:	fb09 4406 	mla	r4, r9, r6, r4
 8007642:	b2ad      	uxth	r5, r5
 8007644:	1b5b      	subs	r3, r3, r5
 8007646:	b2a6      	uxth	r6, r4
 8007648:	fa13 f382 	uxtah	r3, r3, r2
 800764c:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 8007650:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8007654:	b29b      	uxth	r3, r3
 8007656:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800765a:	45e2      	cmp	sl, ip
 800765c:	f84e 3b04 	str.w	r3, [lr], #4
 8007660:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8007664:	ea4f 4326 	mov.w	r3, r6, asr #16
 8007668:	d2e0      	bcs.n	800762c <quorem+0x48>
 800766a:	9b00      	ldr	r3, [sp, #0]
 800766c:	f85b 3003 	ldr.w	r3, [fp, r3]
 8007670:	b993      	cbnz	r3, 8007698 <quorem+0xb4>
 8007672:	9c01      	ldr	r4, [sp, #4]
 8007674:	1f23      	subs	r3, r4, #4
 8007676:	459b      	cmp	fp, r3
 8007678:	d20c      	bcs.n	8007694 <quorem+0xb0>
 800767a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800767e:	b94b      	cbnz	r3, 8007694 <quorem+0xb0>
 8007680:	f1a4 0308 	sub.w	r3, r4, #8
 8007684:	e002      	b.n	800768c <quorem+0xa8>
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	3b04      	subs	r3, #4
 800768a:	b91a      	cbnz	r2, 8007694 <quorem+0xb0>
 800768c:	459b      	cmp	fp, r3
 800768e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007692:	d3f8      	bcc.n	8007686 <quorem+0xa2>
 8007694:	f8c0 8010 	str.w	r8, [r0, #16]
 8007698:	4604      	mov	r4, r0
 800769a:	f001 fc1b 	bl	8008ed4 <__mcmp>
 800769e:	2800      	cmp	r0, #0
 80076a0:	db2e      	blt.n	8007700 <quorem+0x11c>
 80076a2:	f109 0901 	add.w	r9, r9, #1
 80076a6:	465d      	mov	r5, fp
 80076a8:	2300      	movs	r3, #0
 80076aa:	f857 1b04 	ldr.w	r1, [r7], #4
 80076ae:	6828      	ldr	r0, [r5, #0]
 80076b0:	b28a      	uxth	r2, r1
 80076b2:	1a9a      	subs	r2, r3, r2
 80076b4:	0c09      	lsrs	r1, r1, #16
 80076b6:	fa12 f280 	uxtah	r2, r2, r0
 80076ba:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80076be:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80076c2:	b291      	uxth	r1, r2
 80076c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80076c8:	45ba      	cmp	sl, r7
 80076ca:	f845 1b04 	str.w	r1, [r5], #4
 80076ce:	ea4f 4323 	mov.w	r3, r3, asr #16
 80076d2:	d2ea      	bcs.n	80076aa <quorem+0xc6>
 80076d4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80076d8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80076dc:	b982      	cbnz	r2, 8007700 <quorem+0x11c>
 80076de:	1f1a      	subs	r2, r3, #4
 80076e0:	4593      	cmp	fp, r2
 80076e2:	d20b      	bcs.n	80076fc <quorem+0x118>
 80076e4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80076e8:	b942      	cbnz	r2, 80076fc <quorem+0x118>
 80076ea:	3b08      	subs	r3, #8
 80076ec:	e002      	b.n	80076f4 <quorem+0x110>
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	3b04      	subs	r3, #4
 80076f2:	b91a      	cbnz	r2, 80076fc <quorem+0x118>
 80076f4:	459b      	cmp	fp, r3
 80076f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80076fa:	d3f8      	bcc.n	80076ee <quorem+0x10a>
 80076fc:	f8c4 8010 	str.w	r8, [r4, #16]
 8007700:	4648      	mov	r0, r9
 8007702:	b003      	add	sp, #12
 8007704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007708:	2000      	movs	r0, #0
 800770a:	4770      	bx	lr
 800770c:	0000      	movs	r0, r0
	...

08007710 <_dtoa_r>:
 8007710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	ec57 6b10 	vmov	r6, r7, d0
 8007718:	b09b      	sub	sp, #108	; 0x6c
 800771a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800771c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800771e:	9100      	str	r1, [sp, #0]
 8007720:	4681      	mov	r9, r0
 8007722:	9205      	str	r2, [sp, #20]
 8007724:	9303      	str	r3, [sp, #12]
 8007726:	ee10 aa10 	vmov	sl, s0
 800772a:	46bb      	mov	fp, r7
 800772c:	b154      	cbz	r4, 8007744 <_dtoa_r+0x34>
 800772e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007730:	6062      	str	r2, [r4, #4]
 8007732:	2301      	movs	r3, #1
 8007734:	4093      	lsls	r3, r2
 8007736:	60a3      	str	r3, [r4, #8]
 8007738:	4621      	mov	r1, r4
 800773a:	f001 f9e9 	bl	8008b10 <_Bfree>
 800773e:	2300      	movs	r3, #0
 8007740:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8007744:	f1bb 0f00 	cmp.w	fp, #0
 8007748:	465c      	mov	r4, fp
 800774a:	db34      	blt.n	80077b6 <_dtoa_r+0xa6>
 800774c:	2300      	movs	r3, #0
 800774e:	602b      	str	r3, [r5, #0]
 8007750:	4ba1      	ldr	r3, [pc, #644]	; (80079d8 <_dtoa_r+0x2c8>)
 8007752:	461a      	mov	r2, r3
 8007754:	4023      	ands	r3, r4
 8007756:	4293      	cmp	r3, r2
 8007758:	d016      	beq.n	8007788 <_dtoa_r+0x78>
 800775a:	2200      	movs	r2, #0
 800775c:	2300      	movs	r3, #0
 800775e:	4650      	mov	r0, sl
 8007760:	4659      	mov	r1, fp
 8007762:	f7f9 fb03 	bl	8000d6c <__aeabi_dcmpeq>
 8007766:	4656      	mov	r6, sl
 8007768:	465f      	mov	r7, fp
 800776a:	4680      	mov	r8, r0
 800776c:	b348      	cbz	r0, 80077c2 <_dtoa_r+0xb2>
 800776e:	9a03      	ldr	r2, [sp, #12]
 8007770:	2301      	movs	r3, #1
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 80be 	beq.w	80078f8 <_dtoa_r+0x1e8>
 800777c:	4897      	ldr	r0, [pc, #604]	; (80079dc <_dtoa_r+0x2cc>)
 800777e:	6018      	str	r0, [r3, #0]
 8007780:	3801      	subs	r0, #1
 8007782:	b01b      	add	sp, #108	; 0x6c
 8007784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007788:	9a03      	ldr	r2, [sp, #12]
 800778a:	f242 730f 	movw	r3, #9999	; 0x270f
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	f1ba 0f00 	cmp.w	sl, #0
 8007794:	f000 809a 	beq.w	80078cc <_dtoa_r+0x1bc>
 8007798:	4891      	ldr	r0, [pc, #580]	; (80079e0 <_dtoa_r+0x2d0>)
 800779a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0f0      	beq.n	8007782 <_dtoa_r+0x72>
 80077a0:	78c3      	ldrb	r3, [r0, #3]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 80aa 	beq.w	80078fc <_dtoa_r+0x1ec>
 80077a8:	f100 0308 	add.w	r3, r0, #8
 80077ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	b01b      	add	sp, #108	; 0x6c
 80077b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b6:	2301      	movs	r3, #1
 80077b8:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 80077bc:	602b      	str	r3, [r5, #0]
 80077be:	46a3      	mov	fp, r4
 80077c0:	e7c6      	b.n	8007750 <_dtoa_r+0x40>
 80077c2:	aa18      	add	r2, sp, #96	; 0x60
 80077c4:	a919      	add	r1, sp, #100	; 0x64
 80077c6:	ec47 6b10 	vmov	d0, r6, r7
 80077ca:	4648      	mov	r0, r9
 80077cc:	f001 fc2e 	bl	800902c <__d2b>
 80077d0:	0d25      	lsrs	r5, r4, #20
 80077d2:	900a      	str	r0, [sp, #40]	; 0x28
 80077d4:	f040 8083 	bne.w	80078de <_dtoa_r+0x1ce>
 80077d8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80077da:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80077dc:	442e      	add	r6, r5
 80077de:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	f340 8288 	ble.w	8007cf8 <_dtoa_r+0x5e8>
 80077e8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80077ec:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80077f0:	409c      	lsls	r4, r3
 80077f2:	fa2a f000 	lsr.w	r0, sl, r0
 80077f6:	4320      	orrs	r0, r4
 80077f8:	f7f8 fe76 	bl	80004e8 <__aeabi_ui2d>
 80077fc:	2301      	movs	r3, #1
 80077fe:	1e74      	subs	r4, r6, #1
 8007800:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007804:	930f      	str	r3, [sp, #60]	; 0x3c
 8007806:	2200      	movs	r2, #0
 8007808:	4b76      	ldr	r3, [pc, #472]	; (80079e4 <_dtoa_r+0x2d4>)
 800780a:	f7f8 fd2f 	bl	800026c <__aeabi_dsub>
 800780e:	a36c      	add	r3, pc, #432	; (adr r3, 80079c0 <_dtoa_r+0x2b0>)
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f7f9 f842 	bl	800089c <__aeabi_dmul>
 8007818:	a36b      	add	r3, pc, #428	; (adr r3, 80079c8 <_dtoa_r+0x2b8>)
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	f7f8 fd27 	bl	8000270 <__adddf3>
 8007822:	4606      	mov	r6, r0
 8007824:	4620      	mov	r0, r4
 8007826:	460f      	mov	r7, r1
 8007828:	f7f8 fe6e 	bl	8000508 <__aeabi_i2d>
 800782c:	a368      	add	r3, pc, #416	; (adr r3, 80079d0 <_dtoa_r+0x2c0>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f9 f833 	bl	800089c <__aeabi_dmul>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4630      	mov	r0, r6
 800783c:	4639      	mov	r1, r7
 800783e:	f7f8 fd17 	bl	8000270 <__adddf3>
 8007842:	4606      	mov	r6, r0
 8007844:	460f      	mov	r7, r1
 8007846:	f7f9 fac3 	bl	8000dd0 <__aeabi_d2iz>
 800784a:	2200      	movs	r2, #0
 800784c:	9004      	str	r0, [sp, #16]
 800784e:	2300      	movs	r3, #0
 8007850:	4630      	mov	r0, r6
 8007852:	4639      	mov	r1, r7
 8007854:	f7f9 fa94 	bl	8000d80 <__aeabi_dcmplt>
 8007858:	2800      	cmp	r0, #0
 800785a:	f040 8228 	bne.w	8007cae <_dtoa_r+0x59e>
 800785e:	9e04      	ldr	r6, [sp, #16]
 8007860:	2e16      	cmp	r6, #22
 8007862:	f200 8221 	bhi.w	8007ca8 <_dtoa_r+0x598>
 8007866:	4b60      	ldr	r3, [pc, #384]	; (80079e8 <_dtoa_r+0x2d8>)
 8007868:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800786c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007870:	4652      	mov	r2, sl
 8007872:	465b      	mov	r3, fp
 8007874:	f7f9 faa2 	bl	8000dbc <__aeabi_dcmpgt>
 8007878:	2800      	cmp	r0, #0
 800787a:	f000 8242 	beq.w	8007d02 <_dtoa_r+0x5f2>
 800787e:	1e73      	subs	r3, r6, #1
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	2300      	movs	r3, #0
 8007884:	930d      	str	r3, [sp, #52]	; 0x34
 8007886:	1b2d      	subs	r5, r5, r4
 8007888:	f1b5 0801 	subs.w	r8, r5, #1
 800788c:	f100 822a 	bmi.w	8007ce4 <_dtoa_r+0x5d4>
 8007890:	2300      	movs	r3, #0
 8007892:	9307      	str	r3, [sp, #28]
 8007894:	9b04      	ldr	r3, [sp, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	f2c0 821b 	blt.w	8007cd2 <_dtoa_r+0x5c2>
 800789c:	4498      	add	r8, r3
 800789e:	930c      	str	r3, [sp, #48]	; 0x30
 80078a0:	2300      	movs	r3, #0
 80078a2:	9306      	str	r3, [sp, #24]
 80078a4:	9b00      	ldr	r3, [sp, #0]
 80078a6:	2b09      	cmp	r3, #9
 80078a8:	d82a      	bhi.n	8007900 <_dtoa_r+0x1f0>
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	f340 8644 	ble.w	8008538 <_dtoa_r+0xe28>
 80078b0:	3b04      	subs	r3, #4
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	2600      	movs	r6, #0
 80078b6:	9b00      	ldr	r3, [sp, #0]
 80078b8:	3b02      	subs	r3, #2
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	f200 8623 	bhi.w	8008506 <_dtoa_r+0xdf6>
 80078c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80078c4:	0224032b 	.word	0x0224032b
 80078c8:	04500336 	.word	0x04500336
 80078cc:	4b44      	ldr	r3, [pc, #272]	; (80079e0 <_dtoa_r+0x2d0>)
 80078ce:	4a47      	ldr	r2, [pc, #284]	; (80079ec <_dtoa_r+0x2dc>)
 80078d0:	f3c4 0013 	ubfx	r0, r4, #0, #20
 80078d4:	2800      	cmp	r0, #0
 80078d6:	bf14      	ite	ne
 80078d8:	4618      	movne	r0, r3
 80078da:	4610      	moveq	r0, r2
 80078dc:	e75d      	b.n	800779a <_dtoa_r+0x8a>
 80078de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078e2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80078e6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80078ea:	4650      	mov	r0, sl
 80078ec:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80078f0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80078f4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80078f6:	e786      	b.n	8007806 <_dtoa_r+0xf6>
 80078f8:	483d      	ldr	r0, [pc, #244]	; (80079f0 <_dtoa_r+0x2e0>)
 80078fa:	e742      	b.n	8007782 <_dtoa_r+0x72>
 80078fc:	1cc3      	adds	r3, r0, #3
 80078fe:	e755      	b.n	80077ac <_dtoa_r+0x9c>
 8007900:	2100      	movs	r1, #0
 8007902:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007906:	4648      	mov	r0, r9
 8007908:	460c      	mov	r4, r1
 800790a:	9100      	str	r1, [sp, #0]
 800790c:	f001 f8da 	bl	8008ac4 <_Balloc>
 8007910:	f04f 33ff 	mov.w	r3, #4294967295
 8007914:	9308      	str	r3, [sp, #32]
 8007916:	930e      	str	r3, [sp, #56]	; 0x38
 8007918:	2301      	movs	r3, #1
 800791a:	9009      	str	r0, [sp, #36]	; 0x24
 800791c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007920:	9405      	str	r4, [sp, #20]
 8007922:	930b      	str	r3, [sp, #44]	; 0x2c
 8007924:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007926:	2b00      	cmp	r3, #0
 8007928:	f2c0 80d0 	blt.w	8007acc <_dtoa_r+0x3bc>
 800792c:	9a04      	ldr	r2, [sp, #16]
 800792e:	2a0e      	cmp	r2, #14
 8007930:	f300 80cc 	bgt.w	8007acc <_dtoa_r+0x3bc>
 8007934:	4b2c      	ldr	r3, [pc, #176]	; (80079e8 <_dtoa_r+0x2d8>)
 8007936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800793a:	ed93 7b00 	vldr	d7, [r3]
 800793e:	9b05      	ldr	r3, [sp, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	ed8d 7b00 	vstr	d7, [sp]
 8007946:	f2c0 82fe 	blt.w	8007f46 <_dtoa_r+0x836>
 800794a:	4656      	mov	r6, sl
 800794c:	465f      	mov	r7, fp
 800794e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8007952:	4630      	mov	r0, r6
 8007954:	4652      	mov	r2, sl
 8007956:	465b      	mov	r3, fp
 8007958:	4639      	mov	r1, r7
 800795a:	f7f9 f8c9 	bl	8000af0 <__aeabi_ddiv>
 800795e:	f7f9 fa37 	bl	8000dd0 <__aeabi_d2iz>
 8007962:	4604      	mov	r4, r0
 8007964:	f7f8 fdd0 	bl	8000508 <__aeabi_i2d>
 8007968:	4652      	mov	r2, sl
 800796a:	465b      	mov	r3, fp
 800796c:	f7f8 ff96 	bl	800089c <__aeabi_dmul>
 8007970:	460b      	mov	r3, r1
 8007972:	4602      	mov	r2, r0
 8007974:	4639      	mov	r1, r7
 8007976:	4630      	mov	r0, r6
 8007978:	f7f8 fc78 	bl	800026c <__aeabi_dsub>
 800797c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800797e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8007982:	702b      	strb	r3, [r5, #0]
 8007984:	9b08      	ldr	r3, [sp, #32]
 8007986:	2b01      	cmp	r3, #1
 8007988:	4606      	mov	r6, r0
 800798a:	460f      	mov	r7, r1
 800798c:	f105 0501 	add.w	r5, r5, #1
 8007990:	d061      	beq.n	8007a56 <_dtoa_r+0x346>
 8007992:	2200      	movs	r2, #0
 8007994:	4b17      	ldr	r3, [pc, #92]	; (80079f4 <_dtoa_r+0x2e4>)
 8007996:	f7f8 ff81 	bl	800089c <__aeabi_dmul>
 800799a:	2200      	movs	r2, #0
 800799c:	2300      	movs	r3, #0
 800799e:	4606      	mov	r6, r0
 80079a0:	460f      	mov	r7, r1
 80079a2:	f7f9 f9e3 	bl	8000d6c <__aeabi_dcmpeq>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d17d      	bne.n	8007aa6 <_dtoa_r+0x396>
 80079aa:	f8cd 9014 	str.w	r9, [sp, #20]
 80079ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80079b2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80079b6:	e9dd 8900 	ldrd	r8, r9, [sp]
 80079ba:	e028      	b.n	8007a0e <_dtoa_r+0x2fe>
 80079bc:	f3af 8000 	nop.w
 80079c0:	636f4361 	.word	0x636f4361
 80079c4:	3fd287a7 	.word	0x3fd287a7
 80079c8:	8b60c8b3 	.word	0x8b60c8b3
 80079cc:	3fc68a28 	.word	0x3fc68a28
 80079d0:	509f79fb 	.word	0x509f79fb
 80079d4:	3fd34413 	.word	0x3fd34413
 80079d8:	7ff00000 	.word	0x7ff00000
 80079dc:	08009aa9 	.word	0x08009aa9
 80079e0:	08009ac8 	.word	0x08009ac8
 80079e4:	3ff80000 	.word	0x3ff80000
 80079e8:	08009ae8 	.word	0x08009ae8
 80079ec:	08009abc 	.word	0x08009abc
 80079f0:	08009aa8 	.word	0x08009aa8
 80079f4:	40240000 	.word	0x40240000
 80079f8:	f7f8 ff50 	bl	800089c <__aeabi_dmul>
 80079fc:	2200      	movs	r2, #0
 80079fe:	2300      	movs	r3, #0
 8007a00:	4606      	mov	r6, r0
 8007a02:	460f      	mov	r7, r1
 8007a04:	f7f9 f9b2 	bl	8000d6c <__aeabi_dcmpeq>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	f040 83ae 	bne.w	800816a <_dtoa_r+0xa5a>
 8007a0e:	4642      	mov	r2, r8
 8007a10:	464b      	mov	r3, r9
 8007a12:	4630      	mov	r0, r6
 8007a14:	4639      	mov	r1, r7
 8007a16:	f7f9 f86b 	bl	8000af0 <__aeabi_ddiv>
 8007a1a:	f7f9 f9d9 	bl	8000dd0 <__aeabi_d2iz>
 8007a1e:	4604      	mov	r4, r0
 8007a20:	f7f8 fd72 	bl	8000508 <__aeabi_i2d>
 8007a24:	4642      	mov	r2, r8
 8007a26:	464b      	mov	r3, r9
 8007a28:	f7f8 ff38 	bl	800089c <__aeabi_dmul>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4630      	mov	r0, r6
 8007a32:	4639      	mov	r1, r7
 8007a34:	f7f8 fc1a 	bl	800026c <__aeabi_dsub>
 8007a38:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007a3c:	f805 eb01 	strb.w	lr, [r5], #1
 8007a40:	ebcb 0e05 	rsb	lr, fp, r5
 8007a44:	45d6      	cmp	lr, sl
 8007a46:	4606      	mov	r6, r0
 8007a48:	460f      	mov	r7, r1
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	4bae      	ldr	r3, [pc, #696]	; (8007d08 <_dtoa_r+0x5f8>)
 8007a50:	d1d2      	bne.n	80079f8 <_dtoa_r+0x2e8>
 8007a52:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007a56:	4632      	mov	r2, r6
 8007a58:	463b      	mov	r3, r7
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	f7f8 fc07 	bl	8000270 <__adddf3>
 8007a62:	4606      	mov	r6, r0
 8007a64:	460f      	mov	r7, r1
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a6e:	f7f9 f987 	bl	8000d80 <__aeabi_dcmplt>
 8007a72:	b940      	cbnz	r0, 8007a86 <_dtoa_r+0x376>
 8007a74:	4632      	mov	r2, r6
 8007a76:	463b      	mov	r3, r7
 8007a78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a7c:	f7f9 f976 	bl	8000d6c <__aeabi_dcmpeq>
 8007a80:	b188      	cbz	r0, 8007aa6 <_dtoa_r+0x396>
 8007a82:	07e3      	lsls	r3, r4, #31
 8007a84:	d50f      	bpl.n	8007aa6 <_dtoa_r+0x396>
 8007a86:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8007a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a8c:	1e6b      	subs	r3, r5, #1
 8007a8e:	e004      	b.n	8007a9a <_dtoa_r+0x38a>
 8007a90:	429a      	cmp	r2, r3
 8007a92:	f000 83fc 	beq.w	800828e <_dtoa_r+0xb7e>
 8007a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a9a:	2c39      	cmp	r4, #57	; 0x39
 8007a9c:	f103 0501 	add.w	r5, r3, #1
 8007aa0:	d0f6      	beq.n	8007a90 <_dtoa_r+0x380>
 8007aa2:	3401      	adds	r4, #1
 8007aa4:	701c      	strb	r4, [r3, #0]
 8007aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007aa8:	4648      	mov	r0, r9
 8007aaa:	f001 f831 	bl	8008b10 <_Bfree>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	9b04      	ldr	r3, [sp, #16]
 8007ab2:	702a      	strb	r2, [r5, #0]
 8007ab4:	9a03      	ldr	r2, [sp, #12]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 839b 	beq.w	80081f8 <_dtoa_r+0xae8>
 8007ac2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ac4:	601d      	str	r5, [r3, #0]
 8007ac6:	b01b      	add	sp, #108	; 0x6c
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	f000 810e 	beq.w	8007cf0 <_dtoa_r+0x5e0>
 8007ad4:	9a00      	ldr	r2, [sp, #0]
 8007ad6:	2a01      	cmp	r2, #1
 8007ad8:	f340 8257 	ble.w	8007f8a <_dtoa_r+0x87a>
 8007adc:	9b08      	ldr	r3, [sp, #32]
 8007ade:	9a06      	ldr	r2, [sp, #24]
 8007ae0:	1e5f      	subs	r7, r3, #1
 8007ae2:	42ba      	cmp	r2, r7
 8007ae4:	f2c0 838b 	blt.w	80081fe <_dtoa_r+0xaee>
 8007ae8:	1bd7      	subs	r7, r2, r7
 8007aea:	9b08      	ldr	r3, [sp, #32]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f2c0 8480 	blt.w	80083f2 <_dtoa_r+0xce2>
 8007af2:	9d07      	ldr	r5, [sp, #28]
 8007af4:	9b08      	ldr	r3, [sp, #32]
 8007af6:	9a07      	ldr	r2, [sp, #28]
 8007af8:	2101      	movs	r1, #1
 8007afa:	441a      	add	r2, r3
 8007afc:	4648      	mov	r0, r9
 8007afe:	9207      	str	r2, [sp, #28]
 8007b00:	4498      	add	r8, r3
 8007b02:	f001 f89d 	bl	8008c40 <__i2b>
 8007b06:	4606      	mov	r6, r0
 8007b08:	b165      	cbz	r5, 8007b24 <_dtoa_r+0x414>
 8007b0a:	f1b8 0f00 	cmp.w	r8, #0
 8007b0e:	dd09      	ble.n	8007b24 <_dtoa_r+0x414>
 8007b10:	4545      	cmp	r5, r8
 8007b12:	9a07      	ldr	r2, [sp, #28]
 8007b14:	462b      	mov	r3, r5
 8007b16:	bfa8      	it	ge
 8007b18:	4643      	movge	r3, r8
 8007b1a:	1ad2      	subs	r2, r2, r3
 8007b1c:	9207      	str	r2, [sp, #28]
 8007b1e:	1aed      	subs	r5, r5, r3
 8007b20:	ebc3 0808 	rsb	r8, r3, r8
 8007b24:	9b06      	ldr	r3, [sp, #24]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f340 82f5 	ble.w	8008116 <_dtoa_r+0xa06>
 8007b2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	f000 8202 	beq.w	8007f38 <_dtoa_r+0x828>
 8007b34:	2f00      	cmp	r7, #0
 8007b36:	f000 81ff 	beq.w	8007f38 <_dtoa_r+0x828>
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	463a      	mov	r2, r7
 8007b3e:	4648      	mov	r0, r9
 8007b40:	f001 f920 	bl	8008d84 <__pow5mult>
 8007b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b46:	4601      	mov	r1, r0
 8007b48:	4606      	mov	r6, r0
 8007b4a:	4648      	mov	r0, r9
 8007b4c:	f001 f882 	bl	8008c54 <__multiply>
 8007b50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b52:	4604      	mov	r4, r0
 8007b54:	4648      	mov	r0, r9
 8007b56:	f000 ffdb 	bl	8008b10 <_Bfree>
 8007b5a:	9b06      	ldr	r3, [sp, #24]
 8007b5c:	1bdb      	subs	r3, r3, r7
 8007b5e:	9306      	str	r3, [sp, #24]
 8007b60:	f040 81e9 	bne.w	8007f36 <_dtoa_r+0x826>
 8007b64:	2101      	movs	r1, #1
 8007b66:	4648      	mov	r0, r9
 8007b68:	f001 f86a 	bl	8008c40 <__i2b>
 8007b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b6e:	9006      	str	r0, [sp, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8215 	beq.w	8007fa0 <_dtoa_r+0x890>
 8007b76:	4601      	mov	r1, r0
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4648      	mov	r0, r9
 8007b7c:	f001 f902 	bl	8008d84 <__pow5mult>
 8007b80:	9b00      	ldr	r3, [sp, #0]
 8007b82:	9006      	str	r0, [sp, #24]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	f340 82f3 	ble.w	8008170 <_dtoa_r+0xa60>
 8007b8a:	2700      	movs	r7, #0
 8007b8c:	9a06      	ldr	r2, [sp, #24]
 8007b8e:	6913      	ldr	r3, [r2, #16]
 8007b90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b94:	6918      	ldr	r0, [r3, #16]
 8007b96:	f001 f805 	bl	8008ba4 <__hi0bits>
 8007b9a:	f1c0 0020 	rsb	r0, r0, #32
 8007b9e:	4440      	add	r0, r8
 8007ba0:	f010 001f 	ands.w	r0, r0, #31
 8007ba4:	f000 81fa 	beq.w	8007f9c <_dtoa_r+0x88c>
 8007ba8:	f1c0 0320 	rsb	r3, r0, #32
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	f340 84bd 	ble.w	800852c <_dtoa_r+0xe1c>
 8007bb2:	f1c0 001c 	rsb	r0, r0, #28
 8007bb6:	9b07      	ldr	r3, [sp, #28]
 8007bb8:	4403      	add	r3, r0
 8007bba:	9307      	str	r3, [sp, #28]
 8007bbc:	4405      	add	r5, r0
 8007bbe:	4480      	add	r8, r0
 8007bc0:	9b07      	ldr	r3, [sp, #28]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dd05      	ble.n	8007bd2 <_dtoa_r+0x4c2>
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4648      	mov	r0, r9
 8007bcc:	f001 f92a 	bl	8008e24 <__lshift>
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	f1b8 0f00 	cmp.w	r8, #0
 8007bd6:	dd05      	ble.n	8007be4 <_dtoa_r+0x4d4>
 8007bd8:	4642      	mov	r2, r8
 8007bda:	9906      	ldr	r1, [sp, #24]
 8007bdc:	4648      	mov	r0, r9
 8007bde:	f001 f921 	bl	8008e24 <__lshift>
 8007be2:	9006      	str	r0, [sp, #24]
 8007be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f040 827a 	bne.w	80080e0 <_dtoa_r+0x9d0>
 8007bec:	9b08      	ldr	r3, [sp, #32]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f340 8293 	ble.w	800811a <_dtoa_r+0xa0a>
 8007bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f040 81f4 	bne.w	8007fe4 <_dtoa_r+0x8d4>
 8007bfc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8007c00:	9f08      	ldr	r7, [sp, #32]
 8007c02:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007c06:	465d      	mov	r5, fp
 8007c08:	e002      	b.n	8007c10 <_dtoa_r+0x500>
 8007c0a:	f000 ff8b 	bl	8008b24 <__multadd>
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4641      	mov	r1, r8
 8007c12:	4620      	mov	r0, r4
 8007c14:	f7ff fce6 	bl	80075e4 <quorem>
 8007c18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c1c:	f805 ab01 	strb.w	sl, [r5], #1
 8007c20:	ebcb 0305 	rsb	r3, fp, r5
 8007c24:	42bb      	cmp	r3, r7
 8007c26:	f04f 020a 	mov.w	r2, #10
 8007c2a:	f04f 0300 	mov.w	r3, #0
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4648      	mov	r0, r9
 8007c32:	dbea      	blt.n	8007c0a <_dtoa_r+0x4fa>
 8007c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c36:	9a08      	ldr	r2, [sp, #32]
 8007c38:	2a01      	cmp	r2, #1
 8007c3a:	bfac      	ite	ge
 8007c3c:	189b      	addge	r3, r3, r2
 8007c3e:	3301      	addlt	r3, #1
 8007c40:	461d      	mov	r5, r3
 8007c42:	f04f 0b00 	mov.w	fp, #0
 8007c46:	4621      	mov	r1, r4
 8007c48:	2201      	movs	r2, #1
 8007c4a:	4648      	mov	r0, r9
 8007c4c:	f001 f8ea 	bl	8008e24 <__lshift>
 8007c50:	9906      	ldr	r1, [sp, #24]
 8007c52:	900a      	str	r0, [sp, #40]	; 0x28
 8007c54:	f001 f93e 	bl	8008ed4 <__mcmp>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f340 8305 	ble.w	8008268 <_dtoa_r+0xb58>
 8007c5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c64:	1e6b      	subs	r3, r5, #1
 8007c66:	e004      	b.n	8007c72 <_dtoa_r+0x562>
 8007c68:	428b      	cmp	r3, r1
 8007c6a:	f000 8274 	beq.w	8008156 <_dtoa_r+0xa46>
 8007c6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c72:	2a39      	cmp	r2, #57	; 0x39
 8007c74:	f103 0501 	add.w	r5, r3, #1
 8007c78:	d0f6      	beq.n	8007c68 <_dtoa_r+0x558>
 8007c7a:	3201      	adds	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	9906      	ldr	r1, [sp, #24]
 8007c80:	4648      	mov	r0, r9
 8007c82:	f000 ff45 	bl	8008b10 <_Bfree>
 8007c86:	2e00      	cmp	r6, #0
 8007c88:	f43f af0d 	beq.w	8007aa6 <_dtoa_r+0x396>
 8007c8c:	f1bb 0f00 	cmp.w	fp, #0
 8007c90:	d005      	beq.n	8007c9e <_dtoa_r+0x58e>
 8007c92:	45b3      	cmp	fp, r6
 8007c94:	d003      	beq.n	8007c9e <_dtoa_r+0x58e>
 8007c96:	4659      	mov	r1, fp
 8007c98:	4648      	mov	r0, r9
 8007c9a:	f000 ff39 	bl	8008b10 <_Bfree>
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	f000 ff35 	bl	8008b10 <_Bfree>
 8007ca6:	e6fe      	b.n	8007aa6 <_dtoa_r+0x396>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	930d      	str	r3, [sp, #52]	; 0x34
 8007cac:	e5eb      	b.n	8007886 <_dtoa_r+0x176>
 8007cae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	f7f8 fc28 	bl	8000508 <__aeabi_i2d>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	f7f9 f854 	bl	8000d6c <__aeabi_dcmpeq>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f47f adca 	bne.w	800785e <_dtoa_r+0x14e>
 8007cca:	f108 33ff 	add.w	r3, r8, #4294967295
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	e5c5      	b.n	800785e <_dtoa_r+0x14e>
 8007cd2:	9a07      	ldr	r2, [sp, #28]
 8007cd4:	9b04      	ldr	r3, [sp, #16]
 8007cd6:	1ad2      	subs	r2, r2, r3
 8007cd8:	425b      	negs	r3, r3
 8007cda:	9306      	str	r3, [sp, #24]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	9207      	str	r2, [sp, #28]
 8007ce0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ce2:	e5df      	b.n	80078a4 <_dtoa_r+0x194>
 8007ce4:	f1c8 0300 	rsb	r3, r8, #0
 8007ce8:	9307      	str	r3, [sp, #28]
 8007cea:	f04f 0800 	mov.w	r8, #0
 8007cee:	e5d1      	b.n	8007894 <_dtoa_r+0x184>
 8007cf0:	9f06      	ldr	r7, [sp, #24]
 8007cf2:	9d07      	ldr	r5, [sp, #28]
 8007cf4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007cf6:	e707      	b.n	8007b08 <_dtoa_r+0x3f8>
 8007cf8:	f1c3 0420 	rsb	r4, r3, #32
 8007cfc:	fa0a f004 	lsl.w	r0, sl, r4
 8007d00:	e57a      	b.n	80077f8 <_dtoa_r+0xe8>
 8007d02:	900d      	str	r0, [sp, #52]	; 0x34
 8007d04:	e5bf      	b.n	8007886 <_dtoa_r+0x176>
 8007d06:	bf00      	nop
 8007d08:	40240000 	.word	0x40240000
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d10:	9b04      	ldr	r3, [sp, #16]
 8007d12:	9a05      	ldr	r2, [sp, #20]
 8007d14:	4413      	add	r3, r2
 8007d16:	930e      	str	r3, [sp, #56]	; 0x38
 8007d18:	3301      	adds	r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	9308      	str	r3, [sp, #32]
 8007d1e:	f340 827d 	ble.w	800821c <_dtoa_r+0xb0c>
 8007d22:	9c08      	ldr	r4, [sp, #32]
 8007d24:	4625      	mov	r5, r4
 8007d26:	2100      	movs	r1, #0
 8007d28:	2d17      	cmp	r5, #23
 8007d2a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007d2e:	d90b      	bls.n	8007d48 <_dtoa_r+0x638>
 8007d30:	2201      	movs	r2, #1
 8007d32:	2304      	movs	r3, #4
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	f103 0014 	add.w	r0, r3, #20
 8007d3a:	42a8      	cmp	r0, r5
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	f102 0201 	add.w	r2, r2, #1
 8007d42:	d9f7      	bls.n	8007d34 <_dtoa_r+0x624>
 8007d44:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007d48:	4648      	mov	r0, r9
 8007d4a:	f000 febb 	bl	8008ac4 <_Balloc>
 8007d4e:	2c0e      	cmp	r4, #14
 8007d50:	9009      	str	r0, [sp, #36]	; 0x24
 8007d52:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007d56:	f63f ade5 	bhi.w	8007924 <_dtoa_r+0x214>
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	f43f ade2 	beq.w	8007924 <_dtoa_r+0x214>
 8007d60:	9904      	ldr	r1, [sp, #16]
 8007d62:	2900      	cmp	r1, #0
 8007d64:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8007d68:	f340 829a 	ble.w	80082a0 <_dtoa_r+0xb90>
 8007d6c:	4b90      	ldr	r3, [pc, #576]	; (8007fb0 <_dtoa_r+0x8a0>)
 8007d6e:	f001 020f 	and.w	r2, r1, #15
 8007d72:	110e      	asrs	r6, r1, #4
 8007d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d78:	06f0      	lsls	r0, r6, #27
 8007d7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007d7e:	f140 8246 	bpl.w	800820e <_dtoa_r+0xafe>
 8007d82:	4b8c      	ldr	r3, [pc, #560]	; (8007fb4 <_dtoa_r+0x8a4>)
 8007d84:	4650      	mov	r0, sl
 8007d86:	4659      	mov	r1, fp
 8007d88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d8c:	f7f8 feb0 	bl	8000af0 <__aeabi_ddiv>
 8007d90:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8007d94:	f006 060f 	and.w	r6, r6, #15
 8007d98:	f04f 0a03 	mov.w	sl, #3
 8007d9c:	b186      	cbz	r6, 8007dc0 <_dtoa_r+0x6b0>
 8007d9e:	4f85      	ldr	r7, [pc, #532]	; (8007fb4 <_dtoa_r+0x8a4>)
 8007da0:	07f1      	lsls	r1, r6, #31
 8007da2:	d509      	bpl.n	8007db8 <_dtoa_r+0x6a8>
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dac:	f7f8 fd76 	bl	800089c <__aeabi_dmul>
 8007db0:	f10a 0a01 	add.w	sl, sl, #1
 8007db4:	4604      	mov	r4, r0
 8007db6:	460d      	mov	r5, r1
 8007db8:	1076      	asrs	r6, r6, #1
 8007dba:	f107 0708 	add.w	r7, r7, #8
 8007dbe:	d1ef      	bne.n	8007da0 <_dtoa_r+0x690>
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	462b      	mov	r3, r5
 8007dc4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007dc8:	f7f8 fe92 	bl	8000af0 <__aeabi_ddiv>
 8007dcc:	4606      	mov	r6, r0
 8007dce:	460f      	mov	r7, r1
 8007dd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dd2:	b143      	cbz	r3, 8007de6 <_dtoa_r+0x6d6>
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4b78      	ldr	r3, [pc, #480]	; (8007fb8 <_dtoa_r+0x8a8>)
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 ffd0 	bl	8000d80 <__aeabi_dcmplt>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	f040 831a 	bne.w	800841a <_dtoa_r+0xd0a>
 8007de6:	4650      	mov	r0, sl
 8007de8:	f7f8 fb8e 	bl	8000508 <__aeabi_i2d>
 8007dec:	4632      	mov	r2, r6
 8007dee:	463b      	mov	r3, r7
 8007df0:	f7f8 fd54 	bl	800089c <__aeabi_dmul>
 8007df4:	4b71      	ldr	r3, [pc, #452]	; (8007fbc <_dtoa_r+0x8ac>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	f7f8 fa3a 	bl	8000270 <__adddf3>
 8007dfc:	9b08      	ldr	r3, [sp, #32]
 8007dfe:	4604      	mov	r4, r0
 8007e00:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 81db 	beq.w	80081c0 <_dtoa_r+0xab0>
 8007e0a:	9b04      	ldr	r3, [sp, #16]
 8007e0c:	9316      	str	r3, [sp, #88]	; 0x58
 8007e0e:	9b08      	ldr	r3, [sp, #32]
 8007e10:	9312      	str	r3, [sp, #72]	; 0x48
 8007e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8294 	beq.w	8008342 <_dtoa_r+0xc32>
 8007e1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e1c:	4b64      	ldr	r3, [pc, #400]	; (8007fb0 <_dtoa_r+0x8a0>)
 8007e1e:	4968      	ldr	r1, [pc, #416]	; (8007fc0 <_dtoa_r+0x8b0>)
 8007e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e28:	2000      	movs	r0, #0
 8007e2a:	f7f8 fe61 	bl	8000af0 <__aeabi_ddiv>
 8007e2e:	4622      	mov	r2, r4
 8007e30:	462b      	mov	r3, r5
 8007e32:	f7f8 fa1b 	bl	800026c <__aeabi_dsub>
 8007e36:	4682      	mov	sl, r0
 8007e38:	468b      	mov	fp, r1
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	f7f8 ffc7 	bl	8000dd0 <__aeabi_d2iz>
 8007e42:	4604      	mov	r4, r0
 8007e44:	f7f8 fb60 	bl	8000508 <__aeabi_i2d>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f7f8 fa0c 	bl	800026c <__aeabi_dsub>
 8007e54:	3430      	adds	r4, #48	; 0x30
 8007e56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e58:	b2e4      	uxtb	r4, r4
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	702c      	strb	r4, [r5, #0]
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4650      	mov	r0, sl
 8007e66:	4659      	mov	r1, fp
 8007e68:	3501      	adds	r5, #1
 8007e6a:	f7f8 ffa7 	bl	8000dbc <__aeabi_dcmpgt>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d150      	bne.n	8007f14 <_dtoa_r+0x804>
 8007e72:	4632      	mov	r2, r6
 8007e74:	463b      	mov	r3, r7
 8007e76:	2000      	movs	r0, #0
 8007e78:	494f      	ldr	r1, [pc, #316]	; (8007fb8 <_dtoa_r+0x8a8>)
 8007e7a:	f7f8 f9f7 	bl	800026c <__aeabi_dsub>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4650      	mov	r0, sl
 8007e84:	4659      	mov	r1, fp
 8007e86:	f7f8 ff99 	bl	8000dbc <__aeabi_dcmpgt>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f040 8308 	bne.w	80084a0 <_dtoa_r+0xd90>
 8007e90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e92:	2a01      	cmp	r2, #1
 8007e94:	f340 81f7 	ble.w	8008286 <_dtoa_r+0xb76>
 8007e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e9c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8007ea0:	4413      	add	r3, r2
 8007ea2:	4698      	mov	r8, r3
 8007ea4:	e00d      	b.n	8007ec2 <_dtoa_r+0x7b2>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	4943      	ldr	r1, [pc, #268]	; (8007fb8 <_dtoa_r+0x8a8>)
 8007eaa:	f7f8 f9df 	bl	800026c <__aeabi_dsub>
 8007eae:	4652      	mov	r2, sl
 8007eb0:	465b      	mov	r3, fp
 8007eb2:	f7f8 ff65 	bl	8000d80 <__aeabi_dcmplt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f040 82f2 	bne.w	80084a0 <_dtoa_r+0xd90>
 8007ebc:	4545      	cmp	r5, r8
 8007ebe:	f000 81e0 	beq.w	8008282 <_dtoa_r+0xb72>
 8007ec2:	4650      	mov	r0, sl
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	4b3e      	ldr	r3, [pc, #248]	; (8007fc4 <_dtoa_r+0x8b4>)
 8007eca:	f7f8 fce7 	bl	800089c <__aeabi_dmul>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	4b3c      	ldr	r3, [pc, #240]	; (8007fc4 <_dtoa_r+0x8b4>)
 8007ed2:	4682      	mov	sl, r0
 8007ed4:	468b      	mov	fp, r1
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	4639      	mov	r1, r7
 8007eda:	f7f8 fcdf 	bl	800089c <__aeabi_dmul>
 8007ede:	460f      	mov	r7, r1
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	f7f8 ff75 	bl	8000dd0 <__aeabi_d2iz>
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	f7f8 fb0e 	bl	8000508 <__aeabi_i2d>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f7f8 f9ba 	bl	800026c <__aeabi_dsub>
 8007ef8:	3430      	adds	r4, #48	; 0x30
 8007efa:	b2e4      	uxtb	r4, r4
 8007efc:	4652      	mov	r2, sl
 8007efe:	465b      	mov	r3, fp
 8007f00:	f805 4b01 	strb.w	r4, [r5], #1
 8007f04:	4606      	mov	r6, r0
 8007f06:	460f      	mov	r7, r1
 8007f08:	f7f8 ff3a 	bl	8000d80 <__aeabi_dcmplt>
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	463b      	mov	r3, r7
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d0c8      	beq.n	8007ea6 <_dtoa_r+0x796>
 8007f14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f16:	9304      	str	r3, [sp, #16]
 8007f18:	e5c5      	b.n	8007aa6 <_dtoa_r+0x396>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f1e:	9b05      	ldr	r3, [sp, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f340 8180 	ble.w	8008226 <_dtoa_r+0xb16>
 8007f26:	461d      	mov	r5, r3
 8007f28:	461c      	mov	r4, r3
 8007f2a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f2c:	9308      	str	r3, [sp, #32]
 8007f2e:	e6fa      	b.n	8007d26 <_dtoa_r+0x616>
 8007f30:	2301      	movs	r3, #1
 8007f32:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f34:	e7f3      	b.n	8007f1e <_dtoa_r+0x80e>
 8007f36:	940a      	str	r4, [sp, #40]	; 0x28
 8007f38:	9a06      	ldr	r2, [sp, #24]
 8007f3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f3c:	4648      	mov	r0, r9
 8007f3e:	f000 ff21 	bl	8008d84 <__pow5mult>
 8007f42:	4604      	mov	r4, r0
 8007f44:	e60e      	b.n	8007b64 <_dtoa_r+0x454>
 8007f46:	9b08      	ldr	r3, [sp, #32]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f73f acfe 	bgt.w	800794a <_dtoa_r+0x23a>
 8007f4e:	f040 814f 	bne.w	80081f0 <_dtoa_r+0xae0>
 8007f52:	2200      	movs	r2, #0
 8007f54:	4b1c      	ldr	r3, [pc, #112]	; (8007fc8 <_dtoa_r+0x8b8>)
 8007f56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f5a:	f7f8 fc9f 	bl	800089c <__aeabi_dmul>
 8007f5e:	465b      	mov	r3, fp
 8007f60:	4652      	mov	r2, sl
 8007f62:	f7f8 ff21 	bl	8000da8 <__aeabi_dcmpge>
 8007f66:	9b08      	ldr	r3, [sp, #32]
 8007f68:	9306      	str	r3, [sp, #24]
 8007f6a:	461e      	mov	r6, r3
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f000 80ea 	beq.w	8008146 <_dtoa_r+0xa36>
 8007f72:	9b05      	ldr	r3, [sp, #20]
 8007f74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007f76:	43db      	mvns	r3, r3
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	9906      	ldr	r1, [sp, #24]
 8007f7c:	4648      	mov	r0, r9
 8007f7e:	f000 fdc7 	bl	8008b10 <_Bfree>
 8007f82:	2e00      	cmp	r6, #0
 8007f84:	f43f ad8f 	beq.w	8007aa6 <_dtoa_r+0x396>
 8007f88:	e689      	b.n	8007c9e <_dtoa_r+0x58e>
 8007f8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	f000 8238 	beq.w	8008402 <_dtoa_r+0xcf2>
 8007f92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f96:	9f06      	ldr	r7, [sp, #24]
 8007f98:	9d07      	ldr	r5, [sp, #28]
 8007f9a:	e5ac      	b.n	8007af6 <_dtoa_r+0x3e6>
 8007f9c:	201c      	movs	r0, #28
 8007f9e:	e60a      	b.n	8007bb6 <_dtoa_r+0x4a6>
 8007fa0:	9b00      	ldr	r3, [sp, #0]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	f340 8280 	ble.w	80084a8 <_dtoa_r+0xd98>
 8007fa8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007faa:	2001      	movs	r0, #1
 8007fac:	e5f7      	b.n	8007b9e <_dtoa_r+0x48e>
 8007fae:	bf00      	nop
 8007fb0:	08009ae8 	.word	0x08009ae8
 8007fb4:	08009bb0 	.word	0x08009bb0
 8007fb8:	3ff00000 	.word	0x3ff00000
 8007fbc:	401c0000 	.word	0x401c0000
 8007fc0:	3fe00000 	.word	0x3fe00000
 8007fc4:	40240000 	.word	0x40240000
 8007fc8:	40140000 	.word	0x40140000
 8007fcc:	4631      	mov	r1, r6
 8007fce:	2300      	movs	r3, #0
 8007fd0:	220a      	movs	r2, #10
 8007fd2:	4648      	mov	r0, r9
 8007fd4:	f000 fda6 	bl	8008b24 <__multadd>
 8007fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	4606      	mov	r6, r0
 8007fde:	f340 828d 	ble.w	80084fc <_dtoa_r+0xdec>
 8007fe2:	9308      	str	r3, [sp, #32]
 8007fe4:	2d00      	cmp	r5, #0
 8007fe6:	dd05      	ble.n	8007ff4 <_dtoa_r+0x8e4>
 8007fe8:	4631      	mov	r1, r6
 8007fea:	462a      	mov	r2, r5
 8007fec:	4648      	mov	r0, r9
 8007fee:	f000 ff19 	bl	8008e24 <__lshift>
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	2f00      	cmp	r7, #0
 8007ff6:	f040 817c 	bne.w	80082f2 <_dtoa_r+0xbe2>
 8007ffa:	46b0      	mov	r8, r6
 8007ffc:	9b08      	ldr	r3, [sp, #32]
 8007ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008000:	3b01      	subs	r3, #1
 8008002:	18d3      	adds	r3, r2, r3
 8008004:	9308      	str	r3, [sp, #32]
 8008006:	f00a 0301 	and.w	r3, sl, #1
 800800a:	930a      	str	r3, [sp, #40]	; 0x28
 800800c:	4617      	mov	r7, r2
 800800e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8008012:	4620      	mov	r0, r4
 8008014:	4659      	mov	r1, fp
 8008016:	f7ff fae5 	bl	80075e4 <quorem>
 800801a:	4631      	mov	r1, r6
 800801c:	4605      	mov	r5, r0
 800801e:	4620      	mov	r0, r4
 8008020:	f000 ff58 	bl	8008ed4 <__mcmp>
 8008024:	4642      	mov	r2, r8
 8008026:	4659      	mov	r1, fp
 8008028:	4682      	mov	sl, r0
 800802a:	4648      	mov	r0, r9
 800802c:	f000 ff74 	bl	8008f18 <__mdiff>
 8008030:	68c2      	ldr	r2, [r0, #12]
 8008032:	4683      	mov	fp, r0
 8008034:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8008038:	2a00      	cmp	r2, #0
 800803a:	d149      	bne.n	80080d0 <_dtoa_r+0x9c0>
 800803c:	4601      	mov	r1, r0
 800803e:	4620      	mov	r0, r4
 8008040:	9307      	str	r3, [sp, #28]
 8008042:	f000 ff47 	bl	8008ed4 <__mcmp>
 8008046:	4659      	mov	r1, fp
 8008048:	9005      	str	r0, [sp, #20]
 800804a:	4648      	mov	r0, r9
 800804c:	f000 fd60 	bl	8008b10 <_Bfree>
 8008050:	9a05      	ldr	r2, [sp, #20]
 8008052:	9b07      	ldr	r3, [sp, #28]
 8008054:	b92a      	cbnz	r2, 8008062 <_dtoa_r+0x952>
 8008056:	9900      	ldr	r1, [sp, #0]
 8008058:	b919      	cbnz	r1, 8008062 <_dtoa_r+0x952>
 800805a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800805c:	2900      	cmp	r1, #0
 800805e:	f000 8235 	beq.w	80084cc <_dtoa_r+0xdbc>
 8008062:	f1ba 0f00 	cmp.w	sl, #0
 8008066:	f2c0 80e3 	blt.w	8008230 <_dtoa_r+0xb20>
 800806a:	d105      	bne.n	8008078 <_dtoa_r+0x968>
 800806c:	9900      	ldr	r1, [sp, #0]
 800806e:	b919      	cbnz	r1, 8008078 <_dtoa_r+0x968>
 8008070:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008072:	2900      	cmp	r1, #0
 8008074:	f000 80dc 	beq.w	8008230 <_dtoa_r+0xb20>
 8008078:	2a00      	cmp	r2, #0
 800807a:	f300 814e 	bgt.w	800831a <_dtoa_r+0xc0a>
 800807e:	9a08      	ldr	r2, [sp, #32]
 8008080:	703b      	strb	r3, [r7, #0]
 8008082:	f107 0a01 	add.w	sl, r7, #1
 8008086:	4297      	cmp	r7, r2
 8008088:	4655      	mov	r5, sl
 800808a:	f000 8152 	beq.w	8008332 <_dtoa_r+0xc22>
 800808e:	4621      	mov	r1, r4
 8008090:	2300      	movs	r3, #0
 8008092:	220a      	movs	r2, #10
 8008094:	4648      	mov	r0, r9
 8008096:	f000 fd45 	bl	8008b24 <__multadd>
 800809a:	4546      	cmp	r6, r8
 800809c:	4604      	mov	r4, r0
 800809e:	4631      	mov	r1, r6
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	f04f 020a 	mov.w	r2, #10
 80080a8:	4648      	mov	r0, r9
 80080aa:	d00b      	beq.n	80080c4 <_dtoa_r+0x9b4>
 80080ac:	f000 fd3a 	bl	8008b24 <__multadd>
 80080b0:	4641      	mov	r1, r8
 80080b2:	4606      	mov	r6, r0
 80080b4:	2300      	movs	r3, #0
 80080b6:	220a      	movs	r2, #10
 80080b8:	4648      	mov	r0, r9
 80080ba:	f000 fd33 	bl	8008b24 <__multadd>
 80080be:	4657      	mov	r7, sl
 80080c0:	4680      	mov	r8, r0
 80080c2:	e7a4      	b.n	800800e <_dtoa_r+0x8fe>
 80080c4:	f000 fd2e 	bl	8008b24 <__multadd>
 80080c8:	4657      	mov	r7, sl
 80080ca:	4606      	mov	r6, r0
 80080cc:	4680      	mov	r8, r0
 80080ce:	e79e      	b.n	800800e <_dtoa_r+0x8fe>
 80080d0:	4601      	mov	r1, r0
 80080d2:	4648      	mov	r0, r9
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	f000 fd1b 	bl	8008b10 <_Bfree>
 80080da:	2201      	movs	r2, #1
 80080dc:	9b05      	ldr	r3, [sp, #20]
 80080de:	e7c0      	b.n	8008062 <_dtoa_r+0x952>
 80080e0:	9906      	ldr	r1, [sp, #24]
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fef6 	bl	8008ed4 <__mcmp>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	f6bf ad7f 	bge.w	8007bec <_dtoa_r+0x4dc>
 80080ee:	4621      	mov	r1, r4
 80080f0:	9c04      	ldr	r4, [sp, #16]
 80080f2:	2300      	movs	r3, #0
 80080f4:	3c01      	subs	r4, #1
 80080f6:	220a      	movs	r2, #10
 80080f8:	4648      	mov	r0, r9
 80080fa:	9404      	str	r4, [sp, #16]
 80080fc:	f000 fd12 	bl	8008b24 <__multadd>
 8008100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008102:	4604      	mov	r4, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	f47f af61 	bne.w	8007fcc <_dtoa_r+0x8bc>
 800810a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800810c:	2b00      	cmp	r3, #0
 800810e:	f340 81ed 	ble.w	80084ec <_dtoa_r+0xddc>
 8008112:	9308      	str	r3, [sp, #32]
 8008114:	e572      	b.n	8007bfc <_dtoa_r+0x4ec>
 8008116:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008118:	e524      	b.n	8007b64 <_dtoa_r+0x454>
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	2b02      	cmp	r3, #2
 800811e:	f77f ad69 	ble.w	8007bf4 <_dtoa_r+0x4e4>
 8008122:	9b08      	ldr	r3, [sp, #32]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 819d 	bne.w	8008464 <_dtoa_r+0xd54>
 800812a:	9906      	ldr	r1, [sp, #24]
 800812c:	2205      	movs	r2, #5
 800812e:	4648      	mov	r0, r9
 8008130:	f000 fcf8 	bl	8008b24 <__multadd>
 8008134:	4601      	mov	r1, r0
 8008136:	9006      	str	r0, [sp, #24]
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fecb 	bl	8008ed4 <__mcmp>
 800813e:	2800      	cmp	r0, #0
 8008140:	940a      	str	r4, [sp, #40]	; 0x28
 8008142:	f77f af16 	ble.w	8007f72 <_dtoa_r+0x862>
 8008146:	9a04      	ldr	r2, [sp, #16]
 8008148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800814a:	2331      	movs	r3, #49	; 0x31
 800814c:	3201      	adds	r2, #1
 800814e:	9204      	str	r2, [sp, #16]
 8008150:	700b      	strb	r3, [r1, #0]
 8008152:	1c4d      	adds	r5, r1, #1
 8008154:	e711      	b.n	8007f7a <_dtoa_r+0x86a>
 8008156:	9a04      	ldr	r2, [sp, #16]
 8008158:	3201      	adds	r2, #1
 800815a:	9204      	str	r2, [sp, #16]
 800815c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800815e:	2331      	movs	r3, #49	; 0x31
 8008160:	7013      	strb	r3, [r2, #0]
 8008162:	e58c      	b.n	8007c7e <_dtoa_r+0x56e>
 8008164:	2301      	movs	r3, #1
 8008166:	930b      	str	r3, [sp, #44]	; 0x2c
 8008168:	e5d2      	b.n	8007d10 <_dtoa_r+0x600>
 800816a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800816e:	e49a      	b.n	8007aa6 <_dtoa_r+0x396>
 8008170:	f1ba 0f00 	cmp.w	sl, #0
 8008174:	f47f ad09 	bne.w	8007b8a <_dtoa_r+0x47a>
 8008178:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800817c:	2b00      	cmp	r3, #0
 800817e:	f040 813e 	bne.w	80083fe <_dtoa_r+0xcee>
 8008182:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8008186:	0d3f      	lsrs	r7, r7, #20
 8008188:	053f      	lsls	r7, r7, #20
 800818a:	b12f      	cbz	r7, 8008198 <_dtoa_r+0xa88>
 800818c:	9b07      	ldr	r3, [sp, #28]
 800818e:	3301      	adds	r3, #1
 8008190:	9307      	str	r3, [sp, #28]
 8008192:	f108 0801 	add.w	r8, r8, #1
 8008196:	2701      	movs	r7, #1
 8008198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800819a:	2001      	movs	r0, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	f43f acfe 	beq.w	8007b9e <_dtoa_r+0x48e>
 80081a2:	e4f3      	b.n	8007b8c <_dtoa_r+0x47c>
 80081a4:	4650      	mov	r0, sl
 80081a6:	f7f8 f9af 	bl	8000508 <__aeabi_i2d>
 80081aa:	4632      	mov	r2, r6
 80081ac:	463b      	mov	r3, r7
 80081ae:	f7f8 fb75 	bl	800089c <__aeabi_dmul>
 80081b2:	2200      	movs	r2, #0
 80081b4:	4bbf      	ldr	r3, [pc, #764]	; (80084b4 <_dtoa_r+0xda4>)
 80081b6:	f7f8 f85b 	bl	8000270 <__adddf3>
 80081ba:	4604      	mov	r4, r0
 80081bc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80081c0:	4630      	mov	r0, r6
 80081c2:	4639      	mov	r1, r7
 80081c4:	2200      	movs	r2, #0
 80081c6:	4bbc      	ldr	r3, [pc, #752]	; (80084b8 <_dtoa_r+0xda8>)
 80081c8:	f7f8 f850 	bl	800026c <__aeabi_dsub>
 80081cc:	4622      	mov	r2, r4
 80081ce:	462b      	mov	r3, r5
 80081d0:	4606      	mov	r6, r0
 80081d2:	460f      	mov	r7, r1
 80081d4:	f7f8 fdf2 	bl	8000dbc <__aeabi_dcmpgt>
 80081d8:	2800      	cmp	r0, #0
 80081da:	f040 80ae 	bne.w	800833a <_dtoa_r+0xc2a>
 80081de:	4622      	mov	r2, r4
 80081e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80081e4:	4630      	mov	r0, r6
 80081e6:	4639      	mov	r1, r7
 80081e8:	f7f8 fdca 	bl	8000d80 <__aeabi_dcmplt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d04a      	beq.n	8008286 <_dtoa_r+0xb76>
 80081f0:	2300      	movs	r3, #0
 80081f2:	9306      	str	r3, [sp, #24]
 80081f4:	461e      	mov	r6, r3
 80081f6:	e6bc      	b.n	8007f72 <_dtoa_r+0x862>
 80081f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081fa:	f7ff bac2 	b.w	8007782 <_dtoa_r+0x72>
 80081fe:	9b06      	ldr	r3, [sp, #24]
 8008200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008202:	9706      	str	r7, [sp, #24]
 8008204:	1afb      	subs	r3, r7, r3
 8008206:	441a      	add	r2, r3
 8008208:	920c      	str	r2, [sp, #48]	; 0x30
 800820a:	2700      	movs	r7, #0
 800820c:	e46d      	b.n	8007aea <_dtoa_r+0x3da>
 800820e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8008212:	f04f 0a02 	mov.w	sl, #2
 8008216:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800821a:	e5bf      	b.n	8007d9c <_dtoa_r+0x68c>
 800821c:	461c      	mov	r4, r3
 800821e:	2100      	movs	r1, #0
 8008220:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8008224:	e590      	b.n	8007d48 <_dtoa_r+0x638>
 8008226:	2401      	movs	r4, #1
 8008228:	940e      	str	r4, [sp, #56]	; 0x38
 800822a:	9408      	str	r4, [sp, #32]
 800822c:	9405      	str	r4, [sp, #20]
 800822e:	e7f6      	b.n	800821e <_dtoa_r+0xb0e>
 8008230:	2a00      	cmp	r2, #0
 8008232:	469a      	mov	sl, r3
 8008234:	dd11      	ble.n	800825a <_dtoa_r+0xb4a>
 8008236:	4621      	mov	r1, r4
 8008238:	2201      	movs	r2, #1
 800823a:	4648      	mov	r0, r9
 800823c:	f000 fdf2 	bl	8008e24 <__lshift>
 8008240:	9906      	ldr	r1, [sp, #24]
 8008242:	4604      	mov	r4, r0
 8008244:	f000 fe46 	bl	8008ed4 <__mcmp>
 8008248:	2800      	cmp	r0, #0
 800824a:	f340 8148 	ble.w	80084de <_dtoa_r+0xdce>
 800824e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008252:	f000 8109 	beq.w	8008468 <_dtoa_r+0xd58>
 8008256:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800825a:	46b3      	mov	fp, r6
 800825c:	f887 a000 	strb.w	sl, [r7]
 8008260:	1c7d      	adds	r5, r7, #1
 8008262:	4646      	mov	r6, r8
 8008264:	940a      	str	r4, [sp, #40]	; 0x28
 8008266:	e50a      	b.n	8007c7e <_dtoa_r+0x56e>
 8008268:	d104      	bne.n	8008274 <_dtoa_r+0xb64>
 800826a:	f01a 0f01 	tst.w	sl, #1
 800826e:	d001      	beq.n	8008274 <_dtoa_r+0xb64>
 8008270:	e4f5      	b.n	8007c5e <_dtoa_r+0x54e>
 8008272:	4615      	mov	r5, r2
 8008274:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008278:	2b30      	cmp	r3, #48	; 0x30
 800827a:	f105 32ff 	add.w	r2, r5, #4294967295
 800827e:	d0f8      	beq.n	8008272 <_dtoa_r+0xb62>
 8008280:	e4fd      	b.n	8007c7e <_dtoa_r+0x56e>
 8008282:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8008286:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 800828a:	f7ff bb4b 	b.w	8007924 <_dtoa_r+0x214>
 800828e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008290:	2230      	movs	r2, #48	; 0x30
 8008292:	700a      	strb	r2, [r1, #0]
 8008294:	9a04      	ldr	r2, [sp, #16]
 8008296:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800829a:	3201      	adds	r2, #1
 800829c:	9204      	str	r2, [sp, #16]
 800829e:	e400      	b.n	8007aa2 <_dtoa_r+0x392>
 80082a0:	9b04      	ldr	r3, [sp, #16]
 80082a2:	425c      	negs	r4, r3
 80082a4:	2c00      	cmp	r4, #0
 80082a6:	f000 80b3 	beq.w	8008410 <_dtoa_r+0xd00>
 80082aa:	4b84      	ldr	r3, [pc, #528]	; (80084bc <_dtoa_r+0xdac>)
 80082ac:	f004 020f 	and.w	r2, r4, #15
 80082b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082bc:	f7f8 faee 	bl	800089c <__aeabi_dmul>
 80082c0:	1124      	asrs	r4, r4, #4
 80082c2:	4606      	mov	r6, r0
 80082c4:	460f      	mov	r7, r1
 80082c6:	f000 8116 	beq.w	80084f6 <_dtoa_r+0xde6>
 80082ca:	4d7d      	ldr	r5, [pc, #500]	; (80084c0 <_dtoa_r+0xdb0>)
 80082cc:	f04f 0a02 	mov.w	sl, #2
 80082d0:	07e2      	lsls	r2, r4, #31
 80082d2:	d509      	bpl.n	80082e8 <_dtoa_r+0xbd8>
 80082d4:	4630      	mov	r0, r6
 80082d6:	4639      	mov	r1, r7
 80082d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082dc:	f7f8 fade 	bl	800089c <__aeabi_dmul>
 80082e0:	f10a 0a01 	add.w	sl, sl, #1
 80082e4:	4606      	mov	r6, r0
 80082e6:	460f      	mov	r7, r1
 80082e8:	1064      	asrs	r4, r4, #1
 80082ea:	f105 0508 	add.w	r5, r5, #8
 80082ee:	d1ef      	bne.n	80082d0 <_dtoa_r+0xbc0>
 80082f0:	e56e      	b.n	8007dd0 <_dtoa_r+0x6c0>
 80082f2:	6871      	ldr	r1, [r6, #4]
 80082f4:	4648      	mov	r0, r9
 80082f6:	f000 fbe5 	bl	8008ac4 <_Balloc>
 80082fa:	6933      	ldr	r3, [r6, #16]
 80082fc:	1c9a      	adds	r2, r3, #2
 80082fe:	4605      	mov	r5, r0
 8008300:	0092      	lsls	r2, r2, #2
 8008302:	f106 010c 	add.w	r1, r6, #12
 8008306:	300c      	adds	r0, #12
 8008308:	f7f8 f964 	bl	80005d4 <memcpy>
 800830c:	4629      	mov	r1, r5
 800830e:	2201      	movs	r2, #1
 8008310:	4648      	mov	r0, r9
 8008312:	f000 fd87 	bl	8008e24 <__lshift>
 8008316:	4680      	mov	r8, r0
 8008318:	e670      	b.n	8007ffc <_dtoa_r+0x8ec>
 800831a:	2b39      	cmp	r3, #57	; 0x39
 800831c:	f000 80a4 	beq.w	8008468 <_dtoa_r+0xd58>
 8008320:	f103 0a01 	add.w	sl, r3, #1
 8008324:	46b3      	mov	fp, r6
 8008326:	f887 a000 	strb.w	sl, [r7]
 800832a:	1c7d      	adds	r5, r7, #1
 800832c:	4646      	mov	r6, r8
 800832e:	940a      	str	r4, [sp, #40]	; 0x28
 8008330:	e4a5      	b.n	8007c7e <_dtoa_r+0x56e>
 8008332:	46b3      	mov	fp, r6
 8008334:	469a      	mov	sl, r3
 8008336:	4646      	mov	r6, r8
 8008338:	e485      	b.n	8007c46 <_dtoa_r+0x536>
 800833a:	2300      	movs	r3, #0
 800833c:	9306      	str	r3, [sp, #24]
 800833e:	461e      	mov	r6, r3
 8008340:	e701      	b.n	8008146 <_dtoa_r+0xa36>
 8008342:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008344:	495d      	ldr	r1, [pc, #372]	; (80084bc <_dtoa_r+0xdac>)
 8008346:	1e5a      	subs	r2, r3, #1
 8008348:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800834c:	462b      	mov	r3, r5
 800834e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008354:	4622      	mov	r2, r4
 8008356:	f7f8 faa1 	bl	800089c <__aeabi_dmul>
 800835a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800835e:	4639      	mov	r1, r7
 8008360:	4630      	mov	r0, r6
 8008362:	f7f8 fd35 	bl	8000dd0 <__aeabi_d2iz>
 8008366:	4604      	mov	r4, r0
 8008368:	f7f8 f8ce 	bl	8000508 <__aeabi_i2d>
 800836c:	460b      	mov	r3, r1
 800836e:	4602      	mov	r2, r0
 8008370:	4639      	mov	r1, r7
 8008372:	4630      	mov	r0, r6
 8008374:	f7f7 ff7a 	bl	800026c <__aeabi_dsub>
 8008378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800837a:	460f      	mov	r7, r1
 800837c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800837e:	3430      	adds	r4, #48	; 0x30
 8008380:	2b01      	cmp	r3, #1
 8008382:	4606      	mov	r6, r0
 8008384:	700c      	strb	r4, [r1, #0]
 8008386:	f101 0501 	add.w	r5, r1, #1
 800838a:	d020      	beq.n	80083ce <_dtoa_r+0xcbe>
 800838c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800838e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008390:	4413      	add	r3, r2
 8008392:	469a      	mov	sl, r3
 8008394:	46ab      	mov	fp, r5
 8008396:	2200      	movs	r2, #0
 8008398:	4b4a      	ldr	r3, [pc, #296]	; (80084c4 <_dtoa_r+0xdb4>)
 800839a:	4630      	mov	r0, r6
 800839c:	4639      	mov	r1, r7
 800839e:	f7f8 fa7d 	bl	800089c <__aeabi_dmul>
 80083a2:	460f      	mov	r7, r1
 80083a4:	4606      	mov	r6, r0
 80083a6:	f7f8 fd13 	bl	8000dd0 <__aeabi_d2iz>
 80083aa:	4604      	mov	r4, r0
 80083ac:	f7f8 f8ac 	bl	8000508 <__aeabi_i2d>
 80083b0:	3430      	adds	r4, #48	; 0x30
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4630      	mov	r0, r6
 80083b8:	4639      	mov	r1, r7
 80083ba:	f7f7 ff57 	bl	800026c <__aeabi_dsub>
 80083be:	f80b 4b01 	strb.w	r4, [fp], #1
 80083c2:	45da      	cmp	sl, fp
 80083c4:	4606      	mov	r6, r0
 80083c6:	460f      	mov	r7, r1
 80083c8:	d1e5      	bne.n	8008396 <_dtoa_r+0xc86>
 80083ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083cc:	441d      	add	r5, r3
 80083ce:	2200      	movs	r2, #0
 80083d0:	4b3d      	ldr	r3, [pc, #244]	; (80084c8 <_dtoa_r+0xdb8>)
 80083d2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80083d6:	f7f7 ff4b 	bl	8000270 <__adddf3>
 80083da:	4632      	mov	r2, r6
 80083dc:	463b      	mov	r3, r7
 80083de:	f7f8 fccf 	bl	8000d80 <__aeabi_dcmplt>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d048      	beq.n	8008478 <_dtoa_r+0xd68>
 80083e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80083e8:	9304      	str	r3, [sp, #16]
 80083ea:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80083ee:	f7ff bb4c 	b.w	8007a8a <_dtoa_r+0x37a>
 80083f2:	9b07      	ldr	r3, [sp, #28]
 80083f4:	9a08      	ldr	r2, [sp, #32]
 80083f6:	1a9d      	subs	r5, r3, r2
 80083f8:	2300      	movs	r3, #0
 80083fa:	f7ff bb7c 	b.w	8007af6 <_dtoa_r+0x3e6>
 80083fe:	2700      	movs	r7, #0
 8008400:	e6ca      	b.n	8008198 <_dtoa_r+0xa88>
 8008402:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008404:	9f06      	ldr	r7, [sp, #24]
 8008406:	9d07      	ldr	r5, [sp, #28]
 8008408:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800840c:	f7ff bb73 	b.w	8007af6 <_dtoa_r+0x3e6>
 8008410:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008414:	f04f 0a02 	mov.w	sl, #2
 8008418:	e4da      	b.n	8007dd0 <_dtoa_r+0x6c0>
 800841a:	9b08      	ldr	r3, [sp, #32]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f43f aec1 	beq.w	80081a4 <_dtoa_r+0xa94>
 8008422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	f77f af2e 	ble.w	8008286 <_dtoa_r+0xb76>
 800842a:	2200      	movs	r2, #0
 800842c:	4b25      	ldr	r3, [pc, #148]	; (80084c4 <_dtoa_r+0xdb4>)
 800842e:	4630      	mov	r0, r6
 8008430:	4639      	mov	r1, r7
 8008432:	f7f8 fa33 	bl	800089c <__aeabi_dmul>
 8008436:	4606      	mov	r6, r0
 8008438:	460f      	mov	r7, r1
 800843a:	f10a 0001 	add.w	r0, sl, #1
 800843e:	f7f8 f863 	bl	8000508 <__aeabi_i2d>
 8008442:	4632      	mov	r2, r6
 8008444:	463b      	mov	r3, r7
 8008446:	f7f8 fa29 	bl	800089c <__aeabi_dmul>
 800844a:	2200      	movs	r2, #0
 800844c:	4b19      	ldr	r3, [pc, #100]	; (80084b4 <_dtoa_r+0xda4>)
 800844e:	f7f7 ff0f 	bl	8000270 <__adddf3>
 8008452:	9a04      	ldr	r2, [sp, #16]
 8008454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008456:	9312      	str	r3, [sp, #72]	; 0x48
 8008458:	3a01      	subs	r2, #1
 800845a:	4604      	mov	r4, r0
 800845c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008460:	9216      	str	r2, [sp, #88]	; 0x58
 8008462:	e4d6      	b.n	8007e12 <_dtoa_r+0x702>
 8008464:	940a      	str	r4, [sp, #40]	; 0x28
 8008466:	e584      	b.n	8007f72 <_dtoa_r+0x862>
 8008468:	2239      	movs	r2, #57	; 0x39
 800846a:	46b3      	mov	fp, r6
 800846c:	940a      	str	r4, [sp, #40]	; 0x28
 800846e:	4646      	mov	r6, r8
 8008470:	703a      	strb	r2, [r7, #0]
 8008472:	1c7d      	adds	r5, r7, #1
 8008474:	f7ff bbf5 	b.w	8007c62 <_dtoa_r+0x552>
 8008478:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800847c:	2000      	movs	r0, #0
 800847e:	4912      	ldr	r1, [pc, #72]	; (80084c8 <_dtoa_r+0xdb8>)
 8008480:	f7f7 fef4 	bl	800026c <__aeabi_dsub>
 8008484:	4632      	mov	r2, r6
 8008486:	463b      	mov	r3, r7
 8008488:	f7f8 fc98 	bl	8000dbc <__aeabi_dcmpgt>
 800848c:	b908      	cbnz	r0, 8008492 <_dtoa_r+0xd82>
 800848e:	e6fa      	b.n	8008286 <_dtoa_r+0xb76>
 8008490:	4615      	mov	r5, r2
 8008492:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008496:	2b30      	cmp	r3, #48	; 0x30
 8008498:	f105 32ff 	add.w	r2, r5, #4294967295
 800849c:	d0f8      	beq.n	8008490 <_dtoa_r+0xd80>
 800849e:	e539      	b.n	8007f14 <_dtoa_r+0x804>
 80084a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	f7ff baf1 	b.w	8007a8a <_dtoa_r+0x37a>
 80084a8:	f1ba 0f00 	cmp.w	sl, #0
 80084ac:	f47f ad7c 	bne.w	8007fa8 <_dtoa_r+0x898>
 80084b0:	e662      	b.n	8008178 <_dtoa_r+0xa68>
 80084b2:	bf00      	nop
 80084b4:	401c0000 	.word	0x401c0000
 80084b8:	40140000 	.word	0x40140000
 80084bc:	08009ae8 	.word	0x08009ae8
 80084c0:	08009bb0 	.word	0x08009bb0
 80084c4:	40240000 	.word	0x40240000
 80084c8:	3fe00000 	.word	0x3fe00000
 80084cc:	2b39      	cmp	r3, #57	; 0x39
 80084ce:	46d3      	mov	fp, sl
 80084d0:	469a      	mov	sl, r3
 80084d2:	d0c9      	beq.n	8008468 <_dtoa_r+0xd58>
 80084d4:	f1bb 0f00 	cmp.w	fp, #0
 80084d8:	f73f aebd 	bgt.w	8008256 <_dtoa_r+0xb46>
 80084dc:	e6bd      	b.n	800825a <_dtoa_r+0xb4a>
 80084de:	f47f aebc 	bne.w	800825a <_dtoa_r+0xb4a>
 80084e2:	f01a 0f01 	tst.w	sl, #1
 80084e6:	f43f aeb8 	beq.w	800825a <_dtoa_r+0xb4a>
 80084ea:	e6b0      	b.n	800824e <_dtoa_r+0xb3e>
 80084ec:	9b00      	ldr	r3, [sp, #0]
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	dc25      	bgt.n	800853e <_dtoa_r+0xe2e>
 80084f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084f4:	e60d      	b.n	8008112 <_dtoa_r+0xa02>
 80084f6:	f04f 0a02 	mov.w	sl, #2
 80084fa:	e469      	b.n	8007dd0 <_dtoa_r+0x6c0>
 80084fc:	9b00      	ldr	r3, [sp, #0]
 80084fe:	2b02      	cmp	r3, #2
 8008500:	dc1d      	bgt.n	800853e <_dtoa_r+0xe2e>
 8008502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008504:	e56d      	b.n	8007fe2 <_dtoa_r+0x8d2>
 8008506:	2400      	movs	r4, #0
 8008508:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800850c:	4621      	mov	r1, r4
 800850e:	4648      	mov	r0, r9
 8008510:	f000 fad8 	bl	8008ac4 <_Balloc>
 8008514:	f04f 33ff 	mov.w	r3, #4294967295
 8008518:	9308      	str	r3, [sp, #32]
 800851a:	930e      	str	r3, [sp, #56]	; 0x38
 800851c:	2301      	movs	r3, #1
 800851e:	9009      	str	r0, [sp, #36]	; 0x24
 8008520:	9405      	str	r4, [sp, #20]
 8008522:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8008526:	930b      	str	r3, [sp, #44]	; 0x2c
 8008528:	f7ff b9fc 	b.w	8007924 <_dtoa_r+0x214>
 800852c:	f43f ab48 	beq.w	8007bc0 <_dtoa_r+0x4b0>
 8008530:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8008534:	f7ff bb3f 	b.w	8007bb6 <_dtoa_r+0x4a6>
 8008538:	2601      	movs	r6, #1
 800853a:	f7ff b9bc 	b.w	80078b6 <_dtoa_r+0x1a6>
 800853e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008540:	9308      	str	r3, [sp, #32]
 8008542:	e5ee      	b.n	8008122 <_dtoa_r+0xa12>

08008544 <_localeconv_r>:
 8008544:	4800      	ldr	r0, [pc, #0]	; (8008548 <_localeconv_r+0x4>)
 8008546:	4770      	bx	lr
 8008548:	20000430 	.word	0x20000430

0800854c <_malloc_r>:
 800854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	f101 050b 	add.w	r5, r1, #11
 8008554:	2d16      	cmp	r5, #22
 8008556:	b083      	sub	sp, #12
 8008558:	4606      	mov	r6, r0
 800855a:	f240 809f 	bls.w	800869c <_malloc_r+0x150>
 800855e:	f035 0507 	bics.w	r5, r5, #7
 8008562:	f100 80bf 	bmi.w	80086e4 <_malloc_r+0x198>
 8008566:	42a9      	cmp	r1, r5
 8008568:	f200 80bc 	bhi.w	80086e4 <_malloc_r+0x198>
 800856c:	f000 faa6 	bl	8008abc <__malloc_lock>
 8008570:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008574:	f0c0 829c 	bcc.w	8008ab0 <_malloc_r+0x564>
 8008578:	0a6b      	lsrs	r3, r5, #9
 800857a:	f000 80ba 	beq.w	80086f2 <_malloc_r+0x1a6>
 800857e:	2b04      	cmp	r3, #4
 8008580:	f200 8183 	bhi.w	800888a <_malloc_r+0x33e>
 8008584:	09a8      	lsrs	r0, r5, #6
 8008586:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 800858a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800858e:	3038      	adds	r0, #56	; 0x38
 8008590:	4fc4      	ldr	r7, [pc, #784]	; (80088a4 <_malloc_r+0x358>)
 8008592:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008596:	f1a3 0108 	sub.w	r1, r3, #8
 800859a:	685c      	ldr	r4, [r3, #4]
 800859c:	42a1      	cmp	r1, r4
 800859e:	d107      	bne.n	80085b0 <_malloc_r+0x64>
 80085a0:	e0ac      	b.n	80086fc <_malloc_r+0x1b0>
 80085a2:	2a00      	cmp	r2, #0
 80085a4:	f280 80ac 	bge.w	8008700 <_malloc_r+0x1b4>
 80085a8:	68e4      	ldr	r4, [r4, #12]
 80085aa:	42a1      	cmp	r1, r4
 80085ac:	f000 80a6 	beq.w	80086fc <_malloc_r+0x1b0>
 80085b0:	6863      	ldr	r3, [r4, #4]
 80085b2:	f023 0303 	bic.w	r3, r3, #3
 80085b6:	1b5a      	subs	r2, r3, r5
 80085b8:	2a0f      	cmp	r2, #15
 80085ba:	ddf2      	ble.n	80085a2 <_malloc_r+0x56>
 80085bc:	49b9      	ldr	r1, [pc, #740]	; (80088a4 <_malloc_r+0x358>)
 80085be:	693c      	ldr	r4, [r7, #16]
 80085c0:	f101 0e08 	add.w	lr, r1, #8
 80085c4:	4574      	cmp	r4, lr
 80085c6:	f000 81b3 	beq.w	8008930 <_malloc_r+0x3e4>
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	f023 0303 	bic.w	r3, r3, #3
 80085d0:	1b5a      	subs	r2, r3, r5
 80085d2:	2a0f      	cmp	r2, #15
 80085d4:	f300 8199 	bgt.w	800890a <_malloc_r+0x3be>
 80085d8:	2a00      	cmp	r2, #0
 80085da:	f8c1 e014 	str.w	lr, [r1, #20]
 80085de:	f8c1 e010 	str.w	lr, [r1, #16]
 80085e2:	f280 809e 	bge.w	8008722 <_malloc_r+0x1d6>
 80085e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ea:	f080 8167 	bcs.w	80088bc <_malloc_r+0x370>
 80085ee:	08db      	lsrs	r3, r3, #3
 80085f0:	f103 0c01 	add.w	ip, r3, #1
 80085f4:	2201      	movs	r2, #1
 80085f6:	109b      	asrs	r3, r3, #2
 80085f8:	fa02 f303 	lsl.w	r3, r2, r3
 80085fc:	684a      	ldr	r2, [r1, #4]
 80085fe:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8008602:	f8c4 8008 	str.w	r8, [r4, #8]
 8008606:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800860a:	431a      	orrs	r2, r3
 800860c:	f1a9 0308 	sub.w	r3, r9, #8
 8008610:	60e3      	str	r3, [r4, #12]
 8008612:	604a      	str	r2, [r1, #4]
 8008614:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8008618:	f8c8 400c 	str.w	r4, [r8, #12]
 800861c:	1083      	asrs	r3, r0, #2
 800861e:	2401      	movs	r4, #1
 8008620:	409c      	lsls	r4, r3
 8008622:	4294      	cmp	r4, r2
 8008624:	f200 808a 	bhi.w	800873c <_malloc_r+0x1f0>
 8008628:	4214      	tst	r4, r2
 800862a:	d106      	bne.n	800863a <_malloc_r+0xee>
 800862c:	f020 0003 	bic.w	r0, r0, #3
 8008630:	0064      	lsls	r4, r4, #1
 8008632:	4214      	tst	r4, r2
 8008634:	f100 0004 	add.w	r0, r0, #4
 8008638:	d0fa      	beq.n	8008630 <_malloc_r+0xe4>
 800863a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800863e:	46cc      	mov	ip, r9
 8008640:	4680      	mov	r8, r0
 8008642:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8008646:	458c      	cmp	ip, r1
 8008648:	d107      	bne.n	800865a <_malloc_r+0x10e>
 800864a:	e173      	b.n	8008934 <_malloc_r+0x3e8>
 800864c:	2a00      	cmp	r2, #0
 800864e:	f280 8181 	bge.w	8008954 <_malloc_r+0x408>
 8008652:	68c9      	ldr	r1, [r1, #12]
 8008654:	458c      	cmp	ip, r1
 8008656:	f000 816d 	beq.w	8008934 <_malloc_r+0x3e8>
 800865a:	684b      	ldr	r3, [r1, #4]
 800865c:	f023 0303 	bic.w	r3, r3, #3
 8008660:	1b5a      	subs	r2, r3, r5
 8008662:	2a0f      	cmp	r2, #15
 8008664:	ddf2      	ble.n	800864c <_malloc_r+0x100>
 8008666:	460c      	mov	r4, r1
 8008668:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800866c:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8008670:	194b      	adds	r3, r1, r5
 8008672:	f045 0501 	orr.w	r5, r5, #1
 8008676:	604d      	str	r5, [r1, #4]
 8008678:	f042 0101 	orr.w	r1, r2, #1
 800867c:	f8c8 c00c 	str.w	ip, [r8, #12]
 8008680:	4630      	mov	r0, r6
 8008682:	f8cc 8008 	str.w	r8, [ip, #8]
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	613b      	str	r3, [r7, #16]
 800868a:	f8c3 e00c 	str.w	lr, [r3, #12]
 800868e:	f8c3 e008 	str.w	lr, [r3, #8]
 8008692:	6059      	str	r1, [r3, #4]
 8008694:	509a      	str	r2, [r3, r2]
 8008696:	f000 fa13 	bl	8008ac0 <__malloc_unlock>
 800869a:	e01f      	b.n	80086dc <_malloc_r+0x190>
 800869c:	2910      	cmp	r1, #16
 800869e:	d821      	bhi.n	80086e4 <_malloc_r+0x198>
 80086a0:	f000 fa0c 	bl	8008abc <__malloc_lock>
 80086a4:	2510      	movs	r5, #16
 80086a6:	2306      	movs	r3, #6
 80086a8:	2002      	movs	r0, #2
 80086aa:	4f7e      	ldr	r7, [pc, #504]	; (80088a4 <_malloc_r+0x358>)
 80086ac:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80086b0:	f1a3 0208 	sub.w	r2, r3, #8
 80086b4:	685c      	ldr	r4, [r3, #4]
 80086b6:	4294      	cmp	r4, r2
 80086b8:	f000 8145 	beq.w	8008946 <_malloc_r+0x3fa>
 80086bc:	6863      	ldr	r3, [r4, #4]
 80086be:	68e1      	ldr	r1, [r4, #12]
 80086c0:	68a5      	ldr	r5, [r4, #8]
 80086c2:	f023 0303 	bic.w	r3, r3, #3
 80086c6:	4423      	add	r3, r4
 80086c8:	4630      	mov	r0, r6
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	60e9      	str	r1, [r5, #12]
 80086ce:	f042 0201 	orr.w	r2, r2, #1
 80086d2:	608d      	str	r5, [r1, #8]
 80086d4:	605a      	str	r2, [r3, #4]
 80086d6:	f000 f9f3 	bl	8008ac0 <__malloc_unlock>
 80086da:	3408      	adds	r4, #8
 80086dc:	4620      	mov	r0, r4
 80086de:	b003      	add	sp, #12
 80086e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e4:	2400      	movs	r4, #0
 80086e6:	230c      	movs	r3, #12
 80086e8:	4620      	mov	r0, r4
 80086ea:	6033      	str	r3, [r6, #0]
 80086ec:	b003      	add	sp, #12
 80086ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f2:	2380      	movs	r3, #128	; 0x80
 80086f4:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80086f8:	203f      	movs	r0, #63	; 0x3f
 80086fa:	e749      	b.n	8008590 <_malloc_r+0x44>
 80086fc:	4670      	mov	r0, lr
 80086fe:	e75d      	b.n	80085bc <_malloc_r+0x70>
 8008700:	4423      	add	r3, r4
 8008702:	68e1      	ldr	r1, [r4, #12]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	68a5      	ldr	r5, [r4, #8]
 8008708:	f042 0201 	orr.w	r2, r2, #1
 800870c:	60e9      	str	r1, [r5, #12]
 800870e:	4630      	mov	r0, r6
 8008710:	608d      	str	r5, [r1, #8]
 8008712:	605a      	str	r2, [r3, #4]
 8008714:	f000 f9d4 	bl	8008ac0 <__malloc_unlock>
 8008718:	3408      	adds	r4, #8
 800871a:	4620      	mov	r0, r4
 800871c:	b003      	add	sp, #12
 800871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008722:	4423      	add	r3, r4
 8008724:	4630      	mov	r0, r6
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	f042 0201 	orr.w	r2, r2, #1
 800872c:	605a      	str	r2, [r3, #4]
 800872e:	f000 f9c7 	bl	8008ac0 <__malloc_unlock>
 8008732:	3408      	adds	r4, #8
 8008734:	4620      	mov	r0, r4
 8008736:	b003      	add	sp, #12
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	68bc      	ldr	r4, [r7, #8]
 800873e:	6863      	ldr	r3, [r4, #4]
 8008740:	f023 0803 	bic.w	r8, r3, #3
 8008744:	45a8      	cmp	r8, r5
 8008746:	d304      	bcc.n	8008752 <_malloc_r+0x206>
 8008748:	ebc5 0308 	rsb	r3, r5, r8
 800874c:	2b0f      	cmp	r3, #15
 800874e:	f300 808c 	bgt.w	800886a <_malloc_r+0x31e>
 8008752:	4b55      	ldr	r3, [pc, #340]	; (80088a8 <_malloc_r+0x35c>)
 8008754:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80088b8 <_malloc_r+0x36c>
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	f8d9 3000 	ldr.w	r3, [r9]
 800875e:	3301      	adds	r3, #1
 8008760:	442a      	add	r2, r5
 8008762:	eb04 0a08 	add.w	sl, r4, r8
 8008766:	f000 8160 	beq.w	8008a2a <_malloc_r+0x4de>
 800876a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800876e:	320f      	adds	r2, #15
 8008770:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8008774:	f022 020f 	bic.w	r2, r2, #15
 8008778:	4611      	mov	r1, r2
 800877a:	4630      	mov	r0, r6
 800877c:	9201      	str	r2, [sp, #4]
 800877e:	f7f9 f86b 	bl	8001858 <_sbrk_r>
 8008782:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008786:	4683      	mov	fp, r0
 8008788:	9a01      	ldr	r2, [sp, #4]
 800878a:	f000 8158 	beq.w	8008a3e <_malloc_r+0x4f2>
 800878e:	4582      	cmp	sl, r0
 8008790:	f200 80fc 	bhi.w	800898c <_malloc_r+0x440>
 8008794:	4b45      	ldr	r3, [pc, #276]	; (80088ac <_malloc_r+0x360>)
 8008796:	6819      	ldr	r1, [r3, #0]
 8008798:	45da      	cmp	sl, fp
 800879a:	4411      	add	r1, r2
 800879c:	6019      	str	r1, [r3, #0]
 800879e:	f000 8153 	beq.w	8008a48 <_malloc_r+0x4fc>
 80087a2:	f8d9 0000 	ldr.w	r0, [r9]
 80087a6:	f8df e110 	ldr.w	lr, [pc, #272]	; 80088b8 <_malloc_r+0x36c>
 80087aa:	3001      	adds	r0, #1
 80087ac:	bf1b      	ittet	ne
 80087ae:	ebca 0a0b 	rsbne	sl, sl, fp
 80087b2:	4451      	addne	r1, sl
 80087b4:	f8ce b000 	streq.w	fp, [lr]
 80087b8:	6019      	strne	r1, [r3, #0]
 80087ba:	f01b 0107 	ands.w	r1, fp, #7
 80087be:	f000 8117 	beq.w	80089f0 <_malloc_r+0x4a4>
 80087c2:	f1c1 0008 	rsb	r0, r1, #8
 80087c6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80087ca:	4483      	add	fp, r0
 80087cc:	3108      	adds	r1, #8
 80087ce:	445a      	add	r2, fp
 80087d0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80087d4:	ebc2 0901 	rsb	r9, r2, r1
 80087d8:	4649      	mov	r1, r9
 80087da:	4630      	mov	r0, r6
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	f7f9 f83b 	bl	8001858 <_sbrk_r>
 80087e2:	1c43      	adds	r3, r0, #1
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	f000 813f 	beq.w	8008a68 <_malloc_r+0x51c>
 80087ea:	ebcb 0200 	rsb	r2, fp, r0
 80087ee:	444a      	add	r2, r9
 80087f0:	f042 0201 	orr.w	r2, r2, #1
 80087f4:	6819      	ldr	r1, [r3, #0]
 80087f6:	f8c7 b008 	str.w	fp, [r7, #8]
 80087fa:	4449      	add	r1, r9
 80087fc:	42bc      	cmp	r4, r7
 80087fe:	f8cb 2004 	str.w	r2, [fp, #4]
 8008802:	6019      	str	r1, [r3, #0]
 8008804:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80088ac <_malloc_r+0x360>
 8008808:	d016      	beq.n	8008838 <_malloc_r+0x2ec>
 800880a:	f1b8 0f0f 	cmp.w	r8, #15
 800880e:	f240 80fd 	bls.w	8008a0c <_malloc_r+0x4c0>
 8008812:	6862      	ldr	r2, [r4, #4]
 8008814:	f1a8 030c 	sub.w	r3, r8, #12
 8008818:	f023 0307 	bic.w	r3, r3, #7
 800881c:	18e0      	adds	r0, r4, r3
 800881e:	f002 0201 	and.w	r2, r2, #1
 8008822:	f04f 0e05 	mov.w	lr, #5
 8008826:	431a      	orrs	r2, r3
 8008828:	2b0f      	cmp	r3, #15
 800882a:	6062      	str	r2, [r4, #4]
 800882c:	f8c0 e004 	str.w	lr, [r0, #4]
 8008830:	f8c0 e008 	str.w	lr, [r0, #8]
 8008834:	f200 811c 	bhi.w	8008a70 <_malloc_r+0x524>
 8008838:	4b1d      	ldr	r3, [pc, #116]	; (80088b0 <_malloc_r+0x364>)
 800883a:	68bc      	ldr	r4, [r7, #8]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	4291      	cmp	r1, r2
 8008840:	bf88      	it	hi
 8008842:	6019      	strhi	r1, [r3, #0]
 8008844:	4b1b      	ldr	r3, [pc, #108]	; (80088b4 <_malloc_r+0x368>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	4291      	cmp	r1, r2
 800884a:	6862      	ldr	r2, [r4, #4]
 800884c:	bf88      	it	hi
 800884e:	6019      	strhi	r1, [r3, #0]
 8008850:	f022 0203 	bic.w	r2, r2, #3
 8008854:	4295      	cmp	r5, r2
 8008856:	eba2 0305 	sub.w	r3, r2, r5
 800885a:	d801      	bhi.n	8008860 <_malloc_r+0x314>
 800885c:	2b0f      	cmp	r3, #15
 800885e:	dc04      	bgt.n	800886a <_malloc_r+0x31e>
 8008860:	4630      	mov	r0, r6
 8008862:	f000 f92d 	bl	8008ac0 <__malloc_unlock>
 8008866:	2400      	movs	r4, #0
 8008868:	e738      	b.n	80086dc <_malloc_r+0x190>
 800886a:	1962      	adds	r2, r4, r5
 800886c:	f043 0301 	orr.w	r3, r3, #1
 8008870:	f045 0501 	orr.w	r5, r5, #1
 8008874:	6065      	str	r5, [r4, #4]
 8008876:	4630      	mov	r0, r6
 8008878:	60ba      	str	r2, [r7, #8]
 800887a:	6053      	str	r3, [r2, #4]
 800887c:	f000 f920 	bl	8008ac0 <__malloc_unlock>
 8008880:	3408      	adds	r4, #8
 8008882:	4620      	mov	r0, r4
 8008884:	b003      	add	sp, #12
 8008886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888a:	2b14      	cmp	r3, #20
 800888c:	d971      	bls.n	8008972 <_malloc_r+0x426>
 800888e:	2b54      	cmp	r3, #84	; 0x54
 8008890:	f200 80a4 	bhi.w	80089dc <_malloc_r+0x490>
 8008894:	0b28      	lsrs	r0, r5, #12
 8008896:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 800889a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800889e:	306e      	adds	r0, #110	; 0x6e
 80088a0:	e676      	b.n	8008590 <_malloc_r+0x44>
 80088a2:	bf00      	nop
 80088a4:	20000468 	.word	0x20000468
 80088a8:	20000e18 	.word	0x20000e18
 80088ac:	20000e1c 	.word	0x20000e1c
 80088b0:	20000e14 	.word	0x20000e14
 80088b4:	20000e10 	.word	0x20000e10
 80088b8:	20000874 	.word	0x20000874
 80088bc:	0a5a      	lsrs	r2, r3, #9
 80088be:	2a04      	cmp	r2, #4
 80088c0:	d95e      	bls.n	8008980 <_malloc_r+0x434>
 80088c2:	2a14      	cmp	r2, #20
 80088c4:	f200 80b3 	bhi.w	8008a2e <_malloc_r+0x4e2>
 80088c8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 80088cc:	0049      	lsls	r1, r1, #1
 80088ce:	325b      	adds	r2, #91	; 0x5b
 80088d0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 80088d4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80088d8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8008ab8 <_malloc_r+0x56c>
 80088dc:	f1ac 0c08 	sub.w	ip, ip, #8
 80088e0:	458c      	cmp	ip, r1
 80088e2:	f000 8088 	beq.w	80089f6 <_malloc_r+0x4aa>
 80088e6:	684a      	ldr	r2, [r1, #4]
 80088e8:	f022 0203 	bic.w	r2, r2, #3
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d202      	bcs.n	80088f6 <_malloc_r+0x3aa>
 80088f0:	6889      	ldr	r1, [r1, #8]
 80088f2:	458c      	cmp	ip, r1
 80088f4:	d1f7      	bne.n	80088e6 <_malloc_r+0x39a>
 80088f6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	f8c4 c00c 	str.w	ip, [r4, #12]
 8008900:	60a1      	str	r1, [r4, #8]
 8008902:	f8cc 4008 	str.w	r4, [ip, #8]
 8008906:	60cc      	str	r4, [r1, #12]
 8008908:	e688      	b.n	800861c <_malloc_r+0xd0>
 800890a:	1963      	adds	r3, r4, r5
 800890c:	f042 0701 	orr.w	r7, r2, #1
 8008910:	f045 0501 	orr.w	r5, r5, #1
 8008914:	6065      	str	r5, [r4, #4]
 8008916:	4630      	mov	r0, r6
 8008918:	614b      	str	r3, [r1, #20]
 800891a:	610b      	str	r3, [r1, #16]
 800891c:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008920:	f8c3 e008 	str.w	lr, [r3, #8]
 8008924:	605f      	str	r7, [r3, #4]
 8008926:	509a      	str	r2, [r3, r2]
 8008928:	3408      	adds	r4, #8
 800892a:	f000 f8c9 	bl	8008ac0 <__malloc_unlock>
 800892e:	e6d5      	b.n	80086dc <_malloc_r+0x190>
 8008930:	684a      	ldr	r2, [r1, #4]
 8008932:	e673      	b.n	800861c <_malloc_r+0xd0>
 8008934:	f108 0801 	add.w	r8, r8, #1
 8008938:	f018 0f03 	tst.w	r8, #3
 800893c:	f10c 0c08 	add.w	ip, ip, #8
 8008940:	f47f ae7f 	bne.w	8008642 <_malloc_r+0xf6>
 8008944:	e030      	b.n	80089a8 <_malloc_r+0x45c>
 8008946:	68dc      	ldr	r4, [r3, #12]
 8008948:	42a3      	cmp	r3, r4
 800894a:	bf08      	it	eq
 800894c:	3002      	addeq	r0, #2
 800894e:	f43f ae35 	beq.w	80085bc <_malloc_r+0x70>
 8008952:	e6b3      	b.n	80086bc <_malloc_r+0x170>
 8008954:	440b      	add	r3, r1
 8008956:	460c      	mov	r4, r1
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	68c9      	ldr	r1, [r1, #12]
 800895c:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8008960:	f042 0201 	orr.w	r2, r2, #1
 8008964:	605a      	str	r2, [r3, #4]
 8008966:	4630      	mov	r0, r6
 8008968:	60e9      	str	r1, [r5, #12]
 800896a:	608d      	str	r5, [r1, #8]
 800896c:	f000 f8a8 	bl	8008ac0 <__malloc_unlock>
 8008970:	e6b4      	b.n	80086dc <_malloc_r+0x190>
 8008972:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 8008976:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 800897a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800897e:	e607      	b.n	8008590 <_malloc_r+0x44>
 8008980:	099a      	lsrs	r2, r3, #6
 8008982:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8008986:	0049      	lsls	r1, r1, #1
 8008988:	3238      	adds	r2, #56	; 0x38
 800898a:	e7a1      	b.n	80088d0 <_malloc_r+0x384>
 800898c:	42bc      	cmp	r4, r7
 800898e:	4b4a      	ldr	r3, [pc, #296]	; (8008ab8 <_malloc_r+0x56c>)
 8008990:	f43f af00 	beq.w	8008794 <_malloc_r+0x248>
 8008994:	689c      	ldr	r4, [r3, #8]
 8008996:	6862      	ldr	r2, [r4, #4]
 8008998:	f022 0203 	bic.w	r2, r2, #3
 800899c:	e75a      	b.n	8008854 <_malloc_r+0x308>
 800899e:	f859 3908 	ldr.w	r3, [r9], #-8
 80089a2:	4599      	cmp	r9, r3
 80089a4:	f040 8082 	bne.w	8008aac <_malloc_r+0x560>
 80089a8:	f010 0f03 	tst.w	r0, #3
 80089ac:	f100 30ff 	add.w	r0, r0, #4294967295
 80089b0:	d1f5      	bne.n	800899e <_malloc_r+0x452>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	ea23 0304 	bic.w	r3, r3, r4
 80089b8:	607b      	str	r3, [r7, #4]
 80089ba:	0064      	lsls	r4, r4, #1
 80089bc:	429c      	cmp	r4, r3
 80089be:	f63f aebd 	bhi.w	800873c <_malloc_r+0x1f0>
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	f43f aeba 	beq.w	800873c <_malloc_r+0x1f0>
 80089c8:	421c      	tst	r4, r3
 80089ca:	4640      	mov	r0, r8
 80089cc:	f47f ae35 	bne.w	800863a <_malloc_r+0xee>
 80089d0:	0064      	lsls	r4, r4, #1
 80089d2:	421c      	tst	r4, r3
 80089d4:	f100 0004 	add.w	r0, r0, #4
 80089d8:	d0fa      	beq.n	80089d0 <_malloc_r+0x484>
 80089da:	e62e      	b.n	800863a <_malloc_r+0xee>
 80089dc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80089e0:	d818      	bhi.n	8008a14 <_malloc_r+0x4c8>
 80089e2:	0be8      	lsrs	r0, r5, #15
 80089e4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 80089e8:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80089ec:	3077      	adds	r0, #119	; 0x77
 80089ee:	e5cf      	b.n	8008590 <_malloc_r+0x44>
 80089f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089f4:	e6eb      	b.n	80087ce <_malloc_r+0x282>
 80089f6:	2101      	movs	r1, #1
 80089f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80089fc:	1092      	asrs	r2, r2, #2
 80089fe:	fa01 f202 	lsl.w	r2, r1, r2
 8008a02:	431a      	orrs	r2, r3
 8008a04:	f8c8 2004 	str.w	r2, [r8, #4]
 8008a08:	4661      	mov	r1, ip
 8008a0a:	e777      	b.n	80088fc <_malloc_r+0x3b0>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f8cb 3004 	str.w	r3, [fp, #4]
 8008a12:	e725      	b.n	8008860 <_malloc_r+0x314>
 8008a14:	f240 5254 	movw	r2, #1364	; 0x554
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d820      	bhi.n	8008a5e <_malloc_r+0x512>
 8008a1c:	0ca8      	lsrs	r0, r5, #18
 8008a1e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8008a22:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008a26:	307c      	adds	r0, #124	; 0x7c
 8008a28:	e5b2      	b.n	8008590 <_malloc_r+0x44>
 8008a2a:	3210      	adds	r2, #16
 8008a2c:	e6a4      	b.n	8008778 <_malloc_r+0x22c>
 8008a2e:	2a54      	cmp	r2, #84	; 0x54
 8008a30:	d826      	bhi.n	8008a80 <_malloc_r+0x534>
 8008a32:	0b1a      	lsrs	r2, r3, #12
 8008a34:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8008a38:	0049      	lsls	r1, r1, #1
 8008a3a:	326e      	adds	r2, #110	; 0x6e
 8008a3c:	e748      	b.n	80088d0 <_malloc_r+0x384>
 8008a3e:	68bc      	ldr	r4, [r7, #8]
 8008a40:	6862      	ldr	r2, [r4, #4]
 8008a42:	f022 0203 	bic.w	r2, r2, #3
 8008a46:	e705      	b.n	8008854 <_malloc_r+0x308>
 8008a48:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	f47f aea8 	bne.w	80087a2 <_malloc_r+0x256>
 8008a52:	4442      	add	r2, r8
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f042 0201 	orr.w	r2, r2, #1
 8008a5a:	605a      	str	r2, [r3, #4]
 8008a5c:	e6ec      	b.n	8008838 <_malloc_r+0x2ec>
 8008a5e:	23fe      	movs	r3, #254	; 0xfe
 8008a60:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8008a64:	207e      	movs	r0, #126	; 0x7e
 8008a66:	e593      	b.n	8008590 <_malloc_r+0x44>
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f04f 0900 	mov.w	r9, #0
 8008a6e:	e6c1      	b.n	80087f4 <_malloc_r+0x2a8>
 8008a70:	f104 0108 	add.w	r1, r4, #8
 8008a74:	4630      	mov	r0, r6
 8008a76:	f000 fc63 	bl	8009340 <_free_r>
 8008a7a:	f8d9 1000 	ldr.w	r1, [r9]
 8008a7e:	e6db      	b.n	8008838 <_malloc_r+0x2ec>
 8008a80:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008a84:	d805      	bhi.n	8008a92 <_malloc_r+0x546>
 8008a86:	0bda      	lsrs	r2, r3, #15
 8008a88:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8008a8c:	0049      	lsls	r1, r1, #1
 8008a8e:	3277      	adds	r2, #119	; 0x77
 8008a90:	e71e      	b.n	80088d0 <_malloc_r+0x384>
 8008a92:	f240 5154 	movw	r1, #1364	; 0x554
 8008a96:	428a      	cmp	r2, r1
 8008a98:	d805      	bhi.n	8008aa6 <_malloc_r+0x55a>
 8008a9a:	0c9a      	lsrs	r2, r3, #18
 8008a9c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8008aa0:	0049      	lsls	r1, r1, #1
 8008aa2:	327c      	adds	r2, #124	; 0x7c
 8008aa4:	e714      	b.n	80088d0 <_malloc_r+0x384>
 8008aa6:	21fe      	movs	r1, #254	; 0xfe
 8008aa8:	227e      	movs	r2, #126	; 0x7e
 8008aaa:	e711      	b.n	80088d0 <_malloc_r+0x384>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	e784      	b.n	80089ba <_malloc_r+0x46e>
 8008ab0:	08e8      	lsrs	r0, r5, #3
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	e5f8      	b.n	80086aa <_malloc_r+0x15e>
 8008ab8:	20000468 	.word	0x20000468

08008abc <__malloc_lock>:
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop

08008ac0 <__malloc_unlock>:
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop

08008ac4 <_Balloc>:
 8008ac4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008ac6:	b570      	push	{r4, r5, r6, lr}
 8008ac8:	4605      	mov	r5, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	b14b      	cbz	r3, 8008ae2 <_Balloc+0x1e>
 8008ace:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008ad2:	b180      	cbz	r0, 8008af6 <_Balloc+0x32>
 8008ad4:	6802      	ldr	r2, [r0, #0]
 8008ad6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008ada:	2300      	movs	r3, #0
 8008adc:	6103      	str	r3, [r0, #16]
 8008ade:	60c3      	str	r3, [r0, #12]
 8008ae0:	bd70      	pop	{r4, r5, r6, pc}
 8008ae2:	2221      	movs	r2, #33	; 0x21
 8008ae4:	2104      	movs	r1, #4
 8008ae6:	f000 fbad 	bl	8009244 <_calloc_r>
 8008aea:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008aec:	4603      	mov	r3, r0
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d1ed      	bne.n	8008ace <_Balloc+0xa>
 8008af2:	2000      	movs	r0, #0
 8008af4:	bd70      	pop	{r4, r5, r6, pc}
 8008af6:	2101      	movs	r1, #1
 8008af8:	fa01 f604 	lsl.w	r6, r1, r4
 8008afc:	1d72      	adds	r2, r6, #5
 8008afe:	4628      	mov	r0, r5
 8008b00:	0092      	lsls	r2, r2, #2
 8008b02:	f000 fb9f 	bl	8009244 <_calloc_r>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d0f3      	beq.n	8008af2 <_Balloc+0x2e>
 8008b0a:	6044      	str	r4, [r0, #4]
 8008b0c:	6086      	str	r6, [r0, #8]
 8008b0e:	e7e4      	b.n	8008ada <_Balloc+0x16>

08008b10 <_Bfree>:
 8008b10:	b131      	cbz	r1, 8008b20 <_Bfree+0x10>
 8008b12:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008b14:	684a      	ldr	r2, [r1, #4]
 8008b16:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008b1a:	6008      	str	r0, [r1, #0]
 8008b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop

08008b24 <__multadd>:
 8008b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b26:	690c      	ldr	r4, [r1, #16]
 8008b28:	b083      	sub	sp, #12
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	f101 0e14 	add.w	lr, r1, #20
 8008b32:	2700      	movs	r7, #0
 8008b34:	f8de 0000 	ldr.w	r0, [lr]
 8008b38:	b281      	uxth	r1, r0
 8008b3a:	fb02 3101 	mla	r1, r2, r1, r3
 8008b3e:	0c0b      	lsrs	r3, r1, #16
 8008b40:	0c00      	lsrs	r0, r0, #16
 8008b42:	fb02 3300 	mla	r3, r2, r0, r3
 8008b46:	b289      	uxth	r1, r1
 8008b48:	3701      	adds	r7, #1
 8008b4a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b4e:	42bc      	cmp	r4, r7
 8008b50:	f84e 1b04 	str.w	r1, [lr], #4
 8008b54:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008b58:	dcec      	bgt.n	8008b34 <__multadd+0x10>
 8008b5a:	b13b      	cbz	r3, 8008b6c <__multadd+0x48>
 8008b5c:	68aa      	ldr	r2, [r5, #8]
 8008b5e:	4294      	cmp	r4, r2
 8008b60:	da07      	bge.n	8008b72 <__multadd+0x4e>
 8008b62:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8008b66:	3401      	adds	r4, #1
 8008b68:	6153      	str	r3, [r2, #20]
 8008b6a:	612c      	str	r4, [r5, #16]
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	b003      	add	sp, #12
 8008b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b72:	6869      	ldr	r1, [r5, #4]
 8008b74:	9301      	str	r3, [sp, #4]
 8008b76:	3101      	adds	r1, #1
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f7ff ffa3 	bl	8008ac4 <_Balloc>
 8008b7e:	692a      	ldr	r2, [r5, #16]
 8008b80:	3202      	adds	r2, #2
 8008b82:	f105 010c 	add.w	r1, r5, #12
 8008b86:	4607      	mov	r7, r0
 8008b88:	0092      	lsls	r2, r2, #2
 8008b8a:	300c      	adds	r0, #12
 8008b8c:	f7f7 fd22 	bl	80005d4 <memcpy>
 8008b90:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8008b92:	6869      	ldr	r1, [r5, #4]
 8008b94:	9b01      	ldr	r3, [sp, #4]
 8008b96:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008b9a:	6028      	str	r0, [r5, #0]
 8008b9c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8008ba0:	463d      	mov	r5, r7
 8008ba2:	e7de      	b.n	8008b62 <__multadd+0x3e>

08008ba4 <__hi0bits>:
 8008ba4:	0c03      	lsrs	r3, r0, #16
 8008ba6:	041b      	lsls	r3, r3, #16
 8008ba8:	b9b3      	cbnz	r3, 8008bd8 <__hi0bits+0x34>
 8008baa:	0400      	lsls	r0, r0, #16
 8008bac:	2310      	movs	r3, #16
 8008bae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008bb2:	bf04      	itt	eq
 8008bb4:	0200      	lsleq	r0, r0, #8
 8008bb6:	3308      	addeq	r3, #8
 8008bb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008bbc:	bf04      	itt	eq
 8008bbe:	0100      	lsleq	r0, r0, #4
 8008bc0:	3304      	addeq	r3, #4
 8008bc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bc6:	bf04      	itt	eq
 8008bc8:	0080      	lsleq	r0, r0, #2
 8008bca:	3302      	addeq	r3, #2
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	db07      	blt.n	8008be0 <__hi0bits+0x3c>
 8008bd0:	0042      	lsls	r2, r0, #1
 8008bd2:	d403      	bmi.n	8008bdc <__hi0bits+0x38>
 8008bd4:	2020      	movs	r0, #32
 8008bd6:	4770      	bx	lr
 8008bd8:	2300      	movs	r3, #0
 8008bda:	e7e8      	b.n	8008bae <__hi0bits+0xa>
 8008bdc:	1c58      	adds	r0, r3, #1
 8008bde:	4770      	bx	lr
 8008be0:	4618      	mov	r0, r3
 8008be2:	4770      	bx	lr

08008be4 <__lo0bits>:
 8008be4:	6803      	ldr	r3, [r0, #0]
 8008be6:	f013 0207 	ands.w	r2, r3, #7
 8008bea:	d007      	beq.n	8008bfc <__lo0bits+0x18>
 8008bec:	07d9      	lsls	r1, r3, #31
 8008bee:	d420      	bmi.n	8008c32 <__lo0bits+0x4e>
 8008bf0:	079a      	lsls	r2, r3, #30
 8008bf2:	d420      	bmi.n	8008c36 <__lo0bits+0x52>
 8008bf4:	089b      	lsrs	r3, r3, #2
 8008bf6:	6003      	str	r3, [r0, #0]
 8008bf8:	2002      	movs	r0, #2
 8008bfa:	4770      	bx	lr
 8008bfc:	b299      	uxth	r1, r3
 8008bfe:	b909      	cbnz	r1, 8008c04 <__lo0bits+0x20>
 8008c00:	0c1b      	lsrs	r3, r3, #16
 8008c02:	2210      	movs	r2, #16
 8008c04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c08:	bf04      	itt	eq
 8008c0a:	0a1b      	lsreq	r3, r3, #8
 8008c0c:	3208      	addeq	r2, #8
 8008c0e:	0719      	lsls	r1, r3, #28
 8008c10:	bf04      	itt	eq
 8008c12:	091b      	lsreq	r3, r3, #4
 8008c14:	3204      	addeq	r2, #4
 8008c16:	0799      	lsls	r1, r3, #30
 8008c18:	bf04      	itt	eq
 8008c1a:	089b      	lsreq	r3, r3, #2
 8008c1c:	3202      	addeq	r2, #2
 8008c1e:	07d9      	lsls	r1, r3, #31
 8008c20:	d404      	bmi.n	8008c2c <__lo0bits+0x48>
 8008c22:	085b      	lsrs	r3, r3, #1
 8008c24:	d101      	bne.n	8008c2a <__lo0bits+0x46>
 8008c26:	2020      	movs	r0, #32
 8008c28:	4770      	bx	lr
 8008c2a:	3201      	adds	r2, #1
 8008c2c:	6003      	str	r3, [r0, #0]
 8008c2e:	4610      	mov	r0, r2
 8008c30:	4770      	bx	lr
 8008c32:	2000      	movs	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	085b      	lsrs	r3, r3, #1
 8008c38:	6003      	str	r3, [r0, #0]
 8008c3a:	2001      	movs	r0, #1
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop

08008c40 <__i2b>:
 8008c40:	b510      	push	{r4, lr}
 8008c42:	460c      	mov	r4, r1
 8008c44:	2101      	movs	r1, #1
 8008c46:	f7ff ff3d 	bl	8008ac4 <_Balloc>
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	6144      	str	r4, [r0, #20]
 8008c4e:	6102      	str	r2, [r0, #16]
 8008c50:	bd10      	pop	{r4, pc}
 8008c52:	bf00      	nop

08008c54 <__multiply>:
 8008c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c58:	690d      	ldr	r5, [r1, #16]
 8008c5a:	6917      	ldr	r7, [r2, #16]
 8008c5c:	42bd      	cmp	r5, r7
 8008c5e:	b083      	sub	sp, #12
 8008c60:	460c      	mov	r4, r1
 8008c62:	4616      	mov	r6, r2
 8008c64:	da04      	bge.n	8008c70 <__multiply+0x1c>
 8008c66:	462a      	mov	r2, r5
 8008c68:	4634      	mov	r4, r6
 8008c6a:	463d      	mov	r5, r7
 8008c6c:	460e      	mov	r6, r1
 8008c6e:	4617      	mov	r7, r2
 8008c70:	68a3      	ldr	r3, [r4, #8]
 8008c72:	6861      	ldr	r1, [r4, #4]
 8008c74:	eb05 0807 	add.w	r8, r5, r7
 8008c78:	4598      	cmp	r8, r3
 8008c7a:	bfc8      	it	gt
 8008c7c:	3101      	addgt	r1, #1
 8008c7e:	f7ff ff21 	bl	8008ac4 <_Balloc>
 8008c82:	f100 0c14 	add.w	ip, r0, #20
 8008c86:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8008c8a:	45cc      	cmp	ip, r9
 8008c8c:	9000      	str	r0, [sp, #0]
 8008c8e:	d205      	bcs.n	8008c9c <__multiply+0x48>
 8008c90:	4663      	mov	r3, ip
 8008c92:	2100      	movs	r1, #0
 8008c94:	f843 1b04 	str.w	r1, [r3], #4
 8008c98:	4599      	cmp	r9, r3
 8008c9a:	d8fb      	bhi.n	8008c94 <__multiply+0x40>
 8008c9c:	f106 0214 	add.w	r2, r6, #20
 8008ca0:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8008ca4:	f104 0314 	add.w	r3, r4, #20
 8008ca8:	4552      	cmp	r2, sl
 8008caa:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 8008cae:	d254      	bcs.n	8008d5a <__multiply+0x106>
 8008cb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008cb4:	4699      	mov	r9, r3
 8008cb6:	f852 3b04 	ldr.w	r3, [r2], #4
 8008cba:	fa1f fb83 	uxth.w	fp, r3
 8008cbe:	f1bb 0f00 	cmp.w	fp, #0
 8008cc2:	d020      	beq.n	8008d06 <__multiply+0xb2>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	464f      	mov	r7, r9
 8008cc8:	4666      	mov	r6, ip
 8008cca:	4605      	mov	r5, r0
 8008ccc:	e000      	b.n	8008cd0 <__multiply+0x7c>
 8008cce:	461e      	mov	r6, r3
 8008cd0:	f857 4b04 	ldr.w	r4, [r7], #4
 8008cd4:	6830      	ldr	r0, [r6, #0]
 8008cd6:	b2a1      	uxth	r1, r4
 8008cd8:	b283      	uxth	r3, r0
 8008cda:	fb0b 3101 	mla	r1, fp, r1, r3
 8008cde:	0c24      	lsrs	r4, r4, #16
 8008ce0:	0c00      	lsrs	r0, r0, #16
 8008ce2:	194b      	adds	r3, r1, r5
 8008ce4:	fb0b 0004 	mla	r0, fp, r4, r0
 8008ce8:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8008cec:	b299      	uxth	r1, r3
 8008cee:	4633      	mov	r3, r6
 8008cf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008cf4:	45be      	cmp	lr, r7
 8008cf6:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8008cfa:	f843 1b04 	str.w	r1, [r3], #4
 8008cfe:	d8e6      	bhi.n	8008cce <__multiply+0x7a>
 8008d00:	6075      	str	r5, [r6, #4]
 8008d02:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8008d06:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8008d0a:	d020      	beq.n	8008d4e <__multiply+0xfa>
 8008d0c:	f8dc 3000 	ldr.w	r3, [ip]
 8008d10:	4667      	mov	r7, ip
 8008d12:	4618      	mov	r0, r3
 8008d14:	464d      	mov	r5, r9
 8008d16:	2100      	movs	r1, #0
 8008d18:	e000      	b.n	8008d1c <__multiply+0xc8>
 8008d1a:	4637      	mov	r7, r6
 8008d1c:	882c      	ldrh	r4, [r5, #0]
 8008d1e:	0c00      	lsrs	r0, r0, #16
 8008d20:	fb0b 0004 	mla	r0, fp, r4, r0
 8008d24:	4401      	add	r1, r0
 8008d26:	b29c      	uxth	r4, r3
 8008d28:	463e      	mov	r6, r7
 8008d2a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8008d2e:	f846 3b04 	str.w	r3, [r6], #4
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f855 4b04 	ldr.w	r4, [r5], #4
 8008d38:	b283      	uxth	r3, r0
 8008d3a:	0c24      	lsrs	r4, r4, #16
 8008d3c:	fb0b 3404 	mla	r4, fp, r4, r3
 8008d40:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8008d44:	45ae      	cmp	lr, r5
 8008d46:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8008d4a:	d8e6      	bhi.n	8008d1a <__multiply+0xc6>
 8008d4c:	607b      	str	r3, [r7, #4]
 8008d4e:	4592      	cmp	sl, r2
 8008d50:	f10c 0c04 	add.w	ip, ip, #4
 8008d54:	d8af      	bhi.n	8008cb6 <__multiply+0x62>
 8008d56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008d5a:	f1b8 0f00 	cmp.w	r8, #0
 8008d5e:	dd0b      	ble.n	8008d78 <__multiply+0x124>
 8008d60:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8008d64:	f1a9 0904 	sub.w	r9, r9, #4
 8008d68:	b11b      	cbz	r3, 8008d72 <__multiply+0x11e>
 8008d6a:	e005      	b.n	8008d78 <__multiply+0x124>
 8008d6c:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8008d70:	b913      	cbnz	r3, 8008d78 <__multiply+0x124>
 8008d72:	f1b8 0801 	subs.w	r8, r8, #1
 8008d76:	d1f9      	bne.n	8008d6c <__multiply+0x118>
 8008d78:	9800      	ldr	r0, [sp, #0]
 8008d7a:	f8c0 8010 	str.w	r8, [r0, #16]
 8008d7e:	b003      	add	sp, #12
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d84 <__pow5mult>:
 8008d84:	f012 0303 	ands.w	r3, r2, #3
 8008d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	4607      	mov	r7, r0
 8008d90:	d12e      	bne.n	8008df0 <__pow5mult+0x6c>
 8008d92:	460e      	mov	r6, r1
 8008d94:	10a4      	asrs	r4, r4, #2
 8008d96:	d01c      	beq.n	8008dd2 <__pow5mult+0x4e>
 8008d98:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8008d9a:	b395      	cbz	r5, 8008e02 <__pow5mult+0x7e>
 8008d9c:	07e3      	lsls	r3, r4, #31
 8008d9e:	f04f 0800 	mov.w	r8, #0
 8008da2:	d406      	bmi.n	8008db2 <__pow5mult+0x2e>
 8008da4:	1064      	asrs	r4, r4, #1
 8008da6:	d014      	beq.n	8008dd2 <__pow5mult+0x4e>
 8008da8:	6828      	ldr	r0, [r5, #0]
 8008daa:	b1a8      	cbz	r0, 8008dd8 <__pow5mult+0x54>
 8008dac:	4605      	mov	r5, r0
 8008dae:	07e3      	lsls	r3, r4, #31
 8008db0:	d5f8      	bpl.n	8008da4 <__pow5mult+0x20>
 8008db2:	462a      	mov	r2, r5
 8008db4:	4631      	mov	r1, r6
 8008db6:	4638      	mov	r0, r7
 8008db8:	f7ff ff4c 	bl	8008c54 <__multiply>
 8008dbc:	b1b6      	cbz	r6, 8008dec <__pow5mult+0x68>
 8008dbe:	6872      	ldr	r2, [r6, #4]
 8008dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc2:	1064      	asrs	r4, r4, #1
 8008dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dc8:	6031      	str	r1, [r6, #0]
 8008dca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008dce:	4606      	mov	r6, r0
 8008dd0:	d1ea      	bne.n	8008da8 <__pow5mult+0x24>
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd8:	462a      	mov	r2, r5
 8008dda:	4629      	mov	r1, r5
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f7ff ff39 	bl	8008c54 <__multiply>
 8008de2:	6028      	str	r0, [r5, #0]
 8008de4:	f8c0 8000 	str.w	r8, [r0]
 8008de8:	4605      	mov	r5, r0
 8008dea:	e7e0      	b.n	8008dae <__pow5mult+0x2a>
 8008dec:	4606      	mov	r6, r0
 8008dee:	e7d9      	b.n	8008da4 <__pow5mult+0x20>
 8008df0:	1e5a      	subs	r2, r3, #1
 8008df2:	4d0b      	ldr	r5, [pc, #44]	; (8008e20 <__pow5mult+0x9c>)
 8008df4:	2300      	movs	r3, #0
 8008df6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008dfa:	f7ff fe93 	bl	8008b24 <__multadd>
 8008dfe:	4606      	mov	r6, r0
 8008e00:	e7c8      	b.n	8008d94 <__pow5mult+0x10>
 8008e02:	2101      	movs	r1, #1
 8008e04:	4638      	mov	r0, r7
 8008e06:	f7ff fe5d 	bl	8008ac4 <_Balloc>
 8008e0a:	f240 2171 	movw	r1, #625	; 0x271
 8008e0e:	2201      	movs	r2, #1
 8008e10:	2300      	movs	r3, #0
 8008e12:	6141      	str	r1, [r0, #20]
 8008e14:	6102      	str	r2, [r0, #16]
 8008e16:	4605      	mov	r5, r0
 8008e18:	64b8      	str	r0, [r7, #72]	; 0x48
 8008e1a:	6003      	str	r3, [r0, #0]
 8008e1c:	e7be      	b.n	8008d9c <__pow5mult+0x18>
 8008e1e:	bf00      	nop
 8008e20:	08009ad8 	.word	0x08009ad8

08008e24 <__lshift>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	4691      	mov	r9, r2
 8008e2a:	690a      	ldr	r2, [r1, #16]
 8008e2c:	688b      	ldr	r3, [r1, #8]
 8008e2e:	ea4f 1469 	mov.w	r4, r9, asr #5
 8008e32:	eb04 0802 	add.w	r8, r4, r2
 8008e36:	f108 0501 	add.w	r5, r8, #1
 8008e3a:	429d      	cmp	r5, r3
 8008e3c:	460e      	mov	r6, r1
 8008e3e:	4682      	mov	sl, r0
 8008e40:	6849      	ldr	r1, [r1, #4]
 8008e42:	dd04      	ble.n	8008e4e <__lshift+0x2a>
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	429d      	cmp	r5, r3
 8008e48:	f101 0101 	add.w	r1, r1, #1
 8008e4c:	dcfa      	bgt.n	8008e44 <__lshift+0x20>
 8008e4e:	4650      	mov	r0, sl
 8008e50:	f7ff fe38 	bl	8008ac4 <_Balloc>
 8008e54:	2c00      	cmp	r4, #0
 8008e56:	f100 0214 	add.w	r2, r0, #20
 8008e5a:	dd38      	ble.n	8008ece <__lshift+0xaa>
 8008e5c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8008e60:	2100      	movs	r1, #0
 8008e62:	f842 1b04 	str.w	r1, [r2], #4
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d1fb      	bne.n	8008e62 <__lshift+0x3e>
 8008e6a:	6934      	ldr	r4, [r6, #16]
 8008e6c:	f106 0114 	add.w	r1, r6, #20
 8008e70:	f019 091f 	ands.w	r9, r9, #31
 8008e74:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8008e78:	d021      	beq.n	8008ebe <__lshift+0x9a>
 8008e7a:	f1c9 0220 	rsb	r2, r9, #32
 8008e7e:	2400      	movs	r4, #0
 8008e80:	680f      	ldr	r7, [r1, #0]
 8008e82:	fa07 fc09 	lsl.w	ip, r7, r9
 8008e86:	ea4c 0404 	orr.w	r4, ip, r4
 8008e8a:	469c      	mov	ip, r3
 8008e8c:	f843 4b04 	str.w	r4, [r3], #4
 8008e90:	f851 4b04 	ldr.w	r4, [r1], #4
 8008e94:	458e      	cmp	lr, r1
 8008e96:	fa24 f402 	lsr.w	r4, r4, r2
 8008e9a:	d8f1      	bhi.n	8008e80 <__lshift+0x5c>
 8008e9c:	f8cc 4004 	str.w	r4, [ip, #4]
 8008ea0:	b10c      	cbz	r4, 8008ea6 <__lshift+0x82>
 8008ea2:	f108 0502 	add.w	r5, r8, #2
 8008ea6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8008eaa:	6872      	ldr	r2, [r6, #4]
 8008eac:	3d01      	subs	r5, #1
 8008eae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008eb2:	6105      	str	r5, [r0, #16]
 8008eb4:	6031      	str	r1, [r6, #0]
 8008eb6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ebe:	3b04      	subs	r3, #4
 8008ec0:	f851 2b04 	ldr.w	r2, [r1], #4
 8008ec4:	f843 2f04 	str.w	r2, [r3, #4]!
 8008ec8:	458e      	cmp	lr, r1
 8008eca:	d8f9      	bhi.n	8008ec0 <__lshift+0x9c>
 8008ecc:	e7eb      	b.n	8008ea6 <__lshift+0x82>
 8008ece:	4613      	mov	r3, r2
 8008ed0:	e7cb      	b.n	8008e6a <__lshift+0x46>
 8008ed2:	bf00      	nop

08008ed4 <__mcmp>:
 8008ed4:	6902      	ldr	r2, [r0, #16]
 8008ed6:	690b      	ldr	r3, [r1, #16]
 8008ed8:	1ad2      	subs	r2, r2, r3
 8008eda:	d113      	bne.n	8008f04 <__mcmp+0x30>
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	3014      	adds	r0, #20
 8008ee0:	3114      	adds	r1, #20
 8008ee2:	4419      	add	r1, r3
 8008ee4:	b410      	push	{r4}
 8008ee6:	4403      	add	r3, r0
 8008ee8:	e001      	b.n	8008eee <__mcmp+0x1a>
 8008eea:	4298      	cmp	r0, r3
 8008eec:	d20c      	bcs.n	8008f08 <__mcmp+0x34>
 8008eee:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008ef2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ef6:	4294      	cmp	r4, r2
 8008ef8:	d0f7      	beq.n	8008eea <__mcmp+0x16>
 8008efa:	d309      	bcc.n	8008f10 <__mcmp+0x3c>
 8008efc:	2001      	movs	r0, #1
 8008efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	4610      	mov	r0, r2
 8008f06:	4770      	bx	lr
 8008f08:	2000      	movs	r0, #0
 8008f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	f04f 30ff 	mov.w	r0, #4294967295
 8008f14:	e7f3      	b.n	8008efe <__mcmp+0x2a>
 8008f16:	bf00      	nop

08008f18 <__mdiff>:
 8008f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f1c:	690b      	ldr	r3, [r1, #16]
 8008f1e:	460f      	mov	r7, r1
 8008f20:	6911      	ldr	r1, [r2, #16]
 8008f22:	1a5b      	subs	r3, r3, r1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	4690      	mov	r8, r2
 8008f28:	d117      	bne.n	8008f5a <__mdiff+0x42>
 8008f2a:	0089      	lsls	r1, r1, #2
 8008f2c:	f107 0214 	add.w	r2, r7, #20
 8008f30:	f108 0514 	add.w	r5, r8, #20
 8008f34:	1853      	adds	r3, r2, r1
 8008f36:	4429      	add	r1, r5
 8008f38:	e001      	b.n	8008f3e <__mdiff+0x26>
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d25e      	bcs.n	8008ffc <__mdiff+0xe4>
 8008f3e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8008f42:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f46:	42a6      	cmp	r6, r4
 8008f48:	d0f7      	beq.n	8008f3a <__mdiff+0x22>
 8008f4a:	d260      	bcs.n	800900e <__mdiff+0xf6>
 8008f4c:	463b      	mov	r3, r7
 8008f4e:	4614      	mov	r4, r2
 8008f50:	4647      	mov	r7, r8
 8008f52:	f04f 0901 	mov.w	r9, #1
 8008f56:	4698      	mov	r8, r3
 8008f58:	e006      	b.n	8008f68 <__mdiff+0x50>
 8008f5a:	db5d      	blt.n	8009018 <__mdiff+0x100>
 8008f5c:	f107 0514 	add.w	r5, r7, #20
 8008f60:	f102 0414 	add.w	r4, r2, #20
 8008f64:	f04f 0900 	mov.w	r9, #0
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	f7ff fdab 	bl	8008ac4 <_Balloc>
 8008f6e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008f72:	693e      	ldr	r6, [r7, #16]
 8008f74:	f8c0 900c 	str.w	r9, [r0, #12]
 8008f78:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8008f7c:	46a6      	mov	lr, r4
 8008f7e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8008f82:	f100 0414 	add.w	r4, r0, #20
 8008f86:	2300      	movs	r3, #0
 8008f88:	f85e 1b04 	ldr.w	r1, [lr], #4
 8008f8c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008f90:	b28a      	uxth	r2, r1
 8008f92:	fa13 f388 	uxtah	r3, r3, r8
 8008f96:	0c09      	lsrs	r1, r1, #16
 8008f98:	1a9a      	subs	r2, r3, r2
 8008f9a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8008f9e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8008fa2:	b292      	uxth	r2, r2
 8008fa4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008fa8:	45f4      	cmp	ip, lr
 8008faa:	f844 2b04 	str.w	r2, [r4], #4
 8008fae:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008fb2:	d8e9      	bhi.n	8008f88 <__mdiff+0x70>
 8008fb4:	42af      	cmp	r7, r5
 8008fb6:	d917      	bls.n	8008fe8 <__mdiff+0xd0>
 8008fb8:	46a4      	mov	ip, r4
 8008fba:	4629      	mov	r1, r5
 8008fbc:	f851 eb04 	ldr.w	lr, [r1], #4
 8008fc0:	fa13 f28e 	uxtah	r2, r3, lr
 8008fc4:	1413      	asrs	r3, r2, #16
 8008fc6:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8008fca:	b292      	uxth	r2, r2
 8008fcc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008fd0:	428f      	cmp	r7, r1
 8008fd2:	f84c 2b04 	str.w	r2, [ip], #4
 8008fd6:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008fda:	d8ef      	bhi.n	8008fbc <__mdiff+0xa4>
 8008fdc:	43ed      	mvns	r5, r5
 8008fde:	443d      	add	r5, r7
 8008fe0:	f025 0503 	bic.w	r5, r5, #3
 8008fe4:	3504      	adds	r5, #4
 8008fe6:	442c      	add	r4, r5
 8008fe8:	3c04      	subs	r4, #4
 8008fea:	b922      	cbnz	r2, 8008ff6 <__mdiff+0xde>
 8008fec:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8008ff0:	3e01      	subs	r6, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0fa      	beq.n	8008fec <__mdiff+0xd4>
 8008ff6:	6106      	str	r6, [r0, #16]
 8008ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	f7ff fd61 	bl	8008ac4 <_Balloc>
 8009002:	2201      	movs	r2, #1
 8009004:	2300      	movs	r3, #0
 8009006:	6102      	str	r2, [r0, #16]
 8009008:	6143      	str	r3, [r0, #20]
 800900a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900e:	462c      	mov	r4, r5
 8009010:	f04f 0900 	mov.w	r9, #0
 8009014:	4615      	mov	r5, r2
 8009016:	e7a7      	b.n	8008f68 <__mdiff+0x50>
 8009018:	463b      	mov	r3, r7
 800901a:	f107 0414 	add.w	r4, r7, #20
 800901e:	f108 0514 	add.w	r5, r8, #20
 8009022:	4647      	mov	r7, r8
 8009024:	f04f 0901 	mov.w	r9, #1
 8009028:	4698      	mov	r8, r3
 800902a:	e79d      	b.n	8008f68 <__mdiff+0x50>

0800902c <__d2b>:
 800902c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009030:	ec57 6b10 	vmov	r6, r7, d0
 8009034:	b083      	sub	sp, #12
 8009036:	4688      	mov	r8, r1
 8009038:	2101      	movs	r1, #1
 800903a:	463c      	mov	r4, r7
 800903c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009040:	4617      	mov	r7, r2
 8009042:	f7ff fd3f 	bl	8008ac4 <_Balloc>
 8009046:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800904a:	4681      	mov	r9, r0
 800904c:	b10d      	cbz	r5, 8009052 <__d2b+0x26>
 800904e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009052:	9401      	str	r4, [sp, #4]
 8009054:	b31e      	cbz	r6, 800909e <__d2b+0x72>
 8009056:	a802      	add	r0, sp, #8
 8009058:	f840 6d08 	str.w	r6, [r0, #-8]!
 800905c:	f7ff fdc2 	bl	8008be4 <__lo0bits>
 8009060:	2800      	cmp	r0, #0
 8009062:	d134      	bne.n	80090ce <__d2b+0xa2>
 8009064:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009068:	f8c9 2014 	str.w	r2, [r9, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	bf0c      	ite	eq
 8009070:	2101      	moveq	r1, #1
 8009072:	2102      	movne	r1, #2
 8009074:	f8c9 3018 	str.w	r3, [r9, #24]
 8009078:	f8c9 1010 	str.w	r1, [r9, #16]
 800907c:	b9dd      	cbnz	r5, 80090b6 <__d2b+0x8a>
 800907e:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8009082:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009086:	f8c8 0000 	str.w	r0, [r8]
 800908a:	6918      	ldr	r0, [r3, #16]
 800908c:	f7ff fd8a 	bl	8008ba4 <__hi0bits>
 8009090:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009094:	6038      	str	r0, [r7, #0]
 8009096:	4648      	mov	r0, r9
 8009098:	b003      	add	sp, #12
 800909a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800909e:	a801      	add	r0, sp, #4
 80090a0:	f7ff fda0 	bl	8008be4 <__lo0bits>
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	f8c9 3014 	str.w	r3, [r9, #20]
 80090aa:	2101      	movs	r1, #1
 80090ac:	3020      	adds	r0, #32
 80090ae:	f8c9 1010 	str.w	r1, [r9, #16]
 80090b2:	2d00      	cmp	r5, #0
 80090b4:	d0e3      	beq.n	800907e <__d2b+0x52>
 80090b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80090ba:	4405      	add	r5, r0
 80090bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090c0:	f8c8 5000 	str.w	r5, [r8]
 80090c4:	6038      	str	r0, [r7, #0]
 80090c6:	4648      	mov	r0, r9
 80090c8:	b003      	add	sp, #12
 80090ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ce:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80090d2:	f1c0 0120 	rsb	r1, r0, #32
 80090d6:	fa03 f101 	lsl.w	r1, r3, r1
 80090da:	430a      	orrs	r2, r1
 80090dc:	40c3      	lsrs	r3, r0
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	f8c9 2014 	str.w	r2, [r9, #20]
 80090e4:	e7c2      	b.n	800906c <__d2b+0x40>
 80090e6:	bf00      	nop

080090e8 <__fpclassifyd>:
 80090e8:	ec53 2b10 	vmov	r2, r3, d0
 80090ec:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 80090f0:	b410      	push	{r4}
 80090f2:	d008      	beq.n	8009106 <__fpclassifyd+0x1e>
 80090f4:	4811      	ldr	r0, [pc, #68]	; (800913c <__fpclassifyd+0x54>)
 80090f6:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 80090fa:	4284      	cmp	r4, r0
 80090fc:	d808      	bhi.n	8009110 <__fpclassifyd+0x28>
 80090fe:	2004      	movs	r0, #4
 8009100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	b91a      	cbnz	r2, 8009110 <__fpclassifyd+0x28>
 8009108:	2002      	movs	r0, #2
 800910a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8009114:	4809      	ldr	r0, [pc, #36]	; (800913c <__fpclassifyd+0x54>)
 8009116:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800911a:	4283      	cmp	r3, r0
 800911c:	d9ef      	bls.n	80090fe <__fpclassifyd+0x16>
 800911e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009122:	d201      	bcs.n	8009128 <__fpclassifyd+0x40>
 8009124:	2003      	movs	r0, #3
 8009126:	e7eb      	b.n	8009100 <__fpclassifyd+0x18>
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <__fpclassifyd+0x58>)
 800912a:	4299      	cmp	r1, r3
 800912c:	d001      	beq.n	8009132 <__fpclassifyd+0x4a>
 800912e:	2000      	movs	r0, #0
 8009130:	e7e6      	b.n	8009100 <__fpclassifyd+0x18>
 8009132:	fab2 f082 	clz	r0, r2
 8009136:	0940      	lsrs	r0, r0, #5
 8009138:	e7e2      	b.n	8009100 <__fpclassifyd+0x18>
 800913a:	bf00      	nop
 800913c:	7fdfffff 	.word	0x7fdfffff
 8009140:	7ff00000 	.word	0x7ff00000

08009144 <__ssprint_r>:
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	6893      	ldr	r3, [r2, #8]
 800914a:	b083      	sub	sp, #12
 800914c:	4690      	mov	r8, r2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d072      	beq.n	8009238 <__ssprint_r+0xf4>
 8009152:	4683      	mov	fp, r0
 8009154:	f04f 0900 	mov.w	r9, #0
 8009158:	6816      	ldr	r6, [r2, #0]
 800915a:	6808      	ldr	r0, [r1, #0]
 800915c:	688b      	ldr	r3, [r1, #8]
 800915e:	460d      	mov	r5, r1
 8009160:	464c      	mov	r4, r9
 8009162:	2c00      	cmp	r4, #0
 8009164:	d045      	beq.n	80091f2 <__ssprint_r+0xae>
 8009166:	429c      	cmp	r4, r3
 8009168:	461f      	mov	r7, r3
 800916a:	469a      	mov	sl, r3
 800916c:	d346      	bcc.n	80091fc <__ssprint_r+0xb8>
 800916e:	89ab      	ldrh	r3, [r5, #12]
 8009170:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8009174:	d02d      	beq.n	80091d2 <__ssprint_r+0x8e>
 8009176:	696f      	ldr	r7, [r5, #20]
 8009178:	6929      	ldr	r1, [r5, #16]
 800917a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800917e:	ebc1 0a00 	rsb	sl, r1, r0
 8009182:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8009186:	1c60      	adds	r0, r4, #1
 8009188:	107f      	asrs	r7, r7, #1
 800918a:	4450      	add	r0, sl
 800918c:	42b8      	cmp	r0, r7
 800918e:	463a      	mov	r2, r7
 8009190:	bf84      	itt	hi
 8009192:	4607      	movhi	r7, r0
 8009194:	463a      	movhi	r2, r7
 8009196:	055b      	lsls	r3, r3, #21
 8009198:	d533      	bpl.n	8009202 <__ssprint_r+0xbe>
 800919a:	4611      	mov	r1, r2
 800919c:	4658      	mov	r0, fp
 800919e:	f7ff f9d5 	bl	800854c <_malloc_r>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d037      	beq.n	8009216 <__ssprint_r+0xd2>
 80091a6:	4652      	mov	r2, sl
 80091a8:	6929      	ldr	r1, [r5, #16]
 80091aa:	9001      	str	r0, [sp, #4]
 80091ac:	f7f7 fa12 	bl	80005d4 <memcpy>
 80091b0:	89aa      	ldrh	r2, [r5, #12]
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80091b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091bc:	81aa      	strh	r2, [r5, #12]
 80091be:	ebca 0207 	rsb	r2, sl, r7
 80091c2:	eb03 000a 	add.w	r0, r3, sl
 80091c6:	616f      	str	r7, [r5, #20]
 80091c8:	612b      	str	r3, [r5, #16]
 80091ca:	6028      	str	r0, [r5, #0]
 80091cc:	60aa      	str	r2, [r5, #8]
 80091ce:	4627      	mov	r7, r4
 80091d0:	46a2      	mov	sl, r4
 80091d2:	4652      	mov	r2, sl
 80091d4:	4649      	mov	r1, r9
 80091d6:	f000 f99b 	bl	8009510 <memmove>
 80091da:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80091de:	68ab      	ldr	r3, [r5, #8]
 80091e0:	6828      	ldr	r0, [r5, #0]
 80091e2:	1bdb      	subs	r3, r3, r7
 80091e4:	4450      	add	r0, sl
 80091e6:	1b14      	subs	r4, r2, r4
 80091e8:	60ab      	str	r3, [r5, #8]
 80091ea:	6028      	str	r0, [r5, #0]
 80091ec:	f8c8 4008 	str.w	r4, [r8, #8]
 80091f0:	b314      	cbz	r4, 8009238 <__ssprint_r+0xf4>
 80091f2:	f8d6 9000 	ldr.w	r9, [r6]
 80091f6:	6874      	ldr	r4, [r6, #4]
 80091f8:	3608      	adds	r6, #8
 80091fa:	e7b2      	b.n	8009162 <__ssprint_r+0x1e>
 80091fc:	4627      	mov	r7, r4
 80091fe:	46a2      	mov	sl, r4
 8009200:	e7e7      	b.n	80091d2 <__ssprint_r+0x8e>
 8009202:	4658      	mov	r0, fp
 8009204:	f000 f9e8 	bl	80095d8 <_realloc_r>
 8009208:	4603      	mov	r3, r0
 800920a:	2800      	cmp	r0, #0
 800920c:	d1d7      	bne.n	80091be <__ssprint_r+0x7a>
 800920e:	6929      	ldr	r1, [r5, #16]
 8009210:	4658      	mov	r0, fp
 8009212:	f000 f895 	bl	8009340 <_free_r>
 8009216:	230c      	movs	r3, #12
 8009218:	f8cb 3000 	str.w	r3, [fp]
 800921c:	89ab      	ldrh	r3, [r5, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009224:	f04f 30ff 	mov.w	r0, #4294967295
 8009228:	81ab      	strh	r3, [r5, #12]
 800922a:	f8c8 2008 	str.w	r2, [r8, #8]
 800922e:	f8c8 2004 	str.w	r2, [r8, #4]
 8009232:	b003      	add	sp, #12
 8009234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009238:	2000      	movs	r0, #0
 800923a:	f8c8 0004 	str.w	r0, [r8, #4]
 800923e:	b003      	add	sp, #12
 8009240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009244 <_calloc_r>:
 8009244:	b510      	push	{r4, lr}
 8009246:	fb02 f101 	mul.w	r1, r2, r1
 800924a:	f7ff f97f 	bl	800854c <_malloc_r>
 800924e:	4604      	mov	r4, r0
 8009250:	b1d8      	cbz	r0, 800928a <_calloc_r+0x46>
 8009252:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009256:	f022 0203 	bic.w	r2, r2, #3
 800925a:	3a04      	subs	r2, #4
 800925c:	2a24      	cmp	r2, #36	; 0x24
 800925e:	d818      	bhi.n	8009292 <_calloc_r+0x4e>
 8009260:	2a13      	cmp	r2, #19
 8009262:	d914      	bls.n	800928e <_calloc_r+0x4a>
 8009264:	2300      	movs	r3, #0
 8009266:	2a1b      	cmp	r2, #27
 8009268:	6003      	str	r3, [r0, #0]
 800926a:	6043      	str	r3, [r0, #4]
 800926c:	d916      	bls.n	800929c <_calloc_r+0x58>
 800926e:	2a24      	cmp	r2, #36	; 0x24
 8009270:	6083      	str	r3, [r0, #8]
 8009272:	60c3      	str	r3, [r0, #12]
 8009274:	bf11      	iteee	ne
 8009276:	f100 0210 	addne.w	r2, r0, #16
 800927a:	6103      	streq	r3, [r0, #16]
 800927c:	6143      	streq	r3, [r0, #20]
 800927e:	f100 0218 	addeq.w	r2, r0, #24
 8009282:	2300      	movs	r3, #0
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	6053      	str	r3, [r2, #4]
 8009288:	6093      	str	r3, [r2, #8]
 800928a:	4620      	mov	r0, r4
 800928c:	bd10      	pop	{r4, pc}
 800928e:	4602      	mov	r2, r0
 8009290:	e7f7      	b.n	8009282 <_calloc_r+0x3e>
 8009292:	2100      	movs	r1, #0
 8009294:	f7f7 ff78 	bl	8001188 <memset>
 8009298:	4620      	mov	r0, r4
 800929a:	bd10      	pop	{r4, pc}
 800929c:	f100 0208 	add.w	r2, r0, #8
 80092a0:	e7ef      	b.n	8009282 <_calloc_r+0x3e>
 80092a2:	bf00      	nop

080092a4 <_malloc_trim_r>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	4f23      	ldr	r7, [pc, #140]	; (8009334 <_malloc_trim_r+0x90>)
 80092a8:	460c      	mov	r4, r1
 80092aa:	4606      	mov	r6, r0
 80092ac:	f7ff fc06 	bl	8008abc <__malloc_lock>
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	685d      	ldr	r5, [r3, #4]
 80092b4:	f025 0503 	bic.w	r5, r5, #3
 80092b8:	1b29      	subs	r1, r5, r4
 80092ba:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80092be:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80092c2:	f021 010f 	bic.w	r1, r1, #15
 80092c6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80092ca:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80092ce:	db07      	blt.n	80092e0 <_malloc_trim_r+0x3c>
 80092d0:	2100      	movs	r1, #0
 80092d2:	4630      	mov	r0, r6
 80092d4:	f7f8 fac0 	bl	8001858 <_sbrk_r>
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	442b      	add	r3, r5
 80092dc:	4298      	cmp	r0, r3
 80092de:	d004      	beq.n	80092ea <_malloc_trim_r+0x46>
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7ff fbed 	bl	8008ac0 <__malloc_unlock>
 80092e6:	2000      	movs	r0, #0
 80092e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ea:	4261      	negs	r1, r4
 80092ec:	4630      	mov	r0, r6
 80092ee:	f7f8 fab3 	bl	8001858 <_sbrk_r>
 80092f2:	3001      	adds	r0, #1
 80092f4:	d00d      	beq.n	8009312 <_malloc_trim_r+0x6e>
 80092f6:	4b10      	ldr	r3, [pc, #64]	; (8009338 <_malloc_trim_r+0x94>)
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	6819      	ldr	r1, [r3, #0]
 80092fc:	1b2d      	subs	r5, r5, r4
 80092fe:	f045 0501 	orr.w	r5, r5, #1
 8009302:	4630      	mov	r0, r6
 8009304:	1b09      	subs	r1, r1, r4
 8009306:	6055      	str	r5, [r2, #4]
 8009308:	6019      	str	r1, [r3, #0]
 800930a:	f7ff fbd9 	bl	8008ac0 <__malloc_unlock>
 800930e:	2001      	movs	r0, #1
 8009310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009312:	2100      	movs	r1, #0
 8009314:	4630      	mov	r0, r6
 8009316:	f7f8 fa9f 	bl	8001858 <_sbrk_r>
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	1a83      	subs	r3, r0, r2
 800931e:	2b0f      	cmp	r3, #15
 8009320:	ddde      	ble.n	80092e0 <_malloc_trim_r+0x3c>
 8009322:	4c06      	ldr	r4, [pc, #24]	; (800933c <_malloc_trim_r+0x98>)
 8009324:	4904      	ldr	r1, [pc, #16]	; (8009338 <_malloc_trim_r+0x94>)
 8009326:	6824      	ldr	r4, [r4, #0]
 8009328:	f043 0301 	orr.w	r3, r3, #1
 800932c:	1b00      	subs	r0, r0, r4
 800932e:	6053      	str	r3, [r2, #4]
 8009330:	6008      	str	r0, [r1, #0]
 8009332:	e7d5      	b.n	80092e0 <_malloc_trim_r+0x3c>
 8009334:	20000468 	.word	0x20000468
 8009338:	20000e1c 	.word	0x20000e1c
 800933c:	20000874 	.word	0x20000874

08009340 <_free_r>:
 8009340:	2900      	cmp	r1, #0
 8009342:	d045      	beq.n	80093d0 <_free_r+0x90>
 8009344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009348:	460d      	mov	r5, r1
 800934a:	4680      	mov	r8, r0
 800934c:	f7ff fbb6 	bl	8008abc <__malloc_lock>
 8009350:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8009354:	496a      	ldr	r1, [pc, #424]	; (8009500 <_free_r+0x1c0>)
 8009356:	f027 0301 	bic.w	r3, r7, #1
 800935a:	f1a5 0408 	sub.w	r4, r5, #8
 800935e:	18e2      	adds	r2, r4, r3
 8009360:	688e      	ldr	r6, [r1, #8]
 8009362:	6850      	ldr	r0, [r2, #4]
 8009364:	42b2      	cmp	r2, r6
 8009366:	f020 0003 	bic.w	r0, r0, #3
 800936a:	d062      	beq.n	8009432 <_free_r+0xf2>
 800936c:	07fe      	lsls	r6, r7, #31
 800936e:	6050      	str	r0, [r2, #4]
 8009370:	d40b      	bmi.n	800938a <_free_r+0x4a>
 8009372:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8009376:	1be4      	subs	r4, r4, r7
 8009378:	f101 0e08 	add.w	lr, r1, #8
 800937c:	68a5      	ldr	r5, [r4, #8]
 800937e:	4575      	cmp	r5, lr
 8009380:	443b      	add	r3, r7
 8009382:	d06f      	beq.n	8009464 <_free_r+0x124>
 8009384:	68e7      	ldr	r7, [r4, #12]
 8009386:	60ef      	str	r7, [r5, #12]
 8009388:	60bd      	str	r5, [r7, #8]
 800938a:	1815      	adds	r5, r2, r0
 800938c:	686d      	ldr	r5, [r5, #4]
 800938e:	07ed      	lsls	r5, r5, #31
 8009390:	d542      	bpl.n	8009418 <_free_r+0xd8>
 8009392:	f043 0201 	orr.w	r2, r3, #1
 8009396:	6062      	str	r2, [r4, #4]
 8009398:	50e3      	str	r3, [r4, r3]
 800939a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800939e:	d218      	bcs.n	80093d2 <_free_r+0x92>
 80093a0:	08db      	lsrs	r3, r3, #3
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	684d      	ldr	r5, [r1, #4]
 80093a6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 80093aa:	60a7      	str	r7, [r4, #8]
 80093ac:	2001      	movs	r0, #1
 80093ae:	109b      	asrs	r3, r3, #2
 80093b0:	fa00 f303 	lsl.w	r3, r0, r3
 80093b4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 80093b8:	431d      	orrs	r5, r3
 80093ba:	3808      	subs	r0, #8
 80093bc:	60e0      	str	r0, [r4, #12]
 80093be:	604d      	str	r5, [r1, #4]
 80093c0:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 80093c4:	60fc      	str	r4, [r7, #12]
 80093c6:	4640      	mov	r0, r8
 80093c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093cc:	f7ff bb78 	b.w	8008ac0 <__malloc_unlock>
 80093d0:	4770      	bx	lr
 80093d2:	0a5a      	lsrs	r2, r3, #9
 80093d4:	2a04      	cmp	r2, #4
 80093d6:	d853      	bhi.n	8009480 <_free_r+0x140>
 80093d8:	099a      	lsrs	r2, r3, #6
 80093da:	f102 0739 	add.w	r7, r2, #57	; 0x39
 80093de:	007f      	lsls	r7, r7, #1
 80093e0:	f102 0538 	add.w	r5, r2, #56	; 0x38
 80093e4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 80093e8:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 80093ec:	4944      	ldr	r1, [pc, #272]	; (8009500 <_free_r+0x1c0>)
 80093ee:	3808      	subs	r0, #8
 80093f0:	4290      	cmp	r0, r2
 80093f2:	d04d      	beq.n	8009490 <_free_r+0x150>
 80093f4:	6851      	ldr	r1, [r2, #4]
 80093f6:	f021 0103 	bic.w	r1, r1, #3
 80093fa:	428b      	cmp	r3, r1
 80093fc:	d202      	bcs.n	8009404 <_free_r+0xc4>
 80093fe:	6892      	ldr	r2, [r2, #8]
 8009400:	4290      	cmp	r0, r2
 8009402:	d1f7      	bne.n	80093f4 <_free_r+0xb4>
 8009404:	68d0      	ldr	r0, [r2, #12]
 8009406:	60e0      	str	r0, [r4, #12]
 8009408:	60a2      	str	r2, [r4, #8]
 800940a:	6084      	str	r4, [r0, #8]
 800940c:	60d4      	str	r4, [r2, #12]
 800940e:	4640      	mov	r0, r8
 8009410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009414:	f7ff bb54 	b.w	8008ac0 <__malloc_unlock>
 8009418:	6895      	ldr	r5, [r2, #8]
 800941a:	4f3a      	ldr	r7, [pc, #232]	; (8009504 <_free_r+0x1c4>)
 800941c:	42bd      	cmp	r5, r7
 800941e:	4403      	add	r3, r0
 8009420:	d03f      	beq.n	80094a2 <_free_r+0x162>
 8009422:	68d0      	ldr	r0, [r2, #12]
 8009424:	60e8      	str	r0, [r5, #12]
 8009426:	f043 0201 	orr.w	r2, r3, #1
 800942a:	6085      	str	r5, [r0, #8]
 800942c:	6062      	str	r2, [r4, #4]
 800942e:	50e3      	str	r3, [r4, r3]
 8009430:	e7b3      	b.n	800939a <_free_r+0x5a>
 8009432:	07ff      	lsls	r7, r7, #31
 8009434:	4403      	add	r3, r0
 8009436:	d407      	bmi.n	8009448 <_free_r+0x108>
 8009438:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800943c:	1aa4      	subs	r4, r4, r2
 800943e:	4413      	add	r3, r2
 8009440:	68a0      	ldr	r0, [r4, #8]
 8009442:	68e2      	ldr	r2, [r4, #12]
 8009444:	60c2      	str	r2, [r0, #12]
 8009446:	6090      	str	r0, [r2, #8]
 8009448:	4a2f      	ldr	r2, [pc, #188]	; (8009508 <_free_r+0x1c8>)
 800944a:	6812      	ldr	r2, [r2, #0]
 800944c:	f043 0001 	orr.w	r0, r3, #1
 8009450:	4293      	cmp	r3, r2
 8009452:	6060      	str	r0, [r4, #4]
 8009454:	608c      	str	r4, [r1, #8]
 8009456:	d3b6      	bcc.n	80093c6 <_free_r+0x86>
 8009458:	4b2c      	ldr	r3, [pc, #176]	; (800950c <_free_r+0x1cc>)
 800945a:	4640      	mov	r0, r8
 800945c:	6819      	ldr	r1, [r3, #0]
 800945e:	f7ff ff21 	bl	80092a4 <_malloc_trim_r>
 8009462:	e7b0      	b.n	80093c6 <_free_r+0x86>
 8009464:	1811      	adds	r1, r2, r0
 8009466:	6849      	ldr	r1, [r1, #4]
 8009468:	07c9      	lsls	r1, r1, #31
 800946a:	d444      	bmi.n	80094f6 <_free_r+0x1b6>
 800946c:	6891      	ldr	r1, [r2, #8]
 800946e:	68d2      	ldr	r2, [r2, #12]
 8009470:	60ca      	str	r2, [r1, #12]
 8009472:	4403      	add	r3, r0
 8009474:	f043 0001 	orr.w	r0, r3, #1
 8009478:	6091      	str	r1, [r2, #8]
 800947a:	6060      	str	r0, [r4, #4]
 800947c:	50e3      	str	r3, [r4, r3]
 800947e:	e7a2      	b.n	80093c6 <_free_r+0x86>
 8009480:	2a14      	cmp	r2, #20
 8009482:	d817      	bhi.n	80094b4 <_free_r+0x174>
 8009484:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8009488:	007f      	lsls	r7, r7, #1
 800948a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800948e:	e7a9      	b.n	80093e4 <_free_r+0xa4>
 8009490:	10aa      	asrs	r2, r5, #2
 8009492:	684b      	ldr	r3, [r1, #4]
 8009494:	2501      	movs	r5, #1
 8009496:	fa05 f202 	lsl.w	r2, r5, r2
 800949a:	4313      	orrs	r3, r2
 800949c:	604b      	str	r3, [r1, #4]
 800949e:	4602      	mov	r2, r0
 80094a0:	e7b1      	b.n	8009406 <_free_r+0xc6>
 80094a2:	f043 0201 	orr.w	r2, r3, #1
 80094a6:	614c      	str	r4, [r1, #20]
 80094a8:	610c      	str	r4, [r1, #16]
 80094aa:	60e5      	str	r5, [r4, #12]
 80094ac:	60a5      	str	r5, [r4, #8]
 80094ae:	6062      	str	r2, [r4, #4]
 80094b0:	50e3      	str	r3, [r4, r3]
 80094b2:	e788      	b.n	80093c6 <_free_r+0x86>
 80094b4:	2a54      	cmp	r2, #84	; 0x54
 80094b6:	d806      	bhi.n	80094c6 <_free_r+0x186>
 80094b8:	0b1a      	lsrs	r2, r3, #12
 80094ba:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 80094be:	007f      	lsls	r7, r7, #1
 80094c0:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 80094c4:	e78e      	b.n	80093e4 <_free_r+0xa4>
 80094c6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80094ca:	d806      	bhi.n	80094da <_free_r+0x19a>
 80094cc:	0bda      	lsrs	r2, r3, #15
 80094ce:	f102 0778 	add.w	r7, r2, #120	; 0x78
 80094d2:	007f      	lsls	r7, r7, #1
 80094d4:	f102 0577 	add.w	r5, r2, #119	; 0x77
 80094d8:	e784      	b.n	80093e4 <_free_r+0xa4>
 80094da:	f240 5054 	movw	r0, #1364	; 0x554
 80094de:	4282      	cmp	r2, r0
 80094e0:	d806      	bhi.n	80094f0 <_free_r+0x1b0>
 80094e2:	0c9a      	lsrs	r2, r3, #18
 80094e4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 80094e8:	007f      	lsls	r7, r7, #1
 80094ea:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 80094ee:	e779      	b.n	80093e4 <_free_r+0xa4>
 80094f0:	27fe      	movs	r7, #254	; 0xfe
 80094f2:	257e      	movs	r5, #126	; 0x7e
 80094f4:	e776      	b.n	80093e4 <_free_r+0xa4>
 80094f6:	f043 0201 	orr.w	r2, r3, #1
 80094fa:	6062      	str	r2, [r4, #4]
 80094fc:	50e3      	str	r3, [r4, r3]
 80094fe:	e762      	b.n	80093c6 <_free_r+0x86>
 8009500:	20000468 	.word	0x20000468
 8009504:	20000470 	.word	0x20000470
 8009508:	20000870 	.word	0x20000870
 800950c:	20000e18 	.word	0x20000e18

08009510 <memmove>:
 8009510:	4288      	cmp	r0, r1
 8009512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009514:	d90d      	bls.n	8009532 <memmove+0x22>
 8009516:	188b      	adds	r3, r1, r2
 8009518:	4298      	cmp	r0, r3
 800951a:	d20a      	bcs.n	8009532 <memmove+0x22>
 800951c:	1881      	adds	r1, r0, r2
 800951e:	2a00      	cmp	r2, #0
 8009520:	d051      	beq.n	80095c6 <memmove+0xb6>
 8009522:	1a9a      	subs	r2, r3, r2
 8009524:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009528:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800952c:	4293      	cmp	r3, r2
 800952e:	d1f9      	bne.n	8009524 <memmove+0x14>
 8009530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009532:	2a0f      	cmp	r2, #15
 8009534:	d948      	bls.n	80095c8 <memmove+0xb8>
 8009536:	ea41 0300 	orr.w	r3, r1, r0
 800953a:	079b      	lsls	r3, r3, #30
 800953c:	d146      	bne.n	80095cc <memmove+0xbc>
 800953e:	f100 0410 	add.w	r4, r0, #16
 8009542:	f101 0310 	add.w	r3, r1, #16
 8009546:	4615      	mov	r5, r2
 8009548:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800954c:	f844 6c10 	str.w	r6, [r4, #-16]
 8009550:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8009554:	f844 6c0c 	str.w	r6, [r4, #-12]
 8009558:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800955c:	f844 6c08 	str.w	r6, [r4, #-8]
 8009560:	3d10      	subs	r5, #16
 8009562:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8009566:	f844 6c04 	str.w	r6, [r4, #-4]
 800956a:	2d0f      	cmp	r5, #15
 800956c:	f103 0310 	add.w	r3, r3, #16
 8009570:	f104 0410 	add.w	r4, r4, #16
 8009574:	d8e8      	bhi.n	8009548 <memmove+0x38>
 8009576:	f1a2 0310 	sub.w	r3, r2, #16
 800957a:	f023 030f 	bic.w	r3, r3, #15
 800957e:	f002 0e0f 	and.w	lr, r2, #15
 8009582:	3310      	adds	r3, #16
 8009584:	f1be 0f03 	cmp.w	lr, #3
 8009588:	4419      	add	r1, r3
 800958a:	4403      	add	r3, r0
 800958c:	d921      	bls.n	80095d2 <memmove+0xc2>
 800958e:	1f1e      	subs	r6, r3, #4
 8009590:	460d      	mov	r5, r1
 8009592:	4674      	mov	r4, lr
 8009594:	3c04      	subs	r4, #4
 8009596:	f855 7b04 	ldr.w	r7, [r5], #4
 800959a:	f846 7f04 	str.w	r7, [r6, #4]!
 800959e:	2c03      	cmp	r4, #3
 80095a0:	d8f8      	bhi.n	8009594 <memmove+0x84>
 80095a2:	f1ae 0404 	sub.w	r4, lr, #4
 80095a6:	f024 0403 	bic.w	r4, r4, #3
 80095aa:	3404      	adds	r4, #4
 80095ac:	4423      	add	r3, r4
 80095ae:	4421      	add	r1, r4
 80095b0:	f002 0203 	and.w	r2, r2, #3
 80095b4:	b162      	cbz	r2, 80095d0 <memmove+0xc0>
 80095b6:	3b01      	subs	r3, #1
 80095b8:	440a      	add	r2, r1
 80095ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c2:	428a      	cmp	r2, r1
 80095c4:	d1f9      	bne.n	80095ba <memmove+0xaa>
 80095c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c8:	4603      	mov	r3, r0
 80095ca:	e7f3      	b.n	80095b4 <memmove+0xa4>
 80095cc:	4603      	mov	r3, r0
 80095ce:	e7f2      	b.n	80095b6 <memmove+0xa6>
 80095d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d2:	4672      	mov	r2, lr
 80095d4:	e7ee      	b.n	80095b4 <memmove+0xa4>
 80095d6:	bf00      	nop

080095d8 <_realloc_r>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	4617      	mov	r7, r2
 80095de:	b083      	sub	sp, #12
 80095e0:	2900      	cmp	r1, #0
 80095e2:	f000 80c1 	beq.w	8009768 <_realloc_r+0x190>
 80095e6:	460e      	mov	r6, r1
 80095e8:	4681      	mov	r9, r0
 80095ea:	f107 050b 	add.w	r5, r7, #11
 80095ee:	f7ff fa65 	bl	8008abc <__malloc_lock>
 80095f2:	f856 ec04 	ldr.w	lr, [r6, #-4]
 80095f6:	2d16      	cmp	r5, #22
 80095f8:	f02e 0403 	bic.w	r4, lr, #3
 80095fc:	f1a6 0808 	sub.w	r8, r6, #8
 8009600:	d840      	bhi.n	8009684 <_realloc_r+0xac>
 8009602:	2210      	movs	r2, #16
 8009604:	4615      	mov	r5, r2
 8009606:	42af      	cmp	r7, r5
 8009608:	d841      	bhi.n	800968e <_realloc_r+0xb6>
 800960a:	4294      	cmp	r4, r2
 800960c:	da75      	bge.n	80096fa <_realloc_r+0x122>
 800960e:	4bc9      	ldr	r3, [pc, #804]	; (8009934 <_realloc_r+0x35c>)
 8009610:	6899      	ldr	r1, [r3, #8]
 8009612:	eb08 0004 	add.w	r0, r8, r4
 8009616:	4288      	cmp	r0, r1
 8009618:	6841      	ldr	r1, [r0, #4]
 800961a:	f000 80d9 	beq.w	80097d0 <_realloc_r+0x1f8>
 800961e:	f021 0301 	bic.w	r3, r1, #1
 8009622:	4403      	add	r3, r0
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	07db      	lsls	r3, r3, #31
 8009628:	d57d      	bpl.n	8009726 <_realloc_r+0x14e>
 800962a:	f01e 0f01 	tst.w	lr, #1
 800962e:	d035      	beq.n	800969c <_realloc_r+0xc4>
 8009630:	4639      	mov	r1, r7
 8009632:	4648      	mov	r0, r9
 8009634:	f7fe ff8a 	bl	800854c <_malloc_r>
 8009638:	4607      	mov	r7, r0
 800963a:	b1e0      	cbz	r0, 8009676 <_realloc_r+0x9e>
 800963c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009640:	f023 0301 	bic.w	r3, r3, #1
 8009644:	4443      	add	r3, r8
 8009646:	f1a0 0208 	sub.w	r2, r0, #8
 800964a:	429a      	cmp	r2, r3
 800964c:	f000 8144 	beq.w	80098d8 <_realloc_r+0x300>
 8009650:	1f22      	subs	r2, r4, #4
 8009652:	2a24      	cmp	r2, #36	; 0x24
 8009654:	f200 8131 	bhi.w	80098ba <_realloc_r+0x2e2>
 8009658:	2a13      	cmp	r2, #19
 800965a:	f200 8104 	bhi.w	8009866 <_realloc_r+0x28e>
 800965e:	4603      	mov	r3, r0
 8009660:	4632      	mov	r2, r6
 8009662:	6811      	ldr	r1, [r2, #0]
 8009664:	6019      	str	r1, [r3, #0]
 8009666:	6851      	ldr	r1, [r2, #4]
 8009668:	6059      	str	r1, [r3, #4]
 800966a:	6892      	ldr	r2, [r2, #8]
 800966c:	609a      	str	r2, [r3, #8]
 800966e:	4631      	mov	r1, r6
 8009670:	4648      	mov	r0, r9
 8009672:	f7ff fe65 	bl	8009340 <_free_r>
 8009676:	4648      	mov	r0, r9
 8009678:	f7ff fa22 	bl	8008ac0 <__malloc_unlock>
 800967c:	4638      	mov	r0, r7
 800967e:	b003      	add	sp, #12
 8009680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009684:	f025 0507 	bic.w	r5, r5, #7
 8009688:	2d00      	cmp	r5, #0
 800968a:	462a      	mov	r2, r5
 800968c:	dabb      	bge.n	8009606 <_realloc_r+0x2e>
 800968e:	230c      	movs	r3, #12
 8009690:	2000      	movs	r0, #0
 8009692:	f8c9 3000 	str.w	r3, [r9]
 8009696:	b003      	add	sp, #12
 8009698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80096a0:	ebc3 0a08 	rsb	sl, r3, r8
 80096a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80096a8:	f023 0c03 	bic.w	ip, r3, #3
 80096ac:	eb04 030c 	add.w	r3, r4, ip
 80096b0:	4293      	cmp	r3, r2
 80096b2:	dbbd      	blt.n	8009630 <_realloc_r+0x58>
 80096b4:	4657      	mov	r7, sl
 80096b6:	f8da 100c 	ldr.w	r1, [sl, #12]
 80096ba:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80096be:	1f22      	subs	r2, r4, #4
 80096c0:	2a24      	cmp	r2, #36	; 0x24
 80096c2:	60c1      	str	r1, [r0, #12]
 80096c4:	6088      	str	r0, [r1, #8]
 80096c6:	f200 8117 	bhi.w	80098f8 <_realloc_r+0x320>
 80096ca:	2a13      	cmp	r2, #19
 80096cc:	f240 8112 	bls.w	80098f4 <_realloc_r+0x31c>
 80096d0:	6831      	ldr	r1, [r6, #0]
 80096d2:	f8ca 1008 	str.w	r1, [sl, #8]
 80096d6:	6871      	ldr	r1, [r6, #4]
 80096d8:	f8ca 100c 	str.w	r1, [sl, #12]
 80096dc:	2a1b      	cmp	r2, #27
 80096de:	f200 812b 	bhi.w	8009938 <_realloc_r+0x360>
 80096e2:	3608      	adds	r6, #8
 80096e4:	f10a 0210 	add.w	r2, sl, #16
 80096e8:	6831      	ldr	r1, [r6, #0]
 80096ea:	6011      	str	r1, [r2, #0]
 80096ec:	6871      	ldr	r1, [r6, #4]
 80096ee:	6051      	str	r1, [r2, #4]
 80096f0:	68b1      	ldr	r1, [r6, #8]
 80096f2:	6091      	str	r1, [r2, #8]
 80096f4:	463e      	mov	r6, r7
 80096f6:	461c      	mov	r4, r3
 80096f8:	46d0      	mov	r8, sl
 80096fa:	1b63      	subs	r3, r4, r5
 80096fc:	2b0f      	cmp	r3, #15
 80096fe:	d81d      	bhi.n	800973c <_realloc_r+0x164>
 8009700:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	4323      	orrs	r3, r4
 800970a:	4444      	add	r4, r8
 800970c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009710:	6863      	ldr	r3, [r4, #4]
 8009712:	f043 0301 	orr.w	r3, r3, #1
 8009716:	6063      	str	r3, [r4, #4]
 8009718:	4648      	mov	r0, r9
 800971a:	f7ff f9d1 	bl	8008ac0 <__malloc_unlock>
 800971e:	4630      	mov	r0, r6
 8009720:	b003      	add	sp, #12
 8009722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009726:	f021 0103 	bic.w	r1, r1, #3
 800972a:	4421      	add	r1, r4
 800972c:	4291      	cmp	r1, r2
 800972e:	db21      	blt.n	8009774 <_realloc_r+0x19c>
 8009730:	68c3      	ldr	r3, [r0, #12]
 8009732:	6882      	ldr	r2, [r0, #8]
 8009734:	460c      	mov	r4, r1
 8009736:	60d3      	str	r3, [r2, #12]
 8009738:	609a      	str	r2, [r3, #8]
 800973a:	e7de      	b.n	80096fa <_realloc_r+0x122>
 800973c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009740:	eb08 0105 	add.w	r1, r8, r5
 8009744:	f002 0201 	and.w	r2, r2, #1
 8009748:	4315      	orrs	r5, r2
 800974a:	f043 0201 	orr.w	r2, r3, #1
 800974e:	440b      	add	r3, r1
 8009750:	f8c8 5004 	str.w	r5, [r8, #4]
 8009754:	604a      	str	r2, [r1, #4]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	f042 0201 	orr.w	r2, r2, #1
 800975c:	3108      	adds	r1, #8
 800975e:	605a      	str	r2, [r3, #4]
 8009760:	4648      	mov	r0, r9
 8009762:	f7ff fded 	bl	8009340 <_free_r>
 8009766:	e7d7      	b.n	8009718 <_realloc_r+0x140>
 8009768:	4611      	mov	r1, r2
 800976a:	b003      	add	sp, #12
 800976c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	f7fe beec 	b.w	800854c <_malloc_r>
 8009774:	f01e 0f01 	tst.w	lr, #1
 8009778:	f47f af5a 	bne.w	8009630 <_realloc_r+0x58>
 800977c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009780:	ebc3 0a08 	rsb	sl, r3, r8
 8009784:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009788:	f023 0c03 	bic.w	ip, r3, #3
 800978c:	eb01 0e0c 	add.w	lr, r1, ip
 8009790:	4596      	cmp	lr, r2
 8009792:	db8b      	blt.n	80096ac <_realloc_r+0xd4>
 8009794:	68c3      	ldr	r3, [r0, #12]
 8009796:	6882      	ldr	r2, [r0, #8]
 8009798:	4657      	mov	r7, sl
 800979a:	60d3      	str	r3, [r2, #12]
 800979c:	609a      	str	r2, [r3, #8]
 800979e:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80097a2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80097a6:	60cb      	str	r3, [r1, #12]
 80097a8:	1f22      	subs	r2, r4, #4
 80097aa:	2a24      	cmp	r2, #36	; 0x24
 80097ac:	6099      	str	r1, [r3, #8]
 80097ae:	f200 8099 	bhi.w	80098e4 <_realloc_r+0x30c>
 80097b2:	2a13      	cmp	r2, #19
 80097b4:	d962      	bls.n	800987c <_realloc_r+0x2a4>
 80097b6:	6833      	ldr	r3, [r6, #0]
 80097b8:	f8ca 3008 	str.w	r3, [sl, #8]
 80097bc:	6873      	ldr	r3, [r6, #4]
 80097be:	f8ca 300c 	str.w	r3, [sl, #12]
 80097c2:	2a1b      	cmp	r2, #27
 80097c4:	f200 80a0 	bhi.w	8009908 <_realloc_r+0x330>
 80097c8:	3608      	adds	r6, #8
 80097ca:	f10a 0310 	add.w	r3, sl, #16
 80097ce:	e056      	b.n	800987e <_realloc_r+0x2a6>
 80097d0:	f021 0b03 	bic.w	fp, r1, #3
 80097d4:	44a3      	add	fp, r4
 80097d6:	f105 0010 	add.w	r0, r5, #16
 80097da:	4583      	cmp	fp, r0
 80097dc:	da59      	bge.n	8009892 <_realloc_r+0x2ba>
 80097de:	f01e 0f01 	tst.w	lr, #1
 80097e2:	f47f af25 	bne.w	8009630 <_realloc_r+0x58>
 80097e6:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80097ea:	ebc1 0a08 	rsb	sl, r1, r8
 80097ee:	f8da 1004 	ldr.w	r1, [sl, #4]
 80097f2:	f021 0c03 	bic.w	ip, r1, #3
 80097f6:	44e3      	add	fp, ip
 80097f8:	4558      	cmp	r0, fp
 80097fa:	f73f af57 	bgt.w	80096ac <_realloc_r+0xd4>
 80097fe:	4657      	mov	r7, sl
 8009800:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009804:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009808:	1f22      	subs	r2, r4, #4
 800980a:	2a24      	cmp	r2, #36	; 0x24
 800980c:	60c1      	str	r1, [r0, #12]
 800980e:	6088      	str	r0, [r1, #8]
 8009810:	f200 80b4 	bhi.w	800997c <_realloc_r+0x3a4>
 8009814:	2a13      	cmp	r2, #19
 8009816:	f240 80a5 	bls.w	8009964 <_realloc_r+0x38c>
 800981a:	6831      	ldr	r1, [r6, #0]
 800981c:	f8ca 1008 	str.w	r1, [sl, #8]
 8009820:	6871      	ldr	r1, [r6, #4]
 8009822:	f8ca 100c 	str.w	r1, [sl, #12]
 8009826:	2a1b      	cmp	r2, #27
 8009828:	f200 80af 	bhi.w	800998a <_realloc_r+0x3b2>
 800982c:	3608      	adds	r6, #8
 800982e:	f10a 0210 	add.w	r2, sl, #16
 8009832:	6831      	ldr	r1, [r6, #0]
 8009834:	6011      	str	r1, [r2, #0]
 8009836:	6871      	ldr	r1, [r6, #4]
 8009838:	6051      	str	r1, [r2, #4]
 800983a:	68b1      	ldr	r1, [r6, #8]
 800983c:	6091      	str	r1, [r2, #8]
 800983e:	eb0a 0105 	add.w	r1, sl, r5
 8009842:	ebc5 020b 	rsb	r2, r5, fp
 8009846:	f042 0201 	orr.w	r2, r2, #1
 800984a:	6099      	str	r1, [r3, #8]
 800984c:	604a      	str	r2, [r1, #4]
 800984e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	431d      	orrs	r5, r3
 8009858:	4648      	mov	r0, r9
 800985a:	f8ca 5004 	str.w	r5, [sl, #4]
 800985e:	f7ff f92f 	bl	8008ac0 <__malloc_unlock>
 8009862:	4638      	mov	r0, r7
 8009864:	e75c      	b.n	8009720 <_realloc_r+0x148>
 8009866:	6833      	ldr	r3, [r6, #0]
 8009868:	6003      	str	r3, [r0, #0]
 800986a:	6873      	ldr	r3, [r6, #4]
 800986c:	6043      	str	r3, [r0, #4]
 800986e:	2a1b      	cmp	r2, #27
 8009870:	d827      	bhi.n	80098c2 <_realloc_r+0x2ea>
 8009872:	f100 0308 	add.w	r3, r0, #8
 8009876:	f106 0208 	add.w	r2, r6, #8
 800987a:	e6f2      	b.n	8009662 <_realloc_r+0x8a>
 800987c:	463b      	mov	r3, r7
 800987e:	6832      	ldr	r2, [r6, #0]
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	6872      	ldr	r2, [r6, #4]
 8009884:	605a      	str	r2, [r3, #4]
 8009886:	68b2      	ldr	r2, [r6, #8]
 8009888:	609a      	str	r2, [r3, #8]
 800988a:	463e      	mov	r6, r7
 800988c:	4674      	mov	r4, lr
 800988e:	46d0      	mov	r8, sl
 8009890:	e733      	b.n	80096fa <_realloc_r+0x122>
 8009892:	eb08 0105 	add.w	r1, r8, r5
 8009896:	ebc5 0b0b 	rsb	fp, r5, fp
 800989a:	f04b 0201 	orr.w	r2, fp, #1
 800989e:	6099      	str	r1, [r3, #8]
 80098a0:	604a      	str	r2, [r1, #4]
 80098a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	431d      	orrs	r5, r3
 80098ac:	4648      	mov	r0, r9
 80098ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80098b2:	f7ff f905 	bl	8008ac0 <__malloc_unlock>
 80098b6:	4630      	mov	r0, r6
 80098b8:	e732      	b.n	8009720 <_realloc_r+0x148>
 80098ba:	4631      	mov	r1, r6
 80098bc:	f7ff fe28 	bl	8009510 <memmove>
 80098c0:	e6d5      	b.n	800966e <_realloc_r+0x96>
 80098c2:	68b3      	ldr	r3, [r6, #8]
 80098c4:	6083      	str	r3, [r0, #8]
 80098c6:	68f3      	ldr	r3, [r6, #12]
 80098c8:	60c3      	str	r3, [r0, #12]
 80098ca:	2a24      	cmp	r2, #36	; 0x24
 80098cc:	d028      	beq.n	8009920 <_realloc_r+0x348>
 80098ce:	f100 0310 	add.w	r3, r0, #16
 80098d2:	f106 0210 	add.w	r2, r6, #16
 80098d6:	e6c4      	b.n	8009662 <_realloc_r+0x8a>
 80098d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80098dc:	f023 0303 	bic.w	r3, r3, #3
 80098e0:	441c      	add	r4, r3
 80098e2:	e70a      	b.n	80096fa <_realloc_r+0x122>
 80098e4:	4631      	mov	r1, r6
 80098e6:	4638      	mov	r0, r7
 80098e8:	4674      	mov	r4, lr
 80098ea:	46d0      	mov	r8, sl
 80098ec:	f7ff fe10 	bl	8009510 <memmove>
 80098f0:	463e      	mov	r6, r7
 80098f2:	e702      	b.n	80096fa <_realloc_r+0x122>
 80098f4:	463a      	mov	r2, r7
 80098f6:	e6f7      	b.n	80096e8 <_realloc_r+0x110>
 80098f8:	4631      	mov	r1, r6
 80098fa:	4638      	mov	r0, r7
 80098fc:	461c      	mov	r4, r3
 80098fe:	46d0      	mov	r8, sl
 8009900:	f7ff fe06 	bl	8009510 <memmove>
 8009904:	463e      	mov	r6, r7
 8009906:	e6f8      	b.n	80096fa <_realloc_r+0x122>
 8009908:	68b3      	ldr	r3, [r6, #8]
 800990a:	f8ca 3010 	str.w	r3, [sl, #16]
 800990e:	68f3      	ldr	r3, [r6, #12]
 8009910:	f8ca 3014 	str.w	r3, [sl, #20]
 8009914:	2a24      	cmp	r2, #36	; 0x24
 8009916:	d01b      	beq.n	8009950 <_realloc_r+0x378>
 8009918:	3610      	adds	r6, #16
 800991a:	f10a 0318 	add.w	r3, sl, #24
 800991e:	e7ae      	b.n	800987e <_realloc_r+0x2a6>
 8009920:	6933      	ldr	r3, [r6, #16]
 8009922:	6103      	str	r3, [r0, #16]
 8009924:	6973      	ldr	r3, [r6, #20]
 8009926:	6143      	str	r3, [r0, #20]
 8009928:	f106 0218 	add.w	r2, r6, #24
 800992c:	f100 0318 	add.w	r3, r0, #24
 8009930:	e697      	b.n	8009662 <_realloc_r+0x8a>
 8009932:	bf00      	nop
 8009934:	20000468 	.word	0x20000468
 8009938:	68b1      	ldr	r1, [r6, #8]
 800993a:	f8ca 1010 	str.w	r1, [sl, #16]
 800993e:	68f1      	ldr	r1, [r6, #12]
 8009940:	f8ca 1014 	str.w	r1, [sl, #20]
 8009944:	2a24      	cmp	r2, #36	; 0x24
 8009946:	d00f      	beq.n	8009968 <_realloc_r+0x390>
 8009948:	3610      	adds	r6, #16
 800994a:	f10a 0218 	add.w	r2, sl, #24
 800994e:	e6cb      	b.n	80096e8 <_realloc_r+0x110>
 8009950:	6933      	ldr	r3, [r6, #16]
 8009952:	f8ca 3018 	str.w	r3, [sl, #24]
 8009956:	6973      	ldr	r3, [r6, #20]
 8009958:	f8ca 301c 	str.w	r3, [sl, #28]
 800995c:	3618      	adds	r6, #24
 800995e:	f10a 0320 	add.w	r3, sl, #32
 8009962:	e78c      	b.n	800987e <_realloc_r+0x2a6>
 8009964:	463a      	mov	r2, r7
 8009966:	e764      	b.n	8009832 <_realloc_r+0x25a>
 8009968:	6932      	ldr	r2, [r6, #16]
 800996a:	f8ca 2018 	str.w	r2, [sl, #24]
 800996e:	6972      	ldr	r2, [r6, #20]
 8009970:	f8ca 201c 	str.w	r2, [sl, #28]
 8009974:	3618      	adds	r6, #24
 8009976:	f10a 0220 	add.w	r2, sl, #32
 800997a:	e6b5      	b.n	80096e8 <_realloc_r+0x110>
 800997c:	4631      	mov	r1, r6
 800997e:	4638      	mov	r0, r7
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	f7ff fdc5 	bl	8009510 <memmove>
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	e759      	b.n	800983e <_realloc_r+0x266>
 800998a:	68b1      	ldr	r1, [r6, #8]
 800998c:	f8ca 1010 	str.w	r1, [sl, #16]
 8009990:	68f1      	ldr	r1, [r6, #12]
 8009992:	f8ca 1014 	str.w	r1, [sl, #20]
 8009996:	2a24      	cmp	r2, #36	; 0x24
 8009998:	d003      	beq.n	80099a2 <_realloc_r+0x3ca>
 800999a:	3610      	adds	r6, #16
 800999c:	f10a 0218 	add.w	r2, sl, #24
 80099a0:	e747      	b.n	8009832 <_realloc_r+0x25a>
 80099a2:	6932      	ldr	r2, [r6, #16]
 80099a4:	f8ca 2018 	str.w	r2, [sl, #24]
 80099a8:	6972      	ldr	r2, [r6, #20]
 80099aa:	f8ca 201c 	str.w	r2, [sl, #28]
 80099ae:	3618      	adds	r6, #24
 80099b0:	f10a 0220 	add.w	r2, sl, #32
 80099b4:	e73d      	b.n	8009832 <_realloc_r+0x25a>
 80099b6:	bf00      	nop

080099b8 <_init>:
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	bf00      	nop
 80099bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099be:	bc08      	pop	{r3}
 80099c0:	469e      	mov	lr, r3
 80099c2:	4770      	bx	lr

080099c4 <_fini>:
 80099c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c6:	bf00      	nop
 80099c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ca:	bc08      	pop	{r3}
 80099cc:	469e      	mov	lr, r3
 80099ce:	4770      	bx	lr
