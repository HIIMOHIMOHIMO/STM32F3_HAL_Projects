
Test06_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000370c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080038d0  080038d0  000138d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000042c  20000000  080038dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002042c  2**0
                  CONTENTS
  7 .bss          000000a8  2000042c  2000042c  0002042c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200004d4  200004d4  0002042c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000425e  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000083c7  00000000  00000000  000246ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000014d6  00000000  00000000  0002ca81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000710  00000000  00000000  0002df58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000648  00000000  00000000  0002e668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000393c  00000000  00000000  0002ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000021eb  00000000  00000000  000325ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000006e  00000000  00000000  000347d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b24  00000000  00000000  00034848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000042f 	.word	0x2000042f
 80001a0:	2000042c 	.word	0x2000042c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	2000042c 	.word	0x2000042c
 80001c4:	2000042c 	.word	0x2000042c
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000042c 	.word	0x2000042c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800387c 	.word	0x0800387c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000430 	.word	0x20000430
 8000220:	0800387c 	.word	0x0800387c
 8000224:	2000042c 	.word	0x2000042c
 8000228:	00000000 	.word	0x00000000

0800022c <memcpy>:
 800022c:	4684      	mov	ip, r0
 800022e:	ea41 0300 	orr.w	r3, r1, r0
 8000232:	f013 0303 	ands.w	r3, r3, #3
 8000236:	d16d      	bne.n	8000314 <memcpy+0xe8>
 8000238:	3a40      	subs	r2, #64	; 0x40
 800023a:	d341      	bcc.n	80002c0 <memcpy+0x94>
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000270:	f840 3b04 	str.w	r3, [r0], #4
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	f851 3b04 	ldr.w	r3, [r1], #4
 8000298:	f840 3b04 	str.w	r3, [r0], #4
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a8:	f840 3b04 	str.w	r3, [r0], #4
 80002ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b0:	f840 3b04 	str.w	r3, [r0], #4
 80002b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b8:	f840 3b04 	str.w	r3, [r0], #4
 80002bc:	3a40      	subs	r2, #64	; 0x40
 80002be:	d2bd      	bcs.n	800023c <memcpy+0x10>
 80002c0:	3230      	adds	r2, #48	; 0x30
 80002c2:	d311      	bcc.n	80002e8 <memcpy+0xbc>
 80002c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c8:	f840 3b04 	str.w	r3, [r0], #4
 80002cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d0:	f840 3b04 	str.w	r3, [r0], #4
 80002d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d8:	f840 3b04 	str.w	r3, [r0], #4
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	3a10      	subs	r2, #16
 80002e6:	d2ed      	bcs.n	80002c4 <memcpy+0x98>
 80002e8:	320c      	adds	r2, #12
 80002ea:	d305      	bcc.n	80002f8 <memcpy+0xcc>
 80002ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f0:	f840 3b04 	str.w	r3, [r0], #4
 80002f4:	3a04      	subs	r2, #4
 80002f6:	d2f9      	bcs.n	80002ec <memcpy+0xc0>
 80002f8:	3204      	adds	r2, #4
 80002fa:	d008      	beq.n	800030e <memcpy+0xe2>
 80002fc:	07d2      	lsls	r2, r2, #31
 80002fe:	bf1c      	itt	ne
 8000300:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000304:	f800 3b01 	strbne.w	r3, [r0], #1
 8000308:	d301      	bcc.n	800030e <memcpy+0xe2>
 800030a:	880b      	ldrh	r3, [r1, #0]
 800030c:	8003      	strh	r3, [r0, #0]
 800030e:	4660      	mov	r0, ip
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	2a08      	cmp	r2, #8
 8000316:	d313      	bcc.n	8000340 <memcpy+0x114>
 8000318:	078b      	lsls	r3, r1, #30
 800031a:	d08d      	beq.n	8000238 <memcpy+0xc>
 800031c:	f010 0303 	ands.w	r3, r0, #3
 8000320:	d08a      	beq.n	8000238 <memcpy+0xc>
 8000322:	f1c3 0304 	rsb	r3, r3, #4
 8000326:	1ad2      	subs	r2, r2, r3
 8000328:	07db      	lsls	r3, r3, #31
 800032a:	bf1c      	itt	ne
 800032c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000330:	f800 3b01 	strbne.w	r3, [r0], #1
 8000334:	d380      	bcc.n	8000238 <memcpy+0xc>
 8000336:	f831 3b02 	ldrh.w	r3, [r1], #2
 800033a:	f820 3b02 	strh.w	r3, [r0], #2
 800033e:	e77b      	b.n	8000238 <memcpy+0xc>
 8000340:	3a04      	subs	r2, #4
 8000342:	d3d9      	bcc.n	80002f8 <memcpy+0xcc>
 8000344:	3a01      	subs	r2, #1
 8000346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800034a:	f800 3b01 	strb.w	r3, [r0], #1
 800034e:	d2f9      	bcs.n	8000344 <memcpy+0x118>
 8000350:	780b      	ldrb	r3, [r1, #0]
 8000352:	7003      	strb	r3, [r0, #0]
 8000354:	784b      	ldrb	r3, [r1, #1]
 8000356:	7043      	strb	r3, [r0, #1]
 8000358:	788b      	ldrb	r3, [r1, #2]
 800035a:	7083      	strb	r3, [r0, #2]
 800035c:	4660      	mov	r0, ip
 800035e:	4770      	bx	lr

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	4e0f      	ldr	r6, [pc, #60]	; (80003a0 <__libc_init_array+0x40>)
 8000364:	4d0f      	ldr	r5, [pc, #60]	; (80003a4 <__libc_init_array+0x44>)
 8000366:	1b76      	subs	r6, r6, r5
 8000368:	10b6      	asrs	r6, r6, #2
 800036a:	bf18      	it	ne
 800036c:	2400      	movne	r4, #0
 800036e:	d005      	beq.n	800037c <__libc_init_array+0x1c>
 8000370:	3401      	adds	r4, #1
 8000372:	f855 3b04 	ldr.w	r3, [r5], #4
 8000376:	4798      	blx	r3
 8000378:	42a6      	cmp	r6, r4
 800037a:	d1f9      	bne.n	8000370 <__libc_init_array+0x10>
 800037c:	4e0a      	ldr	r6, [pc, #40]	; (80003a8 <__libc_init_array+0x48>)
 800037e:	4d0b      	ldr	r5, [pc, #44]	; (80003ac <__libc_init_array+0x4c>)
 8000380:	1b76      	subs	r6, r6, r5
 8000382:	f003 fa7b 	bl	800387c <_init>
 8000386:	10b6      	asrs	r6, r6, #2
 8000388:	bf18      	it	ne
 800038a:	2400      	movne	r4, #0
 800038c:	d006      	beq.n	800039c <__libc_init_array+0x3c>
 800038e:	3401      	adds	r4, #1
 8000390:	f855 3b04 	ldr.w	r3, [r5], #4
 8000394:	4798      	blx	r3
 8000396:	42a6      	cmp	r6, r4
 8000398:	d1f9      	bne.n	800038e <__libc_init_array+0x2e>
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	bd70      	pop	{r4, r5, r6, pc}
 800039e:	bf00      	nop
 80003a0:	080038d0 	.word	0x080038d0
 80003a4:	080038d0 	.word	0x080038d0
 80003a8:	080038d8 	.word	0x080038d8
 80003ac:	080038d0 	.word	0x080038d0

080003b0 <register_fini>:
 80003b0:	4b02      	ldr	r3, [pc, #8]	; (80003bc <register_fini+0xc>)
 80003b2:	b113      	cbz	r3, 80003ba <register_fini+0xa>
 80003b4:	4802      	ldr	r0, [pc, #8]	; (80003c0 <register_fini+0x10>)
 80003b6:	f000 b805 	b.w	80003c4 <atexit>
 80003ba:	4770      	bx	lr
 80003bc:	00000000 	.word	0x00000000
 80003c0:	080003d1 	.word	0x080003d1

080003c4 <atexit>:
 80003c4:	2300      	movs	r3, #0
 80003c6:	4601      	mov	r1, r0
 80003c8:	461a      	mov	r2, r3
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 b814 	b.w	80003f8 <__register_exitproc>

080003d0 <__libc_fini_array>:
 80003d0:	b538      	push	{r3, r4, r5, lr}
 80003d2:	4d07      	ldr	r5, [pc, #28]	; (80003f0 <__libc_fini_array+0x20>)
 80003d4:	4c07      	ldr	r4, [pc, #28]	; (80003f4 <__libc_fini_array+0x24>)
 80003d6:	1b2c      	subs	r4, r5, r4
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	d005      	beq.n	80003e8 <__libc_fini_array+0x18>
 80003dc:	3c01      	subs	r4, #1
 80003de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80003e2:	4798      	blx	r3
 80003e4:	2c00      	cmp	r4, #0
 80003e6:	d1f9      	bne.n	80003dc <__libc_fini_array+0xc>
 80003e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80003ec:	f003 ba4c 	b.w	8003888 <_fini>
 80003f0:	080038dc 	.word	0x080038dc
 80003f4:	080038d8 	.word	0x080038d8

080003f8 <__register_exitproc>:
 80003f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003fc:	4c25      	ldr	r4, [pc, #148]	; (8000494 <__register_exitproc+0x9c>)
 80003fe:	6825      	ldr	r5, [r4, #0]
 8000400:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8000404:	4606      	mov	r6, r0
 8000406:	4688      	mov	r8, r1
 8000408:	4692      	mov	sl, r2
 800040a:	4699      	mov	r9, r3
 800040c:	b3c4      	cbz	r4, 8000480 <__register_exitproc+0x88>
 800040e:	6860      	ldr	r0, [r4, #4]
 8000410:	281f      	cmp	r0, #31
 8000412:	dc17      	bgt.n	8000444 <__register_exitproc+0x4c>
 8000414:	1c43      	adds	r3, r0, #1
 8000416:	b176      	cbz	r6, 8000436 <__register_exitproc+0x3e>
 8000418:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800041c:	2201      	movs	r2, #1
 800041e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8000422:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 8000426:	4082      	lsls	r2, r0
 8000428:	4311      	orrs	r1, r2
 800042a:	2e02      	cmp	r6, #2
 800042c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 8000430:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8000434:	d01e      	beq.n	8000474 <__register_exitproc+0x7c>
 8000436:	3002      	adds	r0, #2
 8000438:	6063      	str	r3, [r4, #4]
 800043a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800043e:	2000      	movs	r0, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <__register_exitproc+0xa0>)
 8000446:	b303      	cbz	r3, 800048a <__register_exitproc+0x92>
 8000448:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800044c:	f3af 8000 	nop.w
 8000450:	4604      	mov	r4, r0
 8000452:	b1d0      	cbz	r0, 800048a <__register_exitproc+0x92>
 8000454:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000458:	2700      	movs	r7, #0
 800045a:	e880 0088 	stmia.w	r0, {r3, r7}
 800045e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000462:	4638      	mov	r0, r7
 8000464:	2301      	movs	r3, #1
 8000466:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800046a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800046e:	2e00      	cmp	r6, #0
 8000470:	d0e1      	beq.n	8000436 <__register_exitproc+0x3e>
 8000472:	e7d1      	b.n	8000418 <__register_exitproc+0x20>
 8000474:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000478:	430a      	orrs	r2, r1
 800047a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800047e:	e7da      	b.n	8000436 <__register_exitproc+0x3e>
 8000480:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000484:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000488:	e7c1      	b.n	800040e <__register_exitproc+0x16>
 800048a:	f04f 30ff 	mov.w	r0, #4294967295
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	bf00      	nop
 8000494:	0800389c 	.word	0x0800389c
 8000498:	00000000 	.word	0x00000000

0800049c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800049c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004a2:	e003      	b.n	80004ac <LoopCopyDataInit>

080004a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004aa:	3104      	adds	r1, #4

080004ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004ac:	480b      	ldr	r0, [pc, #44]	; (80004dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004b4:	d3f6      	bcc.n	80004a4 <CopyDataInit>
	ldr	r2, =_sbss
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004b8:	e002      	b.n	80004c0 <LoopFillZerobss>

080004ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004bc:	f842 3b04 	str.w	r3, [r2], #4

080004c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <LoopForever+0x16>)
	cmp	r2, r3
 80004c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004c4:	d3f9      	bcc.n	80004ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004c6:	f000 f9cb 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ca:	f7ff ff49 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ce:	f000 f80f 	bl	80004f0 <main>

080004d2 <LoopForever>:

LoopForever:
    b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004d4:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80004d8:	080038dc 	.word	0x080038dc
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80004e0:	2000042c 	.word	0x2000042c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80004e4:	2000042c 	.word	0x2000042c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80004e8:	200004d4 	.word	0x200004d4

080004ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC1_2_IRQHandler>
	...

080004f0 <main>:

/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	uint8_t read=0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	73bb      	strb	r3, [r7, #14]
	uint8_t address=0x75;//WHO_AM_I
 80004fa:	2375      	movs	r3, #117	; 0x75
 80004fc:	73fb      	strb	r3, [r7, #15]
	uint8_t config=0x12;
 80004fe:	2312      	movs	r3, #18
 8000500:	737b      	strb	r3, [r7, #13]
	uint8_t set[]={0x1A,0x12};
 8000502:	4a41      	ldr	r2, [pc, #260]	; (8000608 <main+0x118>)
 8000504:	f107 0308 	add.w	r3, r7, #8
 8000508:	4611      	mov	r1, r2
 800050a:	2202      	movs	r2, #2
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fe8d 	bl	800022c <memcpy>
	uint8_t dat=0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fa91 	bl	8000a3c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f87b 	bl	8000614 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f91d 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 8000522:	f000 f8fd 	bl	8000720 <MX_DMA_Init>
  MX_I2C1_Init();
 8000526:	f000 f8c5 	bl	80006b4 <MX_I2C1_Init>
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
//READ MPU6050(0xD0) WHO_AM_I(0x75)
		HAL_I2C_Mem_Read(&hi2c1,0xD0/*device ID*/,0x75/*WHO_AM_I*/,I2C_MEMADD_SIZE_8BIT/*Memory Address Size*/,&read/*Data Buffer*/,1,10);
 800052a:	230a      	movs	r3, #10
 800052c:	9302      	str	r3, [sp, #8]
 800052e:	2301      	movs	r3, #1
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	f107 030e 	add.w	r3, r7, #14
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2301      	movs	r3, #1
 800053a:	2275      	movs	r2, #117	; 0x75
 800053c:	21d0      	movs	r1, #208	; 0xd0
 800053e:	4833      	ldr	r0, [pc, #204]	; (800060c <main+0x11c>)
 8000540:	f001 f98c 	bl	800185c <HAL_I2C_Mem_Read>
		if( read == 0x68 ){
 8000544:	7bbb      	ldrb	r3, [r7, #14]
 8000546:	2b68      	cmp	r3, #104	; 0x68
 8000548:	d14c      	bne.n	80005e4 <main+0xf4>
//			HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
//if 'read' have correct data
			while(1){
//if(
				HAL_I2C_Mem_Write(&hi2c1,0xD0,0x6B,I2C_MEMADD_SIZE_8BIT,&dat,1,10);
 800054a:	230a      	movs	r3, #10
 800054c:	9302      	str	r3, [sp, #8]
 800054e:	2301      	movs	r3, #1
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	1dfb      	adds	r3, r7, #7
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2301      	movs	r3, #1
 8000558:	226b      	movs	r2, #107	; 0x6b
 800055a:	21d0      	movs	r1, #208	; 0xd0
 800055c:	482b      	ldr	r0, [pc, #172]	; (800060c <main+0x11c>)
 800055e:	f001 f857 	bl	8001610 <HAL_I2C_Mem_Write>
				HAL_I2C_Mem_Read(&hi2c1,0xD0,0x6B,I2C_MEMADD_SIZE_8BIT,&read,1,10);
 8000562:	230a      	movs	r3, #10
 8000564:	9302      	str	r3, [sp, #8]
 8000566:	2301      	movs	r3, #1
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	f107 030e 	add.w	r3, r7, #14
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2301      	movs	r3, #1
 8000572:	226b      	movs	r2, #107	; 0x6b
 8000574:	21d0      	movs	r1, #208	; 0xd0
 8000576:	4825      	ldr	r0, [pc, #148]	; (800060c <main+0x11c>)
 8000578:	f001 f970 	bl	800185c <HAL_I2C_Mem_Read>

				HAL_I2C_Mem_Write(&hi2c1,0xD0,0x1a,I2C_MEMADD_SIZE_8BIT,&config,sizeof(config),10);
 800057c:	230a      	movs	r3, #10
 800057e:	9302      	str	r3, [sp, #8]
 8000580:	2301      	movs	r3, #1
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	f107 030d 	add.w	r3, r7, #13
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2301      	movs	r3, #1
 800058c:	221a      	movs	r2, #26
 800058e:	21d0      	movs	r1, #208	; 0xd0
 8000590:	481e      	ldr	r0, [pc, #120]	; (800060c <main+0x11c>)
 8000592:	f001 f83d 	bl	8001610 <HAL_I2C_Mem_Write>
//!=HAL_OK)Error_Handler();
				HAL_I2C_Mem_Read(&hi2c1,0xD0,0x1a,I2C_MEMADD_SIZE_8BIT,&read,1,10);
 8000596:	230a      	movs	r3, #10
 8000598:	9302      	str	r3, [sp, #8]
 800059a:	2301      	movs	r3, #1
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	f107 030e 	add.w	r3, r7, #14
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2301      	movs	r3, #1
 80005a6:	221a      	movs	r2, #26
 80005a8:	21d0      	movs	r1, #208	; 0xd0
 80005aa:	4818      	ldr	r0, [pc, #96]	; (800060c <main+0x11c>)
 80005ac:	f001 f956 	bl	800185c <HAL_I2C_Mem_Read>
				if(read==0x12){
 80005b0:	7bbb      	ldrb	r3, [r7, #14]
 80005b2:	2b12      	cmp	r3, #18
 80005b4:	d105      	bne.n	80005c2 <main+0xd2>
		//if 'read' have correct data
					HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2108      	movs	r1, #8
 80005ba:	4815      	ldr	r0, [pc, #84]	; (8000610 <main+0x120>)
 80005bc:	f000 ff86 	bl	80014cc <HAL_GPIO_WritePin>
 80005c0:	e7c3      	b.n	800054a <main+0x5a>
				}else{/*read == 0x12*/
		//if 'read' have wrong data
					while(1){
						HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2108      	movs	r1, #8
 80005c6:	4812      	ldr	r0, [pc, #72]	; (8000610 <main+0x120>)
 80005c8:	f000 ff80 	bl	80014cc <HAL_GPIO_WritePin>
						HAL_Delay(50);
 80005cc:	2032      	movs	r0, #50	; 0x32
 80005ce:	f000 fa81 	bl	8000ad4 <HAL_Delay>
						HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2108      	movs	r1, #8
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <main+0x120>)
 80005d8:	f000 ff78 	bl	80014cc <HAL_GPIO_WritePin>
						HAL_Delay(200);
 80005dc:	20c8      	movs	r0, #200	; 0xc8
 80005de:	f000 fa79 	bl	8000ad4 <HAL_Delay>
					}
 80005e2:	e7ee      	b.n	80005c2 <main+0xd2>
			}

		}else{/*read == 0x68*/
//if 'read' have wrong data
			while(1){
				HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2108      	movs	r1, #8
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <main+0x120>)
 80005ea:	f000 ff6f 	bl	80014cc <HAL_GPIO_WritePin>
				HAL_Delay(200);
 80005ee:	20c8      	movs	r0, #200	; 0xc8
 80005f0:	f000 fa70 	bl	8000ad4 <HAL_Delay>
				HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2108      	movs	r1, #8
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <main+0x120>)
 80005fa:	f000 ff67 	bl	80014cc <HAL_GPIO_WritePin>
				HAL_Delay(50);
 80005fe:	2032      	movs	r0, #50	; 0x32
 8000600:	f000 fa68 	bl	8000ad4 <HAL_Delay>
			}
 8000604:	e7ee      	b.n	80005e4 <main+0xf4>
 8000606:	bf00      	nop
 8000608:	08003894 	.word	0x08003894
 800060c:	20000448 	.word	0x20000448
 8000610:	48000400 	.word	0x48000400

08000614 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b096      	sub	sp, #88	; 0x58
 8000618:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061a:	2302      	movs	r3, #2
 800061c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000622:	2310      	movs	r3, #16
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000626:	2300      	movs	r3, #0
 8000628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fcaa 	bl	8001f88 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x2a>
  {
    Error_Handler();
 800063a:	f000 f8b9 	bl	80007b0 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fd57 	bl	800310c <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000664:	f000 f8a4 	bl	80007b0 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000668:	2320      	movs	r3, #32
 800066a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f002 ffbc 	bl	80035f0 <HAL_RCCEx_PeriphCLKConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800067e:	f000 f897 	bl	80007b0 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000682:	f002 ffa9 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8000686:	4602      	mov	r2, r0
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <SystemClock_Config+0x9c>)
 800068a:	fba3 2302 	umull	r2, r3, r3, r2
 800068e:	099b      	lsrs	r3, r3, #6
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fb33 	bl	8000cfc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000696:	2004      	movs	r0, #4
 8000698:	f000 fb3c 	bl	8000d14 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f000 fb00 	bl	8000ca8 <HAL_NVIC_SetPriority>
}
 80006a8:	bf00      	nop
 80006aa:	3758      	adds	r7, #88	; 0x58
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	10624dd3 	.word	0x10624dd3

080006b4 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_I2C1_Init+0x60>)
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <MX_I2C1_Init+0x64>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_I2C1_Init+0x60>)
 80006c0:	4a16      	ldr	r2, [pc, #88]	; (800071c <MX_I2C1_Init+0x68>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_I2C1_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_I2C1_Init+0x60>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_I2C1_Init+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_I2C1_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_I2C1_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_I2C1_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_I2C1_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ee:	4809      	ldr	r0, [pc, #36]	; (8000714 <MX_I2C1_Init+0x60>)
 80006f0:	f000 ff04 	bl	80014fc <HAL_I2C_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006fa:	f000 f859 	bl	80007b0 <Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fe:	2100      	movs	r1, #0
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_I2C1_Init+0x60>)
 8000702:	f001 fbf5 	bl	8001ef0 <HAL_I2CEx_ConfigAnalogFilter>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800070c:	f000 f850 	bl	80007b0 <Error_Handler>
  }

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000448 	.word	0x20000448
 8000718:	40005400 	.word	0x40005400
 800071c:	2000090e 	.word	0x2000090e

08000720 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000726:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <MX_DMA_Init+0x38>)
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_DMA_Init+0x38>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_DMA_Init+0x38>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	200d      	movs	r0, #13
 8000744:	f000 fab0 	bl	8000ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000748:	200d      	movs	r0, #13
 800074a:	f000 fac9 	bl	8000ce0 <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <MX_GPIO_Init+0x4c>)
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_GPIO_Init+0x4c>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_GPIO_Init+0x4c>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2108      	movs	r1, #8
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0x50>)
 8000780:	f000 fea4 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000784:	2308      	movs	r3, #8
 8000786:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0x50>)
 800079a:	f000 fd21 	bl	80011e0 <HAL_GPIO_Init>

}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000400 	.word	0x48000400

080007b0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2108      	movs	r1, #8
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <Error_Handler+0x28>)
 80007ba:	f000 fe87 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80007be:	2032      	movs	r0, #50	; 0x32
 80007c0:	f000 f988 	bl	8000ad4 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2108      	movs	r1, #8
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <Error_Handler+0x28>)
 80007ca:	f000 fe7f 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80007ce:	2032      	movs	r0, #50	; 0x32
 80007d0:	f000 f980 	bl	8000ad4 <HAL_Delay>
  }
 80007d4:	e7ee      	b.n	80007b4 <Error_Handler+0x4>
 80007d6:	bf00      	nop
 80007d8:	48000400 	.word	0x48000400

080007dc <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 80007f0:	e7fe      	b.n	80007f0 <HardFault_Handler+0x4>
 80007f2:	bf00      	nop

080007f4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>
 80007fa:	bf00      	nop

080007fc <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8000800:	e7fe      	b.n	8000800 <BusFault_Handler+0x4>
 8000802:	bf00      	nop

08000804 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler+0x4>
 800080a:	bf00      	nop

0800080c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop

0800081c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000840:	f000 f92e 	bl	8000aa0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000844:	f000 fa82 	bl	8000d4c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <DMA1_Channel3_IRQHandler>:

/**
* @brief This function handles DMA1 channel3 global interrupt.
*/
void DMA1_Channel3_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <DMA1_Channel3_IRQHandler+0x10>)
 8000852:	f000 fad5 	bl	8000e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000494 	.word	0x20000494

08000860 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000864:	4a1f      	ldr	r2, [pc, #124]	; (80008e4 <SystemInit+0x84>)
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <SystemInit+0x84>)
 8000868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000874:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <SystemInit+0x88>)
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <SystemInit+0x88>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000880:	4919      	ldr	r1, [pc, #100]	; (80008e8 <SystemInit+0x88>)
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <SystemInit+0x88>)
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <SystemInit+0x8c>)
 8000888:	4013      	ands	r3, r2
 800088a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800088c:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <SystemInit+0x88>)
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <SystemInit+0x88>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800089a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800089c:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <SystemInit+0x88>)
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <SystemInit+0x88>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80008a8:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <SystemInit+0x88>)
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <SystemInit+0x88>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008b2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <SystemInit+0x88>)
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <SystemInit+0x88>)
 80008b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ba:	f023 030f 	bic.w	r3, r3, #15
 80008be:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80008c0:	4909      	ldr	r1, [pc, #36]	; (80008e8 <SystemInit+0x88>)
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <SystemInit+0x88>)
 80008c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <SystemInit+0x90>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <SystemInit+0x88>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <SystemInit+0x84>)
 80008d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008d8:	609a      	str	r2, [r3, #8]
#endif
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00
 80008e8:	40021000 	.word	0x40021000
 80008ec:	f87fc00c 	.word	0xf87fc00c
 80008f0:	ff00fccc 	.word	0xff00fccc

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <HAL_MspInit+0x80>)
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <HAL_MspInit+0x80>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <HAL_MspInit+0x80>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000912:	2003      	movs	r0, #3
 8000914:	f000 f9bc 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	f06f 000b 	mvn.w	r0, #11
 8000920:	f000 f9c2 	bl	8000ca8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	f06f 000a 	mvn.w	r0, #10
 800092c:	f000 f9bc 	bl	8000ca8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	f06f 0009 	mvn.w	r0, #9
 8000938:	f000 f9b6 	bl	8000ca8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	f06f 0004 	mvn.w	r0, #4
 8000944:	f000 f9b0 	bl	8000ca8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	f06f 0003 	mvn.w	r0, #3
 8000950:	f000 f9aa 	bl	8000ca8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	f06f 0001 	mvn.w	r0, #1
 800095c:	f000 f9a4 	bl	8000ca8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f99e 	bl	8000ca8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a27      	ldr	r2, [pc, #156]	; (8000a24 <HAL_I2C_MspInit+0xac>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d147      	bne.n	8000a1a <HAL_I2C_MspInit+0xa2>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800098a:	23c0      	movs	r3, #192	; 0xc0
 800098c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098e:	2312      	movs	r3, #18
 8000990:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099a:	2304      	movs	r3, #4
 800099c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	4820      	ldr	r0, [pc, #128]	; (8000a28 <HAL_I2C_MspInit+0xb0>)
 80009a6:	f000 fc1b 	bl	80011e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009aa:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <HAL_I2C_MspInit+0xb4>)
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <HAL_I2C_MspInit+0xb4>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <HAL_I2C_MspInit+0xb4>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral DMA init*/
  
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_I2C_MspInit+0xb8>)
 80009c4:	4a1b      	ldr	r2, [pc, #108]	; (8000a34 <HAL_I2C_MspInit+0xbc>)
 80009c6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <HAL_I2C_MspInit+0xb8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_I2C_MspInit+0xb8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_I2C_MspInit+0xb8>)
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_I2C_MspInit+0xb8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_I2C_MspInit+0xb8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_I2C_MspInit+0xb8>)
 80009e8:	2220      	movs	r2, #32
 80009ea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_I2C_MspInit+0xb8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80009f2:	480f      	ldr	r0, [pc, #60]	; (8000a30 <HAL_I2C_MspInit+0xb8>)
 80009f4:	f000 f9b8 	bl	8000d68 <HAL_DMA_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_I2C_MspInit+0x8a>
    {
      Error_Handler();
 80009fe:	f7ff fed7 	bl	80007b0 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_RX_DMA1_CH3);
 8000a02:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <HAL_I2C_MspInit+0xc0>)
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_I2C_MspInit+0xc0>)
 8000a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a08:	f043 0310 	orr.w	r3, r3, #16
 8000a0c:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_I2C_MspInit+0xb8>)
 8000a12:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_I2C_MspInit+0xb8>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40005400 	.word	0x40005400
 8000a28:	48000400 	.word	0x48000400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	20000494 	.word	0x20000494
 8000a34:	40020030 	.word	0x40020030
 8000a38:	40010000 	.word	0x40010000

08000a3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_Init+0x28>)
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x28>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f91f 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff ff4c 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_InitTick+0x30>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <HAL_InitTick+0x34>)
 8000a76:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7a:	099b      	lsrs	r3, r3, #6
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f93d 	bl	8000cfc <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8a:	f000 f90d 	bl	8000ca8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000428 	.word	0x20000428
 8000a9c:	10624dd3 	.word	0x10624dd3

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick++;
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <HAL_IncTick+0x18>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <HAL_IncTick+0x18>)
 8000aac:	6013      	str	r3, [r2, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	200004d0 	.word	0x200004d0

08000abc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200004d0 	.word	0x200004d0

08000ad4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff ffee 	bl	8000abc <HAL_GetTick>
 8000ae0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000ae2:	bf00      	nop
 8000ae4:	f7ff ffea 	bl	8000abc <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	1ad2      	subs	r2, r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d3f7      	bcc.n	8000ae4 <HAL_Delay+0x10>
  {
  }
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b50:	0a1b      	lsrs	r3, r3, #8
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b6a:	4909      	ldr	r1, [pc, #36]	; (8000b90 <NVIC_EnableIRQ+0x30>)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	095b      	lsrs	r3, r3, #5
 8000b72:	79fa      	ldrb	r2, [r7, #7]
 8000b74:	f002 021f 	and.w	r2, r2, #31
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	da0b      	bge.n	8000bc0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	490d      	ldr	r1, [pc, #52]	; (8000be0 <NVIC_SetPriority+0x4c>)
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 030f 	and.w	r3, r3, #15
 8000bb0:	3b04      	subs	r3, #4
 8000bb2:	683a      	ldr	r2, [r7, #0]
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbe:	e009      	b.n	8000bd4 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	4908      	ldr	r1, [pc, #32]	; (8000be4 <NVIC_SetPriority+0x50>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	1e5a      	subs	r2, r3, #1
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	401a      	ands	r2, r3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2e:	2101      	movs	r1, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	1e59      	subs	r1, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000c3c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c5c:	d301      	bcc.n	8000c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00f      	b.n	8000c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <SysTick_Config+0x40>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f7ff ff90 	bl	8000b94 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SysTick_Config+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SysTick_Config+0x40>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff2f 	bl	8000afc <NVIC_SetPriorityGrouping>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop

08000ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cba:	f7ff ff43 	bl	8000b44 <NVIC_GetPriorityGrouping>
 8000cbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	6978      	ldr	r0, [r7, #20]
 8000cc6:	f7ff ff8f 	bl	8000be8 <NVIC_EncodePriority>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff5e 	bl	8000b94 <NVIC_SetPriority>
}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff36 	bl	8000b60 <NVIC_EnableIRQ>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ffa1 	bl	8000c4c <SysTick_Config>
 8000d0a:	4603      	mov	r3, r0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d106      	bne.n	8000d30 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d22:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d2e:	e005      	b.n	8000d3c <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d30:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f023 0304 	bic.w	r3, r3, #4
 8000d3a:	6013      	str	r3, [r2, #0]
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d50:	f000 f802 	bl	8000d58 <HAL_SYSTICK_Callback>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e039      	b.n	8000df2 <HAL_DMA_Init+0x8a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d103      	bne.n	8000d90 <HAL_DMA_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2202      	movs	r2, #2
 8000d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000da6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000daa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	699b      	ldr	r3, [r3, #24]
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4313      	orrs	r3, r2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}  
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{        
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8000e08:	4b8f      	ldr	r3, [pc, #572]	; (8001048 <HAL_DMA_IRQHandler+0x248>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4b8e      	ldr	r3, [pc, #568]	; (800104c <HAL_DMA_IRQHandler+0x24c>)
 8000e14:	4299      	cmp	r1, r3
 8000e16:	d02e      	beq.n	8000e76 <HAL_DMA_IRQHandler+0x76>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4b8c      	ldr	r3, [pc, #560]	; (8001050 <HAL_DMA_IRQHandler+0x250>)
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d026      	beq.n	8000e72 <HAL_DMA_IRQHandler+0x72>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4b8a      	ldr	r3, [pc, #552]	; (8001054 <HAL_DMA_IRQHandler+0x254>)
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d01d      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x6c>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	4b88      	ldr	r3, [pc, #544]	; (8001058 <HAL_DMA_IRQHandler+0x258>)
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d014      	beq.n	8000e66 <HAL_DMA_IRQHandler+0x66>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4b86      	ldr	r3, [pc, #536]	; (800105c <HAL_DMA_IRQHandler+0x25c>)
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d00b      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x60>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4b84      	ldr	r3, [pc, #528]	; (8001060 <HAL_DMA_IRQHandler+0x260>)
 8000e50:	4299      	cmp	r1, r3
 8000e52:	d102      	bne.n	8000e5a <HAL_DMA_IRQHandler+0x5a>
 8000e54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000e58:	e00e      	b.n	8000e78 <HAL_DMA_IRQHandler+0x78>
 8000e5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e5e:	e00b      	b.n	8000e78 <HAL_DMA_IRQHandler+0x78>
 8000e60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e64:	e008      	b.n	8000e78 <HAL_DMA_IRQHandler+0x78>
 8000e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6a:	e005      	b.n	8000e78 <HAL_DMA_IRQHandler+0x78>
 8000e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e70:	e002      	b.n	8000e78 <HAL_DMA_IRQHandler+0x78>
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	e000      	b.n	8000e78 <HAL_DMA_IRQHandler+0x78>
 8000e76:	2308      	movs	r3, #8
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d05c      	beq.n	8000f38 <HAL_DMA_IRQHandler+0x138>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d055      	beq.n	8000f38 <HAL_DMA_IRQHandler+0x138>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	f022 0208 	bic.w	r2, r2, #8
 8000e9a:	601a      	str	r2, [r3, #0]
    
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000e9c:	4a6a      	ldr	r2, [pc, #424]	; (8001048 <HAL_DMA_IRQHandler+0x248>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4b69      	ldr	r3, [pc, #420]	; (800104c <HAL_DMA_IRQHandler+0x24c>)
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	d02e      	beq.n	8000f08 <HAL_DMA_IRQHandler+0x108>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4b67      	ldr	r3, [pc, #412]	; (8001050 <HAL_DMA_IRQHandler+0x250>)
 8000eb2:	4299      	cmp	r1, r3
 8000eb4:	d026      	beq.n	8000f04 <HAL_DMA_IRQHandler+0x104>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4b65      	ldr	r3, [pc, #404]	; (8001054 <HAL_DMA_IRQHandler+0x254>)
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d01d      	beq.n	8000efe <HAL_DMA_IRQHandler+0xfe>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4b63      	ldr	r3, [pc, #396]	; (8001058 <HAL_DMA_IRQHandler+0x258>)
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	d014      	beq.n	8000ef8 <HAL_DMA_IRQHandler+0xf8>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4b61      	ldr	r3, [pc, #388]	; (800105c <HAL_DMA_IRQHandler+0x25c>)
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	d00b      	beq.n	8000ef2 <HAL_DMA_IRQHandler+0xf2>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4b5f      	ldr	r3, [pc, #380]	; (8001060 <HAL_DMA_IRQHandler+0x260>)
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	d102      	bne.n	8000eec <HAL_DMA_IRQHandler+0xec>
 8000ee6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000eea:	e00e      	b.n	8000f0a <HAL_DMA_IRQHandler+0x10a>
 8000eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ef0:	e00b      	b.n	8000f0a <HAL_DMA_IRQHandler+0x10a>
 8000ef2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ef6:	e008      	b.n	8000f0a <HAL_DMA_IRQHandler+0x10a>
 8000ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000efc:	e005      	b.n	8000f0a <HAL_DMA_IRQHandler+0x10a>
 8000efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f02:	e002      	b.n	8000f0a <HAL_DMA_IRQHandler+0x10a>
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	e000      	b.n	8000f0a <HAL_DMA_IRQHandler+0x10a>
 8000f08:	2308      	movs	r3, #8
 8000f0a:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f10:	f043 0201 	orr.w	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;    
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2020 	strb.w	r2, [r3, #32]
    
      if (hdma->XferErrorCallback != NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_DMA_IRQHandler+0x138>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8000f38:	4b43      	ldr	r3, [pc, #268]	; (8001048 <HAL_DMA_IRQHandler+0x248>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4b42      	ldr	r3, [pc, #264]	; (800104c <HAL_DMA_IRQHandler+0x24c>)
 8000f44:	4299      	cmp	r1, r3
 8000f46:	d02e      	beq.n	8000fa6 <HAL_DMA_IRQHandler+0x1a6>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4b40      	ldr	r3, [pc, #256]	; (8001050 <HAL_DMA_IRQHandler+0x250>)
 8000f50:	4299      	cmp	r1, r3
 8000f52:	d026      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x1a2>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <HAL_DMA_IRQHandler+0x254>)
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d01d      	beq.n	8000f9c <HAL_DMA_IRQHandler+0x19c>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <HAL_DMA_IRQHandler+0x258>)
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d014      	beq.n	8000f96 <HAL_DMA_IRQHandler+0x196>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4b3a      	ldr	r3, [pc, #232]	; (800105c <HAL_DMA_IRQHandler+0x25c>)
 8000f74:	4299      	cmp	r1, r3
 8000f76:	d00b      	beq.n	8000f90 <HAL_DMA_IRQHandler+0x190>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4b38      	ldr	r3, [pc, #224]	; (8001060 <HAL_DMA_IRQHandler+0x260>)
 8000f80:	4299      	cmp	r1, r3
 8000f82:	d102      	bne.n	8000f8a <HAL_DMA_IRQHandler+0x18a>
 8000f84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f88:	e00e      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x1a8>
 8000f8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f8e:	e00b      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x1a8>
 8000f90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f94:	e008      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x1a8>
 8000f96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f9a:	e005      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x1a8>
 8000f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa0:	e002      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x1a8>
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	e000      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x1a8>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d068      	beq.n	8001080 <HAL_DMA_IRQHandler+0x280>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d061      	beq.n	8001080 <HAL_DMA_IRQHandler+0x280>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0320 	and.w	r3, r3, #32
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d107      	bne.n	8000fda <HAL_DMA_IRQHandler+0x1da>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	f022 0204 	bic.w	r2, r2, #4
 8000fd8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fda:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <HAL_DMA_IRQHandler+0x248>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_DMA_IRQHandler+0x24c>)
 8000fe4:	4299      	cmp	r1, r3
 8000fe6:	d03d      	beq.n	8001064 <HAL_DMA_IRQHandler+0x264>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_DMA_IRQHandler+0x250>)
 8000ff0:	4299      	cmp	r1, r3
 8000ff2:	d026      	beq.n	8001042 <HAL_DMA_IRQHandler+0x242>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_DMA_IRQHandler+0x254>)
 8000ffc:	4299      	cmp	r1, r3
 8000ffe:	d01d      	beq.n	800103c <HAL_DMA_IRQHandler+0x23c>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_DMA_IRQHandler+0x258>)
 8001008:	4299      	cmp	r1, r3
 800100a:	d014      	beq.n	8001036 <HAL_DMA_IRQHandler+0x236>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_DMA_IRQHandler+0x25c>)
 8001014:	4299      	cmp	r1, r3
 8001016:	d00b      	beq.n	8001030 <HAL_DMA_IRQHandler+0x230>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_DMA_IRQHandler+0x260>)
 8001020:	4299      	cmp	r1, r3
 8001022:	d102      	bne.n	800102a <HAL_DMA_IRQHandler+0x22a>
 8001024:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001028:	e01d      	b.n	8001066 <HAL_DMA_IRQHandler+0x266>
 800102a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800102e:	e01a      	b.n	8001066 <HAL_DMA_IRQHandler+0x266>
 8001030:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001034:	e017      	b.n	8001066 <HAL_DMA_IRQHandler+0x266>
 8001036:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800103a:	e014      	b.n	8001066 <HAL_DMA_IRQHandler+0x266>
 800103c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001040:	e011      	b.n	8001066 <HAL_DMA_IRQHandler+0x266>
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	e00f      	b.n	8001066 <HAL_DMA_IRQHandler+0x266>
 8001046:	bf00      	nop
 8001048:	40020000 	.word	0x40020000
 800104c:	40020008 	.word	0x40020008
 8001050:	4002001c 	.word	0x4002001c
 8001054:	40020030 	.word	0x40020030
 8001058:	40020044 	.word	0x40020044
 800105c:	40020058 	.word	0x40020058
 8001060:	4002006c 	.word	0x4002006c
 8001064:	2304      	movs	r3, #4
 8001066:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2211      	movs	r2, #17
 800106c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_DMA_IRQHandler+0x280>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001080:	4b50      	ldr	r3, [pc, #320]	; (80011c4 <HAL_DMA_IRQHandler+0x3c4>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_DMA_IRQHandler+0x3c8>)
 800108c:	4299      	cmp	r1, r3
 800108e:	d02e      	beq.n	80010ee <HAL_DMA_IRQHandler+0x2ee>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <HAL_DMA_IRQHandler+0x3cc>)
 8001098:	4299      	cmp	r1, r3
 800109a:	d026      	beq.n	80010ea <HAL_DMA_IRQHandler+0x2ea>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <HAL_DMA_IRQHandler+0x3d0>)
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d01d      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x2e4>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <HAL_DMA_IRQHandler+0x3d4>)
 80010b0:	4299      	cmp	r1, r3
 80010b2:	d014      	beq.n	80010de <HAL_DMA_IRQHandler+0x2de>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4b47      	ldr	r3, [pc, #284]	; (80011d8 <HAL_DMA_IRQHandler+0x3d8>)
 80010bc:	4299      	cmp	r1, r3
 80010be:	d00b      	beq.n	80010d8 <HAL_DMA_IRQHandler+0x2d8>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4b45      	ldr	r3, [pc, #276]	; (80011dc <HAL_DMA_IRQHandler+0x3dc>)
 80010c8:	4299      	cmp	r1, r3
 80010ca:	d102      	bne.n	80010d2 <HAL_DMA_IRQHandler+0x2d2>
 80010cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010d0:	e00e      	b.n	80010f0 <HAL_DMA_IRQHandler+0x2f0>
 80010d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d6:	e00b      	b.n	80010f0 <HAL_DMA_IRQHandler+0x2f0>
 80010d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010dc:	e008      	b.n	80010f0 <HAL_DMA_IRQHandler+0x2f0>
 80010de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e2:	e005      	b.n	80010f0 <HAL_DMA_IRQHandler+0x2f0>
 80010e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e8:	e002      	b.n	80010f0 <HAL_DMA_IRQHandler+0x2f0>
 80010ea:	2320      	movs	r3, #32
 80010ec:	e000      	b.n	80010f0 <HAL_DMA_IRQHandler+0x2f0>
 80010ee:	2302      	movs	r3, #2
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d061      	beq.n	80011ba <HAL_DMA_IRQHandler+0x3ba>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d05a      	beq.n	80011ba <HAL_DMA_IRQHandler+0x3ba>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	2b00      	cmp	r3, #0
 8001110:	d107      	bne.n	8001122 <HAL_DMA_IRQHandler+0x322>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	f022 0202 	bic.w	r2, r2, #2
 8001120:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001122:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <HAL_DMA_IRQHandler+0x3c4>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <HAL_DMA_IRQHandler+0x3c8>)
 800112c:	4299      	cmp	r1, r3
 800112e:	d02e      	beq.n	800118e <HAL_DMA_IRQHandler+0x38e>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <HAL_DMA_IRQHandler+0x3cc>)
 8001138:	4299      	cmp	r1, r3
 800113a:	d026      	beq.n	800118a <HAL_DMA_IRQHandler+0x38a>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <HAL_DMA_IRQHandler+0x3d0>)
 8001144:	4299      	cmp	r1, r3
 8001146:	d01d      	beq.n	8001184 <HAL_DMA_IRQHandler+0x384>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_DMA_IRQHandler+0x3d4>)
 8001150:	4299      	cmp	r1, r3
 8001152:	d014      	beq.n	800117e <HAL_DMA_IRQHandler+0x37e>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_DMA_IRQHandler+0x3d8>)
 800115c:	4299      	cmp	r1, r3
 800115e:	d00b      	beq.n	8001178 <HAL_DMA_IRQHandler+0x378>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_DMA_IRQHandler+0x3dc>)
 8001168:	4299      	cmp	r1, r3
 800116a:	d102      	bne.n	8001172 <HAL_DMA_IRQHandler+0x372>
 800116c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001170:	e00e      	b.n	8001190 <HAL_DMA_IRQHandler+0x390>
 8001172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001176:	e00b      	b.n	8001190 <HAL_DMA_IRQHandler+0x390>
 8001178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117c:	e008      	b.n	8001190 <HAL_DMA_IRQHandler+0x390>
 800117e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001182:	e005      	b.n	8001190 <HAL_DMA_IRQHandler+0x390>
 8001184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001188:	e002      	b.n	8001190 <HAL_DMA_IRQHandler+0x390>
 800118a:	2320      	movs	r3, #32
 800118c:	e000      	b.n	8001190 <HAL_DMA_IRQHandler+0x390>
 800118e:	2302      	movs	r3, #2
 8001190:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;    
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_DMA_IRQHandler+0x3ba>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	4798      	blx	r3
      }
    }
  }
}  
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020008 	.word	0x40020008
 80011cc:	4002001c 	.word	0x4002001c
 80011d0:	40020030 	.word	0x40020030
 80011d4:	40020044 	.word	0x40020044
 80011d8:	40020058 	.word	0x40020058
 80011dc:	4002006c 	.word	0x4002006c

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011f6:	e14e      	b.n	8001496 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8140 	beq.w	8001490 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x40>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b12      	cmp	r3, #18
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	6939      	ldr	r1, [r7, #16]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d00b      	beq.n	80012bc <HAL_GPIO_Init+0xdc>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b0:	2b11      	cmp	r3, #17
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b12      	cmp	r3, #18
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	f003 0201 	and.w	r2, r3, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 809a 	beq.w	8001490 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	4a55      	ldr	r2, [pc, #340]	; (80014b4 <HAL_GPIO_Init+0x2d4>)
 800135e:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <HAL_GPIO_Init+0x2d4>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <HAL_GPIO_Init+0x2d4>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001374:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <HAL_GPIO_Init+0x2d8>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800139e:	d013      	beq.n	80013c8 <HAL_GPIO_Init+0x1e8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a46      	ldr	r2, [pc, #280]	; (80014bc <HAL_GPIO_Init+0x2dc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d00d      	beq.n	80013c4 <HAL_GPIO_Init+0x1e4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a45      	ldr	r2, [pc, #276]	; (80014c0 <HAL_GPIO_Init+0x2e0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d007      	beq.n	80013c0 <HAL_GPIO_Init+0x1e0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a44      	ldr	r2, [pc, #272]	; (80014c4 <HAL_GPIO_Init+0x2e4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d101      	bne.n	80013bc <HAL_GPIO_Init+0x1dc>
 80013b8:	2303      	movs	r3, #3
 80013ba:	e006      	b.n	80013ca <HAL_GPIO_Init+0x1ea>
 80013bc:	2305      	movs	r3, #5
 80013be:	e004      	b.n	80013ca <HAL_GPIO_Init+0x1ea>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e002      	b.n	80013ca <HAL_GPIO_Init+0x1ea>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <HAL_GPIO_Init+0x1ea>
 80013c8:	2300      	movs	r3, #0
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	f002 0203 	and.w	r2, r2, #3
 80013d0:	0092      	lsls	r2, r2, #2
 80013d2:	4093      	lsls	r3, r2
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013da:	4937      	ldr	r1, [pc, #220]	; (80014b8 <HAL_GPIO_Init+0x2d8>)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800140c:	4a2e      	ldr	r2, [pc, #184]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001436:	4a24      	ldr	r2, [pc, #144]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001460:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f47f aea9 	bne.w	80011f8 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 80014a6:	bf00      	nop
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010000 	.word	0x40010000
 80014bc:	48000400 	.word	0x48000400
 80014c0:	48000800 	.word	0x48000800
 80014c4:	48000c00 	.word	0x48000c00
 80014c8:	40010400 	.word	0x40010400

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e07c      	b.n	8001608 <HAL_I2C_Init+0x10c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d106      	bne.n	8001528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fa28 	bl	8000978 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2224      	movs	r2, #36	; 0x24
 800152c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	f022 0201 	bic.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6852      	ldr	r2, [r2, #4]
 8001548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800154c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	6892      	ldr	r2, [r2, #8]
 8001558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800155c:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <HAL_I2C_Init+0x90>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <HAL_I2C_Init+0x82>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6892      	ldr	r2, [r2, #8]
 8001576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	e006      	b.n	800158c <HAL_I2C_Init+0x90>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6892      	ldr	r2, [r2, #8]
 8001586:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800158a:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d104      	bne.n	800159e <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800159c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6911      	ldr	r1, [r2, #16]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6952      	ldr	r2, [r2, #20]
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6992      	ldr	r2, [r2, #24]
 80015c4:	0212      	lsls	r2, r2, #8
 80015c6:	430a      	orrs	r2, r1
 80015c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	69d1      	ldr	r1, [r2, #28]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6a12      	ldr	r2, [r2, #32]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	f042 0201 	orr.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2220      	movs	r2, #32
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	4608      	mov	r0, r1
 800161a:	4611      	mov	r1, r2
 800161c:	461a      	mov	r2, r3
 800161e:	4603      	mov	r3, r0
 8001620:	817b      	strh	r3, [r7, #10]
 8001622:	460b      	mov	r3, r1
 8001624:	813b      	strh	r3, [r7, #8]
 8001626:	4613      	mov	r3, r2
 8001628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b20      	cmp	r3, #32
 8001638:	f040 8109 	bne.w	800184e <HAL_I2C_Mem_Write+0x23e>
  { 
    if((pData == NULL) || (Size == 0U))
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <HAL_I2C_Mem_Write+0x38>
 8001642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e101      	b.n	8001850 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_I2C_Mem_Write+0x4a>
 8001656:	2302      	movs	r3, #2
 8001658:	e0fa      	b.n	8001850 <HAL_I2C_Mem_Write+0x240>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001662:	f7ff fa2b 	bl	8000abc <HAL_GetTick>
 8001666:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2319      	movs	r3, #25
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 faf9 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e0e5      	b.n	8001850 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2221      	movs	r2, #33	; 0x21
 8001688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016ac:	88f8      	ldrh	r0, [r7, #6]
 80016ae:	893a      	ldrh	r2, [r7, #8]
 80016b0:	8979      	ldrh	r1, [r7, #10]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4603      	mov	r3, r0
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 f9f3 	bl	8001aa8 <I2C_RequestMemoryWrite>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00f      	beq.n	80016e8 <HAL_I2C_Mem_Write+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d105      	bne.n	80016dc <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0b9      	b.n	8001850 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0b3      	b.n	8001850 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	2bff      	cmp	r3, #255	; 0xff
 80016f0:	d90e      	bls.n	8001710 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	22ff      	movs	r2, #255	; 0xff
 80016f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	8979      	ldrh	r1, [r7, #10]
 8001700:	2300      	movs	r3, #0
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 fbc3 	bl	8001e94 <I2C_TransferConfig>
 800170e:	e00f      	b.n	8001730 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171e:	b2da      	uxtb	r2, r3
 8001720:	8979      	ldrh	r1, [r7, #10]
 8001722:	2300      	movs	r3, #0
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 fbb2 	bl	8001e94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fad3 	bl	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <HAL_I2C_Mem_Write+0x140>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	2b04      	cmp	r3, #4
 8001746:	d101      	bne.n	800174c <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e081      	b.n	8001850 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e07f      	b.n	8001850 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	1c58      	adds	r0, r3, #1
 800175a:	68f9      	ldr	r1, [r7, #12]
 800175c:	6248      	str	r0, [r1, #36]	; 0x24
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001774:	3b01      	subs	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	d135      	bne.n	80017f0 <HAL_I2C_Mem_Write+0x1e0>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d030      	beq.n	80017f0 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001794:	2200      	movs	r2, #0
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 fa67 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e053      	b.n	8001850 <HAL_I2C_Mem_Write+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2bff      	cmp	r3, #255	; 0xff
 80017b0:	d90e      	bls.n	80017d0 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	22ff      	movs	r2, #255	; 0xff
 80017b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	8979      	ldrh	r1, [r7, #10]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 fb63 	bl	8001e94 <I2C_TransferConfig>
 80017ce:	e00f      	b.n	80017f0 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	8979      	ldrh	r1, [r7, #10]
 80017e2:	2300      	movs	r3, #0
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 fb52 	bl	8001e94 <I2C_TransferConfig>
        }
      }

    }while(hi2c->XferCount > 0U);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d19a      	bne.n	8001730 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 faae 	bl	8001d60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <HAL_I2C_Mem_Write+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	2b04      	cmp	r3, #4
 8001810:	d101      	bne.n	8001816 <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e01c      	b.n	8001850 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e01a      	b.n	8001850 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2220      	movs	r2, #32
 8001820:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_I2C_Mem_Write+0x248>)
 800182e:	400b      	ands	r3, r1
 8001830:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2220      	movs	r2, #32
 8001836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 800184e:	2302      	movs	r3, #2
  }
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	fe00e800 	.word	0xfe00e800

0800185c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4603      	mov	r3, r0
 800186c:	817b      	strh	r3, [r7, #10]
 800186e:	460b      	mov	r3, r1
 8001870:	813b      	strh	r3, [r7, #8]
 8001872:	4613      	mov	r3, r2
 8001874:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b20      	cmp	r3, #32
 8001884:	f040 8109 	bne.w	8001a9a <HAL_I2C_Mem_Read+0x23e>
  {
    if((pData == NULL) || (Size == 0U))
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <HAL_I2C_Mem_Read+0x38>
 800188e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e101      	b.n	8001a9c <HAL_I2C_Mem_Read+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_I2C_Mem_Read+0x4a>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e0fa      	b.n	8001a9c <HAL_I2C_Mem_Read+0x240>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018ae:	f7ff f905 	bl	8000abc <HAL_GetTick>
 80018b2:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2319      	movs	r3, #25
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f9d3 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0e5      	b.n	8001a9c <HAL_I2C_Mem_Read+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2222      	movs	r2, #34	; 0x22
 80018d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a3a      	ldr	r2, [r7, #32]
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018f8:	88f8      	ldrh	r0, [r7, #6]
 80018fa:	893a      	ldrh	r2, [r7, #8]
 80018fc:	8979      	ldrh	r1, [r7, #10]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	4603      	mov	r3, r0
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f92d 	bl	8001b68 <I2C_RequestMemoryRead>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00f      	beq.n	8001934 <HAL_I2C_Mem_Read+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	2b04      	cmp	r3, #4
 800191a:	d105      	bne.n	8001928 <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0b9      	b.n	8001a9c <HAL_I2C_Mem_Read+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e0b3      	b.n	8001a9c <HAL_I2C_Mem_Read+0x240>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001938:	b29b      	uxth	r3, r3
 800193a:	2bff      	cmp	r3, #255	; 0xff
 800193c:	d90f      	bls.n	800195e <HAL_I2C_Mem_Read+0x102>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	22ff      	movs	r2, #255	; 0xff
 8001942:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	b2da      	uxtb	r2, r3
 800194a:	8979      	ldrh	r1, [r7, #10]
 800194c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fa9c 	bl	8001e94 <I2C_TransferConfig>
 800195c:	e010      	b.n	8001980 <HAL_I2C_Mem_Read+0x124>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	b2da      	uxtb	r2, r3
 800196e:	8979      	ldrh	r1, [r7, #10]
 8001970:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fa8a 	bl	8001e94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001986:	2200      	movs	r2, #0
 8001988:	2104      	movs	r1, #4
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 f96e 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Mem_Read+0x13e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e080      	b.n	8001a9c <HAL_I2C_Mem_Read+0x240>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	1c59      	adds	r1, r3, #1
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	6251      	str	r1, [r2, #36]	; 0x24
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d135      	bne.n	8001a3c <HAL_I2C_Mem_Read+0x1e0>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d030      	beq.n	8001a3c <HAL_I2C_Mem_Read+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e0:	2200      	movs	r2, #0
 80019e2:	2180      	movs	r1, #128	; 0x80
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f941 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_I2C_Mem_Read+0x198>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e053      	b.n	8001a9c <HAL_I2C_Mem_Read+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	2bff      	cmp	r3, #255	; 0xff
 80019fc:	d90e      	bls.n	8001a1c <HAL_I2C_Mem_Read+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	22ff      	movs	r2, #255	; 0xff
 8001a02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	8979      	ldrh	r1, [r7, #10]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 fa3d 	bl	8001e94 <I2C_TransferConfig>
 8001a1a:	e00f      	b.n	8001a3c <HAL_I2C_Mem_Read+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	8979      	ldrh	r1, [r7, #10]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 fa2c 	bl	8001e94 <I2C_TransferConfig>
        }
      }
    }while(hi2c->XferCount > 0U);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d19c      	bne.n	8001980 <HAL_I2C_Mem_Read+0x124>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f988 	bl	8001d60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_I2C_Mem_Read+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d101      	bne.n	8001a62 <HAL_I2C_Mem_Read+0x206>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e01c      	b.n	8001a9c <HAL_I2C_Mem_Read+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e01a      	b.n	8001a9c <HAL_I2C_Mem_Read+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_I2C_Mem_Read+0x248>)
 8001a7a:	400b      	ands	r3, r1
 8001a7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_I2C_Mem_Read+0x240>
  }
  else
  {
    return HAL_BUSY;
 8001a9a:	2302      	movs	r3, #2
  }
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	fe00e800 	.word	0xfe00e800

08001aa8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	817b      	strh	r3, [r7, #10]
 8001aba:	460b      	mov	r3, r1
 8001abc:	813b      	strh	r3, [r7, #8]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	8979      	ldrh	r1, [r7, #10]
 8001ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 f9de 	bl	8001e94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f8ff 	bl	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <I2C_RequestMemoryWrite+0x50>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d101      	bne.n	8001af4 <I2C_RequestMemoryWrite+0x4c>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e034      	b.n	8001b5e <I2C_RequestMemoryWrite+0xb6>
    }
    else
    {
      return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e032      	b.n	8001b5e <I2C_RequestMemoryWrite+0xb6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d105      	bne.n	8001b0a <I2C_RequestMemoryWrite+0x62>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	893a      	ldrh	r2, [r7, #8]
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
 8001b08:	e01b      	b.n	8001b42 <I2C_RequestMemoryWrite+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	893a      	ldrh	r2, [r7, #8]
 8001b10:	0a12      	lsrs	r2, r2, #8
 8001b12:	b292      	uxth	r2, r2
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f8df 	bl	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <I2C_RequestMemoryWrite+0x90>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d101      	bne.n	8001b34 <I2C_RequestMemoryWrite+0x8c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e014      	b.n	8001b5e <I2C_RequestMemoryWrite+0xb6>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e012      	b.n	8001b5e <I2C_RequestMemoryWrite+0xb6>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	893a      	ldrh	r2, [r7, #8]
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f88d 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <I2C_RequestMemoryWrite+0xb4>
  {
    return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <I2C_RequestMemoryWrite+0xb6>
  }

return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop

08001b68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	4608      	mov	r0, r1
 8001b72:	4611      	mov	r1, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	817b      	strh	r3, [r7, #10]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	813b      	strh	r3, [r7, #8]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	8979      	ldrh	r1, [r7, #10]
 8001b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 f97f 	bl	8001e94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	69b9      	ldr	r1, [r7, #24]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f8a0 	bl	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <I2C_RequestMemoryRead+0x4e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d101      	bne.n	8001bb2 <I2C_RequestMemoryRead+0x4a>
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e034      	b.n	8001c1c <I2C_RequestMemoryRead+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e032      	b.n	8001c1c <I2C_RequestMemoryRead+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <I2C_RequestMemoryRead+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	893a      	ldrh	r2, [r7, #8]
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
 8001bc6:	e01b      	b.n	8001c00 <I2C_RequestMemoryRead+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	893a      	ldrh	r2, [r7, #8]
 8001bce:	0a12      	lsrs	r2, r2, #8
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	69b9      	ldr	r1, [r7, #24]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f880 	bl	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <I2C_RequestMemoryRead+0x8e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d101      	bne.n	8001bf2 <I2C_RequestMemoryRead+0x8a>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e014      	b.n	8001c1c <I2C_RequestMemoryRead+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e012      	b.n	8001c1c <I2C_RequestMemoryRead+0xb4>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	893a      	ldrh	r2, [r7, #8]
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2200      	movs	r2, #0
 8001c08:	2140      	movs	r1, #64	; 0x40
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f82e 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <I2C_RequestMemoryRead+0xb2>
  {
    return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e000      	b.n	8001c1c <I2C_RequestMemoryRead+0xb4>
  }
  
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d107      	bne.n	8001c60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	6992      	ldr	r2, [r2, #24]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	619a      	str	r2, [r3, #24]
  }
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c7c:	e01c      	b.n	8001cb8 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d018      	beq.n	8001cb8 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c8c:	f7fe ff16 	bl	8000abc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	1ad2      	subs	r2, r2, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d90d      	bls.n	8001cb8 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e00f      	b.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0x6c>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d0d3      	beq.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x12>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cec:	e02c      	b.n	8001d48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f870 	bl	8001dd8 <I2C_IsAcknowledgeFailed>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e02a      	b.n	8001d58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d01e      	beq.n	8001d48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d10:	f7fe fed4 	bl	8000abc <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	1ad2      	subs	r2, r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d913      	bls.n	8001d48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f043 0220 	orr.w	r2, r3, #32
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e007      	b.n	8001d58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0cb      	beq.n	8001cee <I2C_WaitOnTXISFlagUntilTimeout+0xe>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d6c:	e028      	b.n	8001dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f830 	bl	8001dd8 <I2C_IsAcknowledgeFailed>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e026      	b.n	8001dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d88:	f7fe fe98 	bl	8000abc <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	1ad2      	subs	r2, r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d913      	bls.n	8001dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f043 0220 	orr.w	r2, r3, #32
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e007      	b.n	8001dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0cf      	beq.n	8001d6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d048      	beq.n	8001e84 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001df2:	e01c      	b.n	8001e2e <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfa:	d018      	beq.n	8001e2e <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <I2C_IsAcknowledgeFailed+0x3a>
 8001e02:	f7fe fe5b 	bl	8000abc <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	1ad2      	subs	r2, r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d90d      	bls.n	8001e2e <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e02b      	b.n	8001e86 <I2C_IsAcknowledgeFailed+0xae>
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0db      	beq.n	8001df4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2210      	movs	r2, #16
 8001e42:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f7ff fee9 	bl	8001c24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <I2C_IsAcknowledgeFailed+0xb8>)
 8001e5e:	400b      	ands	r3, r1
 8001e60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2204      	movs	r2, #4
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	fe00e800 	.word	0xfe00e800

08001e94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	817b      	strh	r3, [r7, #10]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <I2C_TransferConfig+0x58>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8001eba:	897b      	ldrh	r3, [r7, #10]
 8001ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ec0:	7a7b      	ldrb	r3, [r7, #9]
 8001ec2:	041b      	lsls	r3, r3, #16
 8001ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	605a      	str	r2, [r3, #4]
}
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	fc009800 	.word	0xfc009800

08001ef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d138      	bne.n	8001f78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  { 
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e032      	b.n	8001f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2224      	movs	r2, #36	; 0x24
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
    
    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f42:	601a      	str	r2, [r3, #0]
    
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	6811      	ldr	r1, [r2, #0]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]
    
    __HAL_I2C_ENABLE(hi2c); 
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    return HAL_OK; 
 8001f74:	2300      	movs	r3, #0
 8001f76:	e000      	b.n	8001f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f78:	2302      	movs	r3, #2
  }
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop

08001f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 81e8 	beq.w	800237a <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001faa:	4bb8      	ldr	r3, [pc, #736]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb6:	4bb5      	ldr	r3, [pc, #724]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	f040 8082 	bne.w	80020c8 <HAL_RCC_OscConfig+0x140>
 8001fc4:	4bb1      	ldr	r3, [pc, #708]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d07b      	beq.n	80020c8 <HAL_RCC_OscConfig+0x140>
 8001fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001fdc:	fa93 f2a3 	rbit	r2, r3
 8001fe0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001fe4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fe6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001fea:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f043 0320 	orr.w	r3, r3, #32
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d102      	bne.n	8002008 <HAL_RCC_OscConfig+0x80>
 8002002:	4ba2      	ldr	r3, [pc, #648]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e039      	b.n	800207c <HAL_RCC_OscConfig+0xf4>
 8002008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800201c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800201e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f043 0320 	orr.w	r3, r3, #32
 800202e:	b2db      	uxtb	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d102      	bne.n	8002040 <HAL_RCC_OscConfig+0xb8>
 800203a:	4b94      	ldr	r3, [pc, #592]	; (800228c <HAL_RCC_OscConfig+0x304>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	e01d      	b.n	800207c <HAL_RCC_OscConfig+0xf4>
 8002040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002044:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002054:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002056:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f043 0320 	orr.w	r3, r3, #32
 8002066:	b2db      	uxtb	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b04      	cmp	r3, #4
 8002070:	d102      	bne.n	8002078 <HAL_RCC_OscConfig+0xf0>
 8002072:	4b86      	ldr	r3, [pc, #536]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	e001      	b.n	800207c <HAL_RCC_OscConfig+0xf4>
 8002078:	4b84      	ldr	r3, [pc, #528]	; (800228c <HAL_RCC_OscConfig+0x304>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002080:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8002088:	fa92 f1a2 	rbit	r1, r2
 800208c:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8002090:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002092:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f042 0220 	orr.w	r2, r2, #32
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f002 021f 	and.w	r2, r2, #31
 80020aa:	40d3      	lsrs	r3, r2
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8161 	beq.w	8002378 <HAL_RCC_OscConfig+0x3f0>
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f040 815b 	bne.w	8002378 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f001 b81a 	b.w	80030fc <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x15a>
 80020d4:	4a6d      	ldr	r2, [pc, #436]	; (800228c <HAL_RCC_OscConfig+0x304>)
 80020d6:	4b6d      	ldr	r3, [pc, #436]	; (800228c <HAL_RCC_OscConfig+0x304>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e030      	b.n	8002144 <HAL_RCC_OscConfig+0x1bc>
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_OscConfig+0x17e>
 80020ec:	4a67      	ldr	r2, [pc, #412]	; (800228c <HAL_RCC_OscConfig+0x304>)
 80020ee:	4b67      	ldr	r3, [pc, #412]	; (800228c <HAL_RCC_OscConfig+0x304>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4a64      	ldr	r2, [pc, #400]	; (800228c <HAL_RCC_OscConfig+0x304>)
 80020fa:	4b64      	ldr	r3, [pc, #400]	; (800228c <HAL_RCC_OscConfig+0x304>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e01e      	b.n	8002144 <HAL_RCC_OscConfig+0x1bc>
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x1a4>
 8002112:	4a5e      	ldr	r2, [pc, #376]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8002114:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4a5b      	ldr	r2, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8002120:	4b5a      	ldr	r3, [pc, #360]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0x1bc>
 800212c:	4a57      	ldr	r2, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x304>)
 800212e:	4b57      	ldr	r3, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4a54      	ldr	r2, [pc, #336]	; (800228c <HAL_RCC_OscConfig+0x304>)
 800213a:	4b54      	ldr	r3, [pc, #336]	; (800228c <HAL_RCC_OscConfig+0x304>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002144:	4951      	ldr	r1, [pc, #324]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8002146:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	f023 020f 	bic.w	r2, r3, #15
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4313      	orrs	r3, r2
 8002156:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8083 	beq.w	800226a <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7fe fcaa 	bl	8000abc <HAL_GetTick>
 8002168:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216e:	f7fe fca5 	bl	8000abc <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d902      	bls.n	8002184 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	f000 bfbc 	b.w	80030fc <HAL_RCC_OscConfig+0x1174>
 8002184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002188:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002190:	fa93 f2a3 	rbit	r2, r3
 8002194:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002198:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800219a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800219e:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f043 0320 	orr.w	r3, r3, #32
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d102      	bne.n	80021bc <HAL_RCC_OscConfig+0x234>
 80021b6:	4b35      	ldr	r3, [pc, #212]	; (800228c <HAL_RCC_OscConfig+0x304>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	e039      	b.n	8002230 <HAL_RCC_OscConfig+0x2a8>
 80021bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021d0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021d2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f043 0320 	orr.w	r3, r3, #32
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d102      	bne.n	80021f4 <HAL_RCC_OscConfig+0x26c>
 80021ee:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x304>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	e01d      	b.n	8002230 <HAL_RCC_OscConfig+0x2a8>
 80021f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002200:	fa93 f2a3 	rbit	r2, r3
 8002204:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002208:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800220a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f043 0320 	orr.w	r3, r3, #32
 800221a:	b2db      	uxtb	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b04      	cmp	r3, #4
 8002224:	d102      	bne.n	800222c <HAL_RCC_OscConfig+0x2a4>
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_RCC_OscConfig+0x304>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	e001      	b.n	8002230 <HAL_RCC_OscConfig+0x2a8>
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <HAL_RCC_OscConfig+0x304>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002234:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800223c:	fa92 f1a2 	rbit	r1, r2
 8002240:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002244:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002246:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	fab2 f282 	clz	r2, r2
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	f042 0220 	orr.w	r2, r2, #32
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	f002 021f 	and.w	r2, r2, #31
 800225e:	40d3      	lsrs	r3, r2
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d082      	beq.n	800216e <HAL_RCC_OscConfig+0x1e6>
 8002268:	e087      	b.n	800237a <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe fc27 	bl	8000abc <HAL_GetTick>
 800226e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	e00d      	b.n	8002290 <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002274:	f7fe fc22 	bl	8000abc <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b64      	cmp	r3, #100	; 0x64
 8002282:	d905      	bls.n	8002290 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	f000 bf39 	b.w	80030fc <HAL_RCC_OscConfig+0x1174>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002294:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800229c:	fa93 f2a3 	rbit	r2, r3
 80022a0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022a4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022aa:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f043 0320 	orr.w	r3, r3, #32
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d102      	bne.n	80022c8 <HAL_RCC_OscConfig+0x340>
 80022c2:	4bb6      	ldr	r3, [pc, #728]	; (800259c <HAL_RCC_OscConfig+0x614>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	e039      	b.n	800233c <HAL_RCC_OscConfig+0x3b4>
 80022c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022dc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f043 0320 	orr.w	r3, r3, #32
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d102      	bne.n	8002300 <HAL_RCC_OscConfig+0x378>
 80022fa:	4ba8      	ldr	r3, [pc, #672]	; (800259c <HAL_RCC_OscConfig+0x614>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	e01d      	b.n	800233c <HAL_RCC_OscConfig+0x3b4>
 8002300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002304:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002314:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002316:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f043 0320 	orr.w	r3, r3, #32
 8002326:	b2db      	uxtb	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b04      	cmp	r3, #4
 8002330:	d102      	bne.n	8002338 <HAL_RCC_OscConfig+0x3b0>
 8002332:	4b9a      	ldr	r3, [pc, #616]	; (800259c <HAL_RCC_OscConfig+0x614>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	e001      	b.n	800233c <HAL_RCC_OscConfig+0x3b4>
 8002338:	4b98      	ldr	r3, [pc, #608]	; (800259c <HAL_RCC_OscConfig+0x614>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002340:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002348:	fa92 f1a2 	rbit	r1, r2
 800234c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8002350:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002352:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	fab2 f282 	clz	r2, r2
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	f042 0220 	orr.w	r2, r2, #32
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f002 021f 	and.w	r2, r2, #31
 800236a:	40d3      	lsrs	r3, r2
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	f47f af7f 	bne.w	8002274 <HAL_RCC_OscConfig+0x2ec>
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 81f4 	beq.w	8002772 <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800238a:	4b84      	ldr	r3, [pc, #528]	; (800259c <HAL_RCC_OscConfig+0x614>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00d      	beq.n	80023b2 <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002396:	4b81      	ldr	r3, [pc, #516]	; (800259c <HAL_RCC_OscConfig+0x614>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b08      	cmp	r3, #8
 80023a0:	f040 8099 	bne.w	80024d6 <HAL_RCC_OscConfig+0x54e>
 80023a4:	4b7d      	ldr	r3, [pc, #500]	; (800259c <HAL_RCC_OscConfig+0x614>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 8092 	bne.w	80024d6 <HAL_RCC_OscConfig+0x54e>
 80023b2:	2302      	movs	r3, #2
 80023b4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80023c4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80023ca:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f043 0320 	orr.w	r3, r3, #32
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <HAL_RCC_OscConfig+0x460>
 80023e2:	4b6e      	ldr	r3, [pc, #440]	; (800259c <HAL_RCC_OscConfig+0x614>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	e037      	b.n	8002458 <HAL_RCC_OscConfig+0x4d0>
 80023e8:	2302      	movs	r3, #2
 80023ea:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023fa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f043 0320 	orr.w	r3, r3, #32
 800240c:	b2db      	uxtb	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d102      	bne.n	800241e <HAL_RCC_OscConfig+0x496>
 8002418:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_RCC_OscConfig+0x614>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	e01c      	b.n	8002458 <HAL_RCC_OscConfig+0x4d0>
 800241e:	2302      	movs	r3, #2
 8002420:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002428:	fa93 f2a3 	rbit	r2, r3
 800242c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002430:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002432:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f043 0320 	orr.w	r3, r3, #32
 8002442:	b2db      	uxtb	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b04      	cmp	r3, #4
 800244c:	d102      	bne.n	8002454 <HAL_RCC_OscConfig+0x4cc>
 800244e:	4b53      	ldr	r3, [pc, #332]	; (800259c <HAL_RCC_OscConfig+0x614>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	e001      	b.n	8002458 <HAL_RCC_OscConfig+0x4d0>
 8002454:	4b51      	ldr	r3, [pc, #324]	; (800259c <HAL_RCC_OscConfig+0x614>)
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2202      	movs	r2, #2
 800245a:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002462:	fa92 f1a2 	rbit	r1, r2
 8002466:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800246a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800246c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	fab2 f282 	clz	r2, r2
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	f042 0220 	orr.w	r2, r2, #32
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f002 021f 	and.w	r2, r2, #31
 8002484:	40d3      	lsrs	r3, r2
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_RCC_OscConfig+0x516>
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d002      	beq.n	800249e <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	f000 be2f 	b.w	80030fc <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249e:	4c3f      	ldr	r4, [pc, #252]	; (800259c <HAL_RCC_OscConfig+0x614>)
 80024a0:	4b3e      	ldr	r3, [pc, #248]	; (800259c <HAL_RCC_OscConfig+0x614>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6959      	ldr	r1, [r3, #20]
 80024ae:	23f8      	movs	r3, #248	; 0xf8
 80024b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80024b8:	fa93 f0a3 	rbit	r0, r3
 80024bc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024c0:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80024c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d4:	e14d      	b.n	8002772 <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80b3 	beq.w	8002648 <HAL_RCC_OscConfig+0x6c0>
 80024e2:	2301      	movs	r3, #1
 80024e4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80024ec:	fa93 f2a3 	rbit	r2, r3
 80024f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024f4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80024f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024fa:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002506:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800250a:	461a      	mov	r2, r3
 800250c:	2301      	movs	r3, #1
 800250e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fad4 	bl	8000abc <HAL_GetTick>
 8002514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251a:	f7fe facf 	bl	8000abc <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d902      	bls.n	8002530 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	f000 bde6 	b.w	80030fc <HAL_RCC_OscConfig+0x1174>
 8002530:	2302      	movs	r3, #2
 8002532:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002542:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002544:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002548:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f043 0320 	orr.w	r3, r3, #32
 8002554:	b2db      	uxtb	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d102      	bne.n	8002566 <HAL_RCC_OscConfig+0x5de>
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <HAL_RCC_OscConfig+0x614>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	e039      	b.n	80025da <HAL_RCC_OscConfig+0x652>
 8002566:	2302      	movs	r3, #2
 8002568:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002570:	fa93 f2a3 	rbit	r2, r3
 8002574:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002578:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800257a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f043 0320 	orr.w	r3, r3, #32
 800258a:	b2db      	uxtb	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d104      	bne.n	80025a0 <HAL_RCC_OscConfig+0x618>
 8002596:	4b01      	ldr	r3, [pc, #4]	; (800259c <HAL_RCC_OscConfig+0x614>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	e01e      	b.n	80025da <HAL_RCC_OscConfig+0x652>
 800259c:	40021000 	.word	0x40021000
 80025a0:	2302      	movs	r3, #2
 80025a2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80025aa:	fa93 f2a3 	rbit	r2, r3
 80025ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025b2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f043 0320 	orr.w	r3, r3, #32
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d102      	bne.n	80025d6 <HAL_RCC_OscConfig+0x64e>
 80025d0:	4bb9      	ldr	r3, [pc, #740]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	e001      	b.n	80025da <HAL_RCC_OscConfig+0x652>
 80025d6:	4bb8      	ldr	r3, [pc, #736]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	2202      	movs	r2, #2
 80025dc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025e4:	fa92 f1a2 	rbit	r1, r2
 80025e8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80025ec:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025ee:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	fab2 f282 	clz	r2, r2
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f002 021f 	and.w	r2, r2, #31
 8002606:	40d3      	lsrs	r3, r2
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d084      	beq.n	800251a <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4ca9      	ldr	r4, [pc, #676]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 8002612:	4ba9      	ldr	r3, [pc, #676]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6959      	ldr	r1, [r3, #20]
 8002620:	23f8      	movs	r3, #248	; 0xf8
 8002622:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800262a:	fa93 f0a3 	rbit	r0, r3
 800262e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002632:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002634:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	e094      	b.n	8002772 <HAL_RCC_OscConfig+0x7ea>
 8002648:	2301      	movs	r3, #1
 800264a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002652:	fa93 f2a3 	rbit	r2, r3
 8002656:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800265a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800265c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002660:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800266c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002670:	461a      	mov	r2, r3
 8002672:	2300      	movs	r3, #0
 8002674:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fa21 	bl	8000abc <HAL_GetTick>
 800267a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	e00a      	b.n	8002696 <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002680:	f7fe fa1c 	bl	8000abc <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d902      	bls.n	8002696 <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	f000 bd33 	b.w	80030fc <HAL_RCC_OscConfig+0x1174>
 8002696:	2302      	movs	r3, #2
 8002698:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80026a0:	fa93 f2a3 	rbit	r2, r3
 80026a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026a8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026ae:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f043 0320 	orr.w	r3, r3, #32
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d102      	bne.n	80026cc <HAL_RCC_OscConfig+0x744>
 80026c6:	4b7c      	ldr	r3, [pc, #496]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	e037      	b.n	800273c <HAL_RCC_OscConfig+0x7b4>
 80026cc:	2302      	movs	r3, #2
 80026ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026d6:	fa93 f2a3 	rbit	r2, r3
 80026da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026de:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f043 0320 	orr.w	r3, r3, #32
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d102      	bne.n	8002702 <HAL_RCC_OscConfig+0x77a>
 80026fc:	4b6e      	ldr	r3, [pc, #440]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	e01c      	b.n	800273c <HAL_RCC_OscConfig+0x7b4>
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800270c:	fa93 f2a3 	rbit	r2, r3
 8002710:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002714:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002716:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f043 0320 	orr.w	r3, r3, #32
 8002726:	b2db      	uxtb	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b04      	cmp	r3, #4
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0x7b0>
 8002732:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	e001      	b.n	800273c <HAL_RCC_OscConfig+0x7b4>
 8002738:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2202      	movs	r2, #2
 800273e:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002746:	fa92 f1a2 	rbit	r1, r2
 800274a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800274e:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002750:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	fab2 f282 	clz	r2, r2
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f042 0220 	orr.w	r2, r2, #32
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	f002 021f 	and.w	r2, r2, #31
 8002768:	40d3      	lsrs	r3, r2
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d186      	bne.n	8002680 <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8132 	beq.w	80029e6 <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8099 	beq.w	80028c0 <HAL_RCC_OscConfig+0x938>
 800278e:	2301      	movs	r3, #1
 8002790:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002798:	fa93 f2a3 	rbit	r2, r3
 800279c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027a0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027a6:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b42      	ldr	r3, [pc, #264]	; (80028bc <HAL_RCC_OscConfig+0x934>)
 80027b2:	4413      	add	r3, r2
 80027b4:	461a      	mov	r2, r3
 80027b6:	2301      	movs	r3, #1
 80027b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ba:	f7fe f97f 	bl	8000abc <HAL_GetTick>
 80027be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c4:	f7fe f97a 	bl	8000abc <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d902      	bls.n	80027da <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	f000 bc91 	b.w	80030fc <HAL_RCC_OscConfig+0x1174>
 80027da:	2302      	movs	r3, #2
 80027dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027ec:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027f2:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <HAL_RCC_OscConfig+0x888>
 800280a:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	e037      	b.n	8002880 <HAL_RCC_OscConfig+0x8f8>
 8002810:	2302      	movs	r3, #2
 8002812:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002822:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002824:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002834:	b2db      	uxtb	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d102      	bne.n	8002846 <HAL_RCC_OscConfig+0x8be>
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	e01c      	b.n	8002880 <HAL_RCC_OscConfig+0x8f8>
 8002846:	2302      	movs	r3, #2
 8002848:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002858:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800285a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800286a:	b2db      	uxtb	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b04      	cmp	r3, #4
 8002874:	d102      	bne.n	800287c <HAL_RCC_OscConfig+0x8f4>
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	e001      	b.n	8002880 <HAL_RCC_OscConfig+0x8f8>
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_RCC_OscConfig+0x930>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	2202      	movs	r2, #2
 8002882:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800288a:	fa92 f1a2 	rbit	r1, r2
 800288e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002892:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002894:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	fab2 f282 	clz	r2, r2
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f002 021f 	and.w	r2, r2, #31
 80028ac:	40d3      	lsrs	r3, r2
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d086      	beq.n	80027c4 <HAL_RCC_OscConfig+0x83c>
 80028b6:	e096      	b.n	80029e6 <HAL_RCC_OscConfig+0xa5e>
 80028b8:	40021000 	.word	0x40021000
 80028bc:	42420480 	.word	0x42420480
 80028c0:	2301      	movs	r3, #1
 80028c2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80028ca:	fa93 f2a3 	rbit	r2, r3
 80028ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028d2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80028d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4bb5      	ldr	r3, [pc, #724]	; (8002bb8 <HAL_RCC_OscConfig+0xc30>)
 80028e4:	4413      	add	r3, r2
 80028e6:	461a      	mov	r2, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ec:	f7fe f8e6 	bl	8000abc <HAL_GetTick>
 80028f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	e009      	b.n	800290a <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f6:	f7fe f8e1 	bl	8000abc <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e3f8      	b.n	80030fc <HAL_RCC_OscConfig+0x1174>
 800290a:	2302      	movs	r3, #2
 800290c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002914:	fa93 f2a3 	rbit	r2, r3
 8002918:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800291c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800291e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002922:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800292e:	b2db      	uxtb	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d102      	bne.n	8002940 <HAL_RCC_OscConfig+0x9b8>
 800293a:	4ba0      	ldr	r3, [pc, #640]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	e037      	b.n	80029b0 <HAL_RCC_OscConfig+0xa28>
 8002940:	2302      	movs	r3, #2
 8002942:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800294a:	fa93 f2a3 	rbit	r2, r3
 800294e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002952:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002954:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002964:	b2db      	uxtb	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d102      	bne.n	8002976 <HAL_RCC_OscConfig+0x9ee>
 8002970:	4b92      	ldr	r3, [pc, #584]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	e01c      	b.n	80029b0 <HAL_RCC_OscConfig+0xa28>
 8002976:	2302      	movs	r3, #2
 8002978:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002988:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800298a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800299a:	b2db      	uxtb	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d102      	bne.n	80029ac <HAL_RCC_OscConfig+0xa24>
 80029a6:	4b85      	ldr	r3, [pc, #532]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	e001      	b.n	80029b0 <HAL_RCC_OscConfig+0xa28>
 80029ac:	4b83      	ldr	r3, [pc, #524]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	2202      	movs	r2, #2
 80029b2:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80029ba:	fa92 f1a2 	rbit	r1, r2
 80029be:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80029c2:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80029c4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	fab2 f282 	clz	r2, r2
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f002 021f 	and.w	r2, r2, #31
 80029dc:	40d3      	lsrs	r3, r2
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d187      	bne.n	80028f6 <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 818f 	beq.w	8002d14 <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fc:	4b6f      	ldr	r3, [pc, #444]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d112      	bne.n	8002a2e <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4a6c      	ldr	r2, [pc, #432]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002a0a:	4b6c      	ldr	r3, [pc, #432]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	61d3      	str	r3, [r2, #28]
 8002a14:	4b69      	ldr	r3, [pc, #420]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	4b64      	ldr	r3, [pc, #400]	; (8002bc0 <HAL_RCC_OscConfig+0xc38>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11a      	bne.n	8002a70 <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3a:	4a61      	ldr	r2, [pc, #388]	; (8002bc0 <HAL_RCC_OscConfig+0xc38>)
 8002a3c:	4b60      	ldr	r3, [pc, #384]	; (8002bc0 <HAL_RCC_OscConfig+0xc38>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a46:	f7fe f839 	bl	8000abc <HAL_GetTick>
 8002a4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	e009      	b.n	8002a64 <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a50:	f7fe f834 	bl	8000abc <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b64      	cmp	r3, #100	; 0x64
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e34b      	b.n	80030fc <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a64:	4b56      	ldr	r3, [pc, #344]	; (8002bc0 <HAL_RCC_OscConfig+0xc38>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0ef      	beq.n	8002a50 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0xb00>
 8002a7a:	4a50      	ldr	r2, [pc, #320]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6213      	str	r3, [r2, #32]
 8002a86:	e02f      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb60>
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0xb24>
 8002a92:	4a4a      	ldr	r2, [pc, #296]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002a94:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6213      	str	r3, [r2, #32]
 8002a9e:	4a47      	ldr	r2, [pc, #284]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002aa0:	4b46      	ldr	r3, [pc, #280]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb60>
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xb48>
 8002ab6:	4a41      	ldr	r2, [pc, #260]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002ab8:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	6213      	str	r3, [r2, #32]
 8002ac2:	4a3e      	ldr	r2, [pc, #248]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002ac4:	4b3d      	ldr	r3, [pc, #244]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6213      	str	r3, [r2, #32]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb60>
 8002ad0:	4a3a      	ldr	r2, [pc, #232]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	6213      	str	r3, [r2, #32]
 8002adc:	4a37      	ldr	r2, [pc, #220]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002ade:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0304 	bic.w	r3, r3, #4
 8002ae6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8087 	beq.w	8002c02 <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af4:	f7fd ffe2 	bl	8000abc <HAL_GetTick>
 8002af8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	e00b      	b.n	8002b16 <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fd ffdd 	bl	8000abc <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e2f2      	b.n	80030fc <HAL_RCC_OscConfig+0x1174>
 8002b16:	2302      	movs	r3, #2
 8002b18:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b20:	fa93 f2a3 	rbit	r2, r3
 8002b24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b28:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b2e:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d102      	bne.n	8002b4c <HAL_RCC_OscConfig+0xbc4>
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	e03d      	b.n	8002bc8 <HAL_RCC_OscConfig+0xc40>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002b56:	fa93 f2a3 	rbit	r2, r3
 8002b5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b5e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d102      	bne.n	8002b82 <HAL_RCC_OscConfig+0xbfa>
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	e022      	b.n	8002bc8 <HAL_RCC_OscConfig+0xc40>
 8002b82:	2302      	movs	r3, #2
 8002b84:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b94:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d108      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xc3c>
 8002bb2:	4b02      	ldr	r3, [pc, #8]	; (8002bbc <HAL_RCC_OscConfig+0xc34>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	e007      	b.n	8002bc8 <HAL_RCC_OscConfig+0xc40>
 8002bb8:	42420480 	.word	0x42420480
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	4bbf      	ldr	r3, [pc, #764]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002bd2:	fa92 f1a2 	rbit	r1, r2
 8002bd6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002bda:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002bdc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	fab2 f282 	clz	r2, r2
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f002 021f 	and.w	r2, r2, #31
 8002bf4:	40d3      	lsrs	r3, r2
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f43f af7f 	beq.w	8002afe <HAL_RCC_OscConfig+0xb76>
 8002c00:	e07e      	b.n	8002d00 <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c02:	f7fd ff5b 	bl	8000abc <HAL_GetTick>
 8002c06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7fd ff56 	bl	8000abc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e26b      	b.n	80030fc <HAL_RCC_OscConfig+0x1174>
 8002c24:	2302      	movs	r3, #2
 8002c26:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c2e:	fa93 f2a3 	rbit	r2, r3
 8002c32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c36:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c3c:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d102      	bne.n	8002c5a <HAL_RCC_OscConfig+0xcd2>
 8002c54:	4b9b      	ldr	r3, [pc, #620]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	e037      	b.n	8002cca <HAL_RCC_OscConfig+0xd42>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c64:	fa93 f2a3 	rbit	r2, r3
 8002c68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c6c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_OscConfig+0xd08>
 8002c8a:	4b8e      	ldr	r3, [pc, #568]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	e01c      	b.n	8002cca <HAL_RCC_OscConfig+0xd42>
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002c9a:	fa93 f2a3 	rbit	r2, r3
 8002c9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ca2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ca4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_OscConfig+0xd3e>
 8002cc0:	4b80      	ldr	r3, [pc, #512]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	e001      	b.n	8002cca <HAL_RCC_OscConfig+0xd42>
 8002cc6:	4b7f      	ldr	r3, [pc, #508]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002cd4:	fa92 f1a2 	rbit	r1, r2
 8002cd8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002cdc:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002cde:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	f002 021f 	and.w	r2, r2, #31
 8002cf6:	40d3      	lsrs	r3, r2
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d185      	bne.n	8002c0c <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d00:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d105      	bne.n	8002d14 <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d08:	4a6e      	ldr	r2, [pc, #440]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002d0a:	4b6e      	ldr	r3, [pc, #440]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d12:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 81ed 	beq.w	80030fa <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d20:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	f000 81e4 	beq.w	80030f6 <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	f040 8144 	bne.w	8002fc2 <HAL_RCC_OscConfig+0x103a>
 8002d3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d3e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002d46:	fa93 f2a3 	rbit	r2, r3
 8002d4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d4e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002d60:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002d64:	461a      	mov	r2, r3
 8002d66:	2300      	movs	r3, #0
 8002d68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fd fea7 	bl	8000abc <HAL_GetTick>
 8002d6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d72:	e009      	b.n	8002d88 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d74:	f7fd fea2 	bl	8000abc <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e1b9      	b.n	80030fc <HAL_RCC_OscConfig+0x1174>
 8002d88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d8c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002d94:	fa93 f2a3 	rbit	r2, r3
 8002d98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d9c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002da2:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f043 0320 	orr.w	r3, r3, #32
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d102      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xe38>
 8002dba:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	e039      	b.n	8002e34 <HAL_RCC_OscConfig+0xeac>
 8002dc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dd4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002dd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f043 0320 	orr.w	r3, r3, #32
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d102      	bne.n	8002df8 <HAL_RCC_OscConfig+0xe70>
 8002df2:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	e01d      	b.n	8002e34 <HAL_RCC_OscConfig+0xeac>
 8002df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dfc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e0c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f043 0320 	orr.w	r3, r3, #32
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d102      	bne.n	8002e30 <HAL_RCC_OscConfig+0xea8>
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	e001      	b.n	8002e34 <HAL_RCC_OscConfig+0xeac>
 8002e30:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e38:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002e40:	fa92 f1a2 	rbit	r1, r2
 8002e44:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e48:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e4a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	fab2 f282 	clz	r2, r2
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	f042 0220 	orr.w	r2, r2, #32
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	f002 021f 	and.w	r2, r2, #31
 8002e62:	40d3      	lsrs	r3, r2
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d183      	bne.n	8002d74 <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6c:	4815      	ldr	r0, [pc, #84]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <HAL_RCC_OscConfig+0xf3c>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	430b      	orrs	r3, r1
 8002e84:	4313      	orrs	r3, r2
 8002e86:	6043      	str	r3, [r0, #4]
 8002e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e94:	fa93 f2a3 	rbit	r2, r3
 8002e98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e9c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ea2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002eae:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fd fe00 	bl	8000abc <HAL_GetTick>
 8002ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec0:	e00c      	b.n	8002edc <HAL_RCC_OscConfig+0xf54>
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fd fdf8 	bl	8000abc <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e10f      	b.n	80030fc <HAL_RCC_OscConfig+0x1174>
 8002edc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ee8:	fa93 f2a3 	rbit	r2, r3
 8002eec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ef0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ef6:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f043 0320 	orr.w	r3, r3, #32
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_OscConfig+0xf8c>
 8002f0e:	4b7e      	ldr	r3, [pc, #504]	; (8003108 <HAL_RCC_OscConfig+0x1180>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	e039      	b.n	8002f88 <HAL_RCC_OscConfig+0x1000>
 8002f14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f20:	fa93 f2a3 	rbit	r2, r3
 8002f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f28:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	fab3 f383 	clz	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f043 0320 	orr.w	r3, r3, #32
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d102      	bne.n	8002f4c <HAL_RCC_OscConfig+0xfc4>
 8002f46:	4b70      	ldr	r3, [pc, #448]	; (8003108 <HAL_RCC_OscConfig+0x1180>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	e01d      	b.n	8002f88 <HAL_RCC_OscConfig+0x1000>
 8002f4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f58:	fa93 f2a3 	rbit	r2, r3
 8002f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f60:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f043 0320 	orr.w	r3, r3, #32
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d102      	bne.n	8002f84 <HAL_RCC_OscConfig+0xffc>
 8002f7e:	4b62      	ldr	r3, [pc, #392]	; (8003108 <HAL_RCC_OscConfig+0x1180>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	e001      	b.n	8002f88 <HAL_RCC_OscConfig+0x1000>
 8002f84:	4b60      	ldr	r3, [pc, #384]	; (8003108 <HAL_RCC_OscConfig+0x1180>)
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f8c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002f94:	fa92 f1a2 	rbit	r1, r2
 8002f98:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002f9c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f9e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	fab2 f282 	clz	r2, r2
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	f042 0220 	orr.w	r2, r2, #32
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f002 021f 	and.w	r2, r2, #31
 8002fb6:	40d3      	lsrs	r3, r2
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d083      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xf40>
 8002fc0:	e09b      	b.n	80030fa <HAL_RCC_OscConfig+0x1172>
 8002fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002fce:	fa93 f2a3 	rbit	r2, r3
 8002fd2:	f107 0320 	add.w	r3, r7, #32
 8002fd6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002fd8:	f107 0320 	add.w	r3, r7, #32
 8002fdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002fe8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002fec:	461a      	mov	r2, r3
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7fd fd63 	bl	8000abc <HAL_GetTick>
 8002ff6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffa:	e009      	b.n	8003010 <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fd fd5e 	bl	8000abc <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e075      	b.n	80030fc <HAL_RCC_OscConfig+0x1174>
 8003010:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003014:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f107 031c 	add.w	r3, r7, #28
 8003024:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003026:	f107 031c 	add.w	r3, r7, #28
 800302a:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f043 0320 	orr.w	r3, r3, #32
 8003036:	b2db      	uxtb	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <HAL_RCC_OscConfig+0x10c0>
 8003042:	4b31      	ldr	r3, [pc, #196]	; (8003108 <HAL_RCC_OscConfig+0x1180>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	e039      	b.n	80030bc <HAL_RCC_OscConfig+0x1134>
 8003048:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003054:	fa93 f2a3 	rbit	r2, r3
 8003058:	f107 0318 	add.w	r3, r7, #24
 800305c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800305e:	f107 0318 	add.w	r3, r7, #24
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f043 0320 	orr.w	r3, r3, #32
 800306e:	b2db      	uxtb	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d102      	bne.n	8003080 <HAL_RCC_OscConfig+0x10f8>
 800307a:	4b23      	ldr	r3, [pc, #140]	; (8003108 <HAL_RCC_OscConfig+0x1180>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0x1134>
 8003080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003084:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800308c:	fa93 f2a3 	rbit	r2, r3
 8003090:	f107 0314 	add.w	r3, r7, #20
 8003094:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003096:	f107 0314 	add.w	r3, r7, #20
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f043 0320 	orr.w	r3, r3, #32
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d102      	bne.n	80030b8 <HAL_RCC_OscConfig+0x1130>
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_RCC_OscConfig+0x1180>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	e001      	b.n	80030bc <HAL_RCC_OscConfig+0x1134>
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <HAL_RCC_OscConfig+0x1180>)
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c0:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80030c8:	fa92 f1a2 	rbit	r1, r2
 80030cc:	f107 0210 	add.w	r2, r7, #16
 80030d0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80030d2:	f107 0210 	add.w	r2, r7, #16
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	fab2 f282 	clz	r2, r2
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f042 0220 	orr.w	r2, r2, #32
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f002 021f 	and.w	r2, r2, #31
 80030ea:	40d3      	lsrs	r3, r2
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d183      	bne.n	8002ffc <HAL_RCC_OscConfig+0x1074>
 80030f4:	e001      	b.n	80030fa <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8003102:	46bd      	mov	sp, r7
 8003104:	bd90      	pop	{r4, r7, pc}
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b09e      	sub	sp, #120	; 0x78
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800311a:	4ba3      	ldr	r3, [pc, #652]	; (80033a8 <HAL_RCC_ClockConfig+0x29c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0207 	and.w	r2, r3, #7
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d210      	bcs.n	800314a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003128:	499f      	ldr	r1, [pc, #636]	; (80033a8 <HAL_RCC_ClockConfig+0x29c>)
 800312a:	4b9f      	ldr	r3, [pc, #636]	; (80033a8 <HAL_RCC_ClockConfig+0x29c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 0207 	bic.w	r2, r3, #7
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003138:	4b9b      	ldr	r3, [pc, #620]	; (80033a8 <HAL_RCC_ClockConfig+0x29c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0207 	and.w	r2, r3, #7
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d001      	beq.n	800314a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e1d0      	b.n	80034ec <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003156:	4995      	ldr	r1, [pc, #596]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 8003158:	4b94      	ldr	r3, [pc, #592]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8168 	beq.w	8003446 <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d15c      	bne.n	8003238 <HAL_RCC_ClockConfig+0x12c>
 800317e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003182:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800318c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f043 0320 	orr.w	r3, r3, #32
 8003198:	b2db      	uxtb	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d102      	bne.n	80031aa <HAL_RCC_ClockConfig+0x9e>
 80031a4:	4b81      	ldr	r3, [pc, #516]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	e02d      	b.n	8003206 <HAL_RCC_ClockConfig+0xfa>
 80031aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ae:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f043 0320 	orr.w	r3, r3, #32
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d102      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xca>
 80031d0:	4b76      	ldr	r3, [pc, #472]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	e017      	b.n	8003206 <HAL_RCC_ClockConfig+0xfa>
 80031d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031da:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f043 0320 	orr.w	r3, r3, #32
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d102      	bne.n	8003202 <HAL_RCC_ClockConfig+0xf6>
 80031fc:	4b6b      	ldr	r3, [pc, #428]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	e001      	b.n	8003206 <HAL_RCC_ClockConfig+0xfa>
 8003202:	4b6a      	ldr	r3, [pc, #424]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800320a:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800320e:	fa92 f2a2 	rbit	r2, r2
 8003212:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003216:	fab2 f282 	clz	r2, r2
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f042 0220 	orr.w	r2, r2, #32
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	f002 021f 	and.w	r2, r2, #31
 8003228:	40d3      	lsrs	r3, r2
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 80be 	bne.w	80033b0 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e159      	b.n	80034ec <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d15b      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1ec>
 8003240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003244:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f043 0320 	orr.w	r3, r3, #32
 800325a:	b2db      	uxtb	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d102      	bne.n	800326c <HAL_RCC_ClockConfig+0x160>
 8003266:	4b51      	ldr	r3, [pc, #324]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	e02d      	b.n	80032c8 <HAL_RCC_ClockConfig+0x1bc>
 800326c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003270:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f043 0320 	orr.w	r3, r3, #32
 8003286:	b2db      	uxtb	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d102      	bne.n	8003298 <HAL_RCC_ClockConfig+0x18c>
 8003292:	4b46      	ldr	r3, [pc, #280]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	e017      	b.n	80032c8 <HAL_RCC_ClockConfig+0x1bc>
 8003298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329c:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f043 0320 	orr.w	r3, r3, #32
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d102      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x1b8>
 80032be:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	e001      	b.n	80032c8 <HAL_RCC_ClockConfig+0x1bc>
 80032c4:	4b39      	ldr	r3, [pc, #228]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032cc:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032d0:	fa92 f2a2 	rbit	r2, r2
 80032d4:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80032d6:	6a3a      	ldr	r2, [r7, #32]
 80032d8:	fab2 f282 	clz	r2, r2
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	f042 0220 	orr.w	r2, r2, #32
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	f002 021f 	and.w	r2, r2, #31
 80032ea:	40d3      	lsrs	r3, r2
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d15d      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0f9      	b.n	80034ec <HAL_RCC_ClockConfig+0x3e0>
 80032f8:	2302      	movs	r3, #2
 80032fa:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003304:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f043 0320 	orr.w	r3, r3, #32
 8003310:	b2db      	uxtb	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d102      	bne.n	8003322 <HAL_RCC_ClockConfig+0x216>
 800331c:	4b23      	ldr	r3, [pc, #140]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	e02b      	b.n	800337a <HAL_RCC_ClockConfig+0x26e>
 8003322:	2302      	movs	r3, #2
 8003324:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f043 0320 	orr.w	r3, r3, #32
 800333a:	b2db      	uxtb	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d102      	bne.n	800334c <HAL_RCC_ClockConfig+0x240>
 8003346:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	e016      	b.n	800337a <HAL_RCC_ClockConfig+0x26e>
 800334c:	2302      	movs	r3, #2
 800334e:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f043 0320 	orr.w	r3, r3, #32
 8003364:	b2db      	uxtb	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b04      	cmp	r3, #4
 800336e:	d102      	bne.n	8003376 <HAL_RCC_ClockConfig+0x26a>
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	e001      	b.n	800337a <HAL_RCC_ClockConfig+0x26e>
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <HAL_RCC_ClockConfig+0x2a0>)
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	2202      	movs	r2, #2
 800337c:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003380:	fa92 f2a2 	rbit	r2, r2
 8003384:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	fab2 f282 	clz	r2, r2
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	f042 0220 	orr.w	r2, r2, #32
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	f002 021f 	and.w	r2, r2, #31
 800339a:	40d3      	lsrs	r3, r2
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0a1      	b.n	80034ec <HAL_RCC_ClockConfig+0x3e0>
 80033a8:	40022000 	.word	0x40022000
 80033ac:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b0:	4950      	ldr	r1, [pc, #320]	; (80034f4 <HAL_RCC_ClockConfig+0x3e8>)
 80033b2:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <HAL_RCC_ClockConfig+0x3e8>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c2:	f7fd fb7b 	bl	8000abc <HAL_GetTick>
 80033c6:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d112      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d2:	f7fd fb73 	bl	8000abc <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e081      	b.n	80034ec <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_RCC_ClockConfig+0x3e8>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d1ee      	bne.n	80033d2 <HAL_RCC_ClockConfig+0x2c6>
 80033f4:	e027      	b.n	8003446 <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d11d      	bne.n	800343a <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003400:	f7fd fb5c 	bl	8000abc <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e06a      	b.n	80034ec <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003416:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCC_ClockConfig+0x3e8>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b08      	cmp	r3, #8
 8003420:	d1ee      	bne.n	8003400 <HAL_RCC_ClockConfig+0x2f4>
 8003422:	e010      	b.n	8003446 <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fd fb4a 	bl	8000abc <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e058      	b.n	80034ec <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800343a:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <HAL_RCC_ClockConfig+0x3e8>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1ee      	bne.n	8003424 <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003446:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <HAL_RCC_ClockConfig+0x3ec>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0207 	and.w	r2, r3, #7
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d910      	bls.n	8003476 <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003454:	4928      	ldr	r1, [pc, #160]	; (80034f8 <HAL_RCC_ClockConfig+0x3ec>)
 8003456:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_RCC_ClockConfig+0x3ec>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 0207 	bic.w	r2, r3, #7
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_RCC_ClockConfig+0x3ec>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0207 	and.w	r2, r3, #7
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d001      	beq.n	8003476 <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e03a      	b.n	80034ec <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003482:	491c      	ldr	r1, [pc, #112]	; (80034f4 <HAL_RCC_ClockConfig+0x3e8>)
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCC_ClockConfig+0x3e8>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034a0:	4914      	ldr	r1, [pc, #80]	; (80034f4 <HAL_RCC_ClockConfig+0x3e8>)
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_RCC_ClockConfig+0x3e8>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034b4:	f000 f826 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 80034b8:	4601      	mov	r1, r0
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_RCC_ClockConfig+0x3e8>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034c2:	23f0      	movs	r3, #240	; 0xf0
 80034c4:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
 80034d8:	4a08      	ldr	r2, [pc, #32]	; (80034fc <HAL_RCC_ClockConfig+0x3f0>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	fa21 f303 	lsr.w	r3, r1, r3
 80034e0:	4a07      	ldr	r2, [pc, #28]	; (8003500 <HAL_RCC_ClockConfig+0x3f4>)
 80034e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80034e4:	2000      	movs	r0, #0
 80034e6:	f7fd fabf 	bl	8000a68 <HAL_InitTick>
  
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3778      	adds	r7, #120	; 0x78
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40022000 	.word	0x40022000
 80034fc:	080038a0 	.word	0x080038a0
 8003500:	20000428 	.word	0x20000428

08003504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	b08b      	sub	sp, #44	; 0x2c
 8003508:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800351e:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b04      	cmp	r3, #4
 800352c:	d002      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x30>
 800352e:	2b08      	cmp	r3, #8
 8003530:	d003      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x36>
 8003532:	e03c      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003536:	623b      	str	r3, [r7, #32]
      break;
 8003538:	e03c      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003540:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003544:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800355e:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	f003 020f 	and.w	r2, r3, #15
 8003566:	230f      	movs	r3, #15
 8003568:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800357e:	5cd3      	ldrb	r3, [r2, r3]
 8003580:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800358c:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
 800359c:	e004      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	623b      	str	r3, [r7, #32]
      break;
 80035ac:	e002      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035b0:	623b      	str	r3, [r7, #32]
      break;
 80035b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b4:	6a3b      	ldr	r3, [r7, #32]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	372c      	adds	r7, #44	; 0x2c
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
 80035c8:	007a1200 	.word	0x007a1200
 80035cc:	080038b0 	.word	0x080038b0
 80035d0:	080038c0 	.word	0x080038c0
 80035d4:	003d0900 	.word	0x003d0900

080035d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_GetHCLKFreq+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000428 	.word	0x20000428

080035f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b092      	sub	sp, #72	; 0x48
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80ef 	beq.w	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003614:	4b96      	ldr	r3, [pc, #600]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10e      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003620:	4a93      	ldr	r2, [pc, #588]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003622:	4b93      	ldr	r3, [pc, #588]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362a:	61d3      	str	r3, [r2, #28]
 800362c:	4b90      	ldr	r3, [pc, #576]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4b8d      	ldr	r3, [pc, #564]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d118      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4a8a      	ldr	r2, [pc, #552]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800364c:	4b89      	ldr	r3, [pc, #548]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003654:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fd fa31 	bl	8000abc <HAL_GetTick>
 800365a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	e008      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365e:	f7fd fa2d 	bl	8000abc <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b64      	cmp	r3, #100	; 0x64
 800366a:	d901      	bls.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0fa      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x276>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	4b80      	ldr	r3, [pc, #512]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800367c:	4b7c      	ldr	r3, [pc, #496]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003684:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 809c 	beq.w	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003698:	429a      	cmp	r2, r3
 800369a:	f000 8094 	beq.w	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800369e:	4b74      	ldr	r3, [pc, #464]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b0:	fa93 f3a3 	rbit	r3, r3
 80036b4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80036b6:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036b8:	fab3 f383 	clz	r3, r3
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	461a      	mov	r2, r3
 80036c0:	4b6d      	ldr	r3, [pc, #436]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80036c2:	4413      	add	r3, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	2301      	movs	r3, #1
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80036d8:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b65      	ldr	r3, [pc, #404]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80036e4:	4413      	add	r3, r2
 80036e6:	461a      	mov	r2, r3
 80036e8:	2300      	movs	r3, #0
 80036ea:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036ec:	4a60      	ldr	r2, [pc, #384]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d064      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fd f9de 	bl	8000abc <HAL_GetTick>
 8003700:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	e00a      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fd f9da 	bl	8000abc <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e0a5      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800371a:	2302      	movs	r3, #2
 800371c:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003726:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003732:	b2db      	uxtb	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d102      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800373e:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	e02b      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003744:	2302      	movs	r3, #2
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800375c:	b2db      	uxtb	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d102      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003768:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	e016      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800376e:	2302      	movs	r3, #2
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003786:	b2db      	uxtb	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b04      	cmp	r3, #4
 8003790:	d102      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	e001      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003798:	4b35      	ldr	r3, [pc, #212]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	2202      	movs	r2, #2
 800379e:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a2:	fa92 f2a2 	rbit	r2, r2
 80037a6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	fab2 f282 	clz	r2, r2
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	f002 021f 	and.w	r2, r2, #31
 80037bc:	40d3      	lsrs	r3, r2
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d09e      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037c6:	492a      	ldr	r1, [pc, #168]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037c8:	4b29      	ldr	r3, [pc, #164]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d105      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e0:	4a23      	ldr	r2, [pc, #140]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037e2:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037f8:	491d      	ldr	r1, [pc, #116]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037fa:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f023 0203 	bic.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4313      	orrs	r3, r2
 8003808:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003816:	4916      	ldr	r1, [pc, #88]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003818:	4b15      	ldr	r3, [pc, #84]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	f023 0210 	bic.w	r2, r3, #16
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003834:	490e      	ldr	r1, [pc, #56]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003852:	4907      	ldr	r1, [pc, #28]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3748      	adds	r7, #72	; 0x48
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	40007000 	.word	0x40007000
 8003878:	42420400 	.word	0x42420400

0800387c <_init>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr

08003888 <_fini>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	bf00      	nop
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr
