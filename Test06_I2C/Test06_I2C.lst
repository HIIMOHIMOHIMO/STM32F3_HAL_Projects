
Test06_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000042c  20000000  080035c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002042c  2**0
                  CONTENTS
  7 .bss          000000a8  2000042c  2000042c  0002042c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200004d4  200004d4  0002042c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00004240  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000838c  00000000  00000000  0002469c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000014c7  00000000  00000000  0002ca28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000710  00000000  00000000  0002def0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000648  00000000  00000000  0002e600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000393c  00000000  00000000  0002ec48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000021e4  00000000  00000000  00032584  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000006e  00000000  00000000  00034768  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b24  00000000  00000000  000347d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000042f 	.word	0x2000042f
 80001a0:	2000042c 	.word	0x2000042c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	2000042c 	.word	0x2000042c
 80001c4:	2000042c 	.word	0x2000042c
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000042c 	.word	0x2000042c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800356c 	.word	0x0800356c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000430 	.word	0x20000430
 8000220:	0800356c 	.word	0x0800356c
 8000224:	2000042c 	.word	0x2000042c
 8000228:	00000000 	.word	0x00000000

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	4e0f      	ldr	r6, [pc, #60]	; (800026c <__libc_init_array+0x40>)
 8000230:	4d0f      	ldr	r5, [pc, #60]	; (8000270 <__libc_init_array+0x44>)
 8000232:	1b76      	subs	r6, r6, r5
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	bf18      	it	ne
 8000238:	2400      	movne	r4, #0
 800023a:	d005      	beq.n	8000248 <__libc_init_array+0x1c>
 800023c:	3401      	adds	r4, #1
 800023e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000242:	4798      	blx	r3
 8000244:	42a6      	cmp	r6, r4
 8000246:	d1f9      	bne.n	800023c <__libc_init_array+0x10>
 8000248:	4e0a      	ldr	r6, [pc, #40]	; (8000274 <__libc_init_array+0x48>)
 800024a:	4d0b      	ldr	r5, [pc, #44]	; (8000278 <__libc_init_array+0x4c>)
 800024c:	1b76      	subs	r6, r6, r5
 800024e:	f003 f98d 	bl	800356c <_init>
 8000252:	10b6      	asrs	r6, r6, #2
 8000254:	bf18      	it	ne
 8000256:	2400      	movne	r4, #0
 8000258:	d006      	beq.n	8000268 <__libc_init_array+0x3c>
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	080035bc 	.word	0x080035bc
 8000270:	080035bc 	.word	0x080035bc
 8000274:	080035c4 	.word	0x080035c4
 8000278:	080035bc 	.word	0x080035bc

0800027c <register_fini>:
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <register_fini+0xc>)
 800027e:	b113      	cbz	r3, 8000286 <register_fini+0xa>
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <register_fini+0x10>)
 8000282:	f000 b805 	b.w	8000290 <atexit>
 8000286:	4770      	bx	lr
 8000288:	00000000 	.word	0x00000000
 800028c:	0800029d 	.word	0x0800029d

08000290 <atexit>:
 8000290:	2300      	movs	r3, #0
 8000292:	4601      	mov	r1, r0
 8000294:	461a      	mov	r2, r3
 8000296:	4618      	mov	r0, r3
 8000298:	f000 b814 	b.w	80002c4 <__register_exitproc>

0800029c <__libc_fini_array>:
 800029c:	b538      	push	{r3, r4, r5, lr}
 800029e:	4d07      	ldr	r5, [pc, #28]	; (80002bc <__libc_fini_array+0x20>)
 80002a0:	4c07      	ldr	r4, [pc, #28]	; (80002c0 <__libc_fini_array+0x24>)
 80002a2:	1b2c      	subs	r4, r5, r4
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	d005      	beq.n	80002b4 <__libc_fini_array+0x18>
 80002a8:	3c01      	subs	r4, #1
 80002aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80002ae:	4798      	blx	r3
 80002b0:	2c00      	cmp	r4, #0
 80002b2:	d1f9      	bne.n	80002a8 <__libc_fini_array+0xc>
 80002b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80002b8:	f003 b95e 	b.w	8003578 <_fini>
 80002bc:	080035c8 	.word	0x080035c8
 80002c0:	080035c4 	.word	0x080035c4

080002c4 <__register_exitproc>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	4c25      	ldr	r4, [pc, #148]	; (8000360 <__register_exitproc+0x9c>)
 80002ca:	6825      	ldr	r5, [r4, #0]
 80002cc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80002d0:	4606      	mov	r6, r0
 80002d2:	4688      	mov	r8, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b3c4      	cbz	r4, 800034c <__register_exitproc+0x88>
 80002da:	6860      	ldr	r0, [r4, #4]
 80002dc:	281f      	cmp	r0, #31
 80002de:	dc17      	bgt.n	8000310 <__register_exitproc+0x4c>
 80002e0:	1c43      	adds	r3, r0, #1
 80002e2:	b176      	cbz	r6, 8000302 <__register_exitproc+0x3e>
 80002e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80002e8:	2201      	movs	r2, #1
 80002ea:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80002ee:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 80002f2:	4082      	lsls	r2, r0
 80002f4:	4311      	orrs	r1, r2
 80002f6:	2e02      	cmp	r6, #2
 80002f8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80002fc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8000300:	d01e      	beq.n	8000340 <__register_exitproc+0x7c>
 8000302:	3002      	adds	r0, #2
 8000304:	6063      	str	r3, [r4, #4]
 8000306:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800030a:	2000      	movs	r0, #0
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <__register_exitproc+0xa0>)
 8000312:	b303      	cbz	r3, 8000356 <__register_exitproc+0x92>
 8000314:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000318:	f3af 8000 	nop.w
 800031c:	4604      	mov	r4, r0
 800031e:	b1d0      	cbz	r0, 8000356 <__register_exitproc+0x92>
 8000320:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000324:	2700      	movs	r7, #0
 8000326:	e880 0088 	stmia.w	r0, {r3, r7}
 800032a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800032e:	4638      	mov	r0, r7
 8000330:	2301      	movs	r3, #1
 8000332:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000336:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e1      	beq.n	8000302 <__register_exitproc+0x3e>
 800033e:	e7d1      	b.n	80002e4 <__register_exitproc+0x20>
 8000340:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000344:	430a      	orrs	r2, r1
 8000346:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800034a:	e7da      	b.n	8000302 <__register_exitproc+0x3e>
 800034c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000350:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000354:	e7c1      	b.n	80002da <__register_exitproc+0x16>
 8000356:	f04f 30ff 	mov.w	r0, #4294967295
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	bf00      	nop
 8000360:	08003588 	.word	0x08003588
 8000364:	00000000 	.word	0x00000000

08000368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800036c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800036e:	e003      	b.n	8000378 <LoopCopyDataInit>

08000370 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000372:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000374:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000376:	3104      	adds	r1, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800037c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800037e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000380:	d3f6      	bcc.n	8000370 <CopyDataInit>
	ldr	r2, =_sbss
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000384:	e002      	b.n	800038c <LoopFillZerobss>

08000386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000386:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000388:	f842 3b04 	str.w	r3, [r2], #4

0800038c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <LoopForever+0x16>)
	cmp	r2, r3
 800038e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000390:	d3f9      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000392:	f000 f987 	bl	80006a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000396:	f7ff ff49 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800039a:	f000 f80f 	bl	80003bc <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a0:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80003a4:	080035c8 	.word	0x080035c8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003ac:	2000042c 	.word	0x2000042c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80003b0:	2000042c 	.word	0x2000042c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80003b4:	200004d4 	.word	0x200004d4

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <main>:

/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	uint8_t read=0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	71fb      	strb	r3, [r7, #7]
	uint8_t address=0x75;//WHO_AM_I
 80003c6:	2375      	movs	r3, #117	; 0x75
 80003c8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ca:	f000 fa59 	bl	8000880 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80003ce:	f000 f841 	bl	8000454 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d2:	f000 f8e5 	bl	80005a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80003d6:	f000 f8c5 	bl	8000564 <MX_DMA_Init>
  MX_I2C1_Init();
 80003da:	f000 f88b 	bl	80004f4 <MX_I2C1_Init>
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
//READ MPU6050(0xD0) WHO_AM_I(0x75)
		if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)0xD0, &address, 1, 1000) != HAL_OK){
 80003de:	1dba      	adds	r2, r7, #6
 80003e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	2301      	movs	r3, #1
 80003e8:	21d0      	movs	r1, #208	; 0xd0
 80003ea:	4818      	ldr	r0, [pc, #96]	; (800044c <main+0x90>)
 80003ec:	f001 f832 	bl	8001454 <HAL_I2C_Master_Transmit>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <main+0x3e>
			Error_Handler();
 80003f6:	f000 f8fd 	bl	80005f4 <Error_Handler>
		}
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)0xD0, &read, 1, 1000) != HAL_OK){
 80003fa:	1dfa      	adds	r2, r7, #7
 80003fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2301      	movs	r3, #1
 8000404:	21d0      	movs	r1, #208	; 0xd0
 8000406:	4811      	ldr	r0, [pc, #68]	; (800044c <main+0x90>)
 8000408:	f001 f924 	bl	8001654 <HAL_I2C_Master_Receive>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <main+0x5a>
			Error_Handler();
 8000412:	f000 f8ef 	bl	80005f4 <Error_Handler>
		}
		if( read == 0x68 ){
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	2b68      	cmp	r3, #104	; 0x68
 800041a:	d105      	bne.n	8000428 <main+0x6c>
			HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);	
 800041c:	2201      	movs	r2, #1
 800041e:	2108      	movs	r1, #8
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <main+0x94>)
 8000422:	f000 ff75 	bl	8001310 <HAL_GPIO_WritePin>
 8000426:	e7da      	b.n	80003de <main+0x22>
		}else{
			while(1){
				HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	2108      	movs	r1, #8
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <main+0x94>)
 800042e:	f000 ff6f 	bl	8001310 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 8000432:	20c8      	movs	r0, #200	; 0xc8
 8000434:	f000 fa70 	bl	8000918 <HAL_Delay>
				HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2108      	movs	r1, #8
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <main+0x94>)
 800043e:	f000 ff67 	bl	8001310 <HAL_GPIO_WritePin>
				HAL_Delay(50);
 8000442:	2032      	movs	r0, #50	; 0x32
 8000444:	f000 fa68 	bl	8000918 <HAL_Delay>
			}
 8000448:	e7ee      	b.n	8000428 <main+0x6c>
 800044a:	bf00      	nop
 800044c:	20000448 	.word	0x20000448
 8000450:	48000400 	.word	0x48000400

08000454 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b096      	sub	sp, #88	; 0x58
 8000458:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800045a:	2302      	movs	r3, #2
 800045c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045e:	2301      	movs	r3, #1
 8000460:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000462:	2310      	movs	r3, #16
 8000464:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000466:	2300      	movs	r3, #0
 8000468:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fc02 	bl	8001c78 <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x2a>
  {
    Error_Handler();
 800047a:	f000 f8bb 	bl	80005f4 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000492:	f107 031c 	add.w	r3, r7, #28
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f002 fcaf 	bl	8002dfc <HAL_RCC_ClockConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80004a4:	f000 f8a6 	bl	80005f4 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004a8:	2320      	movs	r3, #32
 80004aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004ac:	2300      	movs	r3, #0
 80004ae:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4618      	mov	r0, r3
 80004b4:	f002 ff14 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004be:	f000 f899 	bl	80005f4 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80004c2:	f002 ff01 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 80004c6:	4602      	mov	r2, r0
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <SystemClock_Config+0x9c>)
 80004ca:	fba3 2302 	umull	r2, r3, r3, r2
 80004ce:	099b      	lsrs	r3, r3, #6
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fb35 	bl	8000b40 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80004d6:	2004      	movs	r0, #4
 80004d8:	f000 fb3e 	bl	8000b58 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	2100      	movs	r1, #0
 80004e0:	f04f 30ff 	mov.w	r0, #4294967295
 80004e4:	f000 fb02 	bl	8000aec <HAL_NVIC_SetPriority>
}
 80004e8:	bf00      	nop
 80004ea:	3758      	adds	r7, #88	; 0x58
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	10624dd3 	.word	0x10624dd3

080004f4 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <MX_I2C1_Init+0x64>)
 80004fa:	4a18      	ldr	r2, [pc, #96]	; (800055c <MX_I2C1_Init+0x68>)
 80004fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004fe:	4b16      	ldr	r3, [pc, #88]	; (8000558 <MX_I2C1_Init+0x64>)
 8000500:	4a17      	ldr	r2, [pc, #92]	; (8000560 <MX_I2C1_Init+0x6c>)
 8000502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_I2C1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_I2C1_Init+0x64>)
 800050c:	2201      	movs	r2, #1
 800050e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_I2C1_Init+0x64>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <MX_I2C1_Init+0x64>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_I2C1_Init+0x64>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <MX_I2C1_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_I2C1_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800052e:	480a      	ldr	r0, [pc, #40]	; (8000558 <MX_I2C1_Init+0x64>)
 8000530:	f000 ff06 	bl	8001340 <HAL_I2C_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800053a:	f000 f85b 	bl	80005f4 <Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800053e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_I2C1_Init+0x64>)
 8000544:	f001 fb4c 	bl	8001be0 <HAL_I2CEx_ConfigAnalogFilter>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800054e:	f000 f851 	bl	80005f4 <Error_Handler>
  }

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000448 	.word	0x20000448
 800055c:	40005400 	.word	0x40005400
 8000560:	2000090e 	.word	0x2000090e

08000564 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056a:	4a0c      	ldr	r2, [pc, #48]	; (800059c <MX_DMA_Init+0x38>)
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_DMA_Init+0x38>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_DMA_Init+0x38>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	200d      	movs	r0, #13
 8000588:	f000 fab0 	bl	8000aec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800058c:	200d      	movs	r0, #13
 800058e:	f000 fac9 	bl	8000b24 <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000

080005a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4a11      	ldr	r2, [pc, #68]	; (80005ec <MX_GPIO_Init+0x4c>)
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <MX_GPIO_Init+0x4c>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_GPIO_Init+0x4c>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2108      	movs	r1, #8
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <MX_GPIO_Init+0x50>)
 80005c4:	f000 fea4 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80005c8:	2308      	movs	r3, #8
 80005ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <MX_GPIO_Init+0x50>)
 80005de:	f000 fd21 	bl	8001024 <HAL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000400 	.word	0x48000400

080005f4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2108      	movs	r1, #8
 80005fc:	4807      	ldr	r0, [pc, #28]	; (800061c <Error_Handler+0x28>)
 80005fe:	f000 fe87 	bl	8001310 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000602:	2032      	movs	r0, #50	; 0x32
 8000604:	f000 f988 	bl	8000918 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2108      	movs	r1, #8
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <Error_Handler+0x28>)
 800060e:	f000 fe7f 	bl	8001310 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000612:	2032      	movs	r0, #50	; 0x32
 8000614:	f000 f980 	bl	8000918 <HAL_Delay>
  }
 8000618:	e7ee      	b.n	80005f8 <Error_Handler+0x4>
 800061a:	bf00      	nop
 800061c:	48000400 	.word	0x48000400

08000620 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8000634:	e7fe      	b.n	8000634 <HardFault_Handler+0x4>
 8000636:	bf00      	nop

08000638 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 800063c:	e7fe      	b.n	800063c <MemManage_Handler+0x4>
 800063e:	bf00      	nop

08000640 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8000644:	e7fe      	b.n	8000644 <BusFault_Handler+0x4>
 8000646:	bf00      	nop

08000648 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 800064c:	e7fe      	b.n	800064c <UsageFault_Handler+0x4>
 800064e:	bf00      	nop

08000650 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000684:	f000 f92e 	bl	80008e4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000688:	f000 fa82 	bl	8000b90 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <DMA1_Channel3_IRQHandler>:

/**
* @brief This function handles DMA1 channel3 global interrupt.
*/
void DMA1_Channel3_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <DMA1_Channel3_IRQHandler+0x10>)
 8000696:	f000 fad5 	bl	8000c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000494 	.word	0x20000494

080006a4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a8:	4a1f      	ldr	r2, [pc, #124]	; (8000728 <SystemInit+0x84>)
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemInit+0x84>)
 80006ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80006b8:	4a1c      	ldr	r2, [pc, #112]	; (800072c <SystemInit+0x88>)
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <SystemInit+0x88>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80006c4:	4919      	ldr	r1, [pc, #100]	; (800072c <SystemInit+0x88>)
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <SystemInit+0x88>)
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <SystemInit+0x8c>)
 80006cc:	4013      	ands	r3, r2
 80006ce:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <SystemInit+0x88>)
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <SystemInit+0x88>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006e0:	4a12      	ldr	r2, [pc, #72]	; (800072c <SystemInit+0x88>)
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <SystemInit+0x88>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006ec:	4a0f      	ldr	r2, [pc, #60]	; (800072c <SystemInit+0x88>)
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <SystemInit+0x88>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006f6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80006f8:	4a0c      	ldr	r2, [pc, #48]	; (800072c <SystemInit+0x88>)
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <SystemInit+0x88>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000704:	4909      	ldr	r1, [pc, #36]	; (800072c <SystemInit+0x88>)
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <SystemInit+0x88>)
 8000708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <SystemInit+0x90>)
 800070c:	4013      	ands	r3, r2
 800070e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <SystemInit+0x88>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <SystemInit+0x84>)
 8000718:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800071c:	609a      	str	r2, [r3, #8]
#endif
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00
 800072c:	40021000 	.word	0x40021000
 8000730:	f87fc00c 	.word	0xf87fc00c
 8000734:	ff00fccc 	.word	0xff00fccc

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <HAL_MspInit+0x80>)
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <HAL_MspInit+0x80>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_MspInit+0x80>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000756:	2003      	movs	r0, #3
 8000758:	f000 f9bc 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	f06f 000b 	mvn.w	r0, #11
 8000764:	f000 f9c2 	bl	8000aec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	f06f 000a 	mvn.w	r0, #10
 8000770:	f000 f9bc 	bl	8000aec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	f06f 0009 	mvn.w	r0, #9
 800077c:	f000 f9b6 	bl	8000aec <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	f06f 0004 	mvn.w	r0, #4
 8000788:	f000 f9b0 	bl	8000aec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	f06f 0003 	mvn.w	r0, #3
 8000794:	f000 f9aa 	bl	8000aec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	f06f 0001 	mvn.w	r0, #1
 80007a0:	f000 f9a4 	bl	8000aec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f000 f99e 	bl	8000aec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a27      	ldr	r2, [pc, #156]	; (8000868 <HAL_I2C_MspInit+0xac>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d147      	bne.n	800085e <HAL_I2C_MspInit+0xa2>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ce:	23c0      	movs	r3, #192	; 0xc0
 80007d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d2:	2312      	movs	r3, #18
 80007d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007de:	2304      	movs	r3, #4
 80007e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	4820      	ldr	r0, [pc, #128]	; (800086c <HAL_I2C_MspInit+0xb0>)
 80007ea:	f000 fc1b 	bl	8001024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ee:	4a20      	ldr	r2, [pc, #128]	; (8000870 <HAL_I2C_MspInit+0xb4>)
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <HAL_I2C_MspInit+0xb4>)
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <HAL_I2C_MspInit+0xb4>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral DMA init*/
  
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <HAL_I2C_MspInit+0xb8>)
 8000808:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <HAL_I2C_MspInit+0xbc>)
 800080a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <HAL_I2C_MspInit+0xb8>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_I2C_MspInit+0xb8>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <HAL_I2C_MspInit+0xb8>)
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_I2C_MspInit+0xb8>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <HAL_I2C_MspInit+0xb8>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_I2C_MspInit+0xb8>)
 800082c:	2220      	movs	r2, #32
 800082e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_I2C_MspInit+0xb8>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <HAL_I2C_MspInit+0xb8>)
 8000838:	f000 f9b8 	bl	8000bac <HAL_DMA_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_I2C_MspInit+0x8a>
    {
      Error_Handler();
 8000842:	f7ff fed7 	bl	80005f4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_RX_DMA1_CH3);
 8000846:	4a0d      	ldr	r2, [pc, #52]	; (800087c <HAL_I2C_MspInit+0xc0>)
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_I2C_MspInit+0xc0>)
 800084a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_I2C_MspInit+0xb8>)
 8000856:	63da      	str	r2, [r3, #60]	; 0x3c
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_I2C_MspInit+0xb8>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40005400 	.word	0x40005400
 800086c:	48000400 	.word	0x48000400
 8000870:	40021000 	.word	0x40021000
 8000874:	20000494 	.word	0x20000494
 8000878:	40020030 	.word	0x40020030
 800087c:	40010000 	.word	0x40010000

08000880 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_Init+0x28>)
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_Init+0x28>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f91f 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f808 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089c:	f7ff ff4c 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40022000 	.word	0x40022000

080008ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_InitTick+0x30>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <HAL_InitTick+0x34>)
 80008ba:	fba2 2303 	umull	r2, r3, r2, r3
 80008be:	099b      	lsrs	r3, r3, #6
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f93d 	bl	8000b40 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	f04f 30ff 	mov.w	r0, #4294967295
 80008ce:	f000 f90d 	bl	8000aec <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000428 	.word	0x20000428
 80008e0:	10624dd3 	.word	0x10624dd3

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick++;
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <HAL_IncTick+0x18>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	4a03      	ldr	r2, [pc, #12]	; (80008fc <HAL_IncTick+0x18>)
 80008f0:	6013      	str	r3, [r2, #0]
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	200004d0 	.word	0x200004d0

08000900 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;  
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_GetTick+0x14>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	200004d0 	.word	0x200004d0

08000918 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000920:	f7ff ffee 	bl	8000900 <HAL_GetTick>
 8000924:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000926:	bf00      	nop
 8000928:	f7ff ffea 	bl	8000900 <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	1ad2      	subs	r2, r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	429a      	cmp	r2, r3
 8000936:	d3f7      	bcc.n	8000928 <HAL_Delay+0x10>
  {
  }
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <NVIC_SetPriorityGrouping+0x44>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <NVIC_SetPriorityGrouping+0x44>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	60d3      	str	r3, [r2, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000994:	0a1b      	lsrs	r3, r3, #8
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009ae:	4909      	ldr	r1, [pc, #36]	; (80009d4 <NVIC_EnableIRQ+0x30>)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	095b      	lsrs	r3, r3, #5
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	f002 021f 	and.w	r2, r2, #31
 80009bc:	2001      	movs	r0, #1
 80009be:	fa00 f202 	lsl.w	r2, r0, r2
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da0b      	bge.n	8000a04 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	490d      	ldr	r1, [pc, #52]	; (8000a24 <NVIC_SetPriority+0x4c>)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 030f 	and.w	r3, r3, #15
 80009f4:	3b04      	subs	r3, #4
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a02:	e009      	b.n	8000a18 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	4908      	ldr	r1, [pc, #32]	; (8000a28 <NVIC_SetPriority+0x50>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	2201      	movs	r2, #1
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	1e5a      	subs	r2, r3, #1
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a72:	2101      	movs	r1, #1
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	1e59      	subs	r1, r3, #1
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000a80:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3724      	adds	r7, #36	; 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00f      	b.n	8000ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <SysTick_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aae:	210f      	movs	r1, #15
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff ff90 	bl	80009d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <SysTick_Config+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SysTick_Config+0x40>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff2f 	bl	8000940 <NVIC_SetPriorityGrouping>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop

08000aec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000afe:	f7ff ff43 	bl	8000988 <NVIC_GetPriorityGrouping>
 8000b02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	68b9      	ldr	r1, [r7, #8]
 8000b08:	6978      	ldr	r0, [r7, #20]
 8000b0a:	f7ff ff8f 	bl	8000a2c <NVIC_EncodePriority>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff5e 	bl	80009d8 <NVIC_SetPriority>
}
 8000b1c:	bf00      	nop
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff36 	bl	80009a4 <NVIC_EnableIRQ>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ffa1 	bl	8000a90 <SysTick_Config>
 8000b4e:	4603      	mov	r3, r0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	d106      	bne.n	8000b74 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000b72:	e005      	b.n	8000b80 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f023 0304 	bic.w	r3, r3, #4
 8000b7e:	6013      	str	r3, [r2, #0]
  }
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b94:	f000 f802 	bl	8000b9c <HAL_SYSTICK_Callback>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e039      	b.n	8000c36 <HAL_DMA_Init+0x8a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d103      	bne.n	8000bd4 <HAL_DMA_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000bea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	691b      	ldr	r3, [r3, #16]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	699b      	ldr	r3, [r3, #24]
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4313      	orrs	r3, r2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}  
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{        
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8000c4c:	4b8f      	ldr	r3, [pc, #572]	; (8000e8c <HAL_DMA_IRQHandler+0x248>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	4b8e      	ldr	r3, [pc, #568]	; (8000e90 <HAL_DMA_IRQHandler+0x24c>)
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d02e      	beq.n	8000cba <HAL_DMA_IRQHandler+0x76>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	4b8c      	ldr	r3, [pc, #560]	; (8000e94 <HAL_DMA_IRQHandler+0x250>)
 8000c64:	4299      	cmp	r1, r3
 8000c66:	d026      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0x72>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4b8a      	ldr	r3, [pc, #552]	; (8000e98 <HAL_DMA_IRQHandler+0x254>)
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d01d      	beq.n	8000cb0 <HAL_DMA_IRQHandler+0x6c>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4b88      	ldr	r3, [pc, #544]	; (8000e9c <HAL_DMA_IRQHandler+0x258>)
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	d014      	beq.n	8000caa <HAL_DMA_IRQHandler+0x66>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4b86      	ldr	r3, [pc, #536]	; (8000ea0 <HAL_DMA_IRQHandler+0x25c>)
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d00b      	beq.n	8000ca4 <HAL_DMA_IRQHandler+0x60>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4b84      	ldr	r3, [pc, #528]	; (8000ea4 <HAL_DMA_IRQHandler+0x260>)
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d102      	bne.n	8000c9e <HAL_DMA_IRQHandler+0x5a>
 8000c98:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000c9c:	e00e      	b.n	8000cbc <HAL_DMA_IRQHandler+0x78>
 8000c9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ca2:	e00b      	b.n	8000cbc <HAL_DMA_IRQHandler+0x78>
 8000ca4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ca8:	e008      	b.n	8000cbc <HAL_DMA_IRQHandler+0x78>
 8000caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cae:	e005      	b.n	8000cbc <HAL_DMA_IRQHandler+0x78>
 8000cb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cb4:	e002      	b.n	8000cbc <HAL_DMA_IRQHandler+0x78>
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	e000      	b.n	8000cbc <HAL_DMA_IRQHandler+0x78>
 8000cba:	2308      	movs	r3, #8
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d05c      	beq.n	8000d7c <HAL_DMA_IRQHandler+0x138>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d055      	beq.n	8000d7c <HAL_DMA_IRQHandler+0x138>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	f022 0208 	bic.w	r2, r2, #8
 8000cde:	601a      	str	r2, [r3, #0]
    
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000ce0:	4a6a      	ldr	r2, [pc, #424]	; (8000e8c <HAL_DMA_IRQHandler+0x248>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4b69      	ldr	r3, [pc, #420]	; (8000e90 <HAL_DMA_IRQHandler+0x24c>)
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d02e      	beq.n	8000d4c <HAL_DMA_IRQHandler+0x108>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4b67      	ldr	r3, [pc, #412]	; (8000e94 <HAL_DMA_IRQHandler+0x250>)
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d026      	beq.n	8000d48 <HAL_DMA_IRQHandler+0x104>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4b65      	ldr	r3, [pc, #404]	; (8000e98 <HAL_DMA_IRQHandler+0x254>)
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d01d      	beq.n	8000d42 <HAL_DMA_IRQHandler+0xfe>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4b63      	ldr	r3, [pc, #396]	; (8000e9c <HAL_DMA_IRQHandler+0x258>)
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	d014      	beq.n	8000d3c <HAL_DMA_IRQHandler+0xf8>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4619      	mov	r1, r3
 8000d18:	4b61      	ldr	r3, [pc, #388]	; (8000ea0 <HAL_DMA_IRQHandler+0x25c>)
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d00b      	beq.n	8000d36 <HAL_DMA_IRQHandler+0xf2>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4b5f      	ldr	r3, [pc, #380]	; (8000ea4 <HAL_DMA_IRQHandler+0x260>)
 8000d26:	4299      	cmp	r1, r3
 8000d28:	d102      	bne.n	8000d30 <HAL_DMA_IRQHandler+0xec>
 8000d2a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d2e:	e00e      	b.n	8000d4e <HAL_DMA_IRQHandler+0x10a>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	e00b      	b.n	8000d4e <HAL_DMA_IRQHandler+0x10a>
 8000d36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d3a:	e008      	b.n	8000d4e <HAL_DMA_IRQHandler+0x10a>
 8000d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d40:	e005      	b.n	8000d4e <HAL_DMA_IRQHandler+0x10a>
 8000d42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d46:	e002      	b.n	8000d4e <HAL_DMA_IRQHandler+0x10a>
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	e000      	b.n	8000d4e <HAL_DMA_IRQHandler+0x10a>
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d54:	f043 0201 	orr.w	r2, r3, #1
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;    
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2204      	movs	r2, #4
 8000d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2020 	strb.w	r2, [r3, #32]
    
      if (hdma->XferErrorCallback != NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_DMA_IRQHandler+0x138>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8000d7c:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <HAL_DMA_IRQHandler+0x248>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	4b42      	ldr	r3, [pc, #264]	; (8000e90 <HAL_DMA_IRQHandler+0x24c>)
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d02e      	beq.n	8000dea <HAL_DMA_IRQHandler+0x1a6>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <HAL_DMA_IRQHandler+0x250>)
 8000d94:	4299      	cmp	r1, r3
 8000d96:	d026      	beq.n	8000de6 <HAL_DMA_IRQHandler+0x1a2>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4b3e      	ldr	r3, [pc, #248]	; (8000e98 <HAL_DMA_IRQHandler+0x254>)
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d01d      	beq.n	8000de0 <HAL_DMA_IRQHandler+0x19c>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <HAL_DMA_IRQHandler+0x258>)
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d014      	beq.n	8000dda <HAL_DMA_IRQHandler+0x196>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <HAL_DMA_IRQHandler+0x25c>)
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d00b      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x190>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <HAL_DMA_IRQHandler+0x260>)
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d102      	bne.n	8000dce <HAL_DMA_IRQHandler+0x18a>
 8000dc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dcc:	e00e      	b.n	8000dec <HAL_DMA_IRQHandler+0x1a8>
 8000dce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dd2:	e00b      	b.n	8000dec <HAL_DMA_IRQHandler+0x1a8>
 8000dd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dd8:	e008      	b.n	8000dec <HAL_DMA_IRQHandler+0x1a8>
 8000dda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dde:	e005      	b.n	8000dec <HAL_DMA_IRQHandler+0x1a8>
 8000de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de4:	e002      	b.n	8000dec <HAL_DMA_IRQHandler+0x1a8>
 8000de6:	2340      	movs	r3, #64	; 0x40
 8000de8:	e000      	b.n	8000dec <HAL_DMA_IRQHandler+0x1a8>
 8000dea:	2304      	movs	r3, #4
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d068      	beq.n	8000ec4 <HAL_DMA_IRQHandler+0x280>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d061      	beq.n	8000ec4 <HAL_DMA_IRQHandler+0x280>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0320 	and.w	r3, r3, #32
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d107      	bne.n	8000e1e <HAL_DMA_IRQHandler+0x1da>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	f022 0204 	bic.w	r2, r2, #4
 8000e1c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e1e:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <HAL_DMA_IRQHandler+0x248>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_DMA_IRQHandler+0x24c>)
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d03d      	beq.n	8000ea8 <HAL_DMA_IRQHandler+0x264>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_DMA_IRQHandler+0x250>)
 8000e34:	4299      	cmp	r1, r3
 8000e36:	d026      	beq.n	8000e86 <HAL_DMA_IRQHandler+0x242>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_DMA_IRQHandler+0x254>)
 8000e40:	4299      	cmp	r1, r3
 8000e42:	d01d      	beq.n	8000e80 <HAL_DMA_IRQHandler+0x23c>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_DMA_IRQHandler+0x258>)
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d014      	beq.n	8000e7a <HAL_DMA_IRQHandler+0x236>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_DMA_IRQHandler+0x25c>)
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d00b      	beq.n	8000e74 <HAL_DMA_IRQHandler+0x230>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_DMA_IRQHandler+0x260>)
 8000e64:	4299      	cmp	r1, r3
 8000e66:	d102      	bne.n	8000e6e <HAL_DMA_IRQHandler+0x22a>
 8000e68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e6c:	e01d      	b.n	8000eaa <HAL_DMA_IRQHandler+0x266>
 8000e6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e72:	e01a      	b.n	8000eaa <HAL_DMA_IRQHandler+0x266>
 8000e74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e78:	e017      	b.n	8000eaa <HAL_DMA_IRQHandler+0x266>
 8000e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e7e:	e014      	b.n	8000eaa <HAL_DMA_IRQHandler+0x266>
 8000e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e84:	e011      	b.n	8000eaa <HAL_DMA_IRQHandler+0x266>
 8000e86:	2340      	movs	r3, #64	; 0x40
 8000e88:	e00f      	b.n	8000eaa <HAL_DMA_IRQHandler+0x266>
 8000e8a:	bf00      	nop
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020008 	.word	0x40020008
 8000e94:	4002001c 	.word	0x4002001c
 8000e98:	40020030 	.word	0x40020030
 8000e9c:	40020044 	.word	0x40020044
 8000ea0:	40020058 	.word	0x40020058
 8000ea4:	4002006c 	.word	0x4002006c
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2211      	movs	r2, #17
 8000eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_DMA_IRQHandler+0x280>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8000ec4:	4b50      	ldr	r3, [pc, #320]	; (8001008 <HAL_DMA_IRQHandler+0x3c4>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4b4f      	ldr	r3, [pc, #316]	; (800100c <HAL_DMA_IRQHandler+0x3c8>)
 8000ed0:	4299      	cmp	r1, r3
 8000ed2:	d02e      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x2ee>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <HAL_DMA_IRQHandler+0x3cc>)
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d026      	beq.n	8000f2e <HAL_DMA_IRQHandler+0x2ea>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <HAL_DMA_IRQHandler+0x3d0>)
 8000ee8:	4299      	cmp	r1, r3
 8000eea:	d01d      	beq.n	8000f28 <HAL_DMA_IRQHandler+0x2e4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4b49      	ldr	r3, [pc, #292]	; (8001018 <HAL_DMA_IRQHandler+0x3d4>)
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	d014      	beq.n	8000f22 <HAL_DMA_IRQHandler+0x2de>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4b47      	ldr	r3, [pc, #284]	; (800101c <HAL_DMA_IRQHandler+0x3d8>)
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d00b      	beq.n	8000f1c <HAL_DMA_IRQHandler+0x2d8>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4b45      	ldr	r3, [pc, #276]	; (8001020 <HAL_DMA_IRQHandler+0x3dc>)
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d102      	bne.n	8000f16 <HAL_DMA_IRQHandler+0x2d2>
 8000f10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f14:	e00e      	b.n	8000f34 <HAL_DMA_IRQHandler+0x2f0>
 8000f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f1a:	e00b      	b.n	8000f34 <HAL_DMA_IRQHandler+0x2f0>
 8000f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f20:	e008      	b.n	8000f34 <HAL_DMA_IRQHandler+0x2f0>
 8000f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f26:	e005      	b.n	8000f34 <HAL_DMA_IRQHandler+0x2f0>
 8000f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2c:	e002      	b.n	8000f34 <HAL_DMA_IRQHandler+0x2f0>
 8000f2e:	2320      	movs	r3, #32
 8000f30:	e000      	b.n	8000f34 <HAL_DMA_IRQHandler+0x2f0>
 8000f32:	2302      	movs	r3, #2
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d061      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x3ba>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d05a      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x3ba>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d107      	bne.n	8000f66 <HAL_DMA_IRQHandler+0x322>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	f022 0202 	bic.w	r2, r2, #2
 8000f64:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f66:	4a28      	ldr	r2, [pc, #160]	; (8001008 <HAL_DMA_IRQHandler+0x3c4>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4b27      	ldr	r3, [pc, #156]	; (800100c <HAL_DMA_IRQHandler+0x3c8>)
 8000f70:	4299      	cmp	r1, r3
 8000f72:	d02e      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x38e>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <HAL_DMA_IRQHandler+0x3cc>)
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d026      	beq.n	8000fce <HAL_DMA_IRQHandler+0x38a>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <HAL_DMA_IRQHandler+0x3d0>)
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d01d      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0x384>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <HAL_DMA_IRQHandler+0x3d4>)
 8000f94:	4299      	cmp	r1, r3
 8000f96:	d014      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x37e>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <HAL_DMA_IRQHandler+0x3d8>)
 8000fa0:	4299      	cmp	r1, r3
 8000fa2:	d00b      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x378>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_DMA_IRQHandler+0x3dc>)
 8000fac:	4299      	cmp	r1, r3
 8000fae:	d102      	bne.n	8000fb6 <HAL_DMA_IRQHandler+0x372>
 8000fb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fb4:	e00e      	b.n	8000fd4 <HAL_DMA_IRQHandler+0x390>
 8000fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fba:	e00b      	b.n	8000fd4 <HAL_DMA_IRQHandler+0x390>
 8000fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc0:	e008      	b.n	8000fd4 <HAL_DMA_IRQHandler+0x390>
 8000fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc6:	e005      	b.n	8000fd4 <HAL_DMA_IRQHandler+0x390>
 8000fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fcc:	e002      	b.n	8000fd4 <HAL_DMA_IRQHandler+0x390>
 8000fce:	2320      	movs	r3, #32
 8000fd0:	e000      	b.n	8000fd4 <HAL_DMA_IRQHandler+0x390>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;    
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x3ba>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	4798      	blx	r3
      }
    }
  }
}  
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020000 	.word	0x40020000
 800100c:	40020008 	.word	0x40020008
 8001010:	4002001c 	.word	0x4002001c
 8001014:	40020030 	.word	0x40020030
 8001018:	40020044 	.word	0x40020044
 800101c:	40020058 	.word	0x40020058
 8001020:	4002006c 	.word	0x4002006c

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800103a:	e14e      	b.n	80012da <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8140 	beq.w	80012d4 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x40>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b12      	cmp	r3, #18
 8001062:	d123      	bne.n	80010ac <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	6939      	ldr	r1, [r7, #16]
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d00b      	beq.n	8001100 <HAL_GPIO_Init+0xdc>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f4:	2b11      	cmp	r3, #17
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b12      	cmp	r3, #18
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 0201 	and.w	r2, r3, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 809a 	beq.w	80012d4 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a0:	4a55      	ldr	r2, [pc, #340]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 80011a2:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80011b8:	4a50      	ldr	r2, [pc, #320]	; (80012fc <HAL_GPIO_Init+0x2d8>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011e2:	d013      	beq.n	800120c <HAL_GPIO_Init+0x1e8>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a46      	ldr	r2, [pc, #280]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d00d      	beq.n	8001208 <HAL_GPIO_Init+0x1e4>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a45      	ldr	r2, [pc, #276]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d007      	beq.n	8001204 <HAL_GPIO_Init+0x1e0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a44      	ldr	r2, [pc, #272]	; (8001308 <HAL_GPIO_Init+0x2e4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d101      	bne.n	8001200 <HAL_GPIO_Init+0x1dc>
 80011fc:	2303      	movs	r3, #3
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x1ea>
 8001200:	2305      	movs	r3, #5
 8001202:	e004      	b.n	800120e <HAL_GPIO_Init+0x1ea>
 8001204:	2302      	movs	r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x1ea>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_GPIO_Init+0x1ea>
 800120c:	2300      	movs	r3, #0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800121e:	4937      	ldr	r1, [pc, #220]	; (80012fc <HAL_GPIO_Init+0x2d8>)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122c:	4b37      	ldr	r3, [pc, #220]	; (800130c <HAL_GPIO_Init+0x2e8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001250:	4a2e      	ldr	r2, [pc, #184]	; (800130c <HAL_GPIO_Init+0x2e8>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <HAL_GPIO_Init+0x2e8>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800127a:	4a24      	ldr	r2, [pc, #144]	; (800130c <HAL_GPIO_Init+0x2e8>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_GPIO_Init+0x2e8>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_GPIO_Init+0x2e8>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_GPIO_Init+0x2e8>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ce:	4a0f      	ldr	r2, [pc, #60]	; (800130c <HAL_GPIO_Init+0x2e8>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f aea9 	bne.w	800103c <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800132c:	e002      	b.n	8001334 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e07c      	b.n	800144c <HAL_I2C_Init+0x10c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d106      	bne.n	800136c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fa28 	bl	80007bc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2224      	movs	r2, #36	; 0x24
 8001370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	f022 0201 	bic.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6852      	ldr	r2, [r2, #4]
 800138c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001390:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	6892      	ldr	r2, [r2, #8]
 800139c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013a0:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d012      	beq.n	80013d0 <HAL_I2C_Init+0x90>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d107      	bne.n	80013c2 <HAL_I2C_Init+0x82>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6892      	ldr	r2, [r2, #8]
 80013ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	e006      	b.n	80013d0 <HAL_I2C_Init+0x90>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6892      	ldr	r2, [r2, #8]
 80013ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013ce:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d104      	bne.n	80013e2 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6911      	ldr	r1, [r2, #16]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6952      	ldr	r2, [r2, #20]
 8001402:	4311      	orrs	r1, r2
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6992      	ldr	r2, [r2, #24]
 8001408:	0212      	lsls	r2, r2, #8
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	69d1      	ldr	r1, [r2, #28]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6a12      	ldr	r2, [r2, #32]
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	f042 0201 	orr.w	r2, r2, #1
 800142c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2220      	movs	r2, #32
 8001438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	461a      	mov	r2, r3
 8001460:	460b      	mov	r3, r1
 8001462:	817b      	strh	r3, [r7, #10]
 8001464:	4613      	mov	r3, r2
 8001466:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b20      	cmp	r3, #32
 8001476:	f040 80e6 	bne.w	8001646 <HAL_I2C_Master_Transmit+0x1f2>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_I2C_Master_Transmit+0x34>
 8001484:	2302      	movs	r3, #2
 8001486:	e0df      	b.n	8001648 <HAL_I2C_Master_Transmit+0x1f4>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001490:	f7ff fa36 	bl	8000900 <HAL_GetTick>
 8001494:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2319      	movs	r3, #25
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 f9fc 	bl	80018a0 <I2C_WaitOnFlagUntilTimeout>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e0ca      	b.n	8001648 <HAL_I2C_Master_Transmit+0x1f4>
    }

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2221      	movs	r2, #33	; 0x21
 80014b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_MASTER;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2210      	movs	r2, #16
 80014be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	893a      	ldrh	r2, [r7, #8]
 80014d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014de:	b29b      	uxth	r3, r3
 80014e0:	2bff      	cmp	r3, #255	; 0xff
 80014e2:	d90f      	bls.n	8001504 <HAL_I2C_Master_Transmit+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	22ff      	movs	r2, #255	; 0xff
 80014e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	8979      	ldrh	r1, [r7, #10]
 80014f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 fb41 	bl	8001b84 <I2C_TransferConfig>
 8001502:	e071      	b.n	80015e8 <HAL_I2C_Master_Transmit+0x194>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001512:	b2da      	uxtb	r2, r3
 8001514:	8979      	ldrh	r1, [r7, #10]
 8001516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 fb2f 	bl	8001b84 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8001526:	e05f      	b.n	80015e8 <HAL_I2C_Master_Transmit+0x194>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	6a39      	ldr	r1, [r7, #32]
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f9f1 	bl	8001914 <I2C_WaitOnTXISFlagUntilTimeout>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d007      	beq.n	8001548 <HAL_I2C_Master_Transmit+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153c:	2b04      	cmp	r3, #4
 800153e:	d101      	bne.n	8001544 <HAL_I2C_Master_Transmit+0xf0>
        {
          return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e081      	b.n	8001648 <HAL_I2C_Master_Transmit+0x1f4>
        }
        else
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e07f      	b.n	8001648 <HAL_I2C_Master_Transmit+0x1f4>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	1c58      	adds	r0, r3, #1
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	6248      	str	r0, [r1, #36]	; 0x24
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155e:	b29b      	uxth	r3, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156c:	3b01      	subs	r3, #1
 800156e:	b29a      	uxth	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001578:	2b00      	cmp	r3, #0
 800157a:	d135      	bne.n	80015e8 <HAL_I2C_Master_Transmit+0x194>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001580:	b29b      	uxth	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d030      	beq.n	80015e8 <HAL_I2C_Master_Transmit+0x194>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	2200      	movs	r2, #0
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f985 	bl	80018a0 <I2C_WaitOnFlagUntilTimeout>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_I2C_Master_Transmit+0x14c>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e053      	b.n	8001648 <HAL_I2C_Master_Transmit+0x1f4>
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2bff      	cmp	r3, #255	; 0xff
 80015a8:	d90e      	bls.n	80015c8 <HAL_I2C_Master_Transmit+0x174>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	22ff      	movs	r2, #255	; 0xff
 80015ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	8979      	ldrh	r1, [r7, #10]
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 fadf 	bl	8001b84 <I2C_TransferConfig>
 80015c6:	e00f      	b.n	80015e8 <HAL_I2C_Master_Transmit+0x194>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	8979      	ldrh	r1, [r7, #10]
 80015da:	2300      	movs	r3, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 face 	bl	8001b84 <I2C_TransferConfig>
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
    }

    while(hi2c->XferCount > 0U)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d19a      	bne.n	8001528 <HAL_I2C_Master_Transmit+0xd4>
      }
    }
  
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	6a39      	ldr	r1, [r7, #32]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f000 f9cc 	bl	8001994 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <HAL_I2C_Master_Transmit+0x1be>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	2b04      	cmp	r3, #4
 8001608:	d101      	bne.n	800160e <HAL_I2C_Master_Transmit+0x1ba>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e01c      	b.n	8001648 <HAL_I2C_Master_Transmit+0x1f4>
      }
      else
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e01a      	b.n	8001648 <HAL_I2C_Master_Transmit+0x1f4>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2220      	movs	r2, #32
 8001618:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_I2C_Master_Transmit+0x1fc>)
 8001626:	400b      	ands	r3, r1
 8001628:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2220      	movs	r2, #32
 800162e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_I2C_Master_Transmit+0x1f4>
  }
  else
  {
    return HAL_BUSY;
 8001646:	2302      	movs	r3, #2
  }
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	fe00e800 	.word	0xfe00e800

08001654 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af02      	add	r7, sp, #8
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	461a      	mov	r2, r3
 8001660:	460b      	mov	r3, r1
 8001662:	817b      	strh	r3, [r7, #10]
 8001664:	4613      	mov	r3, r2
 8001666:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b20      	cmp	r3, #32
 8001676:	f040 80e7 	bne.w	8001848 <HAL_I2C_Master_Receive+0x1f4>
  {    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_I2C_Master_Receive+0x34>
 8001684:	2302      	movs	r3, #2
 8001686:	e0e0      	b.n	800184a <HAL_I2C_Master_Receive+0x1f6>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001690:	f7ff f936 	bl	8000900 <HAL_GetTick>
 8001694:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2319      	movs	r3, #25
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f8fc 	bl	80018a0 <I2C_WaitOnFlagUntilTimeout>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0cb      	b.n	800184a <HAL_I2C_Master_Receive+0x1f6>
    }

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2222      	movs	r2, #34	; 0x22
 80016b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_MASTER;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2210      	movs	r2, #16
 80016be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	893a      	ldrh	r2, [r7, #8]
 80016d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
      
    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2bff      	cmp	r3, #255	; 0xff
 80016e2:	d90f      	bls.n	8001704 <HAL_I2C_Master_Receive+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	22ff      	movs	r2, #255	; 0xff
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	8979      	ldrh	r1, [r7, #10]
 80016f2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fa41 	bl	8001b84 <I2C_TransferConfig>
 8001702:	e072      	b.n	80017ea <HAL_I2C_Master_Receive+0x196>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001712:	b2da      	uxtb	r2, r3
 8001714:	8979      	ldrh	r1, [r7, #10]
 8001716:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 fa2f 	bl	8001b84 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8001726:	e060      	b.n	80017ea <HAL_I2C_Master_Receive+0x196>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	6a39      	ldr	r1, [r7, #32]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f96d 	bl	8001a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <HAL_I2C_Master_Receive+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	2b04      	cmp	r3, #4
 800173e:	d101      	bne.n	8001744 <HAL_I2C_Master_Receive+0xf0>
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e082      	b.n	800184a <HAL_I2C_Master_Receive+0x1f6>
        }
        else
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e080      	b.n	800184a <HAL_I2C_Master_Receive+0x1f6>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	1c59      	adds	r1, r3, #1
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	6251      	str	r1, [r2, #36]	; 0x24
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	3b01      	subs	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177a:	2b00      	cmp	r3, #0
 800177c:	d135      	bne.n	80017ea <HAL_I2C_Master_Receive+0x196>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d030      	beq.n	80017ea <HAL_I2C_Master_Receive+0x196>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	2200      	movs	r2, #0
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f884 	bl	80018a0 <I2C_WaitOnFlagUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_I2C_Master_Receive+0x14e>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e053      	b.n	800184a <HAL_I2C_Master_Receive+0x1f6>
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	2bff      	cmp	r3, #255	; 0xff
 80017aa:	d90e      	bls.n	80017ca <HAL_I2C_Master_Receive+0x176>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	22ff      	movs	r2, #255	; 0xff
 80017b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	8979      	ldrh	r1, [r7, #10]
 80017ba:	2300      	movs	r3, #0
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f9de 	bl	8001b84 <I2C_TransferConfig>
 80017c8:	e00f      	b.n	80017ea <HAL_I2C_Master_Receive+0x196>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	8979      	ldrh	r1, [r7, #10]
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 f9cd 	bl	8001b84 <I2C_TransferConfig>
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
    }

    while(hi2c->XferCount > 0U)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d199      	bne.n	8001728 <HAL_I2C_Master_Receive+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	6a39      	ldr	r1, [r7, #32]
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 f8cb 	bl	8001994 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d007      	beq.n	8001814 <HAL_I2C_Master_Receive+0x1c0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	2b04      	cmp	r3, #4
 800180a:	d101      	bne.n	8001810 <HAL_I2C_Master_Receive+0x1bc>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e01c      	b.n	800184a <HAL_I2C_Master_Receive+0x1f6>
      }
      else
      {
        return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e01a      	b.n	800184a <HAL_I2C_Master_Receive+0x1f6>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2220      	movs	r2, #32
 800181a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6859      	ldr	r1, [r3, #4]
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_I2C_Master_Receive+0x200>)
 8001828:	400b      	ands	r3, r1
 800182a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2220      	movs	r2, #32
 8001830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    return HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	e000      	b.n	800184a <HAL_I2C_Master_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 8001848:	2302      	movs	r3, #2
  }
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	fe00e800 	.word	0xfe00e800

08001858 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d107      	bne.n	8001894 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	6992      	ldr	r2, [r2, #24]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	619a      	str	r2, [r3, #24]
  }
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	4613      	mov	r3, r2
 80018ae:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b0:	e01c      	b.n	80018ec <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d018      	beq.n	80018ec <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018c0:	f7ff f81e 	bl	8000900 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	1ad2      	subs	r2, r2, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d90d      	bls.n	80018ec <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e00f      	b.n	800190c <I2C_WaitOnFlagUntilTimeout+0x6c>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	401a      	ands	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	429a      	cmp	r2, r3
 8001908:	d0d3      	beq.n	80018b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001920:	e02c      	b.n	800197c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f8ce 	bl	8001ac8 <I2C_IsAcknowledgeFailed>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e02a      	b.n	800198c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d01e      	beq.n	800197c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d007      	beq.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001944:	f7fe ffdc 	bl	8000900 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	1ad2      	subs	r2, r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	429a      	cmp	r2, r3
 8001952:	d913      	bls.n	800197c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	f043 0220 	orr.w	r2, r3, #32
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e007      	b.n	800198c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0cb      	beq.n	8001922 <I2C_WaitOnTXISFlagUntilTimeout+0xe>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a0:	e028      	b.n	80019f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f88e 	bl	8001ac8 <I2C_IsAcknowledgeFailed>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e026      	b.n	8001a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019bc:	f7fe ffa0 	bl	8000900 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	1ad2      	subs	r2, r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d913      	bls.n	80019f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	f043 0220 	orr.w	r2, r3, #32
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2220      	movs	r2, #32
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e007      	b.n	8001a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0cf      	beq.n	80019a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a18:	e048      	b.n	8001aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 f852 	bl	8001ac8 <I2C_IsAcknowledgeFailed>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e046      	b.n	8001abc <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01c      	beq.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2220      	movs	r2, #32
 8001a42:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6859      	ldr	r1, [r3, #4]
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8001a50:	400b      	ands	r3, r1
 8001a52:	6053      	str	r3, [r2, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e022      	b.n	8001abc <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d007      	beq.n	8001a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8001a7c:	f7fe ff40 	bl	8000900 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	1ad2      	subs	r2, r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d90f      	bls.n	8001aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a90:	f043 0220 	orr.w	r2, r3, #32
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e007      	b.n	8001abc <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0af      	beq.n	8001a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	fe00e800 	.word	0xfe00e800

08001ac8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d048      	beq.n	8001b74 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ae2:	e01c      	b.n	8001b1e <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	d018      	beq.n	8001b1e <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <I2C_IsAcknowledgeFailed+0x3a>
 8001af2:	f7fe ff05 	bl	8000900 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	1ad2      	subs	r2, r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d90d      	bls.n	8001b1e <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2220      	movs	r2, #32
 8001b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e02b      	b.n	8001b76 <I2C_IsAcknowledgeFailed+0xae>
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0db      	beq.n	8001ae4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2210      	movs	r2, #16
 8001b32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7ff fe8b 	bl	8001858 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <I2C_IsAcknowledgeFailed+0xb8>)
 8001b4e:	400b      	ands	r3, r1
 8001b50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2204      	movs	r2, #4
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	fe00e800 	.word	0xfe00e800

08001b84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	817b      	strh	r3, [r7, #10]
 8001b92:	4613      	mov	r3, r2
 8001b94:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <I2C_TransferConfig+0x58>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8001baa:	897b      	ldrh	r3, [r7, #10]
 8001bac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bb0:	7a7b      	ldrb	r3, [r7, #9]
 8001bb2:	041b      	lsls	r3, r3, #16
 8001bb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	605a      	str	r2, [r3, #4]
}
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	fc009800 	.word	0xfc009800

08001be0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	d138      	bne.n	8001c68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  { 
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e032      	b.n	8001c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2224      	movs	r2, #36	; 0x24
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
    
    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c32:	601a      	str	r2, [r3, #0]
    
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	6811      	ldr	r1, [r2, #0]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]
    
    __HAL_I2C_ENABLE(hi2c); 
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2220      	movs	r2, #32
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    return HAL_OK; 
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
  }
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop

08001c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 81e8 	beq.w	800206a <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c9a:	4bb8      	ldr	r3, [pc, #736]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d00c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca6:	4bb5      	ldr	r3, [pc, #724]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	f040 8082 	bne.w	8001db8 <HAL_RCC_OscConfig+0x140>
 8001cb4:	4bb1      	ldr	r3, [pc, #708]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d07b      	beq.n	8001db8 <HAL_RCC_OscConfig+0x140>
 8001cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001ccc:	fa93 f2a3 	rbit	r2, r3
 8001cd0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cd4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cd6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cda:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f043 0320 	orr.w	r3, r3, #32
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x80>
 8001cf2:	4ba2      	ldr	r3, [pc, #648]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	e039      	b.n	8001d6c <HAL_RCC_OscConfig+0xf4>
 8001cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d04:	fa93 f2a3 	rbit	r2, r3
 8001d08:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d0c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d0e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f043 0320 	orr.w	r3, r3, #32
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d102      	bne.n	8001d30 <HAL_RCC_OscConfig+0xb8>
 8001d2a:	4b94      	ldr	r3, [pc, #592]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	e01d      	b.n	8001d6c <HAL_RCC_OscConfig+0xf4>
 8001d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d34:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d44:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f043 0320 	orr.w	r3, r3, #32
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d102      	bne.n	8001d68 <HAL_RCC_OscConfig+0xf0>
 8001d62:	4b86      	ldr	r3, [pc, #536]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	e001      	b.n	8001d6c <HAL_RCC_OscConfig+0xf4>
 8001d68:	4b84      	ldr	r3, [pc, #528]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d70:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8001d78:	fa92 f1a2 	rbit	r1, r2
 8001d7c:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001d80:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d82:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	fab2 f282 	clz	r2, r2
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	f042 0220 	orr.w	r2, r2, #32
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f002 021f 	and.w	r2, r2, #31
 8001d9a:	40d3      	lsrs	r3, r2
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8161 	beq.w	8002068 <HAL_RCC_OscConfig+0x3f0>
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f040 815b 	bne.w	8002068 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f001 b81a 	b.w	8002dec <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x15a>
 8001dc4:	4a6d      	ldr	r2, [pc, #436]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001dc6:	4b6d      	ldr	r3, [pc, #436]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	e030      	b.n	8001e34 <HAL_RCC_OscConfig+0x1bc>
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x17e>
 8001ddc:	4a67      	ldr	r2, [pc, #412]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001dde:	4b67      	ldr	r3, [pc, #412]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4a64      	ldr	r2, [pc, #400]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001dea:	4b64      	ldr	r3, [pc, #400]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	e01e      	b.n	8001e34 <HAL_RCC_OscConfig+0x1bc>
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1a4>
 8001e02:	4a5e      	ldr	r2, [pc, #376]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001e04:	4b5d      	ldr	r3, [pc, #372]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4a5b      	ldr	r2, [pc, #364]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001e10:	4b5a      	ldr	r3, [pc, #360]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0x1bc>
 8001e1c:	4a57      	ldr	r2, [pc, #348]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001e1e:	4b57      	ldr	r3, [pc, #348]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4a54      	ldr	r2, [pc, #336]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001e2a:	4b54      	ldr	r3, [pc, #336]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e32:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e34:	4951      	ldr	r1, [pc, #324]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001e36:	4b51      	ldr	r3, [pc, #324]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	f023 020f 	bic.w	r2, r3, #15
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8083 	beq.w	8001f5a <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7fe fd54 	bl	8000900 <HAL_GetTick>
 8001e58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e5e:	f7fe fd4f 	bl	8000900 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d902      	bls.n	8001e74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	f000 bfbc 	b.w	8002dec <HAL_RCC_OscConfig+0x1174>
 8001e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e78:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e88:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e8e:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f043 0320 	orr.w	r3, r3, #32
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d102      	bne.n	8001eac <HAL_RCC_OscConfig+0x234>
 8001ea6:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e039      	b.n	8001f20 <HAL_RCC_OscConfig+0x2a8>
 8001eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001eb8:	fa93 f2a3 	rbit	r2, r3
 8001ebc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ec0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ec2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f043 0320 	orr.w	r3, r3, #32
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d102      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x26c>
 8001ede:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0x2a8>
 8001ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ef8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001efa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f043 0320 	orr.w	r3, r3, #32
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2a4>
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	e001      	b.n	8001f20 <HAL_RCC_OscConfig+0x2a8>
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_RCC_OscConfig+0x304>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f24:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001f2c:	fa92 f1a2 	rbit	r1, r2
 8001f30:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001f34:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f36:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	fab2 f282 	clz	r2, r2
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f042 0220 	orr.w	r2, r2, #32
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	f002 021f 	and.w	r2, r2, #31
 8001f4e:	40d3      	lsrs	r3, r2
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d082      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1e6>
 8001f58:	e087      	b.n	800206a <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fcd1 	bl	8000900 <HAL_GetTick>
 8001f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e00d      	b.n	8001f80 <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe fccc 	bl	8000900 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d905      	bls.n	8001f80 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	f000 bf39 	b.w	8002dec <HAL_RCC_OscConfig+0x1174>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f84:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f8c:	fa93 f2a3 	rbit	r2, r3
 8001f90:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f94:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f96:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f9a:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f043 0320 	orr.w	r3, r3, #32
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d102      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x340>
 8001fb2:	4bb6      	ldr	r3, [pc, #728]	; (800228c <HAL_RCC_OscConfig+0x614>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	e039      	b.n	800202c <HAL_RCC_OscConfig+0x3b4>
 8001fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fbc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001fc4:	fa93 f2a3 	rbit	r2, r3
 8001fc8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fcc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f043 0320 	orr.w	r3, r3, #32
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d102      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x378>
 8001fea:	4ba8      	ldr	r3, [pc, #672]	; (800228c <HAL_RCC_OscConfig+0x614>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	e01d      	b.n	800202c <HAL_RCC_OscConfig+0x3b4>
 8001ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ffc:	fa93 f2a3 	rbit	r2, r3
 8002000:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002004:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002006:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f043 0320 	orr.w	r3, r3, #32
 8002016:	b2db      	uxtb	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b04      	cmp	r3, #4
 8002020:	d102      	bne.n	8002028 <HAL_RCC_OscConfig+0x3b0>
 8002022:	4b9a      	ldr	r3, [pc, #616]	; (800228c <HAL_RCC_OscConfig+0x614>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	e001      	b.n	800202c <HAL_RCC_OscConfig+0x3b4>
 8002028:	4b98      	ldr	r3, [pc, #608]	; (800228c <HAL_RCC_OscConfig+0x614>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002030:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002038:	fa92 f1a2 	rbit	r1, r2
 800203c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8002040:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002042:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	fab2 f282 	clz	r2, r2
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	f042 0220 	orr.w	r2, r2, #32
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f002 021f 	and.w	r2, r2, #31
 800205a:	40d3      	lsrs	r3, r2
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f af7f 	bne.w	8001f64 <HAL_RCC_OscConfig+0x2ec>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 81f4 	beq.w	8002462 <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800207a:	4b84      	ldr	r3, [pc, #528]	; (800228c <HAL_RCC_OscConfig+0x614>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00d      	beq.n	80020a2 <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002086:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x614>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b08      	cmp	r3, #8
 8002090:	f040 8099 	bne.w	80021c6 <HAL_RCC_OscConfig+0x54e>
 8002094:	4b7d      	ldr	r3, [pc, #500]	; (800228c <HAL_RCC_OscConfig+0x614>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 8092 	bne.w	80021c6 <HAL_RCC_OscConfig+0x54e>
 80020a2:	2302      	movs	r3, #2
 80020a4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80020ac:	fa93 f2a3 	rbit	r2, r3
 80020b0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020b4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020ba:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f043 0320 	orr.w	r3, r3, #32
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_OscConfig+0x460>
 80020d2:	4b6e      	ldr	r3, [pc, #440]	; (800228c <HAL_RCC_OscConfig+0x614>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e037      	b.n	8002148 <HAL_RCC_OscConfig+0x4d0>
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80020e2:	fa93 f2a3 	rbit	r2, r3
 80020e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020ea:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0320 	orr.w	r3, r3, #32
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d102      	bne.n	800210e <HAL_RCC_OscConfig+0x496>
 8002108:	4b60      	ldr	r3, [pc, #384]	; (800228c <HAL_RCC_OscConfig+0x614>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	e01c      	b.n	8002148 <HAL_RCC_OscConfig+0x4d0>
 800210e:	2302      	movs	r3, #2
 8002110:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002118:	fa93 f2a3 	rbit	r2, r3
 800211c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002120:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002122:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f043 0320 	orr.w	r3, r3, #32
 8002132:	b2db      	uxtb	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b04      	cmp	r3, #4
 800213c:	d102      	bne.n	8002144 <HAL_RCC_OscConfig+0x4cc>
 800213e:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_RCC_OscConfig+0x614>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	e001      	b.n	8002148 <HAL_RCC_OscConfig+0x4d0>
 8002144:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_RCC_OscConfig+0x614>)
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	2202      	movs	r2, #2
 800214a:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002152:	fa92 f1a2 	rbit	r1, r2
 8002156:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800215a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800215c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0220 	orr.w	r2, r2, #32
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f002 021f 	and.w	r2, r2, #31
 8002174:	40d3      	lsrs	r3, r2
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_RCC_OscConfig+0x516>
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d002      	beq.n	800218e <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	f000 be2f 	b.w	8002dec <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4c3f      	ldr	r4, [pc, #252]	; (800228c <HAL_RCC_OscConfig+0x614>)
 8002190:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_RCC_OscConfig+0x614>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6959      	ldr	r1, [r3, #20]
 800219e:	23f8      	movs	r3, #248	; 0xf8
 80021a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80021a8:	fa93 f0a3 	rbit	r0, r3
 80021ac:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021b0:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c4:	e14d      	b.n	8002462 <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80b3 	beq.w	8002338 <HAL_RCC_OscConfig+0x6c0>
 80021d2:	2301      	movs	r3, #1
 80021d4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80021dc:	fa93 f2a3 	rbit	r2, r3
 80021e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021e4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021e6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021ea:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80021f6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80021fa:	461a      	mov	r2, r3
 80021fc:	2301      	movs	r3, #1
 80021fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe fb7e 	bl	8000900 <HAL_GetTick>
 8002204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220a:	f7fe fb79 	bl	8000900 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d902      	bls.n	8002220 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	f000 bde6 	b.w	8002dec <HAL_RCC_OscConfig+0x1174>
 8002220:	2302      	movs	r3, #2
 8002222:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002232:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002234:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002238:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f043 0320 	orr.w	r3, r3, #32
 8002244:	b2db      	uxtb	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b01      	cmp	r3, #1
 800224e:	d102      	bne.n	8002256 <HAL_RCC_OscConfig+0x5de>
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_RCC_OscConfig+0x614>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	e039      	b.n	80022ca <HAL_RCC_OscConfig+0x652>
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002260:	fa93 f2a3 	rbit	r2, r3
 8002264:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002268:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800226a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f043 0320 	orr.w	r3, r3, #32
 800227a:	b2db      	uxtb	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d104      	bne.n	8002290 <HAL_RCC_OscConfig+0x618>
 8002286:	4b01      	ldr	r3, [pc, #4]	; (800228c <HAL_RCC_OscConfig+0x614>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	e01e      	b.n	80022ca <HAL_RCC_OscConfig+0x652>
 800228c:	40021000 	.word	0x40021000
 8002290:	2302      	movs	r3, #2
 8002292:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022a2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022a4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f043 0320 	orr.w	r3, r3, #32
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d102      	bne.n	80022c6 <HAL_RCC_OscConfig+0x64e>
 80022c0:	4bb9      	ldr	r3, [pc, #740]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	e001      	b.n	80022ca <HAL_RCC_OscConfig+0x652>
 80022c6:	4bb8      	ldr	r3, [pc, #736]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	2202      	movs	r2, #2
 80022cc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80022d4:	fa92 f1a2 	rbit	r1, r2
 80022d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80022dc:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022de:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f042 0220 	orr.w	r2, r2, #32
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	f002 021f 	and.w	r2, r2, #31
 80022f6:	40d3      	lsrs	r3, r2
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d084      	beq.n	800220a <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4ca9      	ldr	r4, [pc, #676]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 8002302:	4ba9      	ldr	r3, [pc, #676]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6959      	ldr	r1, [r3, #20]
 8002310:	23f8      	movs	r3, #248	; 0xf8
 8002312:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800231a:	fa93 f0a3 	rbit	r0, r3
 800231e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002322:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002324:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	4313      	orrs	r3, r2
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	e094      	b.n	8002462 <HAL_RCC_OscConfig+0x7ea>
 8002338:	2301      	movs	r3, #1
 800233a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002342:	fa93 f2a3 	rbit	r2, r3
 8002346:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800234a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800234c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002350:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800235c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002360:	461a      	mov	r2, r3
 8002362:	2300      	movs	r3, #0
 8002364:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7fe facb 	bl	8000900 <HAL_GetTick>
 800236a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002370:	f7fe fac6 	bl	8000900 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d902      	bls.n	8002386 <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	f000 bd33 	b.w	8002dec <HAL_RCC_OscConfig+0x1174>
 8002386:	2302      	movs	r3, #2
 8002388:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002390:	fa93 f2a3 	rbit	r2, r3
 8002394:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002398:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800239a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800239e:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f043 0320 	orr.w	r3, r3, #32
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d102      	bne.n	80023bc <HAL_RCC_OscConfig+0x744>
 80023b6:	4b7c      	ldr	r3, [pc, #496]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	e037      	b.n	800242c <HAL_RCC_OscConfig+0x7b4>
 80023bc:	2302      	movs	r3, #2
 80023be:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80023c6:	fa93 f2a3 	rbit	r2, r3
 80023ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023ce:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f043 0320 	orr.w	r3, r3, #32
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d102      	bne.n	80023f2 <HAL_RCC_OscConfig+0x77a>
 80023ec:	4b6e      	ldr	r3, [pc, #440]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	e01c      	b.n	800242c <HAL_RCC_OscConfig+0x7b4>
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023fc:	fa93 f2a3 	rbit	r2, r3
 8002400:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002404:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002406:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f043 0320 	orr.w	r3, r3, #32
 8002416:	b2db      	uxtb	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b04      	cmp	r3, #4
 8002420:	d102      	bne.n	8002428 <HAL_RCC_OscConfig+0x7b0>
 8002422:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	e001      	b.n	800242c <HAL_RCC_OscConfig+0x7b4>
 8002428:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	2202      	movs	r2, #2
 800242e:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002436:	fa92 f1a2 	rbit	r1, r2
 800243a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800243e:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002440:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	f002 021f 	and.w	r2, r2, #31
 8002458:	40d3      	lsrs	r3, r2
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d186      	bne.n	8002370 <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8132 	beq.w	80026d6 <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8099 	beq.w	80025b0 <HAL_RCC_OscConfig+0x938>
 800247e:	2301      	movs	r3, #1
 8002480:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002488:	fa93 f2a3 	rbit	r2, r3
 800248c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002490:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002492:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002496:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	461a      	mov	r2, r3
 80024a0:	4b42      	ldr	r3, [pc, #264]	; (80025ac <HAL_RCC_OscConfig+0x934>)
 80024a2:	4413      	add	r3, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	2301      	movs	r3, #1
 80024a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe fa29 	bl	8000900 <HAL_GetTick>
 80024ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b4:	f7fe fa24 	bl	8000900 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d902      	bls.n	80024ca <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	f000 bc91 	b.w	8002dec <HAL_RCC_OscConfig+0x1174>
 80024ca:	2302      	movs	r3, #2
 80024cc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80024d4:	fa93 f2a3 	rbit	r2, r3
 80024d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024dc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80024de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024e2:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_OscConfig+0x888>
 80024fa:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	e037      	b.n	8002570 <HAL_RCC_OscConfig+0x8f8>
 8002500:	2302      	movs	r3, #2
 8002502:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002512:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002514:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002524:	b2db      	uxtb	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d102      	bne.n	8002536 <HAL_RCC_OscConfig+0x8be>
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	e01c      	b.n	8002570 <HAL_RCC_OscConfig+0x8f8>
 8002536:	2302      	movs	r3, #2
 8002538:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002548:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800254a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800255a:	b2db      	uxtb	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b04      	cmp	r3, #4
 8002564:	d102      	bne.n	800256c <HAL_RCC_OscConfig+0x8f4>
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	e001      	b.n	8002570 <HAL_RCC_OscConfig+0x8f8>
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_RCC_OscConfig+0x930>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	2202      	movs	r2, #2
 8002572:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800257a:	fa92 f1a2 	rbit	r1, r2
 800257e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002582:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002584:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	fab2 f282 	clz	r2, r2
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f002 021f 	and.w	r2, r2, #31
 800259c:	40d3      	lsrs	r3, r2
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d086      	beq.n	80024b4 <HAL_RCC_OscConfig+0x83c>
 80025a6:	e096      	b.n	80026d6 <HAL_RCC_OscConfig+0xa5e>
 80025a8:	40021000 	.word	0x40021000
 80025ac:	42420480 	.word	0x42420480
 80025b0:	2301      	movs	r3, #1
 80025b2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80025ba:	fa93 f2a3 	rbit	r2, r3
 80025be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025c2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	461a      	mov	r2, r3
 80025d2:	4bb5      	ldr	r3, [pc, #724]	; (80028a8 <HAL_RCC_OscConfig+0xc30>)
 80025d4:	4413      	add	r3, r2
 80025d6:	461a      	mov	r2, r3
 80025d8:	2300      	movs	r3, #0
 80025da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7fe f990 	bl	8000900 <HAL_GetTick>
 80025e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	e009      	b.n	80025fa <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e6:	f7fe f98b 	bl	8000900 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e3f8      	b.n	8002dec <HAL_RCC_OscConfig+0x1174>
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002604:	fa93 f2a3 	rbit	r2, r3
 8002608:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800260c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800260e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002612:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800261e:	b2db      	uxtb	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d102      	bne.n	8002630 <HAL_RCC_OscConfig+0x9b8>
 800262a:	4ba0      	ldr	r3, [pc, #640]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	e037      	b.n	80026a0 <HAL_RCC_OscConfig+0xa28>
 8002630:	2302      	movs	r3, #2
 8002632:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800263a:	fa93 f2a3 	rbit	r2, r3
 800263e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002642:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002644:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002654:	b2db      	uxtb	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d102      	bne.n	8002666 <HAL_RCC_OscConfig+0x9ee>
 8002660:	4b92      	ldr	r3, [pc, #584]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	e01c      	b.n	80026a0 <HAL_RCC_OscConfig+0xa28>
 8002666:	2302      	movs	r3, #2
 8002668:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002670:	fa93 f2a3 	rbit	r2, r3
 8002674:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002678:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800267a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800268a:	b2db      	uxtb	r3, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b04      	cmp	r3, #4
 8002694:	d102      	bne.n	800269c <HAL_RCC_OscConfig+0xa24>
 8002696:	4b85      	ldr	r3, [pc, #532]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	e001      	b.n	80026a0 <HAL_RCC_OscConfig+0xa28>
 800269c:	4b83      	ldr	r3, [pc, #524]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	2202      	movs	r2, #2
 80026a2:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80026aa:	fa92 f1a2 	rbit	r1, r2
 80026ae:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80026b2:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026b4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	fab2 f282 	clz	r2, r2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f002 021f 	and.w	r2, r2, #31
 80026cc:	40d3      	lsrs	r3, r2
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d187      	bne.n	80025e6 <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 818f 	beq.w	8002a04 <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ec:	4b6f      	ldr	r3, [pc, #444]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d112      	bne.n	800271e <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4a6c      	ldr	r2, [pc, #432]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80026fa:	4b6c      	ldr	r3, [pc, #432]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002702:	61d3      	str	r3, [r2, #28]
 8002704:	4b69      	ldr	r3, [pc, #420]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271e:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0xc38>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d11a      	bne.n	8002760 <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272a:	4a61      	ldr	r2, [pc, #388]	; (80028b0 <HAL_RCC_OscConfig+0xc38>)
 800272c:	4b60      	ldr	r3, [pc, #384]	; (80028b0 <HAL_RCC_OscConfig+0xc38>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002736:	f7fe f8e3 	bl	8000900 <HAL_GetTick>
 800273a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	e009      	b.n	8002754 <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002740:	f7fe f8de 	bl	8000900 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e34b      	b.n	8002dec <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	4b56      	ldr	r3, [pc, #344]	; (80028b0 <HAL_RCC_OscConfig+0xc38>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d106      	bne.n	8002778 <HAL_RCC_OscConfig+0xb00>
 800276a:	4a50      	ldr	r2, [pc, #320]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 800276c:	4b4f      	ldr	r3, [pc, #316]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6213      	str	r3, [r2, #32]
 8002776:	e02f      	b.n	80027d8 <HAL_RCC_OscConfig+0xb60>
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0xb24>
 8002782:	4a4a      	ldr	r2, [pc, #296]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 8002784:	4b49      	ldr	r3, [pc, #292]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6213      	str	r3, [r2, #32]
 800278e:	4a47      	ldr	r2, [pc, #284]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 8002790:	4b46      	ldr	r3, [pc, #280]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	6213      	str	r3, [r2, #32]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xb60>
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0xb48>
 80027a6:	4a41      	ldr	r2, [pc, #260]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80027a8:	4b40      	ldr	r3, [pc, #256]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6213      	str	r3, [r2, #32]
 80027b2:	4a3e      	ldr	r2, [pc, #248]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80027b4:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6213      	str	r3, [r2, #32]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xb60>
 80027c0:	4a3a      	ldr	r2, [pc, #232]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80027c2:	4b3a      	ldr	r3, [pc, #232]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	4a37      	ldr	r2, [pc, #220]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	f023 0304 	bic.w	r3, r3, #4
 80027d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8087 	beq.w	80028f2 <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e4:	f7fe f88c 	bl	8000900 <HAL_GetTick>
 80027e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	e00b      	b.n	8002806 <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe f887 	bl	8000900 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e2f2      	b.n	8002dec <HAL_RCC_OscConfig+0x1174>
 8002806:	2302      	movs	r3, #2
 8002808:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002810:	fa93 f2a3 	rbit	r2, r3
 8002814:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002818:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800281a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800281e:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800282a:	b2db      	uxtb	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d102      	bne.n	800283c <HAL_RCC_OscConfig+0xbc4>
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	e03d      	b.n	80028b8 <HAL_RCC_OscConfig+0xc40>
 800283c:	2302      	movs	r3, #2
 800283e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800284e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002850:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002860:	b2db      	uxtb	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d102      	bne.n	8002872 <HAL_RCC_OscConfig+0xbfa>
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	e022      	b.n	80028b8 <HAL_RCC_OscConfig+0xc40>
 8002872:	2302      	movs	r3, #2
 8002874:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800287c:	fa93 f2a3 	rbit	r2, r3
 8002880:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002884:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002886:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002896:	b2db      	uxtb	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d108      	bne.n	80028b4 <HAL_RCC_OscConfig+0xc3c>
 80028a2:	4b02      	ldr	r3, [pc, #8]	; (80028ac <HAL_RCC_OscConfig+0xc34>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	e007      	b.n	80028b8 <HAL_RCC_OscConfig+0xc40>
 80028a8:	42420480 	.word	0x42420480
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40007000 	.word	0x40007000
 80028b4:	4bbf      	ldr	r3, [pc, #764]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	2202      	movs	r2, #2
 80028ba:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80028c2:	fa92 f1a2 	rbit	r1, r2
 80028c6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80028ca:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80028cc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	fab2 f282 	clz	r2, r2
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f002 021f 	and.w	r2, r2, #31
 80028e4:	40d3      	lsrs	r3, r2
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f43f af7f 	beq.w	80027ee <HAL_RCC_OscConfig+0xb76>
 80028f0:	e07e      	b.n	80029f0 <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f2:	f7fe f805 	bl	8000900 <HAL_GetTick>
 80028f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe f800 	bl	8000900 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e26b      	b.n	8002dec <HAL_RCC_OscConfig+0x1174>
 8002914:	2302      	movs	r3, #2
 8002916:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800291e:	fa93 f2a3 	rbit	r2, r3
 8002922:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002926:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002928:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800292c:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002938:	b2db      	uxtb	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d102      	bne.n	800294a <HAL_RCC_OscConfig+0xcd2>
 8002944:	4b9b      	ldr	r3, [pc, #620]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	e037      	b.n	80029ba <HAL_RCC_OscConfig+0xd42>
 800294a:	2302      	movs	r3, #2
 800294c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800295c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800295e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800296e:	b2db      	uxtb	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d102      	bne.n	8002980 <HAL_RCC_OscConfig+0xd08>
 800297a:	4b8e      	ldr	r3, [pc, #568]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	e01c      	b.n	80029ba <HAL_RCC_OscConfig+0xd42>
 8002980:	2302      	movs	r3, #2
 8002982:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002992:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002994:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d102      	bne.n	80029b6 <HAL_RCC_OscConfig+0xd3e>
 80029b0:	4b80      	ldr	r3, [pc, #512]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	e001      	b.n	80029ba <HAL_RCC_OscConfig+0xd42>
 80029b6:	4b7f      	ldr	r3, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	2202      	movs	r2, #2
 80029bc:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80029c4:	fa92 f1a2 	rbit	r1, r2
 80029c8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80029cc:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80029ce:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	fab2 f282 	clz	r2, r2
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f002 021f 	and.w	r2, r2, #31
 80029e6:	40d3      	lsrs	r3, r2
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d185      	bne.n	80028fc <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4a6e      	ldr	r2, [pc, #440]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 80029fa:	4b6e      	ldr	r3, [pc, #440]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 81ed 	beq.w	8002dea <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a10:	4b68      	ldr	r3, [pc, #416]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	f000 81e4 	beq.w	8002de6 <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	f040 8144 	bne.w	8002cb2 <HAL_RCC_OscConfig+0x103a>
 8002a2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a2e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002a36:	fa93 f2a3 	rbit	r2, r3
 8002a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a3e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a44:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002a50:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002a54:	461a      	mov	r2, r3
 8002a56:	2300      	movs	r3, #0
 8002a58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fd ff51 	bl	8000900 <HAL_GetTick>
 8002a5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a62:	e009      	b.n	8002a78 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fd ff4c 	bl	8000900 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e1b9      	b.n	8002dec <HAL_RCC_OscConfig+0x1174>
 8002a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a8c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a92:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f043 0320 	orr.w	r3, r3, #32
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d102      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xe38>
 8002aaa:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	e039      	b.n	8002b24 <HAL_RCC_OscConfig+0xeac>
 8002ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002abc:	fa93 f2a3 	rbit	r2, r3
 8002ac0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ac4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ac6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f043 0320 	orr.w	r3, r3, #32
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d102      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xe70>
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	e01d      	b.n	8002b24 <HAL_RCC_OscConfig+0xeac>
 8002ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002af4:	fa93 f2a3 	rbit	r2, r3
 8002af8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002afc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002afe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f043 0320 	orr.w	r3, r3, #32
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d102      	bne.n	8002b20 <HAL_RCC_OscConfig+0xea8>
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	e001      	b.n	8002b24 <HAL_RCC_OscConfig+0xeac>
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b28:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002b30:	fa92 f1a2 	rbit	r1, r2
 8002b34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b38:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	fab2 f282 	clz	r2, r2
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	f042 0220 	orr.w	r2, r2, #32
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	f002 021f 	and.w	r2, r2, #31
 8002b52:	40d3      	lsrs	r3, r2
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d183      	bne.n	8002a64 <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b5c:	4815      	ldr	r0, [pc, #84]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_RCC_OscConfig+0xf3c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	430b      	orrs	r3, r1
 8002b74:	4313      	orrs	r3, r2
 8002b76:	6043      	str	r3, [r0, #4]
 8002b78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b8c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b92:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002b9e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fd feaa 	bl	8000900 <HAL_GetTick>
 8002bac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb0:	e00c      	b.n	8002bcc <HAL_RCC_OscConfig+0xf54>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fd fea2 	bl	8000900 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e10f      	b.n	8002dec <HAL_RCC_OscConfig+0x1174>
 8002bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002bd8:	fa93 f2a3 	rbit	r2, r3
 8002bdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002be0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002be2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002be6:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0320 	orr.w	r3, r3, #32
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_OscConfig+0xf8c>
 8002bfe:	4b7e      	ldr	r3, [pc, #504]	; (8002df8 <HAL_RCC_OscConfig+0x1180>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	e039      	b.n	8002c78 <HAL_RCC_OscConfig+0x1000>
 8002c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c10:	fa93 f2a3 	rbit	r2, r3
 8002c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c18:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f043 0320 	orr.w	r3, r3, #32
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d102      	bne.n	8002c3c <HAL_RCC_OscConfig+0xfc4>
 8002c36:	4b70      	ldr	r3, [pc, #448]	; (8002df8 <HAL_RCC_OscConfig+0x1180>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0x1000>
 8002c3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c48:	fa93 f2a3 	rbit	r2, r3
 8002c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c50:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f043 0320 	orr.w	r3, r3, #32
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d102      	bne.n	8002c74 <HAL_RCC_OscConfig+0xffc>
 8002c6e:	4b62      	ldr	r3, [pc, #392]	; (8002df8 <HAL_RCC_OscConfig+0x1180>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	e001      	b.n	8002c78 <HAL_RCC_OscConfig+0x1000>
 8002c74:	4b60      	ldr	r3, [pc, #384]	; (8002df8 <HAL_RCC_OscConfig+0x1180>)
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002c84:	fa92 f1a2 	rbit	r1, r2
 8002c88:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002c8c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	fab2 f282 	clz	r2, r2
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	f042 0220 	orr.w	r2, r2, #32
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f002 021f 	and.w	r2, r2, #31
 8002ca6:	40d3      	lsrs	r3, r2
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d083      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xf40>
 8002cb0:	e09b      	b.n	8002dea <HAL_RCC_OscConfig+0x1172>
 8002cb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002cbe:	fa93 f2a3 	rbit	r2, r3
 8002cc2:	f107 0320 	add.w	r3, r7, #32
 8002cc6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002cc8:	f107 0320 	add.w	r3, r7, #32
 8002ccc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002cd8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2300      	movs	r3, #0
 8002ce0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fd fe0d 	bl	8000900 <HAL_GetTick>
 8002ce6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cea:	e009      	b.n	8002d00 <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fd fe08 	bl	8000900 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e075      	b.n	8002dec <HAL_RCC_OscConfig+0x1174>
 8002d00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d16:	f107 031c 	add.w	r3, r7, #28
 8002d1a:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f043 0320 	orr.w	r3, r3, #32
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_RCC_OscConfig+0x10c0>
 8002d32:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <HAL_RCC_OscConfig+0x1180>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	e039      	b.n	8002dac <HAL_RCC_OscConfig+0x1134>
 8002d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f107 0318 	add.w	r3, r7, #24
 8002d4c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d4e:	f107 0318 	add.w	r3, r7, #24
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f043 0320 	orr.w	r3, r3, #32
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d102      	bne.n	8002d70 <HAL_RCC_OscConfig+0x10f8>
 8002d6a:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_RCC_OscConfig+0x1180>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	e01d      	b.n	8002dac <HAL_RCC_OscConfig+0x1134>
 8002d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d7c:	fa93 f2a3 	rbit	r2, r3
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f043 0320 	orr.w	r3, r3, #32
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d102      	bne.n	8002da8 <HAL_RCC_OscConfig+0x1130>
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <HAL_RCC_OscConfig+0x1180>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	e001      	b.n	8002dac <HAL_RCC_OscConfig+0x1134>
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_RCC_OscConfig+0x1180>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db0:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002db8:	fa92 f1a2 	rbit	r1, r2
 8002dbc:	f107 0210 	add.w	r2, r7, #16
 8002dc0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002dc2:	f107 0210 	add.w	r2, r7, #16
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	fab2 f282 	clz	r2, r2
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f042 0220 	orr.w	r2, r2, #32
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	40d3      	lsrs	r3, r2
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d183      	bne.n	8002cec <HAL_RCC_OscConfig+0x1074>
 8002de4:	e001      	b.n	8002dea <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b09e      	sub	sp, #120	; 0x78
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002e0a:	4ba3      	ldr	r3, [pc, #652]	; (8003098 <HAL_RCC_ClockConfig+0x29c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0207 	and.w	r2, r3, #7
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d210      	bcs.n	8002e3a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e18:	499f      	ldr	r1, [pc, #636]	; (8003098 <HAL_RCC_ClockConfig+0x29c>)
 8002e1a:	4b9f      	ldr	r3, [pc, #636]	; (8003098 <HAL_RCC_ClockConfig+0x29c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 0207 	bic.w	r2, r3, #7
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e28:	4b9b      	ldr	r3, [pc, #620]	; (8003098 <HAL_RCC_ClockConfig+0x29c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0207 	and.w	r2, r3, #7
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e1d0      	b.n	80031dc <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e46:	4995      	ldr	r1, [pc, #596]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8002e48:	4b94      	ldr	r3, [pc, #592]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8168 	beq.w	8003136 <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d15c      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x12c>
 8002e6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e72:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f043 0320 	orr.w	r3, r3, #32
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d102      	bne.n	8002e9a <HAL_RCC_ClockConfig+0x9e>
 8002e94:	4b81      	ldr	r3, [pc, #516]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	e02d      	b.n	8002ef6 <HAL_RCC_ClockConfig+0xfa>
 8002e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e9e:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f043 0320 	orr.w	r3, r3, #32
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d102      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xca>
 8002ec0:	4b76      	ldr	r3, [pc, #472]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	e017      	b.n	8002ef6 <HAL_RCC_ClockConfig+0xfa>
 8002ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eca:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f043 0320 	orr.w	r3, r3, #32
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d102      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xf6>
 8002eec:	4b6b      	ldr	r3, [pc, #428]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	e001      	b.n	8002ef6 <HAL_RCC_ClockConfig+0xfa>
 8002ef2:	4b6a      	ldr	r3, [pc, #424]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002efa:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002efe:	fa92 f2a2 	rbit	r2, r2
 8002f02:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f06:	fab2 f282 	clz	r2, r2
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	f042 0220 	orr.w	r2, r2, #32
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f002 021f 	and.w	r2, r2, #31
 8002f18:	40d3      	lsrs	r3, r2
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 80be 	bne.w	80030a0 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e159      	b.n	80031dc <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d15b      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x1ec>
 8002f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f34:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f043 0320 	orr.w	r3, r3, #32
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x160>
 8002f56:	4b51      	ldr	r3, [pc, #324]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	e02d      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1bc>
 8002f5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f60:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f043 0320 	orr.w	r3, r3, #32
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d102      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x18c>
 8002f82:	4b46      	ldr	r3, [pc, #280]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	e017      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1bc>
 8002f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f043 0320 	orr.w	r3, r3, #32
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d102      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x1b8>
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1bc>
 8002fb4:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fbc:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fc0:	fa92 f2a2 	rbit	r2, r2
 8002fc4:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002fc6:	6a3a      	ldr	r2, [r7, #32]
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f002 021f 	and.w	r2, r2, #31
 8002fda:	40d3      	lsrs	r3, r2
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d15d      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0f9      	b.n	80031dc <HAL_RCC_ClockConfig+0x3e0>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f043 0320 	orr.w	r3, r3, #32
 8003000:	b2db      	uxtb	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d102      	bne.n	8003012 <HAL_RCC_ClockConfig+0x216>
 800300c:	4b23      	ldr	r3, [pc, #140]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	e02b      	b.n	800306a <HAL_RCC_ClockConfig+0x26e>
 8003012:	2302      	movs	r3, #2
 8003014:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f043 0320 	orr.w	r3, r3, #32
 800302a:	b2db      	uxtb	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d102      	bne.n	800303c <HAL_RCC_ClockConfig+0x240>
 8003036:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	e016      	b.n	800306a <HAL_RCC_ClockConfig+0x26e>
 800303c:	2302      	movs	r3, #2
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f043 0320 	orr.w	r3, r3, #32
 8003054:	b2db      	uxtb	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b04      	cmp	r3, #4
 800305e:	d102      	bne.n	8003066 <HAL_RCC_ClockConfig+0x26a>
 8003060:	4b0e      	ldr	r3, [pc, #56]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	e001      	b.n	800306a <HAL_RCC_ClockConfig+0x26e>
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <HAL_RCC_ClockConfig+0x2a0>)
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2202      	movs	r2, #2
 800306c:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003070:	fa92 f2a2 	rbit	r2, r2
 8003074:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	fab2 f282 	clz	r2, r2
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	f042 0220 	orr.w	r2, r2, #32
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	f002 021f 	and.w	r2, r2, #31
 800308a:	40d3      	lsrs	r3, r2
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0a1      	b.n	80031dc <HAL_RCC_ClockConfig+0x3e0>
 8003098:	40022000 	.word	0x40022000
 800309c:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a0:	4950      	ldr	r1, [pc, #320]	; (80031e4 <HAL_RCC_ClockConfig+0x3e8>)
 80030a2:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <HAL_RCC_ClockConfig+0x3e8>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b2:	f7fd fc25 	bl	8000900 <HAL_GetTick>
 80030b6:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d112      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c2:	f7fd fc1d 	bl	8000900 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e081      	b.n	80031dc <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030d8:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <HAL_RCC_ClockConfig+0x3e8>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d1ee      	bne.n	80030c2 <HAL_RCC_ClockConfig+0x2c6>
 80030e4:	e027      	b.n	8003136 <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d11d      	bne.n	800312a <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fd fc06 	bl	8000900 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e06a      	b.n	80031dc <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003106:	4b37      	ldr	r3, [pc, #220]	; (80031e4 <HAL_RCC_ClockConfig+0x3e8>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b08      	cmp	r3, #8
 8003110:	d1ee      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x2f4>
 8003112:	e010      	b.n	8003136 <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003114:	f7fd fbf4 	bl	8000900 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e058      	b.n	80031dc <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800312a:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <HAL_RCC_ClockConfig+0x3e8>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1ee      	bne.n	8003114 <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003136:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_RCC_ClockConfig+0x3ec>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0207 	and.w	r2, r3, #7
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d910      	bls.n	8003166 <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003144:	4928      	ldr	r1, [pc, #160]	; (80031e8 <HAL_RCC_ClockConfig+0x3ec>)
 8003146:	4b28      	ldr	r3, [pc, #160]	; (80031e8 <HAL_RCC_ClockConfig+0x3ec>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 0207 	bic.w	r2, r3, #7
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003154:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_RCC_ClockConfig+0x3ec>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0207 	and.w	r2, r3, #7
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e03a      	b.n	80031dc <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003172:	491c      	ldr	r1, [pc, #112]	; (80031e4 <HAL_RCC_ClockConfig+0x3e8>)
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_RCC_ClockConfig+0x3e8>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003190:	4914      	ldr	r1, [pc, #80]	; (80031e4 <HAL_RCC_ClockConfig+0x3e8>)
 8003192:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <HAL_RCC_ClockConfig+0x3e8>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031a4:	f000 f826 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80031a8:	4601      	mov	r1, r0
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_RCC_ClockConfig+0x3e8>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031b2:	23f0      	movs	r3, #240	; 0xf0
 80031b4:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
 80031c8:	4a08      	ldr	r2, [pc, #32]	; (80031ec <HAL_RCC_ClockConfig+0x3f0>)
 80031ca:	5cd3      	ldrb	r3, [r2, r3]
 80031cc:	fa21 f303 	lsr.w	r3, r1, r3
 80031d0:	4a07      	ldr	r2, [pc, #28]	; (80031f0 <HAL_RCC_ClockConfig+0x3f4>)
 80031d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fb69 	bl	80008ac <HAL_InitTick>
  
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3778      	adds	r7, #120	; 0x78
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40022000 	.word	0x40022000
 80031ec:	0800358c 	.word	0x0800358c
 80031f0:	20000428 	.word	0x20000428

080031f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b08b      	sub	sp, #44	; 0x2c
 80031f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	2300      	movs	r3, #0
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	2300      	movs	r3, #0
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800320e:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b04      	cmp	r3, #4
 800321c:	d002      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x30>
 800321e:	2b08      	cmp	r3, #8
 8003220:	d003      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x36>
 8003222:	e03c      	b.n	800329e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003224:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003226:	623b      	str	r3, [r7, #32]
      break;
 8003228:	e03c      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003230:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003234:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800324a:	5cd3      	ldrb	r3, [r2, r3]
 800324c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800324e:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	230f      	movs	r3, #15
 8003258:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
 800326c:	4a14      	ldr	r2, [pc, #80]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800327c:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	fb02 f303 	mul.w	r3, r2, r3
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
 800328c:	e004      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	623b      	str	r3, [r7, #32]
      break;
 800329c:	e002      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032a0:	623b      	str	r3, [r7, #32]
      break;
 80032a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032a4:	6a3b      	ldr	r3, [r7, #32]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	372c      	adds	r7, #44	; 0x2c
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	007a1200 	.word	0x007a1200
 80032bc:	0800359c 	.word	0x0800359c
 80032c0:	080035ac 	.word	0x080035ac
 80032c4:	003d0900 	.word	0x003d0900

080032c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000428 	.word	0x20000428

080032e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b092      	sub	sp, #72	; 0x48
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80ef 	beq.w	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003304:	4b96      	ldr	r3, [pc, #600]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10e      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003310:	4a93      	ldr	r2, [pc, #588]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003312:	4b93      	ldr	r3, [pc, #588]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331a:	61d3      	str	r3, [r2, #28]
 800331c:	4b90      	ldr	r3, [pc, #576]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b8d      	ldr	r3, [pc, #564]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d118      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333a:	4a8a      	ldr	r2, [pc, #552]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800333c:	4b89      	ldr	r3, [pc, #548]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003346:	f7fd fadb 	bl	8000900 <HAL_GetTick>
 800334a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	e008      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334e:	f7fd fad7 	bl	8000900 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b64      	cmp	r3, #100	; 0x64
 800335a:	d901      	bls.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0fa      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x276>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	4b80      	ldr	r3, [pc, #512]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800336c:	4b7c      	ldr	r3, [pc, #496]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003374:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 809c 	beq.w	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003388:	429a      	cmp	r2, r3
 800338a:	f000 8094 	beq.w	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800338e:	4b74      	ldr	r3, [pc, #464]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80033a6:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	461a      	mov	r2, r3
 80033b0:	4b6d      	ldr	r3, [pc, #436]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80033b2:	4413      	add	r3, r2
 80033b4:	461a      	mov	r2, r3
 80033b6:	2301      	movs	r3, #1
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80033c8:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	461a      	mov	r2, r3
 80033d2:	4b65      	ldr	r3, [pc, #404]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80033d4:	4413      	add	r3, r2
 80033d6:	461a      	mov	r2, r3
 80033d8:	2300      	movs	r3, #0
 80033da:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033dc:	4a60      	ldr	r2, [pc, #384]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d064      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fa88 	bl	8000900 <HAL_GetTick>
 80033f0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f2:	e00a      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7fd fa84 	bl	8000900 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e0a5      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800340a:	2302      	movs	r3, #2
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003416:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003422:	b2db      	uxtb	r3, r3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d102      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800342e:	4b4c      	ldr	r3, [pc, #304]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	e02b      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003434:	2302      	movs	r3, #2
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800344c:	b2db      	uxtb	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d102      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003458:	4b41      	ldr	r3, [pc, #260]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	e016      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800345e:	2302      	movs	r3, #2
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003476:	b2db      	uxtb	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b04      	cmp	r3, #4
 8003480:	d102      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	e001      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003488:	4b35      	ldr	r3, [pc, #212]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	2202      	movs	r2, #2
 800348e:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003492:	fa92 f2a2 	rbit	r2, r2
 8003496:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	fab2 f282 	clz	r2, r2
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	f002 021f 	and.w	r2, r2, #31
 80034ac:	40d3      	lsrs	r3, r2
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d09e      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034b6:	492a      	ldr	r1, [pc, #168]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80034b8:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d0:	4a23      	ldr	r2, [pc, #140]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80034d2:	4b23      	ldr	r3, [pc, #140]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034e8:	491d      	ldr	r1, [pc, #116]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f023 0203 	bic.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003506:	4916      	ldr	r1, [pc, #88]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	f023 0210 	bic.w	r2, r3, #16
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003524:	490e      	ldr	r1, [pc, #56]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003526:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003542:	4907      	ldr	r1, [pc, #28]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3748      	adds	r7, #72	; 0x48
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	40007000 	.word	0x40007000
 8003568:	42420400 	.word	0x42420400

0800356c <_init>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	bf00      	nop
 8003570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003572:	bc08      	pop	{r3}
 8003574:	469e      	mov	lr, r3
 8003576:	4770      	bx	lr

08003578 <_fini>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	bf00      	nop
 800357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357e:	bc08      	pop	{r3}
 8003580:	469e      	mov	lr, r3
 8003582:	4770      	bx	lr
