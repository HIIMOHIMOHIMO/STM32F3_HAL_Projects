
Test03_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003888  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003a10  08003a10  00013a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a50  08003a50  00013a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000042c  20000000  08003a54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002042c  2**0
                  CONTENTS
  7 .bss          000000b4  2000042c  2000042c  0002042c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004e0  200004e0  0002042c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00003c19  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00007ae2  00000000  00000000  00024075  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001301  00000000  00000000  0002bb57  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000670  00000000  00000000  0002ce58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005b8  00000000  00000000  0002d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00003442  00000000  00000000  0002da80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001fac  00000000  00000000  00030ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000006e  00000000  00000000  00032e6e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001884  00000000  00000000  00032edc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000042f 	.word	0x2000042f
 80001a0:	2000042c 	.word	0x2000042c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	2000042c 	.word	0x2000042c
 80001c4:	2000042c 	.word	0x2000042c
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000042c 	.word	0x2000042c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080039f8 	.word	0x080039f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000430 	.word	0x20000430
 8000220:	080039f8 	.word	0x080039f8
 8000224:	2000042c 	.word	0x2000042c
 8000228:	00000000 	.word	0x00000000

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	4e0f      	ldr	r6, [pc, #60]	; (800026c <__libc_init_array+0x40>)
 8000230:	4d0f      	ldr	r5, [pc, #60]	; (8000270 <__libc_init_array+0x44>)
 8000232:	1b76      	subs	r6, r6, r5
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	bf18      	it	ne
 8000238:	2400      	movne	r4, #0
 800023a:	d005      	beq.n	8000248 <__libc_init_array+0x1c>
 800023c:	3401      	adds	r4, #1
 800023e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000242:	4798      	blx	r3
 8000244:	42a6      	cmp	r6, r4
 8000246:	d1f9      	bne.n	800023c <__libc_init_array+0x10>
 8000248:	4e0a      	ldr	r6, [pc, #40]	; (8000274 <__libc_init_array+0x48>)
 800024a:	4d0b      	ldr	r5, [pc, #44]	; (8000278 <__libc_init_array+0x4c>)
 800024c:	1b76      	subs	r6, r6, r5
 800024e:	f003 fbd3 	bl	80039f8 <_init>
 8000252:	10b6      	asrs	r6, r6, #2
 8000254:	bf18      	it	ne
 8000256:	2400      	movne	r4, #0
 8000258:	d006      	beq.n	8000268 <__libc_init_array+0x3c>
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	08003a48 	.word	0x08003a48
 8000270:	08003a48 	.word	0x08003a48
 8000274:	08003a50 	.word	0x08003a50
 8000278:	08003a48 	.word	0x08003a48

0800027c <memset>:
 800027c:	b470      	push	{r4, r5, r6}
 800027e:	0784      	lsls	r4, r0, #30
 8000280:	d046      	beq.n	8000310 <memset+0x94>
 8000282:	1e54      	subs	r4, r2, #1
 8000284:	2a00      	cmp	r2, #0
 8000286:	d041      	beq.n	800030c <memset+0x90>
 8000288:	b2cd      	uxtb	r5, r1
 800028a:	4603      	mov	r3, r0
 800028c:	e002      	b.n	8000294 <memset+0x18>
 800028e:	1e62      	subs	r2, r4, #1
 8000290:	b3e4      	cbz	r4, 800030c <memset+0x90>
 8000292:	4614      	mov	r4, r2
 8000294:	f803 5b01 	strb.w	r5, [r3], #1
 8000298:	079a      	lsls	r2, r3, #30
 800029a:	d1f8      	bne.n	800028e <memset+0x12>
 800029c:	2c03      	cmp	r4, #3
 800029e:	d92e      	bls.n	80002fe <memset+0x82>
 80002a0:	b2cd      	uxtb	r5, r1
 80002a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80002a6:	2c0f      	cmp	r4, #15
 80002a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80002ac:	d919      	bls.n	80002e2 <memset+0x66>
 80002ae:	f103 0210 	add.w	r2, r3, #16
 80002b2:	4626      	mov	r6, r4
 80002b4:	3e10      	subs	r6, #16
 80002b6:	2e0f      	cmp	r6, #15
 80002b8:	f842 5c10 	str.w	r5, [r2, #-16]
 80002bc:	f842 5c0c 	str.w	r5, [r2, #-12]
 80002c0:	f842 5c08 	str.w	r5, [r2, #-8]
 80002c4:	f842 5c04 	str.w	r5, [r2, #-4]
 80002c8:	f102 0210 	add.w	r2, r2, #16
 80002cc:	d8f2      	bhi.n	80002b4 <memset+0x38>
 80002ce:	f1a4 0210 	sub.w	r2, r4, #16
 80002d2:	f022 020f 	bic.w	r2, r2, #15
 80002d6:	f004 040f 	and.w	r4, r4, #15
 80002da:	3210      	adds	r2, #16
 80002dc:	2c03      	cmp	r4, #3
 80002de:	4413      	add	r3, r2
 80002e0:	d90d      	bls.n	80002fe <memset+0x82>
 80002e2:	461e      	mov	r6, r3
 80002e4:	4622      	mov	r2, r4
 80002e6:	3a04      	subs	r2, #4
 80002e8:	2a03      	cmp	r2, #3
 80002ea:	f846 5b04 	str.w	r5, [r6], #4
 80002ee:	d8fa      	bhi.n	80002e6 <memset+0x6a>
 80002f0:	1f22      	subs	r2, r4, #4
 80002f2:	f022 0203 	bic.w	r2, r2, #3
 80002f6:	3204      	adds	r2, #4
 80002f8:	4413      	add	r3, r2
 80002fa:	f004 0403 	and.w	r4, r4, #3
 80002fe:	b12c      	cbz	r4, 800030c <memset+0x90>
 8000300:	b2c9      	uxtb	r1, r1
 8000302:	441c      	add	r4, r3
 8000304:	f803 1b01 	strb.w	r1, [r3], #1
 8000308:	42a3      	cmp	r3, r4
 800030a:	d1fb      	bne.n	8000304 <memset+0x88>
 800030c:	bc70      	pop	{r4, r5, r6}
 800030e:	4770      	bx	lr
 8000310:	4614      	mov	r4, r2
 8000312:	4603      	mov	r3, r0
 8000314:	e7c2      	b.n	800029c <memset+0x20>
 8000316:	bf00      	nop

08000318 <register_fini>:
 8000318:	4b02      	ldr	r3, [pc, #8]	; (8000324 <register_fini+0xc>)
 800031a:	b113      	cbz	r3, 8000322 <register_fini+0xa>
 800031c:	4802      	ldr	r0, [pc, #8]	; (8000328 <register_fini+0x10>)
 800031e:	f000 b805 	b.w	800032c <atexit>
 8000322:	4770      	bx	lr
 8000324:	00000000 	.word	0x00000000
 8000328:	08000339 	.word	0x08000339

0800032c <atexit>:
 800032c:	2300      	movs	r3, #0
 800032e:	4601      	mov	r1, r0
 8000330:	461a      	mov	r2, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f000 b814 	b.w	8000360 <__register_exitproc>

08000338 <__libc_fini_array>:
 8000338:	b538      	push	{r3, r4, r5, lr}
 800033a:	4d07      	ldr	r5, [pc, #28]	; (8000358 <__libc_fini_array+0x20>)
 800033c:	4c07      	ldr	r4, [pc, #28]	; (800035c <__libc_fini_array+0x24>)
 800033e:	1b2c      	subs	r4, r5, r4
 8000340:	10a4      	asrs	r4, r4, #2
 8000342:	d005      	beq.n	8000350 <__libc_fini_array+0x18>
 8000344:	3c01      	subs	r4, #1
 8000346:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800034a:	4798      	blx	r3
 800034c:	2c00      	cmp	r4, #0
 800034e:	d1f9      	bne.n	8000344 <__libc_fini_array+0xc>
 8000350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000354:	f003 bb56 	b.w	8003a04 <_fini>
 8000358:	08003a54 	.word	0x08003a54
 800035c:	08003a50 	.word	0x08003a50

08000360 <__register_exitproc>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	4c25      	ldr	r4, [pc, #148]	; (80003fc <__register_exitproc+0x9c>)
 8000366:	6825      	ldr	r5, [r4, #0]
 8000368:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800036c:	4606      	mov	r6, r0
 800036e:	4688      	mov	r8, r1
 8000370:	4692      	mov	sl, r2
 8000372:	4699      	mov	r9, r3
 8000374:	b3c4      	cbz	r4, 80003e8 <__register_exitproc+0x88>
 8000376:	6860      	ldr	r0, [r4, #4]
 8000378:	281f      	cmp	r0, #31
 800037a:	dc17      	bgt.n	80003ac <__register_exitproc+0x4c>
 800037c:	1c43      	adds	r3, r0, #1
 800037e:	b176      	cbz	r6, 800039e <__register_exitproc+0x3e>
 8000380:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8000384:	2201      	movs	r2, #1
 8000386:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800038a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 800038e:	4082      	lsls	r2, r0
 8000390:	4311      	orrs	r1, r2
 8000392:	2e02      	cmp	r6, #2
 8000394:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 8000398:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800039c:	d01e      	beq.n	80003dc <__register_exitproc+0x7c>
 800039e:	3002      	adds	r0, #2
 80003a0:	6063      	str	r3, [r4, #4]
 80003a2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 80003a6:	2000      	movs	r0, #0
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <__register_exitproc+0xa0>)
 80003ae:	b303      	cbz	r3, 80003f2 <__register_exitproc+0x92>
 80003b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80003b4:	f3af 8000 	nop.w
 80003b8:	4604      	mov	r4, r0
 80003ba:	b1d0      	cbz	r0, 80003f2 <__register_exitproc+0x92>
 80003bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80003c0:	2700      	movs	r7, #0
 80003c2:	e880 0088 	stmia.w	r0, {r3, r7}
 80003c6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80003ca:	4638      	mov	r0, r7
 80003cc:	2301      	movs	r3, #1
 80003ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80003d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d0e1      	beq.n	800039e <__register_exitproc+0x3e>
 80003da:	e7d1      	b.n	8000380 <__register_exitproc+0x20>
 80003dc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 80003e0:	430a      	orrs	r2, r1
 80003e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80003e6:	e7da      	b.n	800039e <__register_exitproc+0x3e>
 80003e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80003ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80003f0:	e7c1      	b.n	8000376 <__register_exitproc+0x16>
 80003f2:	f04f 30ff 	mov.w	r0, #4294967295
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	bf00      	nop
 80003fc:	08003a14 	.word	0x08003a14
 8000400:	00000000 	.word	0x00000000

08000404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800043c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000408:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800040a:	e003      	b.n	8000414 <LoopCopyDataInit>

0800040c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800040e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000410:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000412:	3104      	adds	r1, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000418:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800041a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800041c:	d3f6      	bcc.n	800040c <CopyDataInit>
	ldr	r2, =_sbss
 800041e:	4a0b      	ldr	r2, [pc, #44]	; (800044c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000420:	e002      	b.n	8000428 <LoopFillZerobss>

08000422 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000422:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000424:	f842 3b04 	str.w	r3, [r2], #4

08000428 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <LoopForever+0x16>)
	cmp	r2, r3
 800042a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800042c:	d3f9      	bcc.n	8000422 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800042e:	f000 f9e1 	bl	80007f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000432:	f7ff fefb 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000436:	f000 f80f 	bl	8000458 <main>

0800043a <LoopForever>:

LoopForever:
    b LoopForever
 800043a:	e7fe      	b.n	800043a <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800043c:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000440:	08003a54 	.word	0x08003a54
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000444:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000448:	2000042c 	.word	0x2000042c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800044c:	2000042c 	.word	0x2000042c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000450:	200004e0 	.word	0x200004e0

08000454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000454:	e7fe      	b.n	8000454 <ADC1_2_IRQHandler>
	...

08000458 <main>:
enum{LENGTH=2};
uint16_t ADCBuffer[LENGTH];
/* USER CODE END 0 */

int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045c:	f000 faaa 	bl	80009b4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000460:	f000 f81a 	bl	8000498 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000464:	f000 f8f0 	bl	8000648 <MX_GPIO_Init>
  MX_DMA_Init();
 8000468:	f000 f8d6 	bl	8000618 <MX_DMA_Init>
  MX_ADC1_Init();
 800046c:	f000 f862 	bl	8000534 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000470:	f000 f854 	bl	800051c <MX_NVIC_Init>

  /* USER CODE BEGIN 2 */
	HAL_ADC_MspInit(&hadc1);
 8000474:	4806      	ldr	r0, [pc, #24]	; (8000490 <main+0x38>)
 8000476:	f000 fa49 	bl	800090c <HAL_ADC_MspInit>
	memset(ADCBuffer,0,sizeof(ADCBuffer));
 800047a:	2204      	movs	r2, #4
 800047c:	2100      	movs	r1, #0
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <main+0x3c>)
 8000480:	f7ff fefc 	bl	800027c <memset>
	HAL_ADC_Start_DMA(&hadc1,ADCBuffer,LENGTH);
 8000484:	2202      	movs	r2, #2
 8000486:	4903      	ldr	r1, [pc, #12]	; (8000494 <main+0x3c>)
 8000488:	4801      	ldr	r0, [pc, #4]	; (8000490 <main+0x38>)
 800048a:	f001 f877 	bl	800157c <HAL_ADC_Start_DMA>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  }
 800048e:	e7fe      	b.n	800048e <main+0x36>
 8000490:	20000448 	.word	0x20000448
 8000494:	200004d8 	.word	0x200004d8

08000498 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b090      	sub	sp, #64	; 0x40
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049e:	2302      	movs	r3, #2
 80004a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a2:	2301      	movs	r3, #1
 80004a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80004a6:	2310      	movs	r3, #16
 80004a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ae:	f107 0318 	add.w	r3, r7, #24
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 ff6c 	bl	8002390 <HAL_RCC_OscConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x2a>
  {
    Error_Handler();
 80004be:	f000 f941 	bl	8000744 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c2:	230f      	movs	r3, #15
 80004c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f003 f81a 	bl	8003514 <HAL_RCC_ClockConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x52>
  {
    Error_Handler();
 80004e6:	f000 f92d 	bl	8000744 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80004ea:	f003 fa79 	bl	80039e0 <HAL_RCC_GetHCLKFreq>
 80004ee:	4602      	mov	r2, r0
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <SystemClock_Config+0x80>)
 80004f2:	fba3 2302 	umull	r2, r3, r3, r2
 80004f6:	099b      	lsrs	r3, r3, #6
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fbbb 	bl	8000c74 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80004fe:	2004      	movs	r0, #4
 8000500:	f000 fbc4 	bl	8000c8c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	f04f 30ff 	mov.w	r0, #4294967295
 800050c:	f000 fb88 	bl	8000c20 <HAL_NVIC_SetPriority>
}
 8000510:	bf00      	nop
 8000512:	3740      	adds	r7, #64	; 0x40
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	10624dd3 	.word	0x10624dd3

0800051c <MX_NVIC_Init>:

/** NVIC Configuration
*/
static void MX_NVIC_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2100      	movs	r1, #0
 8000524:	200b      	movs	r0, #11
 8000526:	f000 fb7b 	bl	8000c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800052a:	200b      	movs	r0, #11
 800052c:	f000 fb94 	bl	8000c58 <HAL_NVIC_EnableIRQ>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800053a:	4b36      	ldr	r3, [pc, #216]	; (8000614 <MX_ADC1_Init+0xe0>)
 800053c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000540:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000542:	4b34      	ldr	r3, [pc, #208]	; (8000614 <MX_ADC1_Init+0xe0>)
 8000544:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000548:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800054a:	4b32      	ldr	r3, [pc, #200]	; (8000614 <MX_ADC1_Init+0xe0>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000550:	4b30      	ldr	r3, [pc, #192]	; (8000614 <MX_ADC1_Init+0xe0>)
 8000552:	2201      	movs	r2, #1
 8000554:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000556:	4b2f      	ldr	r3, [pc, #188]	; (8000614 <MX_ADC1_Init+0xe0>)
 8000558:	2201      	movs	r2, #1
 800055a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800055c:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <MX_ADC1_Init+0xe0>)
 800055e:	2200      	movs	r2, #0
 8000560:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000562:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <MX_ADC1_Init+0xe0>)
 8000564:	2200      	movs	r2, #0
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <MX_ADC1_Init+0xe0>)
 800056a:	2201      	movs	r2, #1
 800056c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800056e:	4b29      	ldr	r3, [pc, #164]	; (8000614 <MX_ADC1_Init+0xe0>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <MX_ADC1_Init+0xe0>)
 8000576:	2202      	movs	r2, #2
 8000578:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800057a:	4b26      	ldr	r3, [pc, #152]	; (8000614 <MX_ADC1_Init+0xe0>)
 800057c:	2201      	movs	r2, #1
 800057e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <MX_ADC1_Init+0xe0>)
 8000582:	2204      	movs	r2, #4
 8000584:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000586:	4b23      	ldr	r3, [pc, #140]	; (8000614 <MX_ADC1_Init+0xe0>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <MX_ADC1_Init+0xe0>)
 800058e:	2201      	movs	r2, #1
 8000590:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000592:	4820      	ldr	r0, [pc, #128]	; (8000614 <MX_ADC1_Init+0xe0>)
 8000594:	f000 fe64 	bl	8001260 <HAL_ADC_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800059e:	f000 f8d1 	bl	8000744 <Error_Handler>
  }

    /**Configure the ADC multi-mode 
    */
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 80005a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005a6:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	4619      	mov	r1, r3
 80005b2:	4818      	ldr	r0, [pc, #96]	; (8000614 <MX_ADC1_Init+0xe0>)
 80005b4:	f001 fb7a 	bl	8001cac <HAL_ADCEx_MultiModeConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005be:	f000 f8c1 	bl	8000744 <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4619      	mov	r1, r3
 80005de:	480d      	ldr	r0, [pc, #52]	; (8000614 <MX_ADC1_Init+0xe0>)
 80005e0:	f001 f8a6 	bl	8001730 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80005ea:	f000 f8ab 	bl	8000744 <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <MX_ADC1_Init+0xe0>)
 80005fc:	f001 f898 	bl	8001730 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000606:	f000 f89d 	bl	8000744 <Error_Handler>
  }

}
 800060a:	bf00      	nop
 800060c:	3728      	adds	r7, #40	; 0x28
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000448 	.word	0x20000448

08000618 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800061e:	4a09      	ldr	r2, [pc, #36]	; (8000644 <MX_DMA_Init+0x2c>)
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_DMA_Init+0x2c>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_DMA_Init+0x2c>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4a23      	ldr	r2, [pc, #140]	; (80006dc <MX_GPIO_Init+0x94>)
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_GPIO_Init+0x94>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_GPIO_Init+0x94>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <MX_GPIO_Init+0x94>)
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_GPIO_Init+0x94>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_GPIO_Init+0x94>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f001 fe6a 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2108      	movs	r1, #8
 8000690:	4813      	ldr	r0, [pc, #76]	; (80006e0 <MX_GPIO_Init+0x98>)
 8000692:	f001 fe65 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b2:	f001 fcdf 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80006b6:	2308      	movs	r3, #8
 80006b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4619      	mov	r1, r3
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_GPIO_Init+0x98>)
 80006ce:	f001 fcd1 	bl	8002074 <HAL_GPIO_Init>

}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000
 80006e0:	48000400 	.word	0x48000400

080006e4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(ADCBuffer[0]>1024){
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <HAL_ADC_ConvCpltCallback+0x58>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006f4:	d905      	bls.n	8000702 <HAL_ADC_ConvCpltCallback+0x1e>
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2108      	movs	r1, #8
 80006fa:	4811      	ldr	r0, [pc, #68]	; (8000740 <HAL_ADC_ConvCpltCallback+0x5c>)
 80006fc:	f001 fe30 	bl	8002360 <HAL_GPIO_WritePin>
 8000700:	e004      	b.n	800070c <HAL_ADC_ConvCpltCallback+0x28>
	}else{
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2108      	movs	r1, #8
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000708:	f001 fe2a 	bl	8002360 <HAL_GPIO_WritePin>
	}
	if(ADCBuffer[1]>3072){
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <HAL_ADC_ConvCpltCallback+0x58>)
 800070e:	885b      	ldrh	r3, [r3, #2]
 8000710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000714:	d907      	bls.n	8000726 <HAL_ADC_ConvCpltCallback+0x42>
		HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f001 fe1e 	bl	8002360 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
	}
}
 8000724:	e006      	b.n	8000734 <HAL_ADC_ConvCpltCallback+0x50>
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
	}
	if(ADCBuffer[1]>3072){
		HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
	}else{
		HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f001 fe16 	bl	8002360 <HAL_GPIO_WritePin>
	}
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200004d8 	.word	0x200004d8
 8000740:	48000400 	.word	0x48000400

08000744 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2108      	movs	r1, #8
 800074c:	4807      	ldr	r0, [pc, #28]	; (800076c <Error_Handler+0x28>)
 800074e:	f001 fe07 	bl	8002360 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000752:	2032      	movs	r0, #50	; 0x32
 8000754:	f000 f97a 	bl	8000a4c <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2108      	movs	r1, #8
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <Error_Handler+0x28>)
 800075e:	f001 fdff 	bl	8002360 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000762:	2032      	movs	r0, #50	; 0x32
 8000764:	f000 f972 	bl	8000a4c <HAL_Delay>
  }
 8000768:	e7ee      	b.n	8000748 <Error_Handler+0x4>
 800076a:	bf00      	nop
 800076c:	48000400 	.word	0x48000400

08000770 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8000784:	e7fe      	b.n	8000784 <HardFault_Handler+0x4>
 8000786:	bf00      	nop

08000788 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>
 800078e:	bf00      	nop

08000790 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8000794:	e7fe      	b.n	8000794 <BusFault_Handler+0x4>
 8000796:	bf00      	nop

08000798 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>
 800079e:	bf00      	nop

080007a0 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop

080007c0 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f000 f920 	bl	8000a18 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80007d8:	f000 fa74 	bl	8000cc4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <DMA1_Channel1_IRQHandler+0x10>)
 80007e6:	f000 fb11 	bl	8000e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000049c 	.word	0x2000049c

080007f4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f8:	4a1f      	ldr	r2, [pc, #124]	; (8000878 <SystemInit+0x84>)
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <SystemInit+0x84>)
 80007fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000808:	4a1c      	ldr	r2, [pc, #112]	; (800087c <SystemInit+0x88>)
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <SystemInit+0x88>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000814:	4919      	ldr	r1, [pc, #100]	; (800087c <SystemInit+0x88>)
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <SystemInit+0x88>)
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <SystemInit+0x8c>)
 800081c:	4013      	ands	r3, r2
 800081e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000820:	4a16      	ldr	r2, [pc, #88]	; (800087c <SystemInit+0x88>)
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <SystemInit+0x88>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800082a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800082e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000830:	4a12      	ldr	r2, [pc, #72]	; (800087c <SystemInit+0x88>)
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <SystemInit+0x88>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800083a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800083c:	4a0f      	ldr	r2, [pc, #60]	; (800087c <SystemInit+0x88>)
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <SystemInit+0x88>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000846:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <SystemInit+0x88>)
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <SystemInit+0x88>)
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	f023 030f 	bic.w	r3, r3, #15
 8000852:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000854:	4909      	ldr	r1, [pc, #36]	; (800087c <SystemInit+0x88>)
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <SystemInit+0x88>)
 8000858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <SystemInit+0x90>)
 800085c:	4013      	ands	r3, r2
 800085e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <SystemInit+0x88>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <SystemInit+0x84>)
 8000868:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800086c:	609a      	str	r2, [r3, #8]
#endif
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00
 800087c:	40021000 	.word	0x40021000
 8000880:	f87fc00c 	.word	0xf87fc00c
 8000884:	ff00fccc 	.word	0xff00fccc

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <HAL_MspInit+0x80>)
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <HAL_MspInit+0x80>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6193      	str	r3, [r2, #24]
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <HAL_MspInit+0x80>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a6:	2003      	movs	r0, #3
 80008a8:	f000 f9ae 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	f06f 000b 	mvn.w	r0, #11
 80008b4:	f000 f9b4 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	f06f 000a 	mvn.w	r0, #10
 80008c0:	f000 f9ae 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	f06f 0009 	mvn.w	r0, #9
 80008cc:	f000 f9a8 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	f06f 0004 	mvn.w	r0, #4
 80008d8:	f000 f9a2 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	f06f 0003 	mvn.w	r0, #3
 80008e4:	f000 f99c 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	f06f 0001 	mvn.w	r0, #1
 80008f0:	f000 f996 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f990 	bl	8000c20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800091c:	d140      	bne.n	80009a0 <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800091e:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <HAL_ADC_MspInit+0x9c>)
 8000920:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <HAL_ADC_MspInit+0x9c>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <HAL_ADC_MspInit+0x9c>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000936:	2303      	movs	r3, #3
 8000938:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093a:	2303      	movs	r3, #3
 800093c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f001 fb92 	bl	8002074 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_ADC_MspInit+0xa0>)
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_ADC_MspInit+0xa4>)
 8000954:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_ADC_MspInit+0xa0>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <HAL_ADC_MspInit+0xa0>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_ADC_MspInit+0xa0>)
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_ADC_MspInit+0xa0>)
 800096a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800096e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_ADC_MspInit+0xa0>)
 8000972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000976:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_ADC_MspInit+0xa0>)
 800097a:	2220      	movs	r2, #32
 800097c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_ADC_MspInit+0xa0>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <HAL_ADC_MspInit+0xa0>)
 8000986:	f000 f9ab 	bl	8000ce0 <HAL_DMA_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_ADC_MspInit+0x88>
    {
      Error_Handler();
 8000990:	f7ff fed8 	bl	8000744 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a05      	ldr	r2, [pc, #20]	; (80009ac <HAL_ADC_MspInit+0xa0>)
 8000998:	63da      	str	r2, [r3, #60]	; 0x3c
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_ADC_MspInit+0xa0>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	2000049c 	.word	0x2000049c
 80009b0:	40020008 	.word	0x40020008

080009b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_Init+0x28>)
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_Init+0x28>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f91f 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 f808 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff ff5a 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_InitTick+0x30>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <HAL_InitTick+0x34>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	099b      	lsrs	r3, r3, #6
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f93d 	bl	8000c74 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000a02:	f000 f90d 	bl	8000c20 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000428 	.word	0x20000428
 8000a14:	10624dd3 	.word	0x10624dd3

08000a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick++;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <HAL_IncTick+0x18>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a03      	ldr	r2, [pc, #12]	; (8000a30 <HAL_IncTick+0x18>)
 8000a24:	6013      	str	r3, [r2, #0]
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	200004dc 	.word	0x200004dc

08000a34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	200004dc 	.word	0x200004dc

08000a4c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff ffee 	bl	8000a34 <HAL_GetTick>
 8000a58:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffea 	bl	8000a34 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	1ad2      	subs	r2, r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d3f7      	bcc.n	8000a5c <HAL_Delay+0x10>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ac8:	0a1b      	lsrs	r3, r3, #8
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ae2:	4909      	ldr	r1, [pc, #36]	; (8000b08 <NVIC_EnableIRQ+0x30>)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	095b      	lsrs	r3, r3, #5
 8000aea:	79fa      	ldrb	r2, [r7, #7]
 8000aec:	f002 021f 	and.w	r2, r2, #31
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	da0b      	bge.n	8000b38 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	490d      	ldr	r1, [pc, #52]	; (8000b58 <NVIC_SetPriority+0x4c>)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	3b04      	subs	r3, #4
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b36:	e009      	b.n	8000b4c <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	4908      	ldr	r1, [pc, #32]	; (8000b5c <NVIC_SetPriority+0x50>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	2201      	movs	r2, #1
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	1e5a      	subs	r2, r3, #1
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	1e59      	subs	r1, r3, #1
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000bb4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd4:	d301      	bcc.n	8000bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00f      	b.n	8000bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <SysTick_Config+0x40>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be2:	210f      	movs	r1, #15
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f7ff ff90 	bl	8000b0c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <SysTick_Config+0x40>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SysTick_Config+0x40>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff2f 	bl	8000a74 <NVIC_SetPriorityGrouping>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop

08000c20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c32:	f7ff ff43 	bl	8000abc <NVIC_GetPriorityGrouping>
 8000c36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	68b9      	ldr	r1, [r7, #8]
 8000c3c:	6978      	ldr	r0, [r7, #20]
 8000c3e:	f7ff ff8f 	bl	8000b60 <NVIC_EncodePriority>
 8000c42:	4602      	mov	r2, r0
 8000c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff5e 	bl	8000b0c <NVIC_SetPriority>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff36 	bl	8000ad8 <NVIC_EnableIRQ>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ffa1 	bl	8000bc4 <SysTick_Config>
 8000c82:	4603      	mov	r3, r0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d106      	bne.n	8000ca8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c9a:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000ca6:	e005      	b.n	8000cb4 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ca8:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f023 0304 	bic.w	r3, r3, #4
 8000cb2:	6013      	str	r3, [r2, #0]
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000cc8:	f000 f802 	bl	8000cd0 <HAL_SYSTICK_Callback>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e039      	b.n	8000d6a <HAL_DMA_Init+0x8a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d103      	bne.n	8000d08 <HAL_DMA_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d1e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	699b      	ldr	r3, [r3, #24]
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4313      	orrs	r3, r2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}  
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d101      	bne.n	8000d94 <HAL_DMA_Start_IT+0x1c>
 8000d90:	2302      	movs	r3, #2
 8000d92:	e036      	b.n	8000e02 <HAL_DMA_Start_IT+0x8a>
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2201      	movs	r2, #1
 8000d98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2202      	movs	r2, #2
 8000da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	6812      	ldr	r2, [r2, #0]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */  
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f000 fa16 	bl	80011ec <DMA_SetConfig>
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	6812      	ldr	r2, [r2, #0]
 8000dc8:	6812      	ldr	r2, [r2, #0]
 8000dca:	f042 0202 	orr.w	r2, r2, #2
 8000dce:	601a      	str	r2, [r3, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	f042 0204 	orr.w	r2, r2, #4
 8000dde:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	6812      	ldr	r2, [r2, #0]
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	f042 0208 	orr.w	r2, r2, #8
 8000dee:	601a      	str	r2, [r3, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);   
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	f042 0201 	orr.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;    
 8000e00:	2300      	movs	r3, #0
} 
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop

08000e0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{        
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8000e14:	4b8f      	ldr	r3, [pc, #572]	; (8001054 <HAL_DMA_IRQHandler+0x248>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4b8e      	ldr	r3, [pc, #568]	; (8001058 <HAL_DMA_IRQHandler+0x24c>)
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d02e      	beq.n	8000e82 <HAL_DMA_IRQHandler+0x76>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4b8c      	ldr	r3, [pc, #560]	; (800105c <HAL_DMA_IRQHandler+0x250>)
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d026      	beq.n	8000e7e <HAL_DMA_IRQHandler+0x72>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	4b8a      	ldr	r3, [pc, #552]	; (8001060 <HAL_DMA_IRQHandler+0x254>)
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d01d      	beq.n	8000e78 <HAL_DMA_IRQHandler+0x6c>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4b88      	ldr	r3, [pc, #544]	; (8001064 <HAL_DMA_IRQHandler+0x258>)
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d014      	beq.n	8000e72 <HAL_DMA_IRQHandler+0x66>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4b86      	ldr	r3, [pc, #536]	; (8001068 <HAL_DMA_IRQHandler+0x25c>)
 8000e50:	4299      	cmp	r1, r3
 8000e52:	d00b      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x60>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4b84      	ldr	r3, [pc, #528]	; (800106c <HAL_DMA_IRQHandler+0x260>)
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d102      	bne.n	8000e66 <HAL_DMA_IRQHandler+0x5a>
 8000e60:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000e64:	e00e      	b.n	8000e84 <HAL_DMA_IRQHandler+0x78>
 8000e66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e6a:	e00b      	b.n	8000e84 <HAL_DMA_IRQHandler+0x78>
 8000e6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e70:	e008      	b.n	8000e84 <HAL_DMA_IRQHandler+0x78>
 8000e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e76:	e005      	b.n	8000e84 <HAL_DMA_IRQHandler+0x78>
 8000e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e7c:	e002      	b.n	8000e84 <HAL_DMA_IRQHandler+0x78>
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	e000      	b.n	8000e84 <HAL_DMA_IRQHandler+0x78>
 8000e82:	2308      	movs	r3, #8
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d05c      	beq.n	8000f44 <HAL_DMA_IRQHandler+0x138>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d055      	beq.n	8000f44 <HAL_DMA_IRQHandler+0x138>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	f022 0208 	bic.w	r2, r2, #8
 8000ea6:	601a      	str	r2, [r3, #0]
    
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000ea8:	4a6a      	ldr	r2, [pc, #424]	; (8001054 <HAL_DMA_IRQHandler+0x248>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4b69      	ldr	r3, [pc, #420]	; (8001058 <HAL_DMA_IRQHandler+0x24c>)
 8000eb2:	4299      	cmp	r1, r3
 8000eb4:	d02e      	beq.n	8000f14 <HAL_DMA_IRQHandler+0x108>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4b67      	ldr	r3, [pc, #412]	; (800105c <HAL_DMA_IRQHandler+0x250>)
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d026      	beq.n	8000f10 <HAL_DMA_IRQHandler+0x104>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4b65      	ldr	r3, [pc, #404]	; (8001060 <HAL_DMA_IRQHandler+0x254>)
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	d01d      	beq.n	8000f0a <HAL_DMA_IRQHandler+0xfe>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4b63      	ldr	r3, [pc, #396]	; (8001064 <HAL_DMA_IRQHandler+0x258>)
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	d014      	beq.n	8000f04 <HAL_DMA_IRQHandler+0xf8>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4b61      	ldr	r3, [pc, #388]	; (8001068 <HAL_DMA_IRQHandler+0x25c>)
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	d00b      	beq.n	8000efe <HAL_DMA_IRQHandler+0xf2>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4619      	mov	r1, r3
 8000eec:	4b5f      	ldr	r3, [pc, #380]	; (800106c <HAL_DMA_IRQHandler+0x260>)
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d102      	bne.n	8000ef8 <HAL_DMA_IRQHandler+0xec>
 8000ef2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000ef6:	e00e      	b.n	8000f16 <HAL_DMA_IRQHandler+0x10a>
 8000ef8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000efc:	e00b      	b.n	8000f16 <HAL_DMA_IRQHandler+0x10a>
 8000efe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f02:	e008      	b.n	8000f16 <HAL_DMA_IRQHandler+0x10a>
 8000f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f08:	e005      	b.n	8000f16 <HAL_DMA_IRQHandler+0x10a>
 8000f0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f0e:	e002      	b.n	8000f16 <HAL_DMA_IRQHandler+0x10a>
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	e000      	b.n	8000f16 <HAL_DMA_IRQHandler+0x10a>
 8000f14:	2308      	movs	r3, #8
 8000f16:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;    
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2204      	movs	r2, #4
 8000f28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2020 	strb.w	r2, [r3, #32]
    
      if (hdma->XferErrorCallback != NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_DMA_IRQHandler+0x138>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8000f44:	4b43      	ldr	r3, [pc, #268]	; (8001054 <HAL_DMA_IRQHandler+0x248>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4b42      	ldr	r3, [pc, #264]	; (8001058 <HAL_DMA_IRQHandler+0x24c>)
 8000f50:	4299      	cmp	r1, r3
 8000f52:	d02e      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x1a6>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <HAL_DMA_IRQHandler+0x250>)
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d026      	beq.n	8000fae <HAL_DMA_IRQHandler+0x1a2>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <HAL_DMA_IRQHandler+0x254>)
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d01d      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x19c>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4b3c      	ldr	r3, [pc, #240]	; (8001064 <HAL_DMA_IRQHandler+0x258>)
 8000f74:	4299      	cmp	r1, r3
 8000f76:	d014      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x196>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <HAL_DMA_IRQHandler+0x25c>)
 8000f80:	4299      	cmp	r1, r3
 8000f82:	d00b      	beq.n	8000f9c <HAL_DMA_IRQHandler+0x190>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <HAL_DMA_IRQHandler+0x260>)
 8000f8c:	4299      	cmp	r1, r3
 8000f8e:	d102      	bne.n	8000f96 <HAL_DMA_IRQHandler+0x18a>
 8000f90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f94:	e00e      	b.n	8000fb4 <HAL_DMA_IRQHandler+0x1a8>
 8000f96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f9a:	e00b      	b.n	8000fb4 <HAL_DMA_IRQHandler+0x1a8>
 8000f9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fa0:	e008      	b.n	8000fb4 <HAL_DMA_IRQHandler+0x1a8>
 8000fa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fa6:	e005      	b.n	8000fb4 <HAL_DMA_IRQHandler+0x1a8>
 8000fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fac:	e002      	b.n	8000fb4 <HAL_DMA_IRQHandler+0x1a8>
 8000fae:	2340      	movs	r3, #64	; 0x40
 8000fb0:	e000      	b.n	8000fb4 <HAL_DMA_IRQHandler+0x1a8>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d068      	beq.n	800108c <HAL_DMA_IRQHandler+0x280>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d061      	beq.n	800108c <HAL_DMA_IRQHandler+0x280>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0320 	and.w	r3, r3, #32
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d107      	bne.n	8000fe6 <HAL_DMA_IRQHandler+0x1da>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	6812      	ldr	r2, [r2, #0]
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	f022 0204 	bic.w	r2, r2, #4
 8000fe4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fe6:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <HAL_DMA_IRQHandler+0x248>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_DMA_IRQHandler+0x24c>)
 8000ff0:	4299      	cmp	r1, r3
 8000ff2:	d03d      	beq.n	8001070 <HAL_DMA_IRQHandler+0x264>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_DMA_IRQHandler+0x250>)
 8000ffc:	4299      	cmp	r1, r3
 8000ffe:	d026      	beq.n	800104e <HAL_DMA_IRQHandler+0x242>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_DMA_IRQHandler+0x254>)
 8001008:	4299      	cmp	r1, r3
 800100a:	d01d      	beq.n	8001048 <HAL_DMA_IRQHandler+0x23c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_DMA_IRQHandler+0x258>)
 8001014:	4299      	cmp	r1, r3
 8001016:	d014      	beq.n	8001042 <HAL_DMA_IRQHandler+0x236>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_DMA_IRQHandler+0x25c>)
 8001020:	4299      	cmp	r1, r3
 8001022:	d00b      	beq.n	800103c <HAL_DMA_IRQHandler+0x230>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <HAL_DMA_IRQHandler+0x260>)
 800102c:	4299      	cmp	r1, r3
 800102e:	d102      	bne.n	8001036 <HAL_DMA_IRQHandler+0x22a>
 8001030:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001034:	e01d      	b.n	8001072 <HAL_DMA_IRQHandler+0x266>
 8001036:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800103a:	e01a      	b.n	8001072 <HAL_DMA_IRQHandler+0x266>
 800103c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001040:	e017      	b.n	8001072 <HAL_DMA_IRQHandler+0x266>
 8001042:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001046:	e014      	b.n	8001072 <HAL_DMA_IRQHandler+0x266>
 8001048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104c:	e011      	b.n	8001072 <HAL_DMA_IRQHandler+0x266>
 800104e:	2340      	movs	r3, #64	; 0x40
 8001050:	e00f      	b.n	8001072 <HAL_DMA_IRQHandler+0x266>
 8001052:	bf00      	nop
 8001054:	40020000 	.word	0x40020000
 8001058:	40020008 	.word	0x40020008
 800105c:	4002001c 	.word	0x4002001c
 8001060:	40020030 	.word	0x40020030
 8001064:	40020044 	.word	0x40020044
 8001068:	40020058 	.word	0x40020058
 800106c:	4002006c 	.word	0x4002006c
 8001070:	2304      	movs	r3, #4
 8001072:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2211      	movs	r2, #17
 8001078:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_DMA_IRQHandler+0x280>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800108c:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <HAL_DMA_IRQHandler+0x3c4>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <HAL_DMA_IRQHandler+0x3c8>)
 8001098:	4299      	cmp	r1, r3
 800109a:	d02e      	beq.n	80010fa <HAL_DMA_IRQHandler+0x2ee>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <HAL_DMA_IRQHandler+0x3cc>)
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d026      	beq.n	80010f6 <HAL_DMA_IRQHandler+0x2ea>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <HAL_DMA_IRQHandler+0x3d0>)
 80010b0:	4299      	cmp	r1, r3
 80010b2:	d01d      	beq.n	80010f0 <HAL_DMA_IRQHandler+0x2e4>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <HAL_DMA_IRQHandler+0x3d4>)
 80010bc:	4299      	cmp	r1, r3
 80010be:	d014      	beq.n	80010ea <HAL_DMA_IRQHandler+0x2de>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <HAL_DMA_IRQHandler+0x3d8>)
 80010c8:	4299      	cmp	r1, r3
 80010ca:	d00b      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x2d8>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <HAL_DMA_IRQHandler+0x3dc>)
 80010d4:	4299      	cmp	r1, r3
 80010d6:	d102      	bne.n	80010de <HAL_DMA_IRQHandler+0x2d2>
 80010d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010dc:	e00e      	b.n	80010fc <HAL_DMA_IRQHandler+0x2f0>
 80010de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010e2:	e00b      	b.n	80010fc <HAL_DMA_IRQHandler+0x2f0>
 80010e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e8:	e008      	b.n	80010fc <HAL_DMA_IRQHandler+0x2f0>
 80010ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ee:	e005      	b.n	80010fc <HAL_DMA_IRQHandler+0x2f0>
 80010f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f4:	e002      	b.n	80010fc <HAL_DMA_IRQHandler+0x2f0>
 80010f6:	2320      	movs	r3, #32
 80010f8:	e000      	b.n	80010fc <HAL_DMA_IRQHandler+0x2f0>
 80010fa:	2302      	movs	r3, #2
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d061      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x3ba>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d05a      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x3ba>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	2b00      	cmp	r3, #0
 800111c:	d107      	bne.n	800112e <HAL_DMA_IRQHandler+0x322>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	f022 0202 	bic.w	r2, r2, #2
 800112c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800112e:	4a28      	ldr	r2, [pc, #160]	; (80011d0 <HAL_DMA_IRQHandler+0x3c4>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <HAL_DMA_IRQHandler+0x3c8>)
 8001138:	4299      	cmp	r1, r3
 800113a:	d02e      	beq.n	800119a <HAL_DMA_IRQHandler+0x38e>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <HAL_DMA_IRQHandler+0x3cc>)
 8001144:	4299      	cmp	r1, r3
 8001146:	d026      	beq.n	8001196 <HAL_DMA_IRQHandler+0x38a>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <HAL_DMA_IRQHandler+0x3d0>)
 8001150:	4299      	cmp	r1, r3
 8001152:	d01d      	beq.n	8001190 <HAL_DMA_IRQHandler+0x384>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <HAL_DMA_IRQHandler+0x3d4>)
 800115c:	4299      	cmp	r1, r3
 800115e:	d014      	beq.n	800118a <HAL_DMA_IRQHandler+0x37e>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_DMA_IRQHandler+0x3d8>)
 8001168:	4299      	cmp	r1, r3
 800116a:	d00b      	beq.n	8001184 <HAL_DMA_IRQHandler+0x378>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_DMA_IRQHandler+0x3dc>)
 8001174:	4299      	cmp	r1, r3
 8001176:	d102      	bne.n	800117e <HAL_DMA_IRQHandler+0x372>
 8001178:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800117c:	e00e      	b.n	800119c <HAL_DMA_IRQHandler+0x390>
 800117e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001182:	e00b      	b.n	800119c <HAL_DMA_IRQHandler+0x390>
 8001184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001188:	e008      	b.n	800119c <HAL_DMA_IRQHandler+0x390>
 800118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118e:	e005      	b.n	800119c <HAL_DMA_IRQHandler+0x390>
 8001190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001194:	e002      	b.n	800119c <HAL_DMA_IRQHandler+0x390>
 8001196:	2320      	movs	r3, #32
 8001198:	e000      	b.n	800119c <HAL_DMA_IRQHandler+0x390>
 800119a:	2302      	movs	r3, #2
 800119c:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;    
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x3ba>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	4798      	blx	r3
      }
    }
  }
}  
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020008 	.word	0x40020008
 80011d8:	4002001c 	.word	0x4002001c
 80011dc:	40020030 	.word	0x40020030
 80011e0:	40020044 	.word	0x40020044
 80011e4:	40020058 	.word	0x40020058
 80011e8:	4002006c 	.word	0x4002006c

080011ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b10      	cmp	r3, #16
 8001208:	d108      	bne.n	800121c <DMA_SetConfig+0x30>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800121a:	e007      	b.n	800122c <DMA_SetConfig+0x40>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	60da      	str	r2, [r3, #12]
  }
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b09c      	sub	sp, #112	; 0x70
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e16f      	b.n	8001560 <HAL_ADC_Init+0x300>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	d175      	bne.n	800137e <HAL_ADC_Init+0x11e>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	2b00      	cmp	r3, #0
 8001298:	d152      	bne.n	8001340 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fb29 	bl	800090c <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d13b      	bne.n	8001340 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fe73 	bl	8001fb4 <ADC_Disable>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d12f      	bne.n	8001340 <HAL_ADC_Init+0xe0>
 80012e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d12b      	bne.n	8001340 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012f0:	f023 0302 	bic.w	r3, r3, #2
 80012f4:	f043 0202 	orr.w	r2, r3, #2
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	6892      	ldr	r2, [r2, #8]
 8001306:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800130a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01 */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	6892      	ldr	r2, [r2, #8]
 8001316:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800131a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800131c:	4b92      	ldr	r3, [pc, #584]	; (8001568 <HAL_ADC_Init+0x308>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a92      	ldr	r2, [pc, #584]	; (800156c <HAL_ADC_Init+0x30c>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0c9a      	lsrs	r2, r3, #18
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0)
 8001332:	e002      	b.n	800133a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3b01      	subs	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f9      	bne.n	8001334 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <HAL_ADC_Init+0xfc>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001358:	2b00      	cmp	r3, #0
 800135a:	d010      	beq.n	800137e <HAL_ADC_Init+0x11e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	f023 0312 	bic.w	r3, r3, #18
 8001364:	f043 0210 	orr.w	r2, r3, #16
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001370:	f043 0201 	orr.w	r2, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 80dd 	bne.w	8001546 <HAL_ADC_Init+0x2e6>
 800138c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001390:	2b00      	cmp	r3, #0
 8001392:	f040 80d8 	bne.w	8001546 <HAL_ADC_Init+0x2e6>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0304 	and.w	r3, r3, #4
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
      (tmp_hal_status == HAL_OK)                                &&
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f040 80d0 	bne.w	8001546 <HAL_ADC_Init+0x2e6>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013ae:	f043 0202 	orr.w	r2, r3, #2
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b6:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <HAL_ADC_Init+0x310>)
 80013b8:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c2:	d102      	bne.n	80013ca <HAL_ADC_Init+0x16a>
 80013c4:	4b6b      	ldr	r3, [pc, #428]	; (8001574 <HAL_ADC_Init+0x314>)
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	e002      	b.n	80013d0 <HAL_ADC_Init+0x170>
 80013ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013ce:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d108      	bne.n	80013f0 <HAL_ADC_Init+0x190>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_ADC_Init+0x190>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <HAL_ADC_Init+0x192>
 80013f0:	2300      	movs	r3, #0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d11c      	bne.n	8001430 <HAL_ADC_Init+0x1d0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013f6:	693b      	ldr	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d010      	beq.n	800141e <HAL_ADC_Init+0x1be>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d107      	bne.n	8001418 <HAL_ADC_Init+0x1b8>
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_ADC_Init+0x1b8>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_ADC_Init+0x1ba>
 8001418:	2300      	movs	r3, #0
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800141a:	2b00      	cmp	r3, #0
 800141c:	d108      	bne.n	8001430 <HAL_ADC_Init+0x1d0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800141e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	431a      	orrs	r2, r3
 800142c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800142e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	035a      	lsls	r2, r3, #13
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143a:	2b01      	cmp	r3, #1
 800143c:	d002      	beq.n	8001444 <HAL_ADC_Init+0x1e4>
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	e000      	b.n	8001446 <HAL_ADC_Init+0x1e6>
 8001444:	2300      	movs	r3, #0
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	4313      	orrs	r3, r2
 8001454:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001456:	4313      	orrs	r3, r2
 8001458:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	2b01      	cmp	r3, #1
 8001460:	d11b      	bne.n	800149a <HAL_ADC_Init+0x23a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_ADC_Init+0x21e>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	3b01      	subs	r3, #1
 8001470:	045a      	lsls	r2, r3, #17
 8001472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001474:	4313      	orrs	r3, r2
 8001476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147a:	66bb      	str	r3, [r7, #104]	; 0x68
 800147c:	e00d      	b.n	800149a <HAL_ADC_Init+0x23a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001486:	f043 0220 	orr.w	r2, r3, #32
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d007      	beq.n	80014b2 <HAL_ADC_Init+0x252>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4313      	orrs	r3, r2
 80014ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014ae:	4313      	orrs	r3, r2
 80014b0:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d113      	bne.n	80014e8 <HAL_ADC_Init+0x288>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ce:	f023 0302 	bic.w	r3, r3, #2
 80014d2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	039a      	lsls	r2, r3, #14
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4313      	orrs	r3, r2
 80014e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014e4:	4313      	orrs	r3, r2
 80014e6:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68d9      	ldr	r1, [r3, #12]
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_ADC_Init+0x318>)
 80014f4:	400b      	ands	r3, r1
 80014f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80014f8:	430b      	orrs	r3, r1
 80014fa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d10c      	bne.n	800151e <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800150e:	f022 010f 	bic.w	r1, r2, #15
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6a12      	ldr	r2, [r2, #32]
 8001516:	3a01      	subs	r2, #1
 8001518:	430a      	orrs	r2, r1
 800151a:	631a      	str	r2, [r3, #48]	; 0x30
 800151c:	e007      	b.n	800152e <HAL_ADC_Init+0x2ce>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001528:	f022 020f 	bic.w	r2, r2, #15
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f023 0303 	bic.w	r3, r3, #3
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	645a      	str	r2, [r3, #68]	; 0x44
 8001544:	e00a      	b.n	800155c <HAL_ADC_Init+0x2fc>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f023 0312 	bic.w	r3, r3, #18
 800154e:	f043 0210 	orr.w	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001556:	2301      	movs	r3, #1
 8001558:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800155c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001560:	4618      	mov	r0, r3
 8001562:	3770      	adds	r7, #112	; 0x70
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000428 	.word	0x20000428
 800156c:	431bde83 	.word	0x431bde83
 8001570:	50000300 	.word	0x50000300
 8001574:	50000100 	.word	0x50000100
 8001578:	fff0c007 	.word	0xfff0c007

0800157c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 80b8 	bne.w	800170c <HAL_ADC_Start_DMA+0x190>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Start_DMA+0x2e>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e0b3      	b.n	8001712 <HAL_ADC_Start_DMA+0x196>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80015b2:	4b5a      	ldr	r3, [pc, #360]	; (800171c <HAL_ADC_Start_DMA+0x1a0>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 809f 	bne.w	80016fe <HAL_ADC_Start_DMA+0x182>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 fc99 	bl	8001ef8 <ADC_Enable>
 80015c6:	4603      	mov	r3, r0
 80015c8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f040 8091 	bne.w	80016f4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015e6:	4b4d      	ldr	r3, [pc, #308]	; (800171c <HAL_ADC_Start_DMA+0x1a0>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <HAL_ADC_Start_DMA+0x80>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015fa:	d115      	bne.n	8001628 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d027      	beq.n	8001666 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800161e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001626:	e01e      	b.n	8001666 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800163c:	d004      	beq.n	8001648 <HAL_ADC_Start_DMA+0xcc>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a37      	ldr	r2, [pc, #220]	; (8001720 <HAL_ADC_Start_DMA+0x1a4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d10e      	bne.n	8001666 <HAL_ADC_Start_DMA+0xea>
 8001648:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800165e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	645a      	str	r2, [r3, #68]	; 0x44
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_ADC_Start_DMA+0x104>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001676:	f023 0206 	bic.w	r2, r3, #6
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	649a      	str	r2, [r3, #72]	; 0x48
 800167e:	e002      	b.n	8001686 <HAL_ADC_Start_DMA+0x10a>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	649a      	str	r2, [r3, #72]	; 0x48
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001692:	4a24      	ldr	r2, [pc, #144]	; (8001724 <HAL_ADC_Start_DMA+0x1a8>)
 8001694:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <HAL_ADC_Start_DMA+0x1ac>)
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a2:	4a22      	ldr	r2, [pc, #136]	; (800172c <HAL_ADC_Start_DMA+0x1b0>)
 80016a4:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	221c      	movs	r2, #28
 80016ac:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	6852      	ldr	r2, [r2, #4]
 80016b8:	f042 0210 	orr.w	r2, r2, #16
 80016bc:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	68d2      	ldr	r2, [r2, #12]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3340      	adds	r3, #64	; 0x40
 80016d8:	4619      	mov	r1, r3
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f7ff fb4b 	bl	8000d78 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	6892      	ldr	r2, [r2, #8]
 80016ec:	f042 0204 	orr.w	r2, r2, #4
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	e00d      	b.n	8001710 <HAL_ADC_Start_DMA+0x194>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016fc:	e008      	b.n	8001710 <HAL_ADC_Start_DMA+0x194>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800170a:	e001      	b.n	8001710 <HAL_ADC_Start_DMA+0x194>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800170c:	2302      	movs	r3, #2
 800170e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001710:	7dfb      	ldrb	r3, [r7, #23]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	50000300 	.word	0x50000300
 8001720:	50000100 	.word	0x50000100
 8001724:	08001e2d 	.word	0x08001e2d
 8001728:	08001ea9 	.word	0x08001ea9
 800172c:	08001ec5 	.word	0x08001ec5

08001730 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001730:	b490      	push	{r4, r7}
 8001732:	b09c      	sub	sp, #112	; 0x70
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x22>
 800174e:	2302      	movs	r3, #2
 8001750:	e2a3      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x56a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	f040 8287 	bne.w	8001c78 <HAL_ADC_ConfigChannel+0x548>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4 */
    if (sConfig->Rank < 5)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b04      	cmp	r3, #4
 8001770:	d81c      	bhi.n	80017ac <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6819      	ldr	r1, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	461a      	mov	r2, r3
 800178a:	231f      	movs	r3, #31
 800178c:	4093      	lsls	r3, r2
 800178e:	43db      	mvns	r3, r3
 8001790:	4018      	ands	r0, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681c      	ldr	r4, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa04 f303 	lsl.w	r3, r4, r3
 80017a6:	4303      	orrs	r3, r0
 80017a8:	630b      	str	r3, [r1, #48]	; 0x30
 80017aa:	e063      	b.n	8001874 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9 */
    else if (sConfig->Rank < 10)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d81e      	bhi.n	80017f2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	3b1e      	subs	r3, #30
 80017cc:	221f      	movs	r2, #31
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4018      	ands	r0, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681c      	ldr	r4, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	3b1e      	subs	r3, #30
 80017e8:	fa04 f303 	lsl.w	r3, r4, r3
 80017ec:	4303      	orrs	r3, r0
 80017ee:	634b      	str	r3, [r1, #52]	; 0x34
 80017f0:	e040      	b.n	8001874 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14 */
    else if (sConfig->Rank < 15)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b0e      	cmp	r3, #14
 80017f8:	d81e      	bhi.n	8001838 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	3b3c      	subs	r3, #60	; 0x3c
 8001812:	221f      	movs	r2, #31
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4018      	ands	r0, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681c      	ldr	r4, [r3, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	3b3c      	subs	r3, #60	; 0x3c
 800182e:	fa04 f303 	lsl.w	r3, r4, r3
 8001832:	4303      	orrs	r3, r0
 8001834:	638b      	str	r3, [r1, #56]	; 0x38
 8001836:	e01d      	b.n	8001874 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16 */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6819      	ldr	r1, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	3b5a      	subs	r3, #90	; 0x5a
 8001850:	221f      	movs	r2, #31
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	4018      	ands	r0, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681c      	ldr	r4, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	3b5a      	subs	r3, #90	; 0x5a
 800186c:	fa04 f303 	lsl.w	r3, r4, r3
 8001870:	4303      	orrs	r3, r0
 8001872:	63cb      	str	r3, [r1, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b00      	cmp	r3, #0
 8001880:	f040 80e5 	bne.w	8001a4e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18 */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b09      	cmp	r3, #9
 800188a:	d91c      	bls.n	80018c6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6819      	ldr	r1, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6998      	ldr	r0, [r3, #24]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	3b1e      	subs	r3, #30
 80018a2:	2207      	movs	r2, #7
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4018      	ands	r0, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689c      	ldr	r4, [r3, #8]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	3b1e      	subs	r3, #30
 80018bc:	fa04 f303 	lsl.w	r3, r4, r3
 80018c0:	4303      	orrs	r3, r0
 80018c2:	618b      	str	r3, [r1, #24]
 80018c4:	e019      	b.n	80018fa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9 */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6819      	ldr	r1, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6958      	ldr	r0, [r3, #20]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	2207      	movs	r2, #7
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4018      	ands	r0, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689c      	ldr	r4, [r3, #8]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	fa04 f303 	lsl.w	r3, r4, r3
 80018f6:	4303      	orrs	r3, r0
 80018f8:	614b      	str	r3, [r1, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 0318 	and.w	r3, r3, #24
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	3b01      	subs	r3, #1
 8001918:	2b03      	cmp	r3, #3
 800191a:	d84f      	bhi.n	80019bc <HAL_ADC_ConfigChannel+0x28c>
 800191c:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <HAL_ADC_ConfigChannel+0x1f4>)
 800191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001922:	bf00      	nop
 8001924:	08001935 	.word	0x08001935
 8001928:	08001957 	.word	0x08001957
 800192c:	08001979 	.word	0x08001979
 8001930:	0800199b 	.word	0x0800199b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1 */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800193e:	4b9c      	ldr	r3, [pc, #624]	; (8001bb0 <HAL_ADC_ConfigChannel+0x480>)
 8001940:	400b      	ands	r3, r1
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	6809      	ldr	r1, [r1, #0]
 8001946:	0688      	lsls	r0, r1, #26
 8001948:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800194a:	4301      	orrs	r1, r0
 800194c:	430b      	orrs	r3, r1
 800194e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001952:	6613      	str	r3, [r2, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001954:	e07b      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2 */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001960:	4b93      	ldr	r3, [pc, #588]	; (8001bb0 <HAL_ADC_ConfigChannel+0x480>)
 8001962:	400b      	ands	r3, r1
 8001964:	6839      	ldr	r1, [r7, #0]
 8001966:	6809      	ldr	r1, [r1, #0]
 8001968:	0688      	lsls	r0, r1, #26
 800196a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800196c:	4301      	orrs	r1, r0
 800196e:	430b      	orrs	r3, r1
 8001970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001974:	6653      	str	r3, [r2, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001976:	e06a      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3 */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001982:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <HAL_ADC_ConfigChannel+0x480>)
 8001984:	400b      	ands	r3, r1
 8001986:	6839      	ldr	r1, [r7, #0]
 8001988:	6809      	ldr	r1, [r1, #0]
 800198a:	0688      	lsls	r0, r1, #26
 800198c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800198e:	4301      	orrs	r1, r0
 8001990:	430b      	orrs	r3, r1
 8001992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001996:	6693      	str	r3, [r2, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001998:	e059      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4 */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80019a4:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <HAL_ADC_ConfigChannel+0x480>)
 80019a6:	400b      	ands	r3, r1
 80019a8:	6839      	ldr	r1, [r7, #0]
 80019aa:	6809      	ldr	r1, [r1, #0]
 80019ac:	0688      	lsls	r0, r1, #26
 80019ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80019b0:	4301      	orrs	r1, r0
 80019b2:	430b      	orrs	r3, r1
 80019b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019b8:	66d3      	str	r3, [r2, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019ba:	e048      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	069b      	lsls	r3, r3, #26
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d107      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80019da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019de:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	069b      	lsls	r3, r3, #26
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d107      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80019fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a02:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	069b      	lsls	r3, r3, #26
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d107      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a26:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	069b      	lsls	r3, r3, #26
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001a46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a4a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a4c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d108      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x33e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_ADC_ConfigChannel+0x33e>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x340>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 810c 	bne.w	8001c8e <HAL_ADC_ConfigChannel+0x55e>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d00f      	beq.n	8001a9e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	2001      	movs	r0, #1
 8001a90:	fa00 f202 	lsl.w	r2, r0, r2
 8001a94:	43d2      	mvns	r2, r2
 8001a96:	400a      	ands	r2, r1
 8001a98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a9c:	e04a      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x404>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	2001      	movs	r0, #1
 8001ab0:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18 */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b09      	cmp	r3, #9
 8001ac0:	d91c      	bls.n	8001afc <HAL_ADC_ConfigChannel+0x3cc>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6998      	ldr	r0, [r3, #24]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3b1b      	subs	r3, #27
 8001ad8:	2207      	movs	r2, #7
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	4018      	ands	r0, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689c      	ldr	r4, [r3, #8]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	3b1b      	subs	r3, #27
 8001af2:	fa04 f303 	lsl.w	r3, r4, r3
 8001af6:	4303      	orrs	r3, r0
 8001af8:	618b      	str	r3, [r1, #24]
 8001afa:	e01b      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x404>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1) );
      }
      else /* For channels 1 to 9 */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6958      	ldr	r0, [r3, #20]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	2207      	movs	r2, #7
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4018      	ands	r0, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689c      	ldr	r4, [r3, #8]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	fa04 f303 	lsl.w	r3, r4, r3
 8001b30:	4303      	orrs	r3, r0
 8001b32:	614b      	str	r3, [r1, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_ADC_ConfigChannel+0x484>)
 8001b36:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d105      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x41c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d015      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0x448>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b50:	2b11      	cmp	r3, #17
 8001b52:	d105      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x430>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0x448>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b64:	2b12      	cmp	r3, #18
 8001b66:	f040 8092 	bne.w	8001c8e <HAL_ADC_ConfigChannel+0x55e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 808b 	bne.w	8001c8e <HAL_ADC_ConfigChannel+0x55e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b80:	d102      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x458>
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_ADC_ConfigChannel+0x488>)
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	e002      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x45e>
 8001b88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b8c:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d10f      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x48c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d008      	beq.n	8001bbc <HAL_ADC_ConfigChannel+0x48c>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e007      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x48e>
 8001bae:	bf00      	nop
 8001bb0:	83fff000 	.word	0x83fff000
 8001bb4:	50000300 	.word	0x50000300
 8001bb8:	50000100 	.word	0x50000100
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d150      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x534>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bc2:	693b      	ldr	r3, [r7, #16]
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d010      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x4ba>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x4b4>
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0x4b4>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x4b6>
 8001be4:	2300      	movs	r3, #0
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d13c      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x534>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d11d      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x4fe>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bfa:	d118      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x4fe>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c06:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_ADC_ConfigChannel+0x574>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a26      	ldr	r2, [pc, #152]	; (8001ca8 <HAL_ADC_ConfigChannel+0x578>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0c9a      	lsrs	r2, r3, #18
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0)
 8001c1e:	e002      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x4f6>
          {
            wait_loop_index--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f9      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x4f0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c2c:	e02e      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x55c>
            wait_loop_index--;
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b11      	cmp	r3, #17
 8001c34:	d10b      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x51e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c3e:	d106      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x51e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c4a:	609a      	str	r2, [r3, #8]
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c4c:	e01e      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x55c>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b12      	cmp	r3, #18
 8001c54:	d11a      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x55c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c60:	609a      	str	r2, [r3, #8]
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c62:	e013      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x55c>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f043 0220 	orr.w	r2, r3, #32
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001c76:	e00a      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x55e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001c8a:	e000      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x55e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c8c:	bf00      	nop
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001c96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3770      	adds	r7, #112	; 0x70
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc90      	pop	{r4, r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	20000428 	.word	0x20000428
 8001ca8:	431bde83 	.word	0x431bde83

08001cac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b09b      	sub	sp, #108	; 0x6c
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e0a5      	b.n	8001e16 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cda:	d102      	bne.n	8001ce2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001cdc:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8001ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ce6:	60fb      	str	r3, [r7, #12]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d17e      	bne.n	8001df4 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d178      	bne.n	8001df4 <HAL_ADCEx_MultiModeConfigChannel+0x148>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d02:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8001d04:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03f      	beq.n	8001d8e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6859      	ldr	r1, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1e:	035b      	lsls	r3, r3, #13
 8001d20:	430b      	orrs	r3, r1
 8001d22:	431a      	orrs	r2, r3
 8001d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d26:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d108      	bne.n	8001d48 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d15c      	bne.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d107      	bne.n	8001d6a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 8001d6a:	2300      	movs	r3, #0
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d14b      	bne.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d78:	f023 030f 	bic.w	r3, r3, #15
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	6811      	ldr	r1, [r2, #0]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	6892      	ldr	r2, [r2, #8]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d8a:	609a      	str	r2, [r3, #8]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d8c:	e03c      	b.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d98:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d108      	bne.n	8001dba <HAL_ADCEx_MultiModeConfigChannel+0x10e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_ADCEx_MultiModeConfigChannel+0x10e>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d123      	bne.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d107      	bne.n	8001ddc <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001ddc:	2300      	movs	r3, #0
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d112      	bne.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dea:	f023 030f 	bic.w	r3, r3, #15
 8001dee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001df0:	6093      	str	r3, [r2, #8]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001df2:	e009      	b.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e06:	e000      	b.n	8001e0a <HAL_ADCEx_MultiModeConfigChannel+0x15e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e08:	bf00      	nop
    tmp_hal_status = HAL_ERROR;
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001e12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
} 
 8001e16:	4618      	mov	r0, r3
 8001e18:	376c      	adds	r7, #108	; 0x6c
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	50000100 	.word	0x50000100
 8001e28:	50000300 	.word	0x50000300

08001e2c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d126      	bne.n	8001e94 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d115      	bne.n	8001e8c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	69db      	ldr	r3, [r3, #28]
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d111      	bne.n	8001e8c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f7fe fc29 	bl	80006e4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e92:	e004      	b.n	8001e9e <ADC_DMAConvCplt+0x72>
    HAL_ADC_ConvCpltCallback(hadc); 
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop

08001ea8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff f9be 	bl	8001238 <HAL_ADC_ConvHalfCpltCallback>
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee2:	f043 0204 	orr.w	r2, r3, #4
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff f9ae 	bl	800124c <HAL_ADC_ErrorCallback>
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d108      	bne.n	8001f24 <ADC_Enable+0x2c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <ADC_Enable+0x2c>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <ADC_Enable+0x2e>
 8001f24:	2300      	movs	r3, #0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d13c      	bne.n	8001fa4 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <ADC_Enable+0xb8>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00d      	beq.n	8001f54 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	f043 0210 	orr.w	r2, r3, #16
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e028      	b.n	8001fa6 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	6892      	ldr	r2, [r2, #8]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001f64:	f7fe fd66 	bl	8000a34 <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f6a:	e014      	b.n	8001f96 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f6c:	f7fe fd62 	bl	8000a34 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d90d      	bls.n	8001f96 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f043 0210 	orr.w	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e007      	b.n	8001fa6 <ADC_Enable+0xae>
    __HAL_ADC_ENABLE(hadc);
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0e3      	beq.n	8001f6c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	8000003f 	.word	0x8000003f

08001fb4 <ADC_Disable>:
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d108      	bne.n	8001fe0 <ADC_Disable+0x2c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <ADC_Disable+0x2c>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <ADC_Disable+0x2e>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d040      	beq.n	8002068 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030d 	and.w	r3, r3, #13
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d10f      	bne.n	8002014 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	6892      	ldr	r2, [r2, #8]
 8001ffe:	f042 0202 	orr.w	r2, r2, #2
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2203      	movs	r2, #3
 800200a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800200c:	f7fe fd12 	bl	8000a34 <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002012:	e022      	b.n	800205a <ADC_Disable+0xa6>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	f043 0210 	orr.w	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e01c      	b.n	800206a <ADC_Disable+0xb6>
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002030:	f7fe fd00 	bl	8000a34 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d90d      	bls.n	800205a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f043 0210 	orr.w	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e007      	b.n	800206a <ADC_Disable+0xb6>
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e3      	bne.n	8002030 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800208a:	e14e      	b.n	800232a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2101      	movs	r1, #1
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	4013      	ands	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8140 	beq.w	8002324 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x40>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b12      	cmp	r3, #18
 80020b2:	d123      	bne.n	80020fc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	08da      	lsrs	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3208      	adds	r2, #8
 80020bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	6939      	ldr	r1, [r7, #16]
 80020f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d00b      	beq.n	8002150 <HAL_GPIO_Init+0xdc>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d007      	beq.n	8002150 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002144:	2b11      	cmp	r3, #17
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b12      	cmp	r3, #18
 800214e:	d130      	bne.n	80021b2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002186:	2201      	movs	r2, #1
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0201 	and.w	r2, r3, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 809a 	beq.w	8002324 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f0:	4a55      	ldr	r2, [pc, #340]	; (8002348 <HAL_GPIO_Init+0x2d4>)
 80021f2:	4b55      	ldr	r3, [pc, #340]	; (8002348 <HAL_GPIO_Init+0x2d4>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	4b52      	ldr	r3, [pc, #328]	; (8002348 <HAL_GPIO_Init+0x2d4>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002208:	4a50      	ldr	r2, [pc, #320]	; (800234c <HAL_GPIO_Init+0x2d8>)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3302      	adds	r3, #2
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	220f      	movs	r2, #15
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002232:	d013      	beq.n	800225c <HAL_GPIO_Init+0x1e8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a46      	ldr	r2, [pc, #280]	; (8002350 <HAL_GPIO_Init+0x2dc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00d      	beq.n	8002258 <HAL_GPIO_Init+0x1e4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a45      	ldr	r2, [pc, #276]	; (8002354 <HAL_GPIO_Init+0x2e0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d007      	beq.n	8002254 <HAL_GPIO_Init+0x1e0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a44      	ldr	r2, [pc, #272]	; (8002358 <HAL_GPIO_Init+0x2e4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d101      	bne.n	8002250 <HAL_GPIO_Init+0x1dc>
 800224c:	2303      	movs	r3, #3
 800224e:	e006      	b.n	800225e <HAL_GPIO_Init+0x1ea>
 8002250:	2305      	movs	r3, #5
 8002252:	e004      	b.n	800225e <HAL_GPIO_Init+0x1ea>
 8002254:	2302      	movs	r3, #2
 8002256:	e002      	b.n	800225e <HAL_GPIO_Init+0x1ea>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_GPIO_Init+0x1ea>
 800225c:	2300      	movs	r3, #0
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	f002 0203 	and.w	r2, r2, #3
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	4093      	lsls	r3, r2
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800226e:	4937      	ldr	r1, [pc, #220]	; (800234c <HAL_GPIO_Init+0x2d8>)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227c:	4b37      	ldr	r3, [pc, #220]	; (800235c <HAL_GPIO_Init+0x2e8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022a0:	4a2e      	ldr	r2, [pc, #184]	; (800235c <HAL_GPIO_Init+0x2e8>)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022a6:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_GPIO_Init+0x2e8>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022ca:	4a24      	ldr	r2, [pc, #144]	; (800235c <HAL_GPIO_Init+0x2e8>)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_GPIO_Init+0x2e8>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_GPIO_Init+0x2e8>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_GPIO_Init+0x2e8>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800231e:	4a0f      	ldr	r2, [pc, #60]	; (800235c <HAL_GPIO_Init+0x2e8>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3301      	adds	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	f47f aea9 	bne.w	800208c <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	40010000 	.word	0x40010000
 8002350:	48000400 	.word	0x48000400
 8002354:	48000800 	.word	0x48000800
 8002358:	48000c00 	.word	0x48000c00
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800237c:	e002      	b.n	8002384 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8002396:	af00      	add	r7, sp, #0
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 81e8 	beq.w	8002782 <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023b2:	4bb8      	ldr	r3, [pc, #736]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d00c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023be:	4bb5      	ldr	r3, [pc, #724]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	f040 8082 	bne.w	80024d0 <HAL_RCC_OscConfig+0x140>
 80023cc:	4bb1      	ldr	r3, [pc, #708]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d07b      	beq.n	80024d0 <HAL_RCC_OscConfig+0x140>
 80023d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023e4:	fa93 f2a3 	rbit	r2, r3
 80023e8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023ec:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023f2:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f043 0320 	orr.w	r3, r3, #32
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d102      	bne.n	8002410 <HAL_RCC_OscConfig+0x80>
 800240a:	4ba2      	ldr	r3, [pc, #648]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	e039      	b.n	8002484 <HAL_RCC_OscConfig+0xf4>
 8002410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002414:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800241c:	fa93 f2a3 	rbit	r2, r3
 8002420:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002424:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002426:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f043 0320 	orr.w	r3, r3, #32
 8002436:	b2db      	uxtb	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d102      	bne.n	8002448 <HAL_RCC_OscConfig+0xb8>
 8002442:	4b94      	ldr	r3, [pc, #592]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	e01d      	b.n	8002484 <HAL_RCC_OscConfig+0xf4>
 8002448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002454:	fa93 f2a3 	rbit	r2, r3
 8002458:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800245c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800245e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f043 0320 	orr.w	r3, r3, #32
 800246e:	b2db      	uxtb	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b04      	cmp	r3, #4
 8002478:	d102      	bne.n	8002480 <HAL_RCC_OscConfig+0xf0>
 800247a:	4b86      	ldr	r3, [pc, #536]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	e001      	b.n	8002484 <HAL_RCC_OscConfig+0xf4>
 8002480:	4b84      	ldr	r3, [pc, #528]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002488:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8002490:	fa92 f1a2 	rbit	r1, r2
 8002494:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8002498:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800249a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	fab2 f282 	clz	r2, r2
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	f042 0220 	orr.w	r2, r2, #32
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f002 021f 	and.w	r2, r2, #31
 80024b2:	40d3      	lsrs	r3, r2
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8161 	beq.w	8002780 <HAL_RCC_OscConfig+0x3f0>
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f040 815b 	bne.w	8002780 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f001 b81a 	b.w	8003504 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x15a>
 80024dc:	4a6d      	ldr	r2, [pc, #436]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e030      	b.n	800254c <HAL_RCC_OscConfig+0x1bc>
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0x17e>
 80024f4:	4a67      	ldr	r2, [pc, #412]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 80024f6:	4b67      	ldr	r3, [pc, #412]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4a64      	ldr	r2, [pc, #400]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002502:	4b64      	ldr	r3, [pc, #400]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	e01e      	b.n	800254c <HAL_RCC_OscConfig+0x1bc>
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x1a4>
 800251a:	4a5e      	ldr	r2, [pc, #376]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 800251c:	4b5d      	ldr	r3, [pc, #372]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4a5b      	ldr	r2, [pc, #364]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002528:	4b5a      	ldr	r3, [pc, #360]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0x1bc>
 8002534:	4a57      	ldr	r2, [pc, #348]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002536:	4b57      	ldr	r3, [pc, #348]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4a54      	ldr	r2, [pc, #336]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002542:	4b54      	ldr	r3, [pc, #336]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800254c:	4951      	ldr	r1, [pc, #324]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 800254e:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	f023 020f 	bic.w	r2, r3, #15
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4313      	orrs	r3, r2
 800255e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8083 	beq.w	8002672 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fa62 	bl	8000a34 <HAL_GetTick>
 8002570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002576:	f7fe fa5d 	bl	8000a34 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d902      	bls.n	800258c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	f000 bfbc 	b.w	8003504 <HAL_RCC_OscConfig+0x1174>
 800258c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002590:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80025a0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80025a6:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f043 0320 	orr.w	r3, r3, #32
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d102      	bne.n	80025c4 <HAL_RCC_OscConfig+0x234>
 80025be:	4b35      	ldr	r3, [pc, #212]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	e039      	b.n	8002638 <HAL_RCC_OscConfig+0x2a8>
 80025c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025d0:	fa93 f2a3 	rbit	r2, r3
 80025d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025d8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025da:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f043 0320 	orr.w	r3, r3, #32
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_OscConfig+0x26c>
 80025f6:	4b27      	ldr	r3, [pc, #156]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	e01d      	b.n	8002638 <HAL_RCC_OscConfig+0x2a8>
 80025fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002600:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002610:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002612:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f043 0320 	orr.w	r3, r3, #32
 8002622:	b2db      	uxtb	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b04      	cmp	r3, #4
 800262c:	d102      	bne.n	8002634 <HAL_RCC_OscConfig+0x2a4>
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	e001      	b.n	8002638 <HAL_RCC_OscConfig+0x2a8>
 8002634:	4b17      	ldr	r3, [pc, #92]	; (8002694 <HAL_RCC_OscConfig+0x304>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800263c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8002644:	fa92 f1a2 	rbit	r1, r2
 8002648:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800264c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800264e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f002 021f 	and.w	r2, r2, #31
 8002666:	40d3      	lsrs	r3, r2
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d082      	beq.n	8002576 <HAL_RCC_OscConfig+0x1e6>
 8002670:	e087      	b.n	8002782 <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7fe f9df 	bl	8000a34 <HAL_GetTick>
 8002676:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	e00d      	b.n	8002698 <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267c:	f7fe f9da 	bl	8000a34 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b64      	cmp	r3, #100	; 0x64
 800268a:	d905      	bls.n	8002698 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	f000 bf39 	b.w	8003504 <HAL_RCC_OscConfig+0x1174>
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026a4:	fa93 f2a3 	rbit	r2, r3
 80026a8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026ac:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026b2:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f043 0320 	orr.w	r3, r3, #32
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d102      	bne.n	80026d0 <HAL_RCC_OscConfig+0x340>
 80026ca:	4bb6      	ldr	r3, [pc, #728]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	e039      	b.n	8002744 <HAL_RCC_OscConfig+0x3b4>
 80026d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80026dc:	fa93 f2a3 	rbit	r2, r3
 80026e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026e4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f043 0320 	orr.w	r3, r3, #32
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d102      	bne.n	8002708 <HAL_RCC_OscConfig+0x378>
 8002702:	4ba8      	ldr	r3, [pc, #672]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	e01d      	b.n	8002744 <HAL_RCC_OscConfig+0x3b4>
 8002708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002714:	fa93 f2a3 	rbit	r2, r3
 8002718:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800271c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800271e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f043 0320 	orr.w	r3, r3, #32
 800272e:	b2db      	uxtb	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b04      	cmp	r3, #4
 8002738:	d102      	bne.n	8002740 <HAL_RCC_OscConfig+0x3b0>
 800273a:	4b9a      	ldr	r3, [pc, #616]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	e001      	b.n	8002744 <HAL_RCC_OscConfig+0x3b4>
 8002740:	4b98      	ldr	r3, [pc, #608]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002748:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002750:	fa92 f1a2 	rbit	r1, r2
 8002754:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8002758:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800275a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	fab2 f282 	clz	r2, r2
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f042 0220 	orr.w	r2, r2, #32
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f002 021f 	and.w	r2, r2, #31
 8002772:	40d3      	lsrs	r3, r2
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f af7f 	bne.w	800267c <HAL_RCC_OscConfig+0x2ec>
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 81f4 	beq.w	8002b7a <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002792:	4b84      	ldr	r3, [pc, #528]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00d      	beq.n	80027ba <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800279e:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	f040 8099 	bne.w	80028de <HAL_RCC_OscConfig+0x54e>
 80027ac:	4b7d      	ldr	r3, [pc, #500]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f040 8092 	bne.w	80028de <HAL_RCC_OscConfig+0x54e>
 80027ba:	2302      	movs	r3, #2
 80027bc:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80027c4:	fa93 f2a3 	rbit	r2, r3
 80027c8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80027cc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80027d2:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f043 0320 	orr.w	r3, r3, #32
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d102      	bne.n	80027f0 <HAL_RCC_OscConfig+0x460>
 80027ea:	4b6e      	ldr	r3, [pc, #440]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	e037      	b.n	8002860 <HAL_RCC_OscConfig+0x4d0>
 80027f0:	2302      	movs	r3, #2
 80027f2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80027fa:	fa93 f2a3 	rbit	r2, r3
 80027fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002802:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0320 	orr.w	r3, r3, #32
 8002814:	b2db      	uxtb	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d102      	bne.n	8002826 <HAL_RCC_OscConfig+0x496>
 8002820:	4b60      	ldr	r3, [pc, #384]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x4d0>
 8002826:	2302      	movs	r3, #2
 8002828:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002838:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800283a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	f043 0320 	orr.w	r3, r3, #32
 800284a:	b2db      	uxtb	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b04      	cmp	r3, #4
 8002854:	d102      	bne.n	800285c <HAL_RCC_OscConfig+0x4cc>
 8002856:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	e001      	b.n	8002860 <HAL_RCC_OscConfig+0x4d0>
 800285c:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	2202      	movs	r2, #2
 8002862:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800286a:	fa92 f1a2 	rbit	r1, r2
 800286e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002872:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002874:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	fab2 f282 	clz	r2, r2
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f042 0220 	orr.w	r2, r2, #32
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f002 021f 	and.w	r2, r2, #31
 800288c:	40d3      	lsrs	r3, r2
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <HAL_RCC_OscConfig+0x516>
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d002      	beq.n	80028a6 <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f000 be2f 	b.w	8003504 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a6:	4c3f      	ldr	r4, [pc, #252]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 80028a8:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6959      	ldr	r1, [r3, #20]
 80028b6:	23f8      	movs	r3, #248	; 0xf8
 80028b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80028c0:	fa93 f0a3 	rbit	r0, r3
 80028c4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028c8:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80028ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	4313      	orrs	r3, r2
 80028da:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028dc:	e14d      	b.n	8002b7a <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80b3 	beq.w	8002a50 <HAL_RCC_OscConfig+0x6c0>
 80028ea:	2301      	movs	r3, #1
 80028ec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028f4:	fa93 f2a3 	rbit	r2, r3
 80028f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80028fc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80028fe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002902:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800290e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002912:	461a      	mov	r2, r3
 8002914:	2301      	movs	r3, #1
 8002916:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe f88c 	bl	8000a34 <HAL_GetTick>
 800291c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002922:	f7fe f887 	bl	8000a34 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d902      	bls.n	8002938 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	f000 bde6 	b.w	8003504 <HAL_RCC_OscConfig+0x1174>
 8002938:	2302      	movs	r3, #2
 800293a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002942:	fa93 f2a3 	rbit	r2, r3
 8002946:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800294a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800294c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002950:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f043 0320 	orr.w	r3, r3, #32
 800295c:	b2db      	uxtb	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d102      	bne.n	800296e <HAL_RCC_OscConfig+0x5de>
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	e039      	b.n	80029e2 <HAL_RCC_OscConfig+0x652>
 800296e:	2302      	movs	r3, #2
 8002970:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002978:	fa93 f2a3 	rbit	r2, r3
 800297c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002980:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002982:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f043 0320 	orr.w	r3, r3, #32
 8002992:	b2db      	uxtb	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d104      	bne.n	80029a8 <HAL_RCC_OscConfig+0x618>
 800299e:	4b01      	ldr	r3, [pc, #4]	; (80029a4 <HAL_RCC_OscConfig+0x614>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	e01e      	b.n	80029e2 <HAL_RCC_OscConfig+0x652>
 80029a4:	40021000 	.word	0x40021000
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029ba:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80029bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f043 0320 	orr.w	r3, r3, #32
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d102      	bne.n	80029de <HAL_RCC_OscConfig+0x64e>
 80029d8:	4bb9      	ldr	r3, [pc, #740]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	e001      	b.n	80029e2 <HAL_RCC_OscConfig+0x652>
 80029de:	4bb8      	ldr	r3, [pc, #736]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	2202      	movs	r2, #2
 80029e4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029ec:	fa92 f1a2 	rbit	r1, r2
 80029f0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80029f4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80029f6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	fab2 f282 	clz	r2, r2
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	f042 0220 	orr.w	r2, r2, #32
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f002 021f 	and.w	r2, r2, #31
 8002a0e:	40d3      	lsrs	r3, r2
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d084      	beq.n	8002922 <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4ca9      	ldr	r4, [pc, #676]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 8002a1a:	4ba9      	ldr	r3, [pc, #676]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6959      	ldr	r1, [r3, #20]
 8002a28:	23f8      	movs	r3, #248	; 0xf8
 8002a2a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002a32:	fa93 f0a3 	rbit	r0, r3
 8002a36:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002a3a:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a3c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	6023      	str	r3, [r4, #0]
 8002a4e:	e094      	b.n	8002b7a <HAL_RCC_OscConfig+0x7ea>
 8002a50:	2301      	movs	r3, #1
 8002a52:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a5a:	fa93 f2a3 	rbit	r2, r3
 8002a5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a62:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a68:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002a74:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fd ffd9 	bl	8000a34 <HAL_GetTick>
 8002a82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a88:	f7fd ffd4 	bl	8000a34 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d902      	bls.n	8002a9e <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	f000 bd33 	b.w	8003504 <HAL_RCC_OscConfig+0x1174>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002aa8:	fa93 f2a3 	rbit	r2, r3
 8002aac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ab0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ab2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ab6:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f043 0320 	orr.w	r3, r3, #32
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d102      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x744>
 8002ace:	4b7c      	ldr	r3, [pc, #496]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	e037      	b.n	8002b44 <HAL_RCC_OscConfig+0x7b4>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ae6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ae8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f043 0320 	orr.w	r3, r3, #32
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d102      	bne.n	8002b0a <HAL_RCC_OscConfig+0x77a>
 8002b04:	4b6e      	ldr	r3, [pc, #440]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	e01c      	b.n	8002b44 <HAL_RCC_OscConfig+0x7b4>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b1c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f043 0320 	orr.w	r3, r3, #32
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d102      	bne.n	8002b40 <HAL_RCC_OscConfig+0x7b0>
 8002b3a:	4b61      	ldr	r3, [pc, #388]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	e001      	b.n	8002b44 <HAL_RCC_OscConfig+0x7b4>
 8002b40:	4b5f      	ldr	r3, [pc, #380]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2202      	movs	r2, #2
 8002b46:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002b4e:	fa92 f1a2 	rbit	r1, r2
 8002b52:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002b56:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b58:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	fab2 f282 	clz	r2, r2
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	f042 0220 	orr.w	r2, r2, #32
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f002 021f 	and.w	r2, r2, #31
 8002b70:	40d3      	lsrs	r3, r2
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d186      	bne.n	8002a88 <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8132 	beq.w	8002dee <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8099 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x938>
 8002b96:	2301      	movs	r3, #1
 8002b98:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002ba0:	fa93 f2a3 	rbit	r2, r3
 8002ba4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ba8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002baa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002bae:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <HAL_RCC_OscConfig+0x934>)
 8002bba:	4413      	add	r3, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc2:	f7fd ff37 	bl	8000a34 <HAL_GetTick>
 8002bc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7fd ff32 	bl	8000a34 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d902      	bls.n	8002be2 <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	f000 bc91 	b.w	8003504 <HAL_RCC_OscConfig+0x1174>
 8002be2:	2302      	movs	r3, #2
 8002be4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002bec:	fa93 f2a3 	rbit	r2, r3
 8002bf0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002bf4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002bf6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002bfa:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_RCC_OscConfig+0x888>
 8002c12:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	e037      	b.n	8002c88 <HAL_RCC_OscConfig+0x8f8>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002c2a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c2c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d102      	bne.n	8002c4e <HAL_RCC_OscConfig+0x8be>
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	e01c      	b.n	8002c88 <HAL_RCC_OscConfig+0x8f8>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c60:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c62:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d102      	bne.n	8002c84 <HAL_RCC_OscConfig+0x8f4>
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	e001      	b.n	8002c88 <HAL_RCC_OscConfig+0x8f8>
 8002c84:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_RCC_OscConfig+0x930>)
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2202      	movs	r2, #2
 8002c8a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c92:	fa92 f1a2 	rbit	r1, r2
 8002c96:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c9a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002c9c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	f002 021f 	and.w	r2, r2, #31
 8002cb4:	40d3      	lsrs	r3, r2
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d086      	beq.n	8002bcc <HAL_RCC_OscConfig+0x83c>
 8002cbe:	e096      	b.n	8002dee <HAL_RCC_OscConfig+0xa5e>
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	42420480 	.word	0x42420480
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cda:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002cdc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ce0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4bb5      	ldr	r3, [pc, #724]	; (8002fc0 <HAL_RCC_OscConfig+0xc30>)
 8002cec:	4413      	add	r3, r2
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf4:	f7fd fe9e 	bl	8000a34 <HAL_GetTick>
 8002cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	e009      	b.n	8002d12 <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfe:	f7fd fe99 	bl	8000a34 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e3f8      	b.n	8003504 <HAL_RCC_OscConfig+0x1174>
 8002d12:	2302      	movs	r3, #2
 8002d14:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d24:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d2a:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d102      	bne.n	8002d48 <HAL_RCC_OscConfig+0x9b8>
 8002d42:	4ba0      	ldr	r3, [pc, #640]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	e037      	b.n	8002db8 <HAL_RCC_OscConfig+0xa28>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d5a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d5c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d102      	bne.n	8002d7e <HAL_RCC_OscConfig+0x9ee>
 8002d78:	4b92      	ldr	r3, [pc, #584]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	e01c      	b.n	8002db8 <HAL_RCC_OscConfig+0xa28>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d90:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002d92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d102      	bne.n	8002db4 <HAL_RCC_OscConfig+0xa24>
 8002dae:	4b85      	ldr	r3, [pc, #532]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	e001      	b.n	8002db8 <HAL_RCC_OscConfig+0xa28>
 8002db4:	4b83      	ldr	r3, [pc, #524]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2202      	movs	r2, #2
 8002dba:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8002dc2:	fa92 f1a2 	rbit	r1, r2
 8002dc6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002dca:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002dcc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	fab2 f282 	clz	r2, r2
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f002 021f 	and.w	r2, r2, #31
 8002de4:	40d3      	lsrs	r3, r2
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d187      	bne.n	8002cfe <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 818f 	beq.w	800311c <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e04:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d112      	bne.n	8002e36 <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e10:	4a6c      	ldr	r2, [pc, #432]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	61d3      	str	r3, [r2, #28]
 8002e1c:	4b69      	ldr	r3, [pc, #420]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f107 030c 	add.w	r3, r7, #12
 8002e2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b64      	ldr	r3, [pc, #400]	; (8002fc8 <HAL_RCC_OscConfig+0xc38>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d11a      	bne.n	8002e78 <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e42:	4a61      	ldr	r2, [pc, #388]	; (8002fc8 <HAL_RCC_OscConfig+0xc38>)
 8002e44:	4b60      	ldr	r3, [pc, #384]	; (8002fc8 <HAL_RCC_OscConfig+0xc38>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4e:	f7fd fdf1 	bl	8000a34 <HAL_GetTick>
 8002e52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	e009      	b.n	8002e6c <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e58:	f7fd fdec 	bl	8000a34 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b64      	cmp	r3, #100	; 0x64
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e34b      	b.n	8003504 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	4b56      	ldr	r3, [pc, #344]	; (8002fc8 <HAL_RCC_OscConfig+0xc38>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0ef      	beq.n	8002e58 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0xb00>
 8002e82:	4a50      	ldr	r2, [pc, #320]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002e84:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6213      	str	r3, [r2, #32]
 8002e8e:	e02f      	b.n	8002ef0 <HAL_RCC_OscConfig+0xb60>
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xb24>
 8002e9a:	4a4a      	ldr	r2, [pc, #296]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002e9c:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	6213      	str	r3, [r2, #32]
 8002ea6:	4a47      	ldr	r2, [pc, #284]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002ea8:	4b46      	ldr	r3, [pc, #280]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	e01d      	b.n	8002ef0 <HAL_RCC_OscConfig+0xb60>
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b05      	cmp	r3, #5
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xb48>
 8002ebe:	4a41      	ldr	r2, [pc, #260]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002ec0:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6213      	str	r3, [r2, #32]
 8002eca:	4a3e      	ldr	r2, [pc, #248]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002ecc:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6213      	str	r3, [r2, #32]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCC_OscConfig+0xb60>
 8002ed8:	4a3a      	ldr	r2, [pc, #232]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002eda:	4b3a      	ldr	r3, [pc, #232]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	4a37      	ldr	r2, [pc, #220]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002ee6:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	f023 0304 	bic.w	r3, r3, #4
 8002eee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8087 	beq.w	800300a <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7fd fd9a 	bl	8000a34 <HAL_GetTick>
 8002f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	e00b      	b.n	8002f1e <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fd fd95 	bl	8000a34 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e2f2      	b.n	8003504 <HAL_RCC_OscConfig+0x1174>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f30:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f36:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d102      	bne.n	8002f54 <HAL_RCC_OscConfig+0xbc4>
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	e03d      	b.n	8002fd0 <HAL_RCC_OscConfig+0xc40>
 8002f54:	2302      	movs	r3, #2
 8002f56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002f5e:	fa93 f2a3 	rbit	r2, r3
 8002f62:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f66:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d102      	bne.n	8002f8a <HAL_RCC_OscConfig+0xbfa>
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	e022      	b.n	8002fd0 <HAL_RCC_OscConfig+0xc40>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002f9c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002f9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d108      	bne.n	8002fcc <HAL_RCC_OscConfig+0xc3c>
 8002fba:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <HAL_RCC_OscConfig+0xc34>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	e007      	b.n	8002fd0 <HAL_RCC_OscConfig+0xc40>
 8002fc0:	42420480 	.word	0x42420480
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	4bbf      	ldr	r3, [pc, #764]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002fda:	fa92 f1a2 	rbit	r1, r2
 8002fde:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002fe2:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002fe4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	fab2 f282 	clz	r2, r2
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	f002 021f 	and.w	r2, r2, #31
 8002ffc:	40d3      	lsrs	r3, r2
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	f43f af7f 	beq.w	8002f06 <HAL_RCC_OscConfig+0xb76>
 8003008:	e07e      	b.n	8003108 <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7fd fd13 	bl	8000a34 <HAL_GetTick>
 800300e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7fd fd0e 	bl	8000a34 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e26b      	b.n	8003504 <HAL_RCC_OscConfig+0x1174>
 800302c:	2302      	movs	r3, #2
 800302e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003036:	fa93 f2a3 	rbit	r2, r3
 800303a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800303e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003040:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003044:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003050:	b2db      	uxtb	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d102      	bne.n	8003062 <HAL_RCC_OscConfig+0xcd2>
 800305c:	4b9b      	ldr	r3, [pc, #620]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	e037      	b.n	80030d2 <HAL_RCC_OscConfig+0xd42>
 8003062:	2302      	movs	r3, #2
 8003064:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003074:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003076:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003086:	b2db      	uxtb	r3, r3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d102      	bne.n	8003098 <HAL_RCC_OscConfig+0xd08>
 8003092:	4b8e      	ldr	r3, [pc, #568]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	e01c      	b.n	80030d2 <HAL_RCC_OscConfig+0xd42>
 8003098:	2302      	movs	r3, #2
 800309a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030aa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80030ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d102      	bne.n	80030ce <HAL_RCC_OscConfig+0xd3e>
 80030c8:	4b80      	ldr	r3, [pc, #512]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	e001      	b.n	80030d2 <HAL_RCC_OscConfig+0xd42>
 80030ce:	4b7f      	ldr	r3, [pc, #508]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2202      	movs	r2, #2
 80030d4:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80030dc:	fa92 f1a2 	rbit	r1, r2
 80030e0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80030e4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80030e6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	fab2 f282 	clz	r2, r2
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f002 021f 	and.w	r2, r2, #31
 80030fe:	40d3      	lsrs	r3, r2
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d185      	bne.n	8003014 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003108:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4a6e      	ldr	r2, [pc, #440]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 8003112:	4b6e      	ldr	r3, [pc, #440]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 81ed 	beq.w	8003502 <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b08      	cmp	r3, #8
 8003132:	f000 81e4 	beq.w	80034fe <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	2b02      	cmp	r3, #2
 800313e:	f040 8144 	bne.w	80033ca <HAL_RCC_OscConfig+0x103a>
 8003142:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003146:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800314e:	fa93 f2a3 	rbit	r2, r3
 8003152:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003156:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003158:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800315c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8003168:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800316c:	461a      	mov	r2, r3
 800316e:	2300      	movs	r3, #0
 8003170:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003172:	f7fd fc5f 	bl	8000a34 <HAL_GetTick>
 8003176:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317a:	e009      	b.n	8003190 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7fd fc5a 	bl	8000a34 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1b9      	b.n	8003504 <HAL_RCC_OscConfig+0x1174>
 8003190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003194:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800319c:	fa93 f2a3 	rbit	r2, r3
 80031a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031a4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80031a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031aa:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f043 0320 	orr.w	r3, r3, #32
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d102      	bne.n	80031c8 <HAL_RCC_OscConfig+0xe38>
 80031c2:	4b42      	ldr	r3, [pc, #264]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	e039      	b.n	800323c <HAL_RCC_OscConfig+0xeac>
 80031c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80031d4:	fa93 f2a3 	rbit	r2, r3
 80031d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031dc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80031de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f043 0320 	orr.w	r3, r3, #32
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d102      	bne.n	8003200 <HAL_RCC_OscConfig+0xe70>
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	e01d      	b.n	800323c <HAL_RCC_OscConfig+0xeac>
 8003200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003204:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800320c:	fa93 f2a3 	rbit	r2, r3
 8003210:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003214:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003216:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f043 0320 	orr.w	r3, r3, #32
 8003226:	b2db      	uxtb	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b04      	cmp	r3, #4
 8003230:	d102      	bne.n	8003238 <HAL_RCC_OscConfig+0xea8>
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	e001      	b.n	800323c <HAL_RCC_OscConfig+0xeac>
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003240:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003248:	fa92 f1a2 	rbit	r1, r2
 800324c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003250:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003252:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f042 0220 	orr.w	r2, r2, #32
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	f002 021f 	and.w	r2, r2, #31
 800326a:	40d3      	lsrs	r3, r2
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d183      	bne.n	800317c <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003274:	4815      	ldr	r0, [pc, #84]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <HAL_RCC_OscConfig+0xf3c>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	430b      	orrs	r3, r1
 800328c:	4313      	orrs	r3, r2
 800328e:	6043      	str	r3, [r0, #4]
 8003290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003294:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800329c:	fa93 f2a3 	rbit	r2, r3
 80032a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032a4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80032a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032aa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80032b6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80032ba:	461a      	mov	r2, r3
 80032bc:	2301      	movs	r3, #1
 80032be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fd fbb8 	bl	8000a34 <HAL_GetTick>
 80032c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c8:	e00c      	b.n	80032e4 <HAL_RCC_OscConfig+0xf54>
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fd fbb0 	bl	8000a34 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e10f      	b.n	8003504 <HAL_RCC_OscConfig+0x1174>
 80032e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80032f0:	fa93 f2a3 	rbit	r2, r3
 80032f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032f8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80032fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032fe:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	f043 0320 	orr.w	r3, r3, #32
 800330a:	b2db      	uxtb	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_RCC_OscConfig+0xf8c>
 8003316:	4b7e      	ldr	r3, [pc, #504]	; (8003510 <HAL_RCC_OscConfig+0x1180>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	e039      	b.n	8003390 <HAL_RCC_OscConfig+0x1000>
 800331c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003320:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003328:	fa93 f2a3 	rbit	r2, r3
 800332c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003330:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f043 0320 	orr.w	r3, r3, #32
 8003342:	b2db      	uxtb	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d102      	bne.n	8003354 <HAL_RCC_OscConfig+0xfc4>
 800334e:	4b70      	ldr	r3, [pc, #448]	; (8003510 <HAL_RCC_OscConfig+0x1180>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	e01d      	b.n	8003390 <HAL_RCC_OscConfig+0x1000>
 8003354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003358:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003360:	fa93 f2a3 	rbit	r2, r3
 8003364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003368:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800336a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f043 0320 	orr.w	r3, r3, #32
 800337a:	b2db      	uxtb	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b04      	cmp	r3, #4
 8003384:	d102      	bne.n	800338c <HAL_RCC_OscConfig+0xffc>
 8003386:	4b62      	ldr	r3, [pc, #392]	; (8003510 <HAL_RCC_OscConfig+0x1180>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	e001      	b.n	8003390 <HAL_RCC_OscConfig+0x1000>
 800338c:	4b60      	ldr	r3, [pc, #384]	; (8003510 <HAL_RCC_OscConfig+0x1180>)
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003394:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800339c:	fa92 f1a2 	rbit	r1, r2
 80033a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033a4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80033a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	fab2 f282 	clz	r2, r2
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f042 0220 	orr.w	r2, r2, #32
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f002 021f 	and.w	r2, r2, #31
 80033be:	40d3      	lsrs	r3, r2
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d083      	beq.n	80032d0 <HAL_RCC_OscConfig+0xf40>
 80033c8:	e09b      	b.n	8003502 <HAL_RCC_OscConfig+0x1172>
 80033ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80033d6:	fa93 f2a3 	rbit	r2, r3
 80033da:	f107 0320 	add.w	r3, r7, #32
 80033de:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80033e0:	f107 0320 	add.w	r3, r7, #32
 80033e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80033f0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80033f4:	461a      	mov	r2, r3
 80033f6:	2300      	movs	r3, #0
 80033f8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fd fb1b 	bl	8000a34 <HAL_GetTick>
 80033fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003402:	e009      	b.n	8003418 <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003404:	f7fd fb16 	bl	8000a34 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e075      	b.n	8003504 <HAL_RCC_OscConfig+0x1174>
 8003418:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800341c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003424:	fa93 f2a3 	rbit	r2, r3
 8003428:	f107 031c 	add.w	r3, r7, #28
 800342c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800342e:	f107 031c 	add.w	r3, r7, #28
 8003432:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f043 0320 	orr.w	r3, r3, #32
 800343e:	b2db      	uxtb	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d102      	bne.n	8003450 <HAL_RCC_OscConfig+0x10c0>
 800344a:	4b31      	ldr	r3, [pc, #196]	; (8003510 <HAL_RCC_OscConfig+0x1180>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	e039      	b.n	80034c4 <HAL_RCC_OscConfig+0x1134>
 8003450:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003454:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800345c:	fa93 f2a3 	rbit	r2, r3
 8003460:	f107 0318 	add.w	r3, r7, #24
 8003464:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003466:	f107 0318 	add.w	r3, r7, #24
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f043 0320 	orr.w	r3, r3, #32
 8003476:	b2db      	uxtb	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d102      	bne.n	8003488 <HAL_RCC_OscConfig+0x10f8>
 8003482:	4b23      	ldr	r3, [pc, #140]	; (8003510 <HAL_RCC_OscConfig+0x1180>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	e01d      	b.n	80034c4 <HAL_RCC_OscConfig+0x1134>
 8003488:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800348c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003494:	fa93 f2a3 	rbit	r2, r3
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f043 0320 	orr.w	r3, r3, #32
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d102      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1130>
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <HAL_RCC_OscConfig+0x1180>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	e001      	b.n	80034c4 <HAL_RCC_OscConfig+0x1134>
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_RCC_OscConfig+0x1180>)
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c8:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80034d0:	fa92 f1a2 	rbit	r1, r2
 80034d4:	f107 0210 	add.w	r2, r7, #16
 80034d8:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80034da:	f107 0210 	add.w	r2, r7, #16
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	fab2 f282 	clz	r2, r2
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	f042 0220 	orr.w	r2, r2, #32
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	f002 021f 	and.w	r2, r2, #31
 80034f2:	40d3      	lsrs	r3, r2
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d183      	bne.n	8003404 <HAL_RCC_OscConfig+0x1074>
 80034fc:	e001      	b.n	8003502 <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	f507 7701 	add.w	r7, r7, #516	; 0x204
 800350a:	46bd      	mov	sp, r7
 800350c:	bd90      	pop	{r4, r7, pc}
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b09e      	sub	sp, #120	; 0x78
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003522:	4ba3      	ldr	r3, [pc, #652]	; (80037b0 <HAL_RCC_ClockConfig+0x29c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0207 	and.w	r2, r3, #7
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d210      	bcs.n	8003552 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003530:	499f      	ldr	r1, [pc, #636]	; (80037b0 <HAL_RCC_ClockConfig+0x29c>)
 8003532:	4b9f      	ldr	r3, [pc, #636]	; (80037b0 <HAL_RCC_ClockConfig+0x29c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0207 	bic.w	r2, r3, #7
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003540:	4b9b      	ldr	r3, [pc, #620]	; (80037b0 <HAL_RCC_ClockConfig+0x29c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0207 	and.w	r2, r3, #7
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d001      	beq.n	8003552 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e1d0      	b.n	80038f4 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355e:	4995      	ldr	r1, [pc, #596]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 8003560:	4b94      	ldr	r3, [pc, #592]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 8168 	beq.w	800384e <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d15c      	bne.n	8003640 <HAL_RCC_ClockConfig+0x12c>
 8003586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800358a:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f043 0320 	orr.w	r3, r3, #32
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d102      	bne.n	80035b2 <HAL_RCC_ClockConfig+0x9e>
 80035ac:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	e02d      	b.n	800360e <HAL_RCC_ClockConfig+0xfa>
 80035b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035b6:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f043 0320 	orr.w	r3, r3, #32
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d102      	bne.n	80035de <HAL_RCC_ClockConfig+0xca>
 80035d8:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	e017      	b.n	800360e <HAL_RCC_ClockConfig+0xfa>
 80035de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e2:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f043 0320 	orr.w	r3, r3, #32
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b04      	cmp	r3, #4
 8003602:	d102      	bne.n	800360a <HAL_RCC_ClockConfig+0xf6>
 8003604:	4b6b      	ldr	r3, [pc, #428]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	e001      	b.n	800360e <HAL_RCC_ClockConfig+0xfa>
 800360a:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003612:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003616:	fa92 f2a2 	rbit	r2, r2
 800361a:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800361c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361e:	fab2 f282 	clz	r2, r2
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	f042 0220 	orr.w	r2, r2, #32
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	f002 021f 	and.w	r2, r2, #31
 8003630:	40d3      	lsrs	r3, r2
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	f040 80be 	bne.w	80037b8 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e159      	b.n	80038f4 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d15b      	bne.n	8003700 <HAL_RCC_ClockConfig+0x1ec>
 8003648:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364c:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003650:	fa93 f3a3 	rbit	r3, r3
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f043 0320 	orr.w	r3, r3, #32
 8003662:	b2db      	uxtb	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d102      	bne.n	8003674 <HAL_RCC_ClockConfig+0x160>
 800366e:	4b51      	ldr	r3, [pc, #324]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	e02d      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1bc>
 8003674:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	f043 0320 	orr.w	r3, r3, #32
 800368e:	b2db      	uxtb	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d102      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x18c>
 800369a:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	e017      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1bc>
 80036a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a4:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	fab3 f383 	clz	r3, r3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f043 0320 	orr.w	r3, r3, #32
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d102      	bne.n	80036cc <HAL_RCC_ClockConfig+0x1b8>
 80036c6:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	e001      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1bc>
 80036cc:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036d4:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036d8:	fa92 f2a2 	rbit	r2, r2
 80036dc:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80036de:	6a3a      	ldr	r2, [r7, #32]
 80036e0:	fab2 f282 	clz	r2, r2
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f042 0220 	orr.w	r2, r2, #32
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	f002 021f 	and.w	r2, r2, #31
 80036f2:	40d3      	lsrs	r3, r2
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d15d      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0f9      	b.n	80038f4 <HAL_RCC_ClockConfig+0x3e0>
 8003700:	2302      	movs	r3, #2
 8003702:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800370c:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f043 0320 	orr.w	r3, r3, #32
 8003718:	b2db      	uxtb	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d102      	bne.n	800372a <HAL_RCC_ClockConfig+0x216>
 8003724:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	e02b      	b.n	8003782 <HAL_RCC_ClockConfig+0x26e>
 800372a:	2302      	movs	r3, #2
 800372c:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f043 0320 	orr.w	r3, r3, #32
 8003742:	b2db      	uxtb	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d102      	bne.n	8003754 <HAL_RCC_ClockConfig+0x240>
 800374e:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	e016      	b.n	8003782 <HAL_RCC_ClockConfig+0x26e>
 8003754:	2302      	movs	r3, #2
 8003756:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f043 0320 	orr.w	r3, r3, #32
 800376c:	b2db      	uxtb	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b04      	cmp	r3, #4
 8003776:	d102      	bne.n	800377e <HAL_RCC_ClockConfig+0x26a>
 8003778:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	e001      	b.n	8003782 <HAL_RCC_ClockConfig+0x26e>
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <HAL_RCC_ClockConfig+0x2a0>)
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2202      	movs	r2, #2
 8003784:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003788:	fa92 f2a2 	rbit	r2, r2
 800378c:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	fab2 f282 	clz	r2, r2
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	f042 0220 	orr.w	r2, r2, #32
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f002 021f 	and.w	r2, r2, #31
 80037a2:	40d3      	lsrs	r3, r2
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0a1      	b.n	80038f4 <HAL_RCC_ClockConfig+0x3e0>
 80037b0:	40022000 	.word	0x40022000
 80037b4:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037b8:	4950      	ldr	r1, [pc, #320]	; (80038fc <HAL_RCC_ClockConfig+0x3e8>)
 80037ba:	4b50      	ldr	r3, [pc, #320]	; (80038fc <HAL_RCC_ClockConfig+0x3e8>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f023 0203 	bic.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ca:	f7fd f933 	bl	8000a34 <HAL_GetTick>
 80037ce:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d112      	bne.n	80037fe <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037da:	f7fd f92b 	bl	8000a34 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e081      	b.n	80038f4 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f0:	4b42      	ldr	r3, [pc, #264]	; (80038fc <HAL_RCC_ClockConfig+0x3e8>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d1ee      	bne.n	80037da <HAL_RCC_ClockConfig+0x2c6>
 80037fc:	e027      	b.n	800384e <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d11d      	bne.n	8003842 <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7fd f914 	bl	8000a34 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e06a      	b.n	80038f4 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800381e:	4b37      	ldr	r3, [pc, #220]	; (80038fc <HAL_RCC_ClockConfig+0x3e8>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b08      	cmp	r3, #8
 8003828:	d1ee      	bne.n	8003808 <HAL_RCC_ClockConfig+0x2f4>
 800382a:	e010      	b.n	800384e <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fd f902 	bl	8000a34 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e058      	b.n	80038f4 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <HAL_RCC_ClockConfig+0x3e8>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1ee      	bne.n	800382c <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800384e:	4b2c      	ldr	r3, [pc, #176]	; (8003900 <HAL_RCC_ClockConfig+0x3ec>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0207 	and.w	r2, r3, #7
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d910      	bls.n	800387e <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385c:	4928      	ldr	r1, [pc, #160]	; (8003900 <HAL_RCC_ClockConfig+0x3ec>)
 800385e:	4b28      	ldr	r3, [pc, #160]	; (8003900 <HAL_RCC_ClockConfig+0x3ec>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 0207 	bic.w	r2, r3, #7
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800386c:	4b24      	ldr	r3, [pc, #144]	; (8003900 <HAL_RCC_ClockConfig+0x3ec>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0207 	and.w	r2, r3, #7
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d001      	beq.n	800387e <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e03a      	b.n	80038f4 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388a:	491c      	ldr	r1, [pc, #112]	; (80038fc <HAL_RCC_ClockConfig+0x3e8>)
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <HAL_RCC_ClockConfig+0x3e8>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d009      	beq.n	80038bc <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038a8:	4914      	ldr	r1, [pc, #80]	; (80038fc <HAL_RCC_ClockConfig+0x3e8>)
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <HAL_RCC_ClockConfig+0x3e8>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038bc:	f000 f826 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038c0:	4601      	mov	r1, r0
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <HAL_RCC_ClockConfig+0x3e8>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038ca:	23f0      	movs	r3, #240	; 0xf0
 80038cc:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
 80038e0:	4a08      	ldr	r2, [pc, #32]	; (8003904 <HAL_RCC_ClockConfig+0x3f0>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	fa21 f303 	lsr.w	r3, r1, r3
 80038e8:	4a07      	ldr	r2, [pc, #28]	; (8003908 <HAL_RCC_ClockConfig+0x3f4>)
 80038ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80038ec:	2000      	movs	r0, #0
 80038ee:	f7fd f877 	bl	80009e0 <HAL_InitTick>
  
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3778      	adds	r7, #120	; 0x78
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	40022000 	.word	0x40022000
 8003904:	08003a18 	.word	0x08003a18
 8003908:	20000428 	.word	0x20000428

0800390c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	b480      	push	{r7}
 800390e:	b08b      	sub	sp, #44	; 0x2c
 8003910:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	2300      	movs	r3, #0
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003926:	4b29      	ldr	r3, [pc, #164]	; (80039cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b04      	cmp	r3, #4
 8003934:	d002      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x30>
 8003936:	2b08      	cmp	r3, #8
 8003938:	d003      	beq.n	8003942 <HAL_RCC_GetSysClockFreq+0x36>
 800393a:	e03c      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800393c:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800393e:	623b      	str	r3, [r7, #32]
      break;
 8003940:	e03c      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003948:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800394c:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003962:	5cd3      	ldrb	r3, [r2, r3]
 8003964:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003966:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	f003 020f 	and.w	r2, r3, #15
 800396e:	230f      	movs	r3, #15
 8003970:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	fab3 f383 	clz	r3, r3
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
 8003984:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003986:	5cd3      	ldrb	r3, [r2, r3]
 8003988:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003994:	4a0e      	ldr	r2, [pc, #56]	; (80039d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
 80039a4:	e004      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	623b      	str	r3, [r7, #32]
      break;
 80039b4:	e002      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039b8:	623b      	str	r3, [r7, #32]
      break;
 80039ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039bc:	6a3b      	ldr	r3, [r7, #32]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	372c      	adds	r7, #44	; 0x2c
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
 80039d0:	007a1200 	.word	0x007a1200
 80039d4:	08003a28 	.word	0x08003a28
 80039d8:	08003a38 	.word	0x08003a38
 80039dc:	003d0900 	.word	0x003d0900

080039e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039e6:	681b      	ldr	r3, [r3, #0]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000428 	.word	0x20000428

080039f8 <_init>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	bf00      	nop
 80039fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fe:	bc08      	pop	{r3}
 8003a00:	469e      	mov	lr, r3
 8003a02:	4770      	bx	lr

08003a04 <_fini>:
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a06:	bf00      	nop
 8003a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0a:	bc08      	pop	{r3}
 8003a0c:	469e      	mov	lr, r3
 8003a0e:	4770      	bx	lr
