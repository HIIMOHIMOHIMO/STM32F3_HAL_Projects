
Test10_USERBRD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c30  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08009df0  08009df0  00019df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009fb0  08009fb0  00019fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08009fb8  08009fb8  00019fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009fc0  08009fc0  00019fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000878  20000000  08009fc4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020878  2**0
                  CONTENTS
  8 .bss          0000060c  20000878  20000878  00020878  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20000e84  20000e84  00020878  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020878  2**0
                  CONTENTS, READONLY
 11 .debug_line   00006fc4  00000000  00000000  000208a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000fb62  00000000  00000000  0002786c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f91  00000000  00000000  000373ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  00039360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d98  00000000  00000000  0003a210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000833c  00000000  00000000  0003afa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000045b1  00000000  00000000  000432e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000006e  00000000  00000000  00047895  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000043ec  00000000  00000000  00047904  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c2:	4805      	ldr	r0, [pc, #20]	; (80001d8 <deregister_tm_clones+0x18>)
 80001c4:	1a1b      	subs	r3, r3, r0
 80001c6:	2b06      	cmp	r3, #6
 80001c8:	d902      	bls.n	80001d0 <deregister_tm_clones+0x10>
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <deregister_tm_clones+0x1c>)
 80001cc:	b103      	cbz	r3, 80001d0 <deregister_tm_clones+0x10>
 80001ce:	4718      	bx	r3
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	2000087b 	.word	0x2000087b
 80001d8:	20000878 	.word	0x20000878
 80001dc:	00000000 	.word	0x00000000

080001e0 <register_tm_clones>:
 80001e0:	4905      	ldr	r1, [pc, #20]	; (80001f8 <register_tm_clones+0x18>)
 80001e2:	4806      	ldr	r0, [pc, #24]	; (80001fc <register_tm_clones+0x1c>)
 80001e4:	1a09      	subs	r1, r1, r0
 80001e6:	1089      	asrs	r1, r1, #2
 80001e8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001ec:	1049      	asrs	r1, r1, #1
 80001ee:	d002      	beq.n	80001f6 <register_tm_clones+0x16>
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <register_tm_clones+0x20>)
 80001f2:	b103      	cbz	r3, 80001f6 <register_tm_clones+0x16>
 80001f4:	4718      	bx	r3
 80001f6:	4770      	bx	lr
 80001f8:	20000878 	.word	0x20000878
 80001fc:	20000878 	.word	0x20000878
 8000200:	00000000 	.word	0x00000000

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c06      	ldr	r4, [pc, #24]	; (8000220 <__do_global_dtors_aux+0x1c>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b943      	cbnz	r3, 800021e <__do_global_dtors_aux+0x1a>
 800020c:	f7ff ffd8 	bl	80001c0 <deregister_tm_clones>
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	b113      	cbz	r3, 800021a <__do_global_dtors_aux+0x16>
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <__do_global_dtors_aux+0x24>)
 8000216:	f3af 8000 	nop.w
 800021a:	2301      	movs	r3, #1
 800021c:	7023      	strb	r3, [r4, #0]
 800021e:	bd10      	pop	{r4, pc}
 8000220:	20000878 	.word	0x20000878
 8000224:	00000000 	.word	0x00000000
 8000228:	08009dd8 	.word	0x08009dd8

0800022c <frame_dummy>:
 800022c:	b508      	push	{r3, lr}
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <frame_dummy+0x24>)
 8000230:	b11b      	cbz	r3, 800023a <frame_dummy+0xe>
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <frame_dummy+0x28>)
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <frame_dummy+0x2c>)
 8000236:	f3af 8000 	nop.w
 800023a:	4808      	ldr	r0, [pc, #32]	; (800025c <frame_dummy+0x30>)
 800023c:	6803      	ldr	r3, [r0, #0]
 800023e:	b913      	cbnz	r3, 8000246 <frame_dummy+0x1a>
 8000240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000244:	e7cc      	b.n	80001e0 <register_tm_clones>
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <frame_dummy+0x34>)
 8000248:	2b00      	cmp	r3, #0
 800024a:	d0f9      	beq.n	8000240 <frame_dummy+0x14>
 800024c:	4798      	blx	r3
 800024e:	e7f7      	b.n	8000240 <frame_dummy+0x14>
 8000250:	00000000 	.word	0x00000000
 8000254:	2000087c 	.word	0x2000087c
 8000258:	08009dd8 	.word	0x08009dd8
 800025c:	20000878 	.word	0x20000878
 8000260:	00000000 	.word	0x00000000

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a2:	f1a4 0401 	sub.w	r4, r4, #1
 80003a6:	d1e9      	bne.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f092 0f00 	teq	r2, #0
 800054e:	bf14      	ite	ne
 8000550:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 7460 	mov.w	r4, #896	; 0x380
 800055c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000560:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000564:	e720      	b.n	80003a8 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_ul2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f04f 0500 	mov.w	r5, #0
 8000576:	e00a      	b.n	800058e <__aeabi_l2d+0x16>

08000578 <__aeabi_l2d>:
 8000578:	ea50 0201 	orrs.w	r2, r0, r1
 800057c:	bf08      	it	eq
 800057e:	4770      	bxeq	lr
 8000580:	b530      	push	{r4, r5, lr}
 8000582:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000586:	d502      	bpl.n	800058e <__aeabi_l2d+0x16>
 8000588:	4240      	negs	r0, r0
 800058a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800058e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000592:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000596:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800059a:	f43f aedc 	beq.w	8000356 <__adddf3+0xe6>
 800059e:	f04f 0203 	mov.w	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005b6:	f1c2 0320 	rsb	r3, r2, #32
 80005ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005c6:	ea40 000e 	orr.w	r0, r0, lr
 80005ca:	fa21 f102 	lsr.w	r1, r1, r2
 80005ce:	4414      	add	r4, r2
 80005d0:	e6c1      	b.n	8000356 <__adddf3+0xe6>
 80005d2:	bf00      	nop

080005d4 <__aeabi_dmul>:
 80005d4:	b570      	push	{r4, r5, r6, lr}
 80005d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005e2:	bf1d      	ittte	ne
 80005e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e8:	ea94 0f0c 	teqne	r4, ip
 80005ec:	ea95 0f0c 	teqne	r5, ip
 80005f0:	f000 f8de 	bleq	80007b0 <__aeabi_dmul+0x1dc>
 80005f4:	442c      	add	r4, r5
 80005f6:	ea81 0603 	eor.w	r6, r1, r3
 80005fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000602:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000606:	bf18      	it	ne
 8000608:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000614:	d038      	beq.n	8000688 <__aeabi_dmul+0xb4>
 8000616:	fba0 ce02 	umull	ip, lr, r0, r2
 800061a:	f04f 0500 	mov.w	r5, #0
 800061e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000622:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000626:	fbe0 e503 	umlal	lr, r5, r0, r3
 800062a:	f04f 0600 	mov.w	r6, #0
 800062e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000632:	f09c 0f00 	teq	ip, #0
 8000636:	bf18      	it	ne
 8000638:	f04e 0e01 	orrne.w	lr, lr, #1
 800063c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000640:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000644:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000648:	d204      	bcs.n	8000654 <__aeabi_dmul+0x80>
 800064a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800064e:	416d      	adcs	r5, r5
 8000650:	eb46 0606 	adc.w	r6, r6, r6
 8000654:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000658:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800065c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000660:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000664:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000668:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800066c:	bf88      	it	hi
 800066e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000672:	d81e      	bhi.n	80006b2 <__aeabi_dmul+0xde>
 8000674:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000678:	bf08      	it	eq
 800067a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800067e:	f150 0000 	adcs.w	r0, r0, #0
 8000682:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800068c:	ea46 0101 	orr.w	r1, r6, r1
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	ea81 0103 	eor.w	r1, r1, r3
 8000698:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800069c:	bfc2      	ittt	gt
 800069e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006a6:	bd70      	popgt	{r4, r5, r6, pc}
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ac:	f04f 0e00 	mov.w	lr, #0
 80006b0:	3c01      	subs	r4, #1
 80006b2:	f300 80ab 	bgt.w	800080c <__aeabi_dmul+0x238>
 80006b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ba:	bfde      	ittt	le
 80006bc:	2000      	movle	r0, #0
 80006be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006c2:	bd70      	pople	{r4, r5, r6, pc}
 80006c4:	f1c4 0400 	rsb	r4, r4, #0
 80006c8:	3c20      	subs	r4, #32
 80006ca:	da35      	bge.n	8000738 <__aeabi_dmul+0x164>
 80006cc:	340c      	adds	r4, #12
 80006ce:	dc1b      	bgt.n	8000708 <__aeabi_dmul+0x134>
 80006d0:	f104 0414 	add.w	r4, r4, #20
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f305 	lsl.w	r3, r0, r5
 80006dc:	fa20 f004 	lsr.w	r0, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	fa21 f604 	lsr.w	r6, r1, r4
 80006f8:	eb42 0106 	adc.w	r1, r2, r6
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f1c4 040c 	rsb	r4, r4, #12
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f304 	lsl.w	r3, r0, r4
 8000714:	fa20 f005 	lsr.w	r0, r0, r5
 8000718:	fa01 f204 	lsl.w	r2, r1, r4
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	f141 0100 	adc.w	r1, r1, #0
 800072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000730:	bf08      	it	eq
 8000732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f205 	lsl.w	r2, r0, r5
 8000740:	ea4e 0e02 	orr.w	lr, lr, r2
 8000744:	fa20 f304 	lsr.w	r3, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea43 0302 	orr.w	r3, r3, r2
 8000750:	fa21 f004 	lsr.w	r0, r1, r4
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	fa21 f204 	lsr.w	r2, r1, r4
 800075c:	ea20 0002 	bic.w	r0, r0, r2
 8000760:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f094 0f00 	teq	r4, #0
 8000774:	d10f      	bne.n	8000796 <__aeabi_dmul+0x1c2>
 8000776:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800077a:	0040      	lsls	r0, r0, #1
 800077c:	eb41 0101 	adc.w	r1, r1, r1
 8000780:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000784:	bf08      	it	eq
 8000786:	3c01      	subeq	r4, #1
 8000788:	d0f7      	beq.n	800077a <__aeabi_dmul+0x1a6>
 800078a:	ea41 0106 	orr.w	r1, r1, r6
 800078e:	f095 0f00 	teq	r5, #0
 8000792:	bf18      	it	ne
 8000794:	4770      	bxne	lr
 8000796:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800079a:	0052      	lsls	r2, r2, #1
 800079c:	eb43 0303 	adc.w	r3, r3, r3
 80007a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007a4:	bf08      	it	eq
 80007a6:	3d01      	subeq	r5, #1
 80007a8:	d0f7      	beq.n	800079a <__aeabi_dmul+0x1c6>
 80007aa:	ea43 0306 	orr.w	r3, r3, r6
 80007ae:	4770      	bx	lr
 80007b0:	ea94 0f0c 	teq	r4, ip
 80007b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b8:	bf18      	it	ne
 80007ba:	ea95 0f0c 	teqne	r5, ip
 80007be:	d00c      	beq.n	80007da <__aeabi_dmul+0x206>
 80007c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c4:	bf18      	it	ne
 80007c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ca:	d1d1      	bne.n	8000770 <__aeabi_dmul+0x19c>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007de:	bf06      	itte	eq
 80007e0:	4610      	moveq	r0, r2
 80007e2:	4619      	moveq	r1, r3
 80007e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e8:	d019      	beq.n	800081e <__aeabi_dmul+0x24a>
 80007ea:	ea94 0f0c 	teq	r4, ip
 80007ee:	d102      	bne.n	80007f6 <__aeabi_dmul+0x222>
 80007f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007f4:	d113      	bne.n	800081e <__aeabi_dmul+0x24a>
 80007f6:	ea95 0f0c 	teq	r5, ip
 80007fa:	d105      	bne.n	8000808 <__aeabi_dmul+0x234>
 80007fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000800:	bf1c      	itt	ne
 8000802:	4610      	movne	r0, r2
 8000804:	4619      	movne	r1, r3
 8000806:	d10a      	bne.n	800081e <__aeabi_dmul+0x24a>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000814:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000822:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000826:	bd70      	pop	{r4, r5, r6, pc}

08000828 <__aeabi_ddiv>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800082e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000836:	bf1d      	ittte	ne
 8000838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800083c:	ea94 0f0c 	teqne	r4, ip
 8000840:	ea95 0f0c 	teqne	r5, ip
 8000844:	f000 f8a7 	bleq	8000996 <__aeabi_ddiv+0x16e>
 8000848:	eba4 0405 	sub.w	r4, r4, r5
 800084c:	ea81 0e03 	eor.w	lr, r1, r3
 8000850:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000854:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000858:	f000 8088 	beq.w	800096c <__aeabi_ddiv+0x144>
 800085c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000860:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000864:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000868:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800086c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000870:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000874:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000878:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800087c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000880:	429d      	cmp	r5, r3
 8000882:	bf08      	it	eq
 8000884:	4296      	cmpeq	r6, r2
 8000886:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800088a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800088e:	d202      	bcs.n	8000896 <__aeabi_ddiv+0x6e>
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	1ab6      	subs	r6, r6, r2
 8000898:	eb65 0503 	sbc.w	r5, r5, r3
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000904:	ea55 0e06 	orrs.w	lr, r5, r6
 8000908:	d018      	beq.n	800093c <__aeabi_ddiv+0x114>
 800090a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800090e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000912:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000916:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800091a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800091e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000922:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000926:	d1c0      	bne.n	80008aa <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	d10b      	bne.n	8000946 <__aeabi_ddiv+0x11e>
 800092e:	ea41 0100 	orr.w	r1, r1, r0
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800093a:	e7b6      	b.n	80008aa <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	bf04      	itt	eq
 8000942:	4301      	orreq	r1, r0
 8000944:	2000      	moveq	r0, #0
 8000946:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800094a:	bf88      	it	hi
 800094c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000950:	f63f aeaf 	bhi.w	80006b2 <__aeabi_dmul+0xde>
 8000954:	ebb5 0c03 	subs.w	ip, r5, r3
 8000958:	bf04      	itt	eq
 800095a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800095e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000962:	f150 0000 	adcs.w	r0, r0, #0
 8000966:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000970:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000974:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000978:	bfc2      	ittt	gt
 800097a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800097e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000982:	bd70      	popgt	{r4, r5, r6, pc}
 8000984:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000988:	f04f 0e00 	mov.w	lr, #0
 800098c:	3c01      	subs	r4, #1
 800098e:	e690      	b.n	80006b2 <__aeabi_dmul+0xde>
 8000990:	ea45 0e06 	orr.w	lr, r5, r6
 8000994:	e68d      	b.n	80006b2 <__aeabi_dmul+0xde>
 8000996:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800099a:	ea94 0f0c 	teq	r4, ip
 800099e:	bf08      	it	eq
 80009a0:	ea95 0f0c 	teqeq	r5, ip
 80009a4:	f43f af3b 	beq.w	800081e <__aeabi_dmul+0x24a>
 80009a8:	ea94 0f0c 	teq	r4, ip
 80009ac:	d10a      	bne.n	80009c4 <__aeabi_ddiv+0x19c>
 80009ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009b2:	f47f af34 	bne.w	800081e <__aeabi_dmul+0x24a>
 80009b6:	ea95 0f0c 	teq	r5, ip
 80009ba:	f47f af25 	bne.w	8000808 <__aeabi_dmul+0x234>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e72c      	b.n	800081e <__aeabi_dmul+0x24a>
 80009c4:	ea95 0f0c 	teq	r5, ip
 80009c8:	d106      	bne.n	80009d8 <__aeabi_ddiv+0x1b0>
 80009ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ce:	f43f aefd 	beq.w	80007cc <__aeabi_dmul+0x1f8>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e722      	b.n	800081e <__aeabi_dmul+0x24a>
 80009d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009dc:	bf18      	it	ne
 80009de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009e2:	f47f aec5 	bne.w	8000770 <__aeabi_dmul+0x19c>
 80009e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ea:	f47f af0d 	bne.w	8000808 <__aeabi_dmul+0x234>
 80009ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009f2:	f47f aeeb 	bne.w	80007cc <__aeabi_dmul+0x1f8>
 80009f6:	e712      	b.n	800081e <__aeabi_dmul+0x24a>

080009f8 <__aeabi_d2f>:
 80009f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a00:	bf24      	itt	cs
 8000a02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0a:	d90d      	bls.n	8000a28 <__aeabi_d2f+0x30>
 8000a0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a20:	bf08      	it	eq
 8000a22:	f020 0001 	biceq.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a2c:	d121      	bne.n	8000a72 <__aeabi_d2f+0x7a>
 8000a2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a32:	bfbc      	itt	lt
 8000a34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	4770      	bxlt	lr
 8000a3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a42:	f1c2 0218 	rsb	r2, r2, #24
 8000a46:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a52:	bf18      	it	ne
 8000a54:	f040 0001 	orrne.w	r0, r0, #1
 8000a58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a64:	ea40 000c 	orr.w	r0, r0, ip
 8000a68:	fa23 f302 	lsr.w	r3, r3, r2
 8000a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a70:	e7cc      	b.n	8000a0c <__aeabi_d2f+0x14>
 8000a72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a76:	d107      	bne.n	8000a88 <__aeabi_d2f+0x90>
 8000a78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a7c:	bf1e      	ittt	ne
 8000a7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a86:	4770      	bxne	lr
 8000a88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <memcpy>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	ea41 0300 	orr.w	r3, r1, r0
 8000a9e:	f013 0303 	ands.w	r3, r3, #3
 8000aa2:	d16d      	bne.n	8000b80 <memcpy+0xe8>
 8000aa4:	3a40      	subs	r2, #64	; 0x40
 8000aa6:	d341      	bcc.n	8000b2c <memcpy+0x94>
 8000aa8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000aac:	f840 3b04 	str.w	r3, [r0], #4
 8000ab0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ab4:	f840 3b04 	str.w	r3, [r0], #4
 8000ab8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000abc:	f840 3b04 	str.w	r3, [r0], #4
 8000ac0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ac4:	f840 3b04 	str.w	r3, [r0], #4
 8000ac8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000acc:	f840 3b04 	str.w	r3, [r0], #4
 8000ad0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ad4:	f840 3b04 	str.w	r3, [r0], #4
 8000ad8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000adc:	f840 3b04 	str.w	r3, [r0], #4
 8000ae0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ae4:	f840 3b04 	str.w	r3, [r0], #4
 8000ae8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000aec:	f840 3b04 	str.w	r3, [r0], #4
 8000af0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000af4:	f840 3b04 	str.w	r3, [r0], #4
 8000af8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000afc:	f840 3b04 	str.w	r3, [r0], #4
 8000b00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b04:	f840 3b04 	str.w	r3, [r0], #4
 8000b08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b0c:	f840 3b04 	str.w	r3, [r0], #4
 8000b10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b14:	f840 3b04 	str.w	r3, [r0], #4
 8000b18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b1c:	f840 3b04 	str.w	r3, [r0], #4
 8000b20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b24:	f840 3b04 	str.w	r3, [r0], #4
 8000b28:	3a40      	subs	r2, #64	; 0x40
 8000b2a:	d2bd      	bcs.n	8000aa8 <memcpy+0x10>
 8000b2c:	3230      	adds	r2, #48	; 0x30
 8000b2e:	d311      	bcc.n	8000b54 <memcpy+0xbc>
 8000b30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b34:	f840 3b04 	str.w	r3, [r0], #4
 8000b38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b3c:	f840 3b04 	str.w	r3, [r0], #4
 8000b40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b44:	f840 3b04 	str.w	r3, [r0], #4
 8000b48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b4c:	f840 3b04 	str.w	r3, [r0], #4
 8000b50:	3a10      	subs	r2, #16
 8000b52:	d2ed      	bcs.n	8000b30 <memcpy+0x98>
 8000b54:	320c      	adds	r2, #12
 8000b56:	d305      	bcc.n	8000b64 <memcpy+0xcc>
 8000b58:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b5c:	f840 3b04 	str.w	r3, [r0], #4
 8000b60:	3a04      	subs	r2, #4
 8000b62:	d2f9      	bcs.n	8000b58 <memcpy+0xc0>
 8000b64:	3204      	adds	r2, #4
 8000b66:	d008      	beq.n	8000b7a <memcpy+0xe2>
 8000b68:	07d2      	lsls	r2, r2, #31
 8000b6a:	bf1c      	itt	ne
 8000b6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000b70:	f800 3b01 	strbne.w	r3, [r0], #1
 8000b74:	d301      	bcc.n	8000b7a <memcpy+0xe2>
 8000b76:	880b      	ldrh	r3, [r1, #0]
 8000b78:	8003      	strh	r3, [r0, #0]
 8000b7a:	4660      	mov	r0, ip
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2a08      	cmp	r2, #8
 8000b82:	d313      	bcc.n	8000bac <memcpy+0x114>
 8000b84:	078b      	lsls	r3, r1, #30
 8000b86:	d08d      	beq.n	8000aa4 <memcpy+0xc>
 8000b88:	f010 0303 	ands.w	r3, r0, #3
 8000b8c:	d08a      	beq.n	8000aa4 <memcpy+0xc>
 8000b8e:	f1c3 0304 	rsb	r3, r3, #4
 8000b92:	1ad2      	subs	r2, r2, r3
 8000b94:	07db      	lsls	r3, r3, #31
 8000b96:	bf1c      	itt	ne
 8000b98:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000b9c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000ba0:	d380      	bcc.n	8000aa4 <memcpy+0xc>
 8000ba2:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000ba6:	f820 3b02 	strh.w	r3, [r0], #2
 8000baa:	e77b      	b.n	8000aa4 <memcpy+0xc>
 8000bac:	3a04      	subs	r2, #4
 8000bae:	d3d9      	bcc.n	8000b64 <memcpy+0xcc>
 8000bb0:	3a01      	subs	r2, #1
 8000bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bb6:	f800 3b01 	strb.w	r3, [r0], #1
 8000bba:	d2f9      	bcs.n	8000bb0 <memcpy+0x118>
 8000bbc:	780b      	ldrb	r3, [r1, #0]
 8000bbe:	7003      	strb	r3, [r0, #0]
 8000bc0:	784b      	ldrb	r3, [r1, #1]
 8000bc2:	7043      	strb	r3, [r0, #1]
 8000bc4:	788b      	ldrb	r3, [r1, #2]
 8000bc6:	7083      	strb	r3, [r0, #2]
 8000bc8:	4660      	mov	r0, ip
 8000bca:	4770      	bx	lr
	...

08000c00 <strlen>:
 8000c00:	f890 f000 	pld	[r0]
 8000c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000c08:	f020 0107 	bic.w	r1, r0, #7
 8000c0c:	f06f 0c00 	mvn.w	ip, #0
 8000c10:	f010 0407 	ands.w	r4, r0, #7
 8000c14:	f891 f020 	pld	[r1, #32]
 8000c18:	f040 8049 	bne.w	8000cae <strlen+0xae>
 8000c1c:	f04f 0400 	mov.w	r4, #0
 8000c20:	f06f 0007 	mvn.w	r0, #7
 8000c24:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000c28:	f891 f040 	pld	[r1, #64]	; 0x40
 8000c2c:	f100 0008 	add.w	r0, r0, #8
 8000c30:	fa82 f24c 	uadd8	r2, r2, ip
 8000c34:	faa4 f28c 	sel	r2, r4, ip
 8000c38:	fa83 f34c 	uadd8	r3, r3, ip
 8000c3c:	faa2 f38c 	sel	r3, r2, ip
 8000c40:	bb4b      	cbnz	r3, 8000c96 <strlen+0x96>
 8000c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000c46:	fa82 f24c 	uadd8	r2, r2, ip
 8000c4a:	f100 0008 	add.w	r0, r0, #8
 8000c4e:	faa4 f28c 	sel	r2, r4, ip
 8000c52:	fa83 f34c 	uadd8	r3, r3, ip
 8000c56:	faa2 f38c 	sel	r3, r2, ip
 8000c5a:	b9e3      	cbnz	r3, 8000c96 <strlen+0x96>
 8000c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000c60:	fa82 f24c 	uadd8	r2, r2, ip
 8000c64:	f100 0008 	add.w	r0, r0, #8
 8000c68:	faa4 f28c 	sel	r2, r4, ip
 8000c6c:	fa83 f34c 	uadd8	r3, r3, ip
 8000c70:	faa2 f38c 	sel	r3, r2, ip
 8000c74:	b97b      	cbnz	r3, 8000c96 <strlen+0x96>
 8000c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000c7a:	f101 0120 	add.w	r1, r1, #32
 8000c7e:	fa82 f24c 	uadd8	r2, r2, ip
 8000c82:	f100 0008 	add.w	r0, r0, #8
 8000c86:	faa4 f28c 	sel	r2, r4, ip
 8000c8a:	fa83 f34c 	uadd8	r3, r3, ip
 8000c8e:	faa2 f38c 	sel	r3, r2, ip
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0c6      	beq.n	8000c24 <strlen+0x24>
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	bf04      	itt	eq
 8000c9a:	3004      	addeq	r0, #4
 8000c9c:	461a      	moveq	r2, r3
 8000c9e:	ba12      	rev	r2, r2
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000cac:	4770      	bx	lr
 8000cae:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000cb2:	f004 0503 	and.w	r5, r4, #3
 8000cb6:	f1c4 0000 	rsb	r0, r4, #0
 8000cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000cbe:	f014 0f04 	tst.w	r4, #4
 8000cc2:	f891 f040 	pld	[r1, #64]	; 0x40
 8000cc6:	fa0c f505 	lsl.w	r5, ip, r5
 8000cca:	ea62 0205 	orn	r2, r2, r5
 8000cce:	bf1c      	itt	ne
 8000cd0:	ea63 0305 	ornne	r3, r3, r5
 8000cd4:	4662      	movne	r2, ip
 8000cd6:	f04f 0400 	mov.w	r4, #0
 8000cda:	e7a9      	b.n	8000c30 <strlen+0x30>
 8000cdc:	0000      	movs	r0, r0
	...

08000ce0 <memchr>:
 8000ce0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000ce4:	2a10      	cmp	r2, #16
 8000ce6:	db2b      	blt.n	8000d40 <memchr+0x60>
 8000ce8:	f010 0f07 	tst.w	r0, #7
 8000cec:	d008      	beq.n	8000d00 <memchr+0x20>
 8000cee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000cf2:	3a01      	subs	r2, #1
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d02d      	beq.n	8000d54 <memchr+0x74>
 8000cf8:	f010 0f07 	tst.w	r0, #7
 8000cfc:	b342      	cbz	r2, 8000d50 <memchr+0x70>
 8000cfe:	d1f6      	bne.n	8000cee <memchr+0xe>
 8000d00:	b4f0      	push	{r4, r5, r6, r7}
 8000d02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000d06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000d0a:	f022 0407 	bic.w	r4, r2, #7
 8000d0e:	f07f 0700 	mvns.w	r7, #0
 8000d12:	2300      	movs	r3, #0
 8000d14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000d18:	3c08      	subs	r4, #8
 8000d1a:	ea85 0501 	eor.w	r5, r5, r1
 8000d1e:	ea86 0601 	eor.w	r6, r6, r1
 8000d22:	fa85 f547 	uadd8	r5, r5, r7
 8000d26:	faa3 f587 	sel	r5, r3, r7
 8000d2a:	fa86 f647 	uadd8	r6, r6, r7
 8000d2e:	faa5 f687 	sel	r6, r5, r7
 8000d32:	b98e      	cbnz	r6, 8000d58 <memchr+0x78>
 8000d34:	d1ee      	bne.n	8000d14 <memchr+0x34>
 8000d36:	bcf0      	pop	{r4, r5, r6, r7}
 8000d38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000d3c:	f002 0207 	and.w	r2, r2, #7
 8000d40:	b132      	cbz	r2, 8000d50 <memchr+0x70>
 8000d42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d46:	3a01      	subs	r2, #1
 8000d48:	ea83 0301 	eor.w	r3, r3, r1
 8000d4c:	b113      	cbz	r3, 8000d54 <memchr+0x74>
 8000d4e:	d1f8      	bne.n	8000d42 <memchr+0x62>
 8000d50:	2000      	movs	r0, #0
 8000d52:	4770      	bx	lr
 8000d54:	3801      	subs	r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	bf06      	itte	eq
 8000d5c:	4635      	moveq	r5, r6
 8000d5e:	3803      	subeq	r0, #3
 8000d60:	3807      	subne	r0, #7
 8000d62:	f015 0f01 	tst.w	r5, #1
 8000d66:	d107      	bne.n	8000d78 <memchr+0x98>
 8000d68:	3001      	adds	r0, #1
 8000d6a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000d6e:	bf02      	ittt	eq
 8000d70:	3001      	addeq	r0, #1
 8000d72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000d76:	3001      	addeq	r0, #1
 8000d78:	bcf0      	pop	{r4, r5, r6, r7}
 8000d7a:	3801      	subs	r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <__gedf2>:
 8000d80:	f04f 3cff 	mov.w	ip, #4294967295
 8000d84:	e006      	b.n	8000d94 <__cmpdf2+0x4>
 8000d86:	bf00      	nop

08000d88 <__ledf2>:
 8000d88:	f04f 0c01 	mov.w	ip, #1
 8000d8c:	e002      	b.n	8000d94 <__cmpdf2+0x4>
 8000d8e:	bf00      	nop

08000d90 <__cmpdf2>:
 8000d90:	f04f 0c01 	mov.w	ip, #1
 8000d94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000da0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000da4:	bf18      	it	ne
 8000da6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000daa:	d01b      	beq.n	8000de4 <__cmpdf2+0x54>
 8000dac:	b001      	add	sp, #4
 8000dae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000db2:	bf0c      	ite	eq
 8000db4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000db8:	ea91 0f03 	teqne	r1, r3
 8000dbc:	bf02      	ittt	eq
 8000dbe:	ea90 0f02 	teqeq	r0, r2
 8000dc2:	2000      	moveq	r0, #0
 8000dc4:	4770      	bxeq	lr
 8000dc6:	f110 0f00 	cmn.w	r0, #0
 8000dca:	ea91 0f03 	teq	r1, r3
 8000dce:	bf58      	it	pl
 8000dd0:	4299      	cmppl	r1, r3
 8000dd2:	bf08      	it	eq
 8000dd4:	4290      	cmpeq	r0, r2
 8000dd6:	bf2c      	ite	cs
 8000dd8:	17d8      	asrcs	r0, r3, #31
 8000dda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000dde:	f040 0001 	orr.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000de8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dec:	d102      	bne.n	8000df4 <__cmpdf2+0x64>
 8000dee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000df2:	d107      	bne.n	8000e04 <__cmpdf2+0x74>
 8000df4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000df8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dfc:	d1d6      	bne.n	8000dac <__cmpdf2+0x1c>
 8000dfe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e02:	d0d3      	beq.n	8000dac <__cmpdf2+0x1c>
 8000e04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <__aeabi_cdrcmple>:
 8000e0c:	4684      	mov	ip, r0
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4662      	mov	r2, ip
 8000e12:	468c      	mov	ip, r1
 8000e14:	4619      	mov	r1, r3
 8000e16:	4663      	mov	r3, ip
 8000e18:	e000      	b.n	8000e1c <__aeabi_cdcmpeq>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_cdcmpeq>:
 8000e1c:	b501      	push	{r0, lr}
 8000e1e:	f7ff ffb7 	bl	8000d90 <__cmpdf2>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	bf48      	it	mi
 8000e26:	f110 0f00 	cmnmi.w	r0, #0
 8000e2a:	bd01      	pop	{r0, pc}

08000e2c <__aeabi_dcmpeq>:
 8000e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e30:	f7ff fff4 	bl	8000e1c <__aeabi_cdcmpeq>
 8000e34:	bf0c      	ite	eq
 8000e36:	2001      	moveq	r0, #1
 8000e38:	2000      	movne	r0, #0
 8000e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3e:	bf00      	nop

08000e40 <__aeabi_dcmplt>:
 8000e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e44:	f7ff ffea 	bl	8000e1c <__aeabi_cdcmpeq>
 8000e48:	bf34      	ite	cc
 8000e4a:	2001      	movcc	r0, #1
 8000e4c:	2000      	movcs	r0, #0
 8000e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e52:	bf00      	nop

08000e54 <__aeabi_dcmple>:
 8000e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e58:	f7ff ffe0 	bl	8000e1c <__aeabi_cdcmpeq>
 8000e5c:	bf94      	ite	ls
 8000e5e:	2001      	movls	r0, #1
 8000e60:	2000      	movhi	r0, #0
 8000e62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e66:	bf00      	nop

08000e68 <__aeabi_dcmpge>:
 8000e68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e6c:	f7ff ffce 	bl	8000e0c <__aeabi_cdrcmple>
 8000e70:	bf94      	ite	ls
 8000e72:	2001      	movls	r0, #1
 8000e74:	2000      	movhi	r0, #0
 8000e76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e7a:	bf00      	nop

08000e7c <__aeabi_dcmpgt>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff ffc4 	bl	8000e0c <__aeabi_cdrcmple>
 8000e84:	bf34      	ite	cc
 8000e86:	2001      	movcc	r0, #1
 8000e88:	2000      	movcs	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_d2iz>:
 8000e90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e98:	d215      	bcs.n	8000ec6 <__aeabi_d2iz+0x36>
 8000e9a:	d511      	bpl.n	8000ec0 <__aeabi_d2iz+0x30>
 8000e9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ea0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ea4:	d912      	bls.n	8000ecc <__aeabi_d2iz+0x3c>
 8000ea6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000eb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000eb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000eba:	bf18      	it	ne
 8000ebc:	4240      	negne	r0, r0
 8000ebe:	4770      	bx	lr
 8000ec0:	f04f 0000 	mov.w	r0, #0
 8000ec4:	4770      	bx	lr
 8000ec6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000eca:	d105      	bne.n	8000ed8 <__aeabi_d2iz+0x48>
 8000ecc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ed0:	bf08      	it	eq
 8000ed2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ed6:	4770      	bx	lr
 8000ed8:	f04f 0000 	mov.w	r0, #0
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_uldivmod>:
 8000ee0:	b953      	cbnz	r3, 8000ef8 <__aeabi_uldivmod+0x18>
 8000ee2:	b94a      	cbnz	r2, 8000ef8 <__aeabi_uldivmod+0x18>
 8000ee4:	2900      	cmp	r1, #0
 8000ee6:	bf08      	it	eq
 8000ee8:	2800      	cmpeq	r0, #0
 8000eea:	bf1c      	itt	ne
 8000eec:	f04f 31ff 	movne.w	r1, #4294967295
 8000ef0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef4:	f000 b97e 	b.w	80011f4 <__aeabi_idiv0>
 8000ef8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000efc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f00:	f000 f806 	bl	8000f10 <__udivmoddi4>
 8000f04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f0c:	b004      	add	sp, #16
 8000f0e:	4770      	bx	lr

08000f10 <__udivmoddi4>:
 8000f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f14:	468c      	mov	ip, r1
 8000f16:	460e      	mov	r6, r1
 8000f18:	4604      	mov	r4, r0
 8000f1a:	9d08      	ldr	r5, [sp, #32]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d150      	bne.n	8000fc2 <__udivmoddi4+0xb2>
 8000f20:	428a      	cmp	r2, r1
 8000f22:	4617      	mov	r7, r2
 8000f24:	d96c      	bls.n	8001000 <__udivmoddi4+0xf0>
 8000f26:	fab2 fe82 	clz	lr, r2
 8000f2a:	f1be 0f00 	cmp.w	lr, #0
 8000f2e:	d00b      	beq.n	8000f48 <__udivmoddi4+0x38>
 8000f30:	f1ce 0420 	rsb	r4, lr, #32
 8000f34:	fa20 f404 	lsr.w	r4, r0, r4
 8000f38:	fa01 f60e 	lsl.w	r6, r1, lr
 8000f3c:	ea44 0c06 	orr.w	ip, r4, r6
 8000f40:	fa02 f70e 	lsl.w	r7, r2, lr
 8000f44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000f48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f4c:	0c22      	lsrs	r2, r4, #16
 8000f4e:	fbbc f0f9 	udiv	r0, ip, r9
 8000f52:	fa1f f887 	uxth.w	r8, r7
 8000f56:	fb09 c610 	mls	r6, r9, r0, ip
 8000f5a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	42b3      	cmp	r3, r6
 8000f64:	d909      	bls.n	8000f7a <__udivmoddi4+0x6a>
 8000f66:	19f6      	adds	r6, r6, r7
 8000f68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f6c:	f080 8122 	bcs.w	80011b4 <__udivmoddi4+0x2a4>
 8000f70:	42b3      	cmp	r3, r6
 8000f72:	f240 811f 	bls.w	80011b4 <__udivmoddi4+0x2a4>
 8000f76:	3802      	subs	r0, #2
 8000f78:	443e      	add	r6, r7
 8000f7a:	1af6      	subs	r6, r6, r3
 8000f7c:	b2a2      	uxth	r2, r4
 8000f7e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000f82:	fb09 6613 	mls	r6, r9, r3, r6
 8000f86:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000f8a:	fb03 f808 	mul.w	r8, r3, r8
 8000f8e:	45a0      	cmp	r8, r4
 8000f90:	d909      	bls.n	8000fa6 <__udivmoddi4+0x96>
 8000f92:	19e4      	adds	r4, r4, r7
 8000f94:	f103 32ff 	add.w	r2, r3, #4294967295
 8000f98:	f080 810a 	bcs.w	80011b0 <__udivmoddi4+0x2a0>
 8000f9c:	45a0      	cmp	r8, r4
 8000f9e:	f240 8107 	bls.w	80011b0 <__udivmoddi4+0x2a0>
 8000fa2:	3b02      	subs	r3, #2
 8000fa4:	443c      	add	r4, r7
 8000fa6:	ebc8 0404 	rsb	r4, r8, r4
 8000faa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	d062      	beq.n	800107a <__udivmoddi4+0x16a>
 8000fb4:	fa24 f40e 	lsr.w	r4, r4, lr
 8000fb8:	2300      	movs	r3, #0
 8000fba:	602c      	str	r4, [r5, #0]
 8000fbc:	606b      	str	r3, [r5, #4]
 8000fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0xc6>
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d055      	beq.n	8001076 <__udivmoddi4+0x166>
 8000fca:	2100      	movs	r1, #0
 8000fcc:	e885 0041 	stmia.w	r5, {r0, r6}
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	fab3 f183 	clz	r1, r3
 8000fda:	2900      	cmp	r1, #0
 8000fdc:	f040 8090 	bne.w	8001100 <__udivmoddi4+0x1f0>
 8000fe0:	42b3      	cmp	r3, r6
 8000fe2:	d302      	bcc.n	8000fea <__udivmoddi4+0xda>
 8000fe4:	4282      	cmp	r2, r0
 8000fe6:	f200 80f8 	bhi.w	80011da <__udivmoddi4+0x2ca>
 8000fea:	1a84      	subs	r4, r0, r2
 8000fec:	eb66 0603 	sbc.w	r6, r6, r3
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	46b4      	mov	ip, r6
 8000ff4:	2d00      	cmp	r5, #0
 8000ff6:	d040      	beq.n	800107a <__udivmoddi4+0x16a>
 8000ff8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001000:	b912      	cbnz	r2, 8001008 <__udivmoddi4+0xf8>
 8001002:	2701      	movs	r7, #1
 8001004:	fbb7 f7f2 	udiv	r7, r7, r2
 8001008:	fab7 fe87 	clz	lr, r7
 800100c:	f1be 0f00 	cmp.w	lr, #0
 8001010:	d135      	bne.n	800107e <__udivmoddi4+0x16e>
 8001012:	1bf3      	subs	r3, r6, r7
 8001014:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001018:	fa1f fc87 	uxth.w	ip, r7
 800101c:	2101      	movs	r1, #1
 800101e:	fbb3 f0f8 	udiv	r0, r3, r8
 8001022:	0c22      	lsrs	r2, r4, #16
 8001024:	fb08 3610 	mls	r6, r8, r0, r3
 8001028:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800102c:	fb0c f300 	mul.w	r3, ip, r0
 8001030:	42b3      	cmp	r3, r6
 8001032:	d907      	bls.n	8001044 <__udivmoddi4+0x134>
 8001034:	19f6      	adds	r6, r6, r7
 8001036:	f100 32ff 	add.w	r2, r0, #4294967295
 800103a:	d202      	bcs.n	8001042 <__udivmoddi4+0x132>
 800103c:	42b3      	cmp	r3, r6
 800103e:	f200 80ce 	bhi.w	80011de <__udivmoddi4+0x2ce>
 8001042:	4610      	mov	r0, r2
 8001044:	1af6      	subs	r6, r6, r3
 8001046:	b2a2      	uxth	r2, r4
 8001048:	fbb6 f3f8 	udiv	r3, r6, r8
 800104c:	fb08 6613 	mls	r6, r8, r3, r6
 8001050:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8001054:	fb0c fc03 	mul.w	ip, ip, r3
 8001058:	45a4      	cmp	ip, r4
 800105a:	d907      	bls.n	800106c <__udivmoddi4+0x15c>
 800105c:	19e4      	adds	r4, r4, r7
 800105e:	f103 32ff 	add.w	r2, r3, #4294967295
 8001062:	d202      	bcs.n	800106a <__udivmoddi4+0x15a>
 8001064:	45a4      	cmp	ip, r4
 8001066:	f200 80b5 	bhi.w	80011d4 <__udivmoddi4+0x2c4>
 800106a:	4613      	mov	r3, r2
 800106c:	ebcc 0404 	rsb	r4, ip, r4
 8001070:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001074:	e79c      	b.n	8000fb0 <__udivmoddi4+0xa0>
 8001076:	4629      	mov	r1, r5
 8001078:	4628      	mov	r0, r5
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107e:	f1ce 0120 	rsb	r1, lr, #32
 8001082:	fa06 f30e 	lsl.w	r3, r6, lr
 8001086:	fa07 f70e 	lsl.w	r7, r7, lr
 800108a:	fa20 f901 	lsr.w	r9, r0, r1
 800108e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001092:	40ce      	lsrs	r6, r1
 8001094:	ea49 0903 	orr.w	r9, r9, r3
 8001098:	fbb6 faf8 	udiv	sl, r6, r8
 800109c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80010a0:	fb08 661a 	mls	r6, r8, sl, r6
 80010a4:	fa1f fc87 	uxth.w	ip, r7
 80010a8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80010ac:	fb0a f20c 	mul.w	r2, sl, ip
 80010b0:	429a      	cmp	r2, r3
 80010b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80010b6:	d90a      	bls.n	80010ce <__udivmoddi4+0x1be>
 80010b8:	19db      	adds	r3, r3, r7
 80010ba:	f10a 31ff 	add.w	r1, sl, #4294967295
 80010be:	f080 8087 	bcs.w	80011d0 <__udivmoddi4+0x2c0>
 80010c2:	429a      	cmp	r2, r3
 80010c4:	f240 8084 	bls.w	80011d0 <__udivmoddi4+0x2c0>
 80010c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80010cc:	443b      	add	r3, r7
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	fa1f f989 	uxth.w	r9, r9
 80010d4:	fbb3 f1f8 	udiv	r1, r3, r8
 80010d8:	fb08 3311 	mls	r3, r8, r1, r3
 80010dc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80010e0:	fb01 f60c 	mul.w	r6, r1, ip
 80010e4:	429e      	cmp	r6, r3
 80010e6:	d907      	bls.n	80010f8 <__udivmoddi4+0x1e8>
 80010e8:	19db      	adds	r3, r3, r7
 80010ea:	f101 32ff 	add.w	r2, r1, #4294967295
 80010ee:	d26b      	bcs.n	80011c8 <__udivmoddi4+0x2b8>
 80010f0:	429e      	cmp	r6, r3
 80010f2:	d969      	bls.n	80011c8 <__udivmoddi4+0x2b8>
 80010f4:	3902      	subs	r1, #2
 80010f6:	443b      	add	r3, r7
 80010f8:	1b9b      	subs	r3, r3, r6
 80010fa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80010fe:	e78e      	b.n	800101e <__udivmoddi4+0x10e>
 8001100:	f1c1 0e20 	rsb	lr, r1, #32
 8001104:	fa22 f40e 	lsr.w	r4, r2, lr
 8001108:	408b      	lsls	r3, r1
 800110a:	4323      	orrs	r3, r4
 800110c:	fa20 f70e 	lsr.w	r7, r0, lr
 8001110:	fa06 f401 	lsl.w	r4, r6, r1
 8001114:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8001118:	fa26 f60e 	lsr.w	r6, r6, lr
 800111c:	433c      	orrs	r4, r7
 800111e:	fbb6 f9fc 	udiv	r9, r6, ip
 8001122:	0c27      	lsrs	r7, r4, #16
 8001124:	fb0c 6619 	mls	r6, ip, r9, r6
 8001128:	fa1f f883 	uxth.w	r8, r3
 800112c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8001130:	fb09 f708 	mul.w	r7, r9, r8
 8001134:	42b7      	cmp	r7, r6
 8001136:	fa02 f201 	lsl.w	r2, r2, r1
 800113a:	fa00 fa01 	lsl.w	sl, r0, r1
 800113e:	d908      	bls.n	8001152 <__udivmoddi4+0x242>
 8001140:	18f6      	adds	r6, r6, r3
 8001142:	f109 30ff 	add.w	r0, r9, #4294967295
 8001146:	d241      	bcs.n	80011cc <__udivmoddi4+0x2bc>
 8001148:	42b7      	cmp	r7, r6
 800114a:	d93f      	bls.n	80011cc <__udivmoddi4+0x2bc>
 800114c:	f1a9 0902 	sub.w	r9, r9, #2
 8001150:	441e      	add	r6, r3
 8001152:	1bf6      	subs	r6, r6, r7
 8001154:	b2a0      	uxth	r0, r4
 8001156:	fbb6 f4fc 	udiv	r4, r6, ip
 800115a:	fb0c 6614 	mls	r6, ip, r4, r6
 800115e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8001162:	fb04 f808 	mul.w	r8, r4, r8
 8001166:	45b8      	cmp	r8, r7
 8001168:	d907      	bls.n	800117a <__udivmoddi4+0x26a>
 800116a:	18ff      	adds	r7, r7, r3
 800116c:	f104 30ff 	add.w	r0, r4, #4294967295
 8001170:	d228      	bcs.n	80011c4 <__udivmoddi4+0x2b4>
 8001172:	45b8      	cmp	r8, r7
 8001174:	d926      	bls.n	80011c4 <__udivmoddi4+0x2b4>
 8001176:	3c02      	subs	r4, #2
 8001178:	441f      	add	r7, r3
 800117a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800117e:	ebc8 0707 	rsb	r7, r8, r7
 8001182:	fba0 8902 	umull	r8, r9, r0, r2
 8001186:	454f      	cmp	r7, r9
 8001188:	4644      	mov	r4, r8
 800118a:	464e      	mov	r6, r9
 800118c:	d314      	bcc.n	80011b8 <__udivmoddi4+0x2a8>
 800118e:	d029      	beq.n	80011e4 <__udivmoddi4+0x2d4>
 8001190:	b365      	cbz	r5, 80011ec <__udivmoddi4+0x2dc>
 8001192:	ebba 0304 	subs.w	r3, sl, r4
 8001196:	eb67 0706 	sbc.w	r7, r7, r6
 800119a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800119e:	40cb      	lsrs	r3, r1
 80011a0:	40cf      	lsrs	r7, r1
 80011a2:	ea4e 0303 	orr.w	r3, lr, r3
 80011a6:	e885 0088 	stmia.w	r5, {r3, r7}
 80011aa:	2100      	movs	r1, #0
 80011ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b0:	4613      	mov	r3, r2
 80011b2:	e6f8      	b.n	8000fa6 <__udivmoddi4+0x96>
 80011b4:	4610      	mov	r0, r2
 80011b6:	e6e0      	b.n	8000f7a <__udivmoddi4+0x6a>
 80011b8:	ebb8 0402 	subs.w	r4, r8, r2
 80011bc:	eb69 0603 	sbc.w	r6, r9, r3
 80011c0:	3801      	subs	r0, #1
 80011c2:	e7e5      	b.n	8001190 <__udivmoddi4+0x280>
 80011c4:	4604      	mov	r4, r0
 80011c6:	e7d8      	b.n	800117a <__udivmoddi4+0x26a>
 80011c8:	4611      	mov	r1, r2
 80011ca:	e795      	b.n	80010f8 <__udivmoddi4+0x1e8>
 80011cc:	4681      	mov	r9, r0
 80011ce:	e7c0      	b.n	8001152 <__udivmoddi4+0x242>
 80011d0:	468a      	mov	sl, r1
 80011d2:	e77c      	b.n	80010ce <__udivmoddi4+0x1be>
 80011d4:	3b02      	subs	r3, #2
 80011d6:	443c      	add	r4, r7
 80011d8:	e748      	b.n	800106c <__udivmoddi4+0x15c>
 80011da:	4608      	mov	r0, r1
 80011dc:	e70a      	b.n	8000ff4 <__udivmoddi4+0xe4>
 80011de:	3802      	subs	r0, #2
 80011e0:	443e      	add	r6, r7
 80011e2:	e72f      	b.n	8001044 <__udivmoddi4+0x134>
 80011e4:	45c2      	cmp	sl, r8
 80011e6:	d3e7      	bcc.n	80011b8 <__udivmoddi4+0x2a8>
 80011e8:	463e      	mov	r6, r7
 80011ea:	e7d1      	b.n	8001190 <__udivmoddi4+0x280>
 80011ec:	4629      	mov	r1, r5
 80011ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011f2:	bf00      	nop

080011f4 <__aeabi_idiv0>:
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <__libc_init_array>:
 80011f8:	b570      	push	{r4, r5, r6, lr}
 80011fa:	4e0f      	ldr	r6, [pc, #60]	; (8001238 <__libc_init_array+0x40>)
 80011fc:	4d0f      	ldr	r5, [pc, #60]	; (800123c <__libc_init_array+0x44>)
 80011fe:	1b76      	subs	r6, r6, r5
 8001200:	10b6      	asrs	r6, r6, #2
 8001202:	bf18      	it	ne
 8001204:	2400      	movne	r4, #0
 8001206:	d005      	beq.n	8001214 <__libc_init_array+0x1c>
 8001208:	3401      	adds	r4, #1
 800120a:	f855 3b04 	ldr.w	r3, [r5], #4
 800120e:	4798      	blx	r3
 8001210:	42a6      	cmp	r6, r4
 8001212:	d1f9      	bne.n	8001208 <__libc_init_array+0x10>
 8001214:	4e0a      	ldr	r6, [pc, #40]	; (8001240 <__libc_init_array+0x48>)
 8001216:	4d0b      	ldr	r5, [pc, #44]	; (8001244 <__libc_init_array+0x4c>)
 8001218:	1b76      	subs	r6, r6, r5
 800121a:	f008 fddd 	bl	8009dd8 <_init>
 800121e:	10b6      	asrs	r6, r6, #2
 8001220:	bf18      	it	ne
 8001222:	2400      	movne	r4, #0
 8001224:	d006      	beq.n	8001234 <__libc_init_array+0x3c>
 8001226:	3401      	adds	r4, #1
 8001228:	f855 3b04 	ldr.w	r3, [r5], #4
 800122c:	4798      	blx	r3
 800122e:	42a6      	cmp	r6, r4
 8001230:	d1f9      	bne.n	8001226 <__libc_init_array+0x2e>
 8001232:	bd70      	pop	{r4, r5, r6, pc}
 8001234:	bd70      	pop	{r4, r5, r6, pc}
 8001236:	bf00      	nop
 8001238:	08009fb8 	.word	0x08009fb8
 800123c:	08009fb8 	.word	0x08009fb8
 8001240:	08009fc0 	.word	0x08009fc0
 8001244:	08009fb8 	.word	0x08009fb8

08001248 <memset>:
 8001248:	b470      	push	{r4, r5, r6}
 800124a:	0784      	lsls	r4, r0, #30
 800124c:	d046      	beq.n	80012dc <memset+0x94>
 800124e:	1e54      	subs	r4, r2, #1
 8001250:	2a00      	cmp	r2, #0
 8001252:	d041      	beq.n	80012d8 <memset+0x90>
 8001254:	b2cd      	uxtb	r5, r1
 8001256:	4603      	mov	r3, r0
 8001258:	e002      	b.n	8001260 <memset+0x18>
 800125a:	1e62      	subs	r2, r4, #1
 800125c:	b3e4      	cbz	r4, 80012d8 <memset+0x90>
 800125e:	4614      	mov	r4, r2
 8001260:	f803 5b01 	strb.w	r5, [r3], #1
 8001264:	079a      	lsls	r2, r3, #30
 8001266:	d1f8      	bne.n	800125a <memset+0x12>
 8001268:	2c03      	cmp	r4, #3
 800126a:	d92e      	bls.n	80012ca <memset+0x82>
 800126c:	b2cd      	uxtb	r5, r1
 800126e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001272:	2c0f      	cmp	r4, #15
 8001274:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001278:	d919      	bls.n	80012ae <memset+0x66>
 800127a:	f103 0210 	add.w	r2, r3, #16
 800127e:	4626      	mov	r6, r4
 8001280:	3e10      	subs	r6, #16
 8001282:	2e0f      	cmp	r6, #15
 8001284:	f842 5c10 	str.w	r5, [r2, #-16]
 8001288:	f842 5c0c 	str.w	r5, [r2, #-12]
 800128c:	f842 5c08 	str.w	r5, [r2, #-8]
 8001290:	f842 5c04 	str.w	r5, [r2, #-4]
 8001294:	f102 0210 	add.w	r2, r2, #16
 8001298:	d8f2      	bhi.n	8001280 <memset+0x38>
 800129a:	f1a4 0210 	sub.w	r2, r4, #16
 800129e:	f022 020f 	bic.w	r2, r2, #15
 80012a2:	f004 040f 	and.w	r4, r4, #15
 80012a6:	3210      	adds	r2, #16
 80012a8:	2c03      	cmp	r4, #3
 80012aa:	4413      	add	r3, r2
 80012ac:	d90d      	bls.n	80012ca <memset+0x82>
 80012ae:	461e      	mov	r6, r3
 80012b0:	4622      	mov	r2, r4
 80012b2:	3a04      	subs	r2, #4
 80012b4:	2a03      	cmp	r2, #3
 80012b6:	f846 5b04 	str.w	r5, [r6], #4
 80012ba:	d8fa      	bhi.n	80012b2 <memset+0x6a>
 80012bc:	1f22      	subs	r2, r4, #4
 80012be:	f022 0203 	bic.w	r2, r2, #3
 80012c2:	3204      	adds	r2, #4
 80012c4:	4413      	add	r3, r2
 80012c6:	f004 0403 	and.w	r4, r4, #3
 80012ca:	b12c      	cbz	r4, 80012d8 <memset+0x90>
 80012cc:	b2c9      	uxtb	r1, r1
 80012ce:	441c      	add	r4, r3
 80012d0:	f803 1b01 	strb.w	r1, [r3], #1
 80012d4:	42a3      	cmp	r3, r4
 80012d6:	d1fb      	bne.n	80012d0 <memset+0x88>
 80012d8:	bc70      	pop	{r4, r5, r6}
 80012da:	4770      	bx	lr
 80012dc:	4614      	mov	r4, r2
 80012de:	4603      	mov	r3, r0
 80012e0:	e7c2      	b.n	8001268 <memset+0x20>
 80012e2:	bf00      	nop

080012e4 <register_fini>:
 80012e4:	4b02      	ldr	r3, [pc, #8]	; (80012f0 <register_fini+0xc>)
 80012e6:	b113      	cbz	r3, 80012ee <register_fini+0xa>
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <register_fini+0x10>)
 80012ea:	f000 b805 	b.w	80012f8 <atexit>
 80012ee:	4770      	bx	lr
 80012f0:	00000000 	.word	0x00000000
 80012f4:	08001305 	.word	0x08001305

080012f8 <atexit>:
 80012f8:	2300      	movs	r3, #0
 80012fa:	4601      	mov	r1, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 b814 	b.w	800132c <__register_exitproc>

08001304 <__libc_fini_array>:
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	4d07      	ldr	r5, [pc, #28]	; (8001324 <__libc_fini_array+0x20>)
 8001308:	4c07      	ldr	r4, [pc, #28]	; (8001328 <__libc_fini_array+0x24>)
 800130a:	1b2c      	subs	r4, r5, r4
 800130c:	10a4      	asrs	r4, r4, #2
 800130e:	d005      	beq.n	800131c <__libc_fini_array+0x18>
 8001310:	3c01      	subs	r4, #1
 8001312:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8001316:	4798      	blx	r3
 8001318:	2c00      	cmp	r4, #0
 800131a:	d1f9      	bne.n	8001310 <__libc_fini_array+0xc>
 800131c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001320:	f008 bd60 	b.w	8009de4 <_fini>
 8001324:	08009fc4 	.word	0x08009fc4
 8001328:	08009fc0 	.word	0x08009fc0

0800132c <__register_exitproc>:
 800132c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001330:	4c25      	ldr	r4, [pc, #148]	; (80013c8 <__register_exitproc+0x9c>)
 8001332:	6825      	ldr	r5, [r4, #0]
 8001334:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8001338:	4606      	mov	r6, r0
 800133a:	4688      	mov	r8, r1
 800133c:	4692      	mov	sl, r2
 800133e:	4699      	mov	r9, r3
 8001340:	b3c4      	cbz	r4, 80013b4 <__register_exitproc+0x88>
 8001342:	6860      	ldr	r0, [r4, #4]
 8001344:	281f      	cmp	r0, #31
 8001346:	dc17      	bgt.n	8001378 <__register_exitproc+0x4c>
 8001348:	1c43      	adds	r3, r0, #1
 800134a:	b176      	cbz	r6, 800136a <__register_exitproc+0x3e>
 800134c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001350:	2201      	movs	r2, #1
 8001352:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8001356:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 800135a:	4082      	lsls	r2, r0
 800135c:	4311      	orrs	r1, r2
 800135e:	2e02      	cmp	r6, #2
 8001360:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 8001364:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8001368:	d01e      	beq.n	80013a8 <__register_exitproc+0x7c>
 800136a:	3002      	adds	r0, #2
 800136c:	6063      	str	r3, [r4, #4]
 800136e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8001372:	2000      	movs	r0, #0
 8001374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <__register_exitproc+0xa0>)
 800137a:	b303      	cbz	r3, 80013be <__register_exitproc+0x92>
 800137c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001380:	f3af 8000 	nop.w
 8001384:	4604      	mov	r4, r0
 8001386:	b1d0      	cbz	r0, 80013be <__register_exitproc+0x92>
 8001388:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800138c:	2700      	movs	r7, #0
 800138e:	e880 0088 	stmia.w	r0, {r3, r7}
 8001392:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8001396:	4638      	mov	r0, r7
 8001398:	2301      	movs	r3, #1
 800139a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800139e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 80013a2:	2e00      	cmp	r6, #0
 80013a4:	d0e1      	beq.n	800136a <__register_exitproc+0x3e>
 80013a6:	e7d1      	b.n	800134c <__register_exitproc+0x20>
 80013a8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 80013ac:	430a      	orrs	r2, r1
 80013ae:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80013b2:	e7da      	b.n	800136a <__register_exitproc+0x3e>
 80013b4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80013b8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80013bc:	e7c1      	b.n	8001342 <__register_exitproc+0x16>
 80013be:	f04f 30ff 	mov.w	r0, #4294967295
 80013c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c6:	bf00      	nop
 80013c8:	08009df8 	.word	0x08009df8
 80013cc:	00000000 	.word	0x00000000

080013d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001408 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013d6:	e003      	b.n	80013e0 <LoopCopyDataInit>

080013d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013de:	3104      	adds	r1, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013e8:	d3f6      	bcc.n	80013d8 <CopyDataInit>
	ldr	r2, =_sbss
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013ec:	e002      	b.n	80013f4 <LoopFillZerobss>

080013ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013f0:	f842 3b04 	str.w	r3, [r2], #4

080013f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <LoopForever+0x16>)
	cmp	r2, r3
 80013f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013f8:	d3f9      	bcc.n	80013ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013fa:	f000 fc4f 	bl	8001c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f7ff fefb 	bl	80011f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001402:	f000 f80f 	bl	8001424 <main>

08001406 <LoopForever>:

LoopForever:
    b LoopForever
 8001406:	e7fe      	b.n	8001406 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001408:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 800140c:	08009fc4 	.word	0x08009fc4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001410:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001414:	20000878 	.word	0x20000878
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8001418:	20000878 	.word	0x20000878
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 800141c:	20000e84 	.word	0x20000e84

08001420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC1_2_IRQHandler>
	...

08001424 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t i=0;
 800142a:	2300      	movs	r3, #0
 800142c:	77fb      	strb	r3, [r7, #31]
	uint8_t send=0;
 800142e:	2300      	movs	r3, #0
 8001430:	77bb      	strb	r3, [r7, #30]
	uint8_t tmp[]={0,0};
 8001432:	2300      	movs	r3, #0
 8001434:	773b      	strb	r3, [r7, #28]
 8001436:	2300      	movs	r3, #0
 8001438:	777b      	strb	r3, [r7, #29]
	uint8_t read[]={0x00,0x00,0x00};
 800143a:	2300      	movs	r3, #0
 800143c:	763b      	strb	r3, [r7, #24]
 800143e:	2300      	movs	r3, #0
 8001440:	767b      	strb	r3, [r7, #25]
 8001442:	2300      	movs	r3, #0
 8001444:	76bb      	strb	r3, [r7, #26]
	int16_t accel[]={0,0,0};
 8001446:	2300      	movs	r3, #0
 8001448:	823b      	strh	r3, [r7, #16]
 800144a:	2300      	movs	r3, #0
 800144c:	827b      	strh	r3, [r7, #18]
 800144e:	2300      	movs	r3, #0
 8001450:	82bb      	strh	r3, [r7, #20]
	int16_t gyro[]={0,0,0};
 8001452:	2300      	movs	r3, #0
 8001454:	813b      	strh	r3, [r7, #8]
 8001456:	2300      	movs	r3, #0
 8001458:	817b      	strh	r3, [r7, #10]
 800145a:	2300      	movs	r3, #0
 800145c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145e:	f000 fdb3 	bl	8001fc8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001462:	f000 f86b 	bl	800153c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001466:	f000 f9e5 	bl	8001834 <MX_GPIO_Init>
  MX_DMA_Init();
 800146a:	f000 f9cb 	bl	8001804 <MX_DMA_Init>
  MX_I2C1_Init();
 800146e:	f000 f8db 	bl	8001628 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001472:	f000 f90f 	bl	8001694 <MX_TIM3_Init>
  MX_TIM15_Init();
 8001476:	f000 f953 	bl	8001720 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 800147a:	f000 f993 	bl	80017a4 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800147e:	f000 f8af 	bl	80015e0 <MX_NVIC_Init>

  /* USER CODE BEGIN 2 */
	while(PROGRAM_START_flg == OFF);
 8001482:	bf00      	nop
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <main+0xf8>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0fb      	beq.n	8001484 <main+0x60>
	HAL_TIM_Base_Start_IT(&htim15);
 800148c:	4824      	ldr	r0, [pc, #144]	; (8001520 <main+0xfc>)
 800148e:	f004 faf1 	bl	8005a74 <HAL_TIM_Base_Start_IT>

	MPU6050_WhoAmI();	
 8001492:	f000 faa7 	bl	80019e4 <MPU6050_WhoAmI>
	MPU6050_Setup(GYR_RANGE_2000DPS,ACC_RANGE_8G);
 8001496:	2102      	movs	r1, #2
 8001498:	2003      	movs	r0, #3
 800149a:	f000 fab9 	bl	8001a10 <MPU6050_Setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2101      	movs	r1, #1
 80014a2:	4820      	ldr	r0, [pc, #128]	; (8001524 <main+0x100>)
 80014a4:	f001 fad8 	bl	8002a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2102      	movs	r1, #2
 80014ac:	481d      	ldr	r0, [pc, #116]	; (8001524 <main+0x100>)
 80014ae:	f001 fad3 	bl	8002a58 <HAL_GPIO_WritePin>
  while (PROGRAM_START_flg == ON)
 80014b2:	e02a      	b.n	800150a <main+0xe6>
 	{
		HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 80014b4:	2101      	movs	r1, #1
 80014b6:	481b      	ldr	r0, [pc, #108]	; (8001524 <main+0x100>)
 80014b8:	f001 fae6 	bl	8002a88 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port,LED4_Pin);
 80014bc:	2102      	movs	r1, #2
 80014be:	4819      	ldr	r0, [pc, #100]	; (8001524 <main+0x100>)
 80014c0:	f001 fae2 	bl	8002a88 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80014c4:	2064      	movs	r0, #100	; 0x64
 80014c6:	f000 fdcb 	bl	8002060 <HAL_Delay>
  /* USER CODE END WHILE */

 	/* USER CODE BEGIN 3 */
		/*accel x*/
		gyro[2] = MPU6050_GetGyroY();
 80014ca:	f000 fb05 	bl	8001ad8 <MPU6050_GetGyroY>
 80014ce:	4603      	mov	r3, r0
 80014d0:	81bb      	strh	r3, [r7, #12]
		//データを送信
		sprintf(data,"%f\n",(uint16_t)(angle*1000));
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <main+0x104>)
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800152c <main+0x108>
 80014dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80014e8:	88bb      	ldrh	r3, [r7, #4]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	4910      	ldr	r1, [pc, #64]	; (8001530 <main+0x10c>)
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <main+0x110>)
 80014f2:	f004 ff13 	bl	800631c <sprintf>
		HAL_UART_Transmit(&huart1,data,strlen(data),1);
 80014f6:	480f      	ldr	r0, [pc, #60]	; (8001534 <main+0x110>)
 80014f8:	f7ff fb82 	bl	8000c00 <strlen>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	2301      	movs	r3, #1
 8001502:	490c      	ldr	r1, [pc, #48]	; (8001534 <main+0x110>)
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <main+0x114>)
 8001506:	f003 fd4b 	bl	8004fa0 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
  while (PROGRAM_START_flg == ON)
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <main+0xf8>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d0d0      	beq.n	80014b4 <main+0x90>
		sprintf(data,"%f\n",(uint16_t)(angle*1000));
		HAL_UART_Transmit(&huart1,data,strlen(data),1);
  }
  /* USER CODE END 3 */

}
 8001512:	bf00      	nop
 8001514:	4618      	mov	r0, r3
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000e44 	.word	0x20000e44
 8001520:	2000091c 	.word	0x2000091c
 8001524:	48001400 	.word	0x48001400
 8001528:	20000a40 	.word	0x20000a40
 800152c:	447a0000 	.word	0x447a0000
 8001530:	08009df0 	.word	0x08009df0
 8001534:	20000a44 	.word	0x20000a44
 8001538:	20000958 	.word	0x20000958

0800153c <SystemClock_Config>:
/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001542:	2302      	movs	r3, #2
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001546:	2301      	movs	r3, #1
 8001548:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800154a:	2310      	movs	r3, #16
 800154c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800154e:	2300      	movs	r3, #0
 8001550:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001552:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001556:	4618      	mov	r0, r3
 8001558:	f002 f812 	bl	8003580 <HAL_RCC_OscConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x2a>
  {
    Error_Handler();
 8001562:	f000 fae5 	bl	8001b30 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f003 f8bf 	bl	8004704 <HAL_RCC_ClockConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800158c:	f000 fad0 	bl	8001b30 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001590:	2321      	movs	r3, #33	; 0x21
 8001592:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fb66 	bl	8004c70 <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015aa:	f000 fac1 	bl	8001b30 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80015ae:	f003 fb0f 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 80015b2:	4602      	mov	r2, r0
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <SystemClock_Config+0xa0>)
 80015b6:	fba3 2302 	umull	r2, r3, r3, r2
 80015ba:	099b      	lsrs	r3, r3, #6
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fe63 	bl	8002288 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80015c2:	2004      	movs	r0, #4
 80015c4:	f000 fe6c 	bl	80022a0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 fe30 	bl	8002234 <HAL_NVIC_SetPriority>
}
 80015d4:	bf00      	nop
 80015d6:	3758      	adds	r7, #88	; 0x58
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	10624dd3 	.word	0x10624dd3

080015e0 <MX_NVIC_Init>:

/** NVIC Configuration
*/
static void MX_NVIC_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	200e      	movs	r0, #14
 80015ea:	f000 fe23 	bl	8002234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015ee:	200e      	movs	r0, #14
 80015f0:	f000 fe3c 	bl	800226c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	200f      	movs	r0, #15
 80015fa:	f000 fe1b 	bl	8002234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015fe:	200f      	movs	r0, #15
 8001600:	f000 fe34 	bl	800226c <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	2025      	movs	r0, #37	; 0x25
 800160a:	f000 fe13 	bl	8002234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800160e:	2025      	movs	r0, #37	; 0x25
 8001610:	f000 fe2c 	bl	800226c <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	2028      	movs	r0, #40	; 0x28
 800161a:	f000 fe0b 	bl	8002234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800161e:	2028      	movs	r0, #40	; 0x28
 8001620:	f000 fe24 	bl	800226c <HAL_NVIC_EnableIRQ>
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_I2C1_Init+0x60>)
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <MX_I2C1_Init+0x64>)
 8001630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_I2C1_Init+0x60>)
 8001634:	4a16      	ldr	r2, [pc, #88]	; (8001690 <MX_I2C1_Init+0x68>)
 8001636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_I2C1_Init+0x60>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_I2C1_Init+0x60>)
 8001640:	2201      	movs	r2, #1
 8001642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_I2C1_Init+0x60>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_I2C1_Init+0x60>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <MX_I2C1_Init+0x60>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_I2C1_Init+0x60>)
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <MX_I2C1_Init+0x60>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <MX_I2C1_Init+0x60>)
 8001664:	f001 fa46 	bl	8002af4 <HAL_I2C_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800166e:	f000 fa5f 	bl	8001b30 <Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001672:	2100      	movs	r1, #0
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_I2C1_Init+0x60>)
 8001676:	f001 ff37 	bl	80034e8 <HAL_I2CEx_ConfigAnalogFilter>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001680:	f000 fa56 	bl	8001b30 <Error_Handler>
  }

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000894 	.word	0x20000894
 800168c:	40005400 	.word	0x40005400
 8001690:	2000090e 	.word	0x2000090e

08001694 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <MX_TIM3_Init+0x84>)
 800169c:	4a1f      	ldr	r2, [pc, #124]	; (800171c <MX_TIM3_Init+0x88>)
 800169e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <MX_TIM3_Init+0x84>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_TIM3_Init+0x84>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_TIM3_Init+0x84>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <MX_TIM3_Init+0x84>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016d0:	2301      	movs	r3, #1
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4619      	mov	r1, r3
 80016e2:	480d      	ldr	r0, [pc, #52]	; (8001718 <MX_TIM3_Init+0x84>)
 80016e4:	f004 f9e2 	bl	8005aac <HAL_TIM_Encoder_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 80016ee:	f000 fa1f 	bl	8001b30 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016fa:	463b      	mov	r3, r7
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_TIM3_Init+0x84>)
 8001700:	f004 fda4 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800170a:	f000 fa11 	bl	8001b30 <Error_Handler>
  }

}
 800170e:	bf00      	nop
 8001710:	3730      	adds	r7, #48	; 0x30
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200008e0 	.word	0x200008e0
 800171c:	40000400 	.word	0x40000400

08001720 <MX_TIM15_Init>:

/* TIM15 init function */
static void MX_TIM15_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim15.Instance = TIM15;
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <MX_TIM15_Init+0x7c>)
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <MX_TIM15_Init+0x80>)
 800172a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8000;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <MX_TIM15_Init+0x7c>)
 800172e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001732:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <MX_TIM15_Init+0x7c>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10;
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <MX_TIM15_Init+0x7c>)
 800173c:	220a      	movs	r2, #10
 800173e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <MX_TIM15_Init+0x7c>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_TIM15_Init+0x7c>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800174c:	4813      	ldr	r0, [pc, #76]	; (800179c <MX_TIM15_Init+0x7c>)
 800174e:	f004 f965 	bl	8005a1c <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM15_Init+0x3c>
  {
    Error_Handler();
 8001758:	f000 f9ea 	bl	8001b30 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <MX_TIM15_Init+0x7c>)
 800176a:	f004 fb3f 	bl	8005dec <HAL_TIM_ConfigClockSource>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001774:	f000 f9dc 	bl	8001b30 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_TIM15_Init+0x7c>)
 8001786:	f004 fd61 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001790:	f000 f9ce 	bl	8001b30 <Error_Handler>
  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000091c 	.word	0x2000091c
 80017a0:	40014000 	.word	0x40014000

080017a4 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017aa:	4a15      	ldr	r2, [pc, #84]	; (8001800 <MX_USART1_UART_Init+0x5c>)
 80017ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017ca:	220c      	movs	r2, #12
 80017cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017e8:	f003 fb88 	bl	8004efc <HAL_UART_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017f2:	f000 f99d 	bl	8001b30 <Error_Handler>
  }

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000958 	.word	0x20000958
 8001800:	40013800 	.word	0x40013800

08001804 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <MX_DMA_Init+0x2c>)
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_DMA_Init+0x2c>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6153      	str	r3, [r2, #20]
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_DMA_Init+0x2c>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800183a:	4a46      	ldr	r2, [pc, #280]	; (8001954 <MX_GPIO_Init+0x120>)
 800183c:	4b45      	ldr	r3, [pc, #276]	; (8001954 <MX_GPIO_Init+0x120>)
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001844:	6153      	str	r3, [r2, #20]
 8001846:	4b43      	ldr	r3, [pc, #268]	; (8001954 <MX_GPIO_Init+0x120>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	4a40      	ldr	r2, [pc, #256]	; (8001954 <MX_GPIO_Init+0x120>)
 8001854:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <MX_GPIO_Init+0x120>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	6153      	str	r3, [r2, #20]
 800185e:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <MX_GPIO_Init+0x120>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	4a3a      	ldr	r2, [pc, #232]	; (8001954 <MX_GPIO_Init+0x120>)
 800186c:	4b39      	ldr	r3, [pc, #228]	; (8001954 <MX_GPIO_Init+0x120>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001874:	6153      	str	r3, [r2, #20]
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <MX_GPIO_Init+0x120>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	2103      	movs	r1, #3
 8001886:	4834      	ldr	r0, [pc, #208]	; (8001958 <MX_GPIO_Init+0x124>)
 8001888:	f001 f8e6 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, REDE_Pin|LED2_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001896:	f001 f8df 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2108      	movs	r1, #8
 800189e:	482f      	ldr	r0, [pc, #188]	; (800195c <MX_GPIO_Init+0x128>)
 80018a0:	f001 f8da 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80018a4:	2303      	movs	r3, #3
 80018a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	4619      	mov	r1, r3
 80018ba:	4827      	ldr	r0, [pc, #156]	; (8001958 <MX_GPIO_Init+0x124>)
 80018bc:	f000 ff56 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80018c0:	f241 03ff 	movw	r3, #4351	; 0x10ff
 80018c4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d8:	f000 ff48 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018dc:	2303      	movs	r3, #3
 80018de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	4619      	mov	r1, r3
 80018ee:	481b      	ldr	r0, [pc, #108]	; (800195c <MX_GPIO_Init+0x128>)
 80018f0:	f000 ff3c 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : REDE_Pin LED2_Pin */
  GPIO_InitStruct.Pin = REDE_Pin|LED2_Pin;
 80018f4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80018f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001910:	f000 ff2c 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001914:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_GPIO_Init+0x12c>)
 800191c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f000 ff1e 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001930:	2308      	movs	r3, #8
 8001932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	4619      	mov	r1, r3
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_GPIO_Init+0x128>)
 8001948:	f000 ff10 	bl	800276c <HAL_GPIO_Init>

}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	48001400 	.word	0x48001400
 800195c:	48000400 	.word	0x48000400
 8001960:	10110000 	.word	0x10110000
 8001964:	00000000 	.word	0x00000000

08001968 <calc_MPU>:

/* USER CODE BEGIN 4 */
void calc_MPU(){
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	af00      	add	r7, sp, #0
	angle += (((float)MPU6050_GetGyroY())/16.4)*0.01;
 800196c:	f000 f8b4 	bl	8001ad8 <MPU6050_GetGyroY>
 8001970:	4603      	mov	r3, r0
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197a:	ee17 0a90 	vmov	r0, s15
 800197e:	f7fe fdd5 	bl	800052c <__aeabi_f2d>
 8001982:	a314      	add	r3, pc, #80	; (adr r3, 80019d4 <calc_MPU+0x6c>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	f7fe ff4e 	bl	8000828 <__aeabi_ddiv>
 800198c:	4603      	mov	r3, r0
 800198e:	460c      	mov	r4, r1
 8001990:	4618      	mov	r0, r3
 8001992:	4621      	mov	r1, r4
 8001994:	a311      	add	r3, pc, #68	; (adr r3, 80019dc <calc_MPU+0x74>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe fe1b 	bl	80005d4 <__aeabi_dmul>
 800199e:	4603      	mov	r3, r0
 80019a0:	460c      	mov	r4, r1
 80019a2:	4625      	mov	r5, r4
 80019a4:	461c      	mov	r4, r3
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <calc_MPU+0x68>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdbe 	bl	800052c <__aeabi_f2d>
 80019b0:	4622      	mov	r2, r4
 80019b2:	462b      	mov	r3, r5
 80019b4:	f7fe fc5c 	bl	8000270 <__adddf3>
 80019b8:	4603      	mov	r3, r0
 80019ba:	460c      	mov	r4, r1
 80019bc:	4618      	mov	r0, r3
 80019be:	4621      	mov	r1, r4
 80019c0:	f7ff f81a 	bl	80009f8 <__aeabi_d2f>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b02      	ldr	r3, [pc, #8]	; (80019d0 <calc_MPU+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
}
 80019ca:	bf00      	nop
 80019cc:	bdb0      	pop	{r4, r5, r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000a40 	.word	0x20000a40
 80019d4:	66666666 	.word	0x66666666
 80019d8:	40306666 	.word	0x40306666
 80019dc:	47ae147b 	.word	0x47ae147b
 80019e0:	3f847ae1 	.word	0x3f847ae1

080019e4 <MPU6050_WhoAmI>:
uint8_t MPU6050_WhoAmI(){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af04      	add	r7, sp, #16
	uint8_t rx;
	//who_am_i
	HAL_I2C_Mem_Read(&hi2c1,0xD0,0x75,I2C_MEMADD_SIZE_8BIT,&rx,1,10);
 80019ea:	230a      	movs	r3, #10
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2275      	movs	r2, #117	; 0x75
 80019fa:	21d0      	movs	r1, #208	; 0xd0
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <MPU6050_WhoAmI+0x28>)
 80019fe:	f001 fa29 	bl	8002e54 <HAL_I2C_Mem_Read>
	return rx;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000894 	.word	0x20000894

08001a10 <MPU6050_Setup>:
void MPU6050_Setup(uint8_t Gyrange,uint8_t Acrange){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	4603      	mov	r3, r0
 8001a18:	460a      	mov	r2, r1
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	71bb      	strb	r3, [r7, #6]
	uint8_t send;
	//SMPLRT_DIV
	send = 0x00;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1,0xD0,0x19,I2C_MEMADD_SIZE_8BIT,&send,1,10);
 8001a24:	230a      	movs	r3, #10
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	f107 030f 	add.w	r3, r7, #15
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2301      	movs	r3, #1
 8001a34:	2219      	movs	r2, #25
 8001a36:	21d0      	movs	r1, #208	; 0xd0
 8001a38:	4826      	ldr	r0, [pc, #152]	; (8001ad4 <MPU6050_Setup+0xc4>)
 8001a3a:	f001 f8e5 	bl	8002c08 <HAL_I2C_Mem_Write>
	//PWR_MGMT_1
	send = 0x00;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1,0xD0,0x6b,I2C_MEMADD_SIZE_8BIT,&send,1,10);
 8001a42:	230a      	movs	r3, #10
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	2301      	movs	r3, #1
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	f107 030f 	add.w	r3, r7, #15
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2301      	movs	r3, #1
 8001a52:	226b      	movs	r2, #107	; 0x6b
 8001a54:	21d0      	movs	r1, #208	; 0xd0
 8001a56:	481f      	ldr	r0, [pc, #124]	; (8001ad4 <MPU6050_Setup+0xc4>)
 8001a58:	f001 f8d6 	bl	8002c08 <HAL_I2C_Mem_Write>
	//GYRO_CONFIG
	send = (Gyrange & 3) << 3;
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f003 0318 	and.w	r3, r3, #24
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1,0xD0,0x1b,I2C_MEMADD_SIZE_8BIT,&send,1,10);
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	f107 030f 	add.w	r3, r7, #15
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	221b      	movs	r2, #27
 8001a7c:	21d0      	movs	r1, #208	; 0xd0
 8001a7e:	4815      	ldr	r0, [pc, #84]	; (8001ad4 <MPU6050_Setup+0xc4>)
 8001a80:	f001 f8c2 	bl	8002c08 <HAL_I2C_Mem_Write>
	//ACCEL_CONFIG
	send = (Acrange & 3) << 3;
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f003 0318 	and.w	r3, r3, #24
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1,0xD0,0x1c,I2C_MEMADD_SIZE_8BIT,&send,1,10);
 8001a92:	230a      	movs	r3, #10
 8001a94:	9302      	str	r3, [sp, #8]
 8001a96:	2301      	movs	r3, #1
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	f107 030f 	add.w	r3, r7, #15
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	221c      	movs	r2, #28
 8001aa4:	21d0      	movs	r1, #208	; 0xd0
 8001aa6:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <MPU6050_Setup+0xc4>)
 8001aa8:	f001 f8ae 	bl	8002c08 <HAL_I2C_Mem_Write>
	//INT_PIN_CFG
	send = 0x02;
 8001aac:	2302      	movs	r3, #2
 8001aae:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1,0xD0,0x37,I2C_MEMADD_SIZE_8BIT,&send,1,10);
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	f107 030f 	add.w	r3, r7, #15
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	2237      	movs	r2, #55	; 0x37
 8001ac2:	21d0      	movs	r1, #208	; 0xd0
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <MPU6050_Setup+0xc4>)
 8001ac6:	f001 f89f 	bl	8002c08 <HAL_I2C_Mem_Write>
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000894 	.word	0x20000894

08001ad8 <MPU6050_GetGyroY>:
	return MPU6050_Read16bit(GYR);
}
int16_t MPU6050_GetGyroP(void){
	return MPU6050_Read16bit(GYP);
}
int16_t MPU6050_GetGyroY(void){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	return MPU6050_Read16bit(GYY);
 8001adc:	2047      	movs	r0, #71	; 0x47
 8001ade:	f000 f803 	bl	8001ae8 <MPU6050_Read16bit>
 8001ae2:	4603      	mov	r3, r0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <MPU6050_Read16bit>:
	return MPU6050_Read16bit(ACY);
}
int16_t MPU6050_GetAccZ(void){
	return MPU6050_Read16bit(ACZ);
}
int16_t MPU6050_Read16bit(uint8_t addr){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
	union{
		uint16_t u;
		int16_t i;
	} _u2i;
	uint8_t rx[2];
	HAL_I2C_Mem_Read(&hi2c1,0xD0,addr,I2C_MEMADD_SIZE_8BIT,rx,2,10);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	230a      	movs	r3, #10
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	2302      	movs	r3, #2
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	f107 0308 	add.w	r3, r7, #8
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2301      	movs	r3, #1
 8001b06:	21d0      	movs	r1, #208	; 0xd0
 8001b08:	4808      	ldr	r0, [pc, #32]	; (8001b2c <MPU6050_Read16bit+0x44>)
 8001b0a:	f001 f9a3 	bl	8002e54 <HAL_I2C_Mem_Read>
	_u2i.u = (rx[0]<<8)|rx[1];
 8001b0e:	7a3b      	ldrb	r3, [r7, #8]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	7a7b      	ldrb	r3, [r7, #9]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	81bb      	strh	r3, [r7, #12]
	return _u2i.i;
 8001b20:	89bb      	ldrh	r3, [r7, #12]
 8001b22:	b21b      	sxth	r3, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000894 	.word	0x20000894

08001b30 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8001b34:	2108      	movs	r1, #8
 8001b36:	4803      	ldr	r0, [pc, #12]	; (8001b44 <Error_Handler+0x14>)
 8001b38:	f000 ffa6 	bl	8002a88 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8001b3c:	2032      	movs	r0, #50	; 0x32
 8001b3e:	f000 fa8f 	bl	8002060 <HAL_Delay>
  }
 8001b42:	e7f7      	b.n	8001b34 <Error_Handler+0x4>
 8001b44:	48000400 	.word	0x48000400

08001b48 <_sbrk_r>:

/* Register name faking - works in collusion with the linker.  */
register char * stack_ptr asm ("sp");

caddr_t _sbrk_r (struct _reent *r, int incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  extern char   end asm ("end"); /* Defined by the linker.  */
  static char * heap_end;
  char *        prev_heap_end;

  if (heap_end == NULL)
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <_sbrk_r+0x54>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <_sbrk_r+0x18>
    heap_end = & end;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <_sbrk_r+0x54>)
 8001b5c:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <_sbrk_r+0x58>)
 8001b5e:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <_sbrk_r+0x54>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  
  if (heap_end + incr > stack_ptr)
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <_sbrk_r+0x54>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	466a      	mov	r2, sp
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d907      	bls.n	8001b84 <_sbrk_r+0x3c>

      _write (1, "_sbrk: Heap and stack collision\n", 32);
      
      abort ();
#else
      errno = ENOMEM;
 8001b74:	f004 fbcc 	bl	8006310 <__errno>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	6013      	str	r3, [r2, #0]
      return (caddr_t) -1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e006      	b.n	8001b92 <_sbrk_r+0x4a>
#endif
  }
  
  heap_end += incr;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <_sbrk_r+0x54>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a03      	ldr	r2, [pc, #12]	; (8001b9c <_sbrk_r+0x54>)
 8001b8e:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 8001b90:	68fb      	ldr	r3, [r7, #12]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000e48 	.word	0x20000e48
 8001ba0:	20000e88 	.word	0x20000e88

08001ba4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop

08001bb4 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8001bb8:	e7fe      	b.n	8001bb8 <HardFault_Handler+0x4>
 8001bba:	bf00      	nop

08001bbc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>
 8001bc2:	bf00      	nop

08001bc4 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8001bc8:	e7fe      	b.n	8001bc8 <BusFault_Handler+0x4>
 8001bca:	bf00      	nop

08001bcc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>
 8001bd2:	bf00      	nop

08001bd4 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop

08001be4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop

08001bf4 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop

08001c04 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c08:	f000 fa10 	bl	800202c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001c0c:	f000 fb64 	bl	80022d8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <DMA1_Channel4_IRQHandler>:

/**
* @brief This function handles DMA1 channel4 global interrupt.
*/
void DMA1_Channel4_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <DMA1_Channel4_IRQHandler+0x10>)
 8001c1a:	f000 fbb7 	bl	800238c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000a04 	.word	0x20000a04

08001c28 <DMA1_Channel5_IRQHandler>:

/**
* @brief This function handles DMA1 channel5 global interrupt.
*/
void DMA1_Channel5_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	calc_MPU();
 8001c2c:	f7ff fe9c 	bl	8001968 <calc_MPU>
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <DMA1_Channel5_IRQHandler+0x14>)
 8001c32:	f000 fbab 	bl	800238c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200009c8 	.word	0x200009c8

08001c40 <TIM1_BRK_TIM15_IRQHandler>:

/**
* @brief This function handles TIM1 break and TIM15 interrupts.
*/
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8001c44:	2108      	movs	r1, #8
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001c48:	f000 ff1e 	bl	8002a88 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8001c4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c54:	f000 ff18 	bl	8002a88 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001c58:	4803      	ldr	r0, [pc, #12]	; (8001c68 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001c5a:	f003 ffbf 	bl	8005bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	48000400 	.word	0x48000400
 8001c68:	2000091c 	.word	0x2000091c

08001c6c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <USART1_IRQHandler+0x10>)
 8001c72:	f003 fa17 	bl	80050a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000958 	.word	0x20000958

08001c80 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  PROGRAM_START_flg = 1;
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <EXTI15_10_IRQHandler+0x18>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001c8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c8e:	f000 ff0d 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000e44 	.word	0x20000e44

08001c9c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <SystemInit+0x84>)
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <SystemInit+0x84>)
 8001ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cb0:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <SystemInit+0x88>)
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <SystemInit+0x88>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001cbc:	4919      	ldr	r1, [pc, #100]	; (8001d24 <SystemInit+0x88>)
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <SystemInit+0x88>)
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <SystemInit+0x8c>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001cc8:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <SystemInit+0x88>)
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <SystemInit+0x88>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cd8:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <SystemInit+0x88>)
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <SystemInit+0x88>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <SystemInit+0x88>)
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <SystemInit+0x88>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001cee:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <SystemInit+0x88>)
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <SystemInit+0x88>)
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	f023 030f 	bic.w	r3, r3, #15
 8001cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001cfc:	4909      	ldr	r1, [pc, #36]	; (8001d24 <SystemInit+0x88>)
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <SystemInit+0x88>)
 8001d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <SystemInit+0x90>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <SystemInit+0x88>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SystemInit+0x84>)
 8001d10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d14:	609a      	str	r2, [r3, #8]
#endif
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	f87fc00c 	.word	0xf87fc00c
 8001d2c:	ff00fccc 	.word	0xff00fccc

08001d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <HAL_MspInit+0x80>)
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_MspInit+0x80>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6193      	str	r3, [r2, #24]
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_MspInit+0x80>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4e:	2003      	movs	r0, #3
 8001d50:	f000 fa64 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2100      	movs	r1, #0
 8001d58:	f06f 000b 	mvn.w	r0, #11
 8001d5c:	f000 fa6a 	bl	8002234 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	f06f 000a 	mvn.w	r0, #10
 8001d68:	f000 fa64 	bl	8002234 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	f06f 0009 	mvn.w	r0, #9
 8001d74:	f000 fa5e 	bl	8002234 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	f06f 0004 	mvn.w	r0, #4
 8001d80:	f000 fa58 	bl	8002234 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	f06f 0003 	mvn.w	r0, #3
 8001d8c:	f000 fa52 	bl	8002234 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	f06f 0001 	mvn.w	r0, #1
 8001d98:	f000 fa4c 	bl	8002234 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f000 fa46 	bl	8002234 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a11      	ldr	r2, [pc, #68]	; (8001e08 <HAL_I2C_MspInit+0x54>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d11b      	bne.n	8001dfe <HAL_I2C_MspInit+0x4a>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
 8001dc6:	23c0      	movs	r3, #192	; 0xc0
 8001dc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dca:	2312      	movs	r3, #18
 8001dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4619      	mov	r1, r3
 8001de0:	480a      	ldr	r0, [pc, #40]	; (8001e0c <HAL_I2C_MspInit+0x58>)
 8001de2:	f000 fcc3 	bl	800276c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_I2C_MspInit+0x5c>)
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_I2C_MspInit+0x5c>)
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df0:	61d3      	str	r3, [r2, #28]
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <HAL_I2C_MspInit+0x5c>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dfe:	bf00      	nop
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	48000400 	.word	0x48000400
 8001e10:	40021000 	.word	0x40021000

08001e14 <HAL_TIM_Encoder_MspInit>:
  /* USER CODE END I2C1_MspDeInit 1 */

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM3)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a11      	ldr	r2, [pc, #68]	; (8001e68 <HAL_TIM_Encoder_MspInit+0x54>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d11b      	bne.n	8001e5e <HAL_TIM_Encoder_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e26:	4a11      	ldr	r2, [pc, #68]	; (8001e6c <HAL_TIM_Encoder_MspInit+0x58>)
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_TIM_Encoder_MspInit+0x58>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	61d3      	str	r3, [r2, #28]
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_TIM_Encoder_MspInit+0x58>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
  
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = Enc_A_Pin|Enc_B_Pin;
 8001e3e:	2330      	movs	r3, #48	; 0x30
 8001e40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 030c 	add.w	r3, r7, #12
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	; (8001e70 <HAL_TIM_Encoder_MspInit+0x5c>)
 8001e5a:	f000 fc87 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	48000400 	.word	0x48000400

08001e74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM15)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <HAL_TIM_Base_MspInit+0x44>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d113      	bne.n	8001eae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e86:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <HAL_TIM_Base_MspInit+0x48>)
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_TIM_Base_MspInit+0x48>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_TIM_Base_MspInit+0x48>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2018      	movs	r0, #24
 8001ea4:	f000 f9c6 	bl	8002234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001ea8:	2018      	movs	r0, #24
 8001eaa:	f000 f9df 	bl	800226c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40014000 	.word	0x40014000
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_UART_MspInit>:
  /* USER CODE END TIM15_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a38      	ldr	r2, [pc, #224]	; (8001fb0 <HAL_UART_MspInit+0xf0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d169      	bne.n	8001fa6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ed2:	4a38      	ldr	r2, [pc, #224]	; (8001fb4 <HAL_UART_MspInit+0xf4>)
 8001ed4:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_UART_MspInit+0xf4>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6193      	str	r3, [r2, #24]
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <HAL_UART_MspInit+0xf4>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX1_Pin|RX1_Pin;
 8001eea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001eee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001efc:	2307      	movs	r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	4619      	mov	r1, r3
 8001f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0a:	f000 fc2f 	bl	800276c <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_UART_MspInit+0xf8>)
 8001f10:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <HAL_UART_MspInit+0xfc>)
 8001f12:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_UART_MspInit+0xf8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_UART_MspInit+0xf8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <HAL_UART_MspInit+0xf8>)
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_UART_MspInit+0xf8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_UART_MspInit+0xf8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_UART_MspInit+0xf8>)
 8001f34:	2220      	movs	r2, #32
 8001f36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_UART_MspInit+0xf8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f3e:	481e      	ldr	r0, [pc, #120]	; (8001fb8 <HAL_UART_MspInit+0xf8>)
 8001f40:	f000 f9d8 	bl	80022f4 <HAL_DMA_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8001f4a:	f7ff fdf1 	bl	8001b30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_UART_MspInit+0xf8>)
 8001f52:	665a      	str	r2, [r3, #100]	; 0x64
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_UART_MspInit+0xf8>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6253      	str	r3, [r2, #36]	; 0x24

    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_UART_MspInit+0x100>)
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_UART_MspInit+0x104>)
 8001f5e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_UART_MspInit+0x100>)
 8001f62:	2210      	movs	r2, #16
 8001f64:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_UART_MspInit+0x100>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_UART_MspInit+0x100>)
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_UART_MspInit+0x100>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_UART_MspInit+0x100>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_UART_MspInit+0x100>)
 8001f80:	2220      	movs	r2, #32
 8001f82:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_UART_MspInit+0x100>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f8a:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <HAL_UART_MspInit+0x100>)
 8001f8c:	f000 f9b2 	bl	80022f4 <HAL_DMA_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8001f96:	f7ff fdcb 	bl	8001b30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_UART_MspInit+0x100>)
 8001f9e:	661a      	str	r2, [r3, #96]	; 0x60
 8001fa0:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <HAL_UART_MspInit+0x100>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	200009c8 	.word	0x200009c8
 8001fbc:	40020058 	.word	0x40020058
 8001fc0:	20000a04 	.word	0x20000a04
 8001fc4:	40020044 	.word	0x40020044

08001fc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fcc:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <HAL_Init+0x28>)
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_Init+0x28>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f000 f91f 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f000 f808 	bl	8001ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe4:	f7ff fea4 	bl	8001d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40022000 	.word	0x40022000

08001ff4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_InitTick+0x30>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a09      	ldr	r2, [pc, #36]	; (8002028 <HAL_InitTick+0x34>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	099b      	lsrs	r3, r3, #6
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f93d 	bl	8002288 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800200e:	2200      	movs	r2, #0
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	f04f 30ff 	mov.w	r0, #4294967295
 8002016:	f000 f90d 	bl	8002234 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000042c 	.word	0x2000042c
 8002028:	10624dd3 	.word	0x10624dd3

0800202c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick++;
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <HAL_IncTick+0x18>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	4a03      	ldr	r2, [pc, #12]	; (8002044 <HAL_IncTick+0x18>)
 8002038:	6013      	str	r3, [r2, #0]
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	20000e4c 	.word	0x20000e4c

08002048 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;  
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_GetTick+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000e4c 	.word	0x20000e4c

08002060 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff ffee 	bl	8002048 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800206e:	bf00      	nop
 8002070:	f7ff ffea 	bl	8002048 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad2      	subs	r2, r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d3f7      	bcc.n	8002070 <HAL_Delay+0x10>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <NVIC_SetPriorityGrouping+0x44>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80020b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <NVIC_SetPriorityGrouping+0x44>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020dc:	0a1b      	lsrs	r3, r3, #8
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80020f6:	4909      	ldr	r1, [pc, #36]	; (800211c <NVIC_EnableIRQ+0x30>)
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	095b      	lsrs	r3, r3, #5
 80020fe:	79fa      	ldrb	r2, [r7, #7]
 8002100:	f002 021f 	and.w	r2, r2, #31
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	da0b      	bge.n	800214c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	490d      	ldr	r1, [pc, #52]	; (800216c <NVIC_SetPriority+0x4c>)
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	3b04      	subs	r3, #4
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	440b      	add	r3, r1
 8002148:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800214a:	e009      	b.n	8002160 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	4908      	ldr	r1, [pc, #32]	; (8002170 <NVIC_SetPriority+0x50>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00
 8002170:	e000e100 	.word	0xe000e100

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	2201      	movs	r2, #1
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	401a      	ands	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ba:	2101      	movs	r1, #1
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80021c8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff90 	bl	8002120 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff2f 	bl	8002088 <NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop

08002234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002246:	f7ff ff43 	bl	80020d0 <NVIC_GetPriorityGrouping>
 800224a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	6978      	ldr	r0, [r7, #20]
 8002252:	f7ff ff8f 	bl	8002174 <NVIC_EncodePriority>
 8002256:	4602      	mov	r2, r0
 8002258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff5e 	bl	8002120 <NVIC_SetPriority>
}
 8002264:	bf00      	nop
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ff36 	bl	80020ec <NVIC_EnableIRQ>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ffa1 	bl	80021d8 <SysTick_Config>
 8002296:	4603      	mov	r3, r0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d106      	bne.n	80022bc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80022ba:	e005      	b.n	80022c8 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	6013      	str	r3, [r2, #0]
  }
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e010 	.word	0xe000e010

080022d8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80022dc:	f000 f802 	bl	80022e4 <HAL_SYSTICK_Callback>
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop

080022f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e039      	b.n	800237e <HAL_DMA_Init+0x8a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002310:	2b00      	cmp	r3, #0
 8002312:	d103      	bne.n	800231c <HAL_DMA_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002332:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002336:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002340:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002358:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4313      	orrs	r3, r2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}  
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop

0800238c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{        
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8002394:	4b8f      	ldr	r3, [pc, #572]	; (80025d4 <HAL_DMA_IRQHandler+0x248>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	4b8e      	ldr	r3, [pc, #568]	; (80025d8 <HAL_DMA_IRQHandler+0x24c>)
 80023a0:	4299      	cmp	r1, r3
 80023a2:	d02e      	beq.n	8002402 <HAL_DMA_IRQHandler+0x76>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	4b8c      	ldr	r3, [pc, #560]	; (80025dc <HAL_DMA_IRQHandler+0x250>)
 80023ac:	4299      	cmp	r1, r3
 80023ae:	d026      	beq.n	80023fe <HAL_DMA_IRQHandler+0x72>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4619      	mov	r1, r3
 80023b6:	4b8a      	ldr	r3, [pc, #552]	; (80025e0 <HAL_DMA_IRQHandler+0x254>)
 80023b8:	4299      	cmp	r1, r3
 80023ba:	d01d      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x6c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_DMA_IRQHandler+0x258>)
 80023c4:	4299      	cmp	r1, r3
 80023c6:	d014      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x66>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	4b86      	ldr	r3, [pc, #536]	; (80025e8 <HAL_DMA_IRQHandler+0x25c>)
 80023d0:	4299      	cmp	r1, r3
 80023d2:	d00b      	beq.n	80023ec <HAL_DMA_IRQHandler+0x60>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	4b84      	ldr	r3, [pc, #528]	; (80025ec <HAL_DMA_IRQHandler+0x260>)
 80023dc:	4299      	cmp	r1, r3
 80023de:	d102      	bne.n	80023e6 <HAL_DMA_IRQHandler+0x5a>
 80023e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80023e4:	e00e      	b.n	8002404 <HAL_DMA_IRQHandler+0x78>
 80023e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80023ea:	e00b      	b.n	8002404 <HAL_DMA_IRQHandler+0x78>
 80023ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80023f0:	e008      	b.n	8002404 <HAL_DMA_IRQHandler+0x78>
 80023f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023f6:	e005      	b.n	8002404 <HAL_DMA_IRQHandler+0x78>
 80023f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023fc:	e002      	b.n	8002404 <HAL_DMA_IRQHandler+0x78>
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	e000      	b.n	8002404 <HAL_DMA_IRQHandler+0x78>
 8002402:	2308      	movs	r3, #8
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d05c      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x138>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d055      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x138>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	f022 0208 	bic.w	r2, r2, #8
 8002426:	601a      	str	r2, [r3, #0]
    
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002428:	4a6a      	ldr	r2, [pc, #424]	; (80025d4 <HAL_DMA_IRQHandler+0x248>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	4b69      	ldr	r3, [pc, #420]	; (80025d8 <HAL_DMA_IRQHandler+0x24c>)
 8002432:	4299      	cmp	r1, r3
 8002434:	d02e      	beq.n	8002494 <HAL_DMA_IRQHandler+0x108>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4619      	mov	r1, r3
 800243c:	4b67      	ldr	r3, [pc, #412]	; (80025dc <HAL_DMA_IRQHandler+0x250>)
 800243e:	4299      	cmp	r1, r3
 8002440:	d026      	beq.n	8002490 <HAL_DMA_IRQHandler+0x104>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4619      	mov	r1, r3
 8002448:	4b65      	ldr	r3, [pc, #404]	; (80025e0 <HAL_DMA_IRQHandler+0x254>)
 800244a:	4299      	cmp	r1, r3
 800244c:	d01d      	beq.n	800248a <HAL_DMA_IRQHandler+0xfe>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_DMA_IRQHandler+0x258>)
 8002456:	4299      	cmp	r1, r3
 8002458:	d014      	beq.n	8002484 <HAL_DMA_IRQHandler+0xf8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	4b61      	ldr	r3, [pc, #388]	; (80025e8 <HAL_DMA_IRQHandler+0x25c>)
 8002462:	4299      	cmp	r1, r3
 8002464:	d00b      	beq.n	800247e <HAL_DMA_IRQHandler+0xf2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	4b5f      	ldr	r3, [pc, #380]	; (80025ec <HAL_DMA_IRQHandler+0x260>)
 800246e:	4299      	cmp	r1, r3
 8002470:	d102      	bne.n	8002478 <HAL_DMA_IRQHandler+0xec>
 8002472:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002476:	e00e      	b.n	8002496 <HAL_DMA_IRQHandler+0x10a>
 8002478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800247c:	e00b      	b.n	8002496 <HAL_DMA_IRQHandler+0x10a>
 800247e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002482:	e008      	b.n	8002496 <HAL_DMA_IRQHandler+0x10a>
 8002484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002488:	e005      	b.n	8002496 <HAL_DMA_IRQHandler+0x10a>
 800248a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800248e:	e002      	b.n	8002496 <HAL_DMA_IRQHandler+0x10a>
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	e000      	b.n	8002496 <HAL_DMA_IRQHandler+0x10a>
 8002494:	2308      	movs	r3, #8
 8002496:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;    
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2204      	movs	r2, #4
 80024a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2020 	strb.w	r2, [r3, #32]
    
      if (hdma->XferErrorCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x138>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80024c4:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <HAL_DMA_IRQHandler+0x248>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <HAL_DMA_IRQHandler+0x24c>)
 80024d0:	4299      	cmp	r1, r3
 80024d2:	d02e      	beq.n	8002532 <HAL_DMA_IRQHandler+0x1a6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	4b40      	ldr	r3, [pc, #256]	; (80025dc <HAL_DMA_IRQHandler+0x250>)
 80024dc:	4299      	cmp	r1, r3
 80024de:	d026      	beq.n	800252e <HAL_DMA_IRQHandler+0x1a2>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <HAL_DMA_IRQHandler+0x254>)
 80024e8:	4299      	cmp	r1, r3
 80024ea:	d01d      	beq.n	8002528 <HAL_DMA_IRQHandler+0x19c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <HAL_DMA_IRQHandler+0x258>)
 80024f4:	4299      	cmp	r1, r3
 80024f6:	d014      	beq.n	8002522 <HAL_DMA_IRQHandler+0x196>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_DMA_IRQHandler+0x25c>)
 8002500:	4299      	cmp	r1, r3
 8002502:	d00b      	beq.n	800251c <HAL_DMA_IRQHandler+0x190>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	4b38      	ldr	r3, [pc, #224]	; (80025ec <HAL_DMA_IRQHandler+0x260>)
 800250c:	4299      	cmp	r1, r3
 800250e:	d102      	bne.n	8002516 <HAL_DMA_IRQHandler+0x18a>
 8002510:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002514:	e00e      	b.n	8002534 <HAL_DMA_IRQHandler+0x1a8>
 8002516:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800251a:	e00b      	b.n	8002534 <HAL_DMA_IRQHandler+0x1a8>
 800251c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002520:	e008      	b.n	8002534 <HAL_DMA_IRQHandler+0x1a8>
 8002522:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002526:	e005      	b.n	8002534 <HAL_DMA_IRQHandler+0x1a8>
 8002528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800252c:	e002      	b.n	8002534 <HAL_DMA_IRQHandler+0x1a8>
 800252e:	2340      	movs	r3, #64	; 0x40
 8002530:	e000      	b.n	8002534 <HAL_DMA_IRQHandler+0x1a8>
 8002532:	2304      	movs	r3, #4
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d068      	beq.n	800260c <HAL_DMA_IRQHandler+0x280>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d061      	beq.n	800260c <HAL_DMA_IRQHandler+0x280>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <HAL_DMA_IRQHandler+0x1da>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	f022 0204 	bic.w	r2, r2, #4
 8002564:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002566:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <HAL_DMA_IRQHandler+0x248>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <HAL_DMA_IRQHandler+0x24c>)
 8002570:	4299      	cmp	r1, r3
 8002572:	d03d      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x264>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	4b18      	ldr	r3, [pc, #96]	; (80025dc <HAL_DMA_IRQHandler+0x250>)
 800257c:	4299      	cmp	r1, r3
 800257e:	d026      	beq.n	80025ce <HAL_DMA_IRQHandler+0x242>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_DMA_IRQHandler+0x254>)
 8002588:	4299      	cmp	r1, r3
 800258a:	d01d      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x23c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_DMA_IRQHandler+0x258>)
 8002594:	4299      	cmp	r1, r3
 8002596:	d014      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x236>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_DMA_IRQHandler+0x25c>)
 80025a0:	4299      	cmp	r1, r3
 80025a2:	d00b      	beq.n	80025bc <HAL_DMA_IRQHandler+0x230>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_DMA_IRQHandler+0x260>)
 80025ac:	4299      	cmp	r1, r3
 80025ae:	d102      	bne.n	80025b6 <HAL_DMA_IRQHandler+0x22a>
 80025b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025b4:	e01d      	b.n	80025f2 <HAL_DMA_IRQHandler+0x266>
 80025b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025ba:	e01a      	b.n	80025f2 <HAL_DMA_IRQHandler+0x266>
 80025bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025c0:	e017      	b.n	80025f2 <HAL_DMA_IRQHandler+0x266>
 80025c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025c6:	e014      	b.n	80025f2 <HAL_DMA_IRQHandler+0x266>
 80025c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025cc:	e011      	b.n	80025f2 <HAL_DMA_IRQHandler+0x266>
 80025ce:	2340      	movs	r3, #64	; 0x40
 80025d0:	e00f      	b.n	80025f2 <HAL_DMA_IRQHandler+0x266>
 80025d2:	bf00      	nop
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020008 	.word	0x40020008
 80025dc:	4002001c 	.word	0x4002001c
 80025e0:	40020030 	.word	0x40020030
 80025e4:	40020044 	.word	0x40020044
 80025e8:	40020058 	.word	0x40020058
 80025ec:	4002006c 	.word	0x4002006c
 80025f0:	2304      	movs	r3, #4
 80025f2:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2211      	movs	r2, #17
 80025f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_DMA_IRQHandler+0x280>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <HAL_DMA_IRQHandler+0x3c4>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4619      	mov	r1, r3
 8002616:	4b4f      	ldr	r3, [pc, #316]	; (8002754 <HAL_DMA_IRQHandler+0x3c8>)
 8002618:	4299      	cmp	r1, r3
 800261a:	d02e      	beq.n	800267a <HAL_DMA_IRQHandler+0x2ee>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <HAL_DMA_IRQHandler+0x3cc>)
 8002624:	4299      	cmp	r1, r3
 8002626:	d026      	beq.n	8002676 <HAL_DMA_IRQHandler+0x2ea>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	4b4b      	ldr	r3, [pc, #300]	; (800275c <HAL_DMA_IRQHandler+0x3d0>)
 8002630:	4299      	cmp	r1, r3
 8002632:	d01d      	beq.n	8002670 <HAL_DMA_IRQHandler+0x2e4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	4b49      	ldr	r3, [pc, #292]	; (8002760 <HAL_DMA_IRQHandler+0x3d4>)
 800263c:	4299      	cmp	r1, r3
 800263e:	d014      	beq.n	800266a <HAL_DMA_IRQHandler+0x2de>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_DMA_IRQHandler+0x3d8>)
 8002648:	4299      	cmp	r1, r3
 800264a:	d00b      	beq.n	8002664 <HAL_DMA_IRQHandler+0x2d8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	4b45      	ldr	r3, [pc, #276]	; (8002768 <HAL_DMA_IRQHandler+0x3dc>)
 8002654:	4299      	cmp	r1, r3
 8002656:	d102      	bne.n	800265e <HAL_DMA_IRQHandler+0x2d2>
 8002658:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800265c:	e00e      	b.n	800267c <HAL_DMA_IRQHandler+0x2f0>
 800265e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002662:	e00b      	b.n	800267c <HAL_DMA_IRQHandler+0x2f0>
 8002664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002668:	e008      	b.n	800267c <HAL_DMA_IRQHandler+0x2f0>
 800266a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266e:	e005      	b.n	800267c <HAL_DMA_IRQHandler+0x2f0>
 8002670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002674:	e002      	b.n	800267c <HAL_DMA_IRQHandler+0x2f0>
 8002676:	2320      	movs	r3, #32
 8002678:	e000      	b.n	800267c <HAL_DMA_IRQHandler+0x2f0>
 800267a:	2302      	movs	r3, #2
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d061      	beq.n	8002746 <HAL_DMA_IRQHandler+0x3ba>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d05a      	beq.n	8002746 <HAL_DMA_IRQHandler+0x3ba>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b00      	cmp	r3, #0
 800269c:	d107      	bne.n	80026ae <HAL_DMA_IRQHandler+0x322>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	f022 0202 	bic.w	r2, r2, #2
 80026ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026ae:	4a28      	ldr	r2, [pc, #160]	; (8002750 <HAL_DMA_IRQHandler+0x3c4>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_DMA_IRQHandler+0x3c8>)
 80026b8:	4299      	cmp	r1, r3
 80026ba:	d02e      	beq.n	800271a <HAL_DMA_IRQHandler+0x38e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	4b25      	ldr	r3, [pc, #148]	; (8002758 <HAL_DMA_IRQHandler+0x3cc>)
 80026c4:	4299      	cmp	r1, r3
 80026c6:	d026      	beq.n	8002716 <HAL_DMA_IRQHandler+0x38a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	4b23      	ldr	r3, [pc, #140]	; (800275c <HAL_DMA_IRQHandler+0x3d0>)
 80026d0:	4299      	cmp	r1, r3
 80026d2:	d01d      	beq.n	8002710 <HAL_DMA_IRQHandler+0x384>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <HAL_DMA_IRQHandler+0x3d4>)
 80026dc:	4299      	cmp	r1, r3
 80026de:	d014      	beq.n	800270a <HAL_DMA_IRQHandler+0x37e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <HAL_DMA_IRQHandler+0x3d8>)
 80026e8:	4299      	cmp	r1, r3
 80026ea:	d00b      	beq.n	8002704 <HAL_DMA_IRQHandler+0x378>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_DMA_IRQHandler+0x3dc>)
 80026f4:	4299      	cmp	r1, r3
 80026f6:	d102      	bne.n	80026fe <HAL_DMA_IRQHandler+0x372>
 80026f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026fc:	e00e      	b.n	800271c <HAL_DMA_IRQHandler+0x390>
 80026fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002702:	e00b      	b.n	800271c <HAL_DMA_IRQHandler+0x390>
 8002704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002708:	e008      	b.n	800271c <HAL_DMA_IRQHandler+0x390>
 800270a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800270e:	e005      	b.n	800271c <HAL_DMA_IRQHandler+0x390>
 8002710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002714:	e002      	b.n	800271c <HAL_DMA_IRQHandler+0x390>
 8002716:	2320      	movs	r3, #32
 8002718:	e000      	b.n	800271c <HAL_DMA_IRQHandler+0x390>
 800271a:	2302      	movs	r3, #2
 800271c:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;    
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_DMA_IRQHandler+0x3ba>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	4798      	blx	r3
      }
    }
  }
}  
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40020000 	.word	0x40020000
 8002754:	40020008 	.word	0x40020008
 8002758:	4002001c 	.word	0x4002001c
 800275c:	40020030 	.word	0x40020030
 8002760:	40020044 	.word	0x40020044
 8002764:	40020058 	.word	0x40020058
 8002768:	4002006c 	.word	0x4002006c

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002782:	e14e      	b.n	8002a22 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8140 	beq.w	8002a1c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x40>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b12      	cmp	r3, #18
 80027aa:	d123      	bne.n	80027f4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	08da      	lsrs	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3208      	adds	r2, #8
 80027b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	6939      	ldr	r1, [r7, #16]
 80027f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d00b      	beq.n	8002848 <HAL_GPIO_Init+0xdc>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d007      	beq.n	8002848 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800283c:	2b11      	cmp	r3, #17
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b12      	cmp	r3, #18
 8002846:	d130      	bne.n	80028aa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287e:	2201      	movs	r2, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 0201 	and.w	r2, r3, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 809a 	beq.w	8002a1c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e8:	4a55      	ldr	r2, [pc, #340]	; (8002a40 <HAL_GPIO_Init+0x2d4>)
 80028ea:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <HAL_GPIO_Init+0x2d4>)
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b52      	ldr	r3, [pc, #328]	; (8002a40 <HAL_GPIO_Init+0x2d4>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002900:	4a50      	ldr	r2, [pc, #320]	; (8002a44 <HAL_GPIO_Init+0x2d8>)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800292a:	d013      	beq.n	8002954 <HAL_GPIO_Init+0x1e8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a46      	ldr	r2, [pc, #280]	; (8002a48 <HAL_GPIO_Init+0x2dc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00d      	beq.n	8002950 <HAL_GPIO_Init+0x1e4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a45      	ldr	r2, [pc, #276]	; (8002a4c <HAL_GPIO_Init+0x2e0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d007      	beq.n	800294c <HAL_GPIO_Init+0x1e0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a44      	ldr	r2, [pc, #272]	; (8002a50 <HAL_GPIO_Init+0x2e4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_GPIO_Init+0x1dc>
 8002944:	2303      	movs	r3, #3
 8002946:	e006      	b.n	8002956 <HAL_GPIO_Init+0x1ea>
 8002948:	2305      	movs	r3, #5
 800294a:	e004      	b.n	8002956 <HAL_GPIO_Init+0x1ea>
 800294c:	2302      	movs	r3, #2
 800294e:	e002      	b.n	8002956 <HAL_GPIO_Init+0x1ea>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_GPIO_Init+0x1ea>
 8002954:	2300      	movs	r3, #0
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	f002 0203 	and.w	r2, r2, #3
 800295c:	0092      	lsls	r2, r2, #2
 800295e:	4093      	lsls	r3, r2
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002966:	4937      	ldr	r1, [pc, #220]	; (8002a44 <HAL_GPIO_Init+0x2d8>)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	3302      	adds	r3, #2
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002974:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_GPIO_Init+0x2e8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002998:	4a2e      	ldr	r2, [pc, #184]	; (8002a54 <HAL_GPIO_Init+0x2e8>)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_GPIO_Init+0x2e8>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029c2:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <HAL_GPIO_Init+0x2e8>)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_GPIO_Init+0x2e8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_GPIO_Init+0x2e8>)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_GPIO_Init+0x2e8>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a16:	4a0f      	ldr	r2, [pc, #60]	; (8002a54 <HAL_GPIO_Init+0x2e8>)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f47f aea9 	bne.w	8002784 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40010000 	.word	0x40010000
 8002a48:	48000400 	.word	0x48000400
 8002a4c:	48000800 	.word	0x48000800
 8002a50:	48000c00 	.word	0x48000c00
 8002a54:	40010400 	.word	0x40010400

08002a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a68:	787b      	ldrb	r3, [r7, #1]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a74:	e002      	b.n	8002a7c <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	405a      	eors	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	615a      	str	r2, [r3, #20]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f806 	bl	8002adc <HAL_GPIO_EXTI_Callback>
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40010400 	.word	0x40010400

08002adc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop

08002af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07c      	b.n	8002c00 <HAL_I2C_Init+0x10c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff f94a 	bl	8001db4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	; 0x24
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6852      	ldr	r2, [r2, #4]
 8002b40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	6892      	ldr	r2, [r2, #8]
 8002b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b54:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d012      	beq.n	8002b84 <HAL_I2C_Init+0x90>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_I2C_Init+0x82>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6892      	ldr	r2, [r2, #8]
 8002b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	e006      	b.n	8002b84 <HAL_I2C_Init+0x90>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6892      	ldr	r2, [r2, #8]
 8002b7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b82:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d104      	bne.n	8002b96 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6911      	ldr	r1, [r2, #16]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6952      	ldr	r2, [r2, #20]
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6992      	ldr	r2, [r2, #24]
 8002bbc:	0212      	lsls	r2, r2, #8
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	69d1      	ldr	r1, [r2, #28]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6a12      	ldr	r2, [r2, #32]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	813b      	strh	r3, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	f040 8109 	bne.w	8002e46 <HAL_I2C_Mem_Write+0x23e>
  { 
    if((pData == NULL) || (Size == 0U))
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_I2C_Mem_Write+0x38>
 8002c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e101      	b.n	8002e48 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2C_Mem_Write+0x4a>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0fa      	b.n	8002e48 <HAL_I2C_Mem_Write+0x240>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c5a:	f7ff f9f5 	bl	8002048 <HAL_GetTick>
 8002c5e:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2319      	movs	r3, #25
 8002c66:	2201      	movs	r2, #1
 8002c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 faf9 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e0e5      	b.n	8002e48 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2221      	movs	r2, #33	; 0x21
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2240      	movs	r2, #64	; 0x40
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ca4:	88f8      	ldrh	r0, [r7, #6]
 8002ca6:	893a      	ldrh	r2, [r7, #8]
 8002ca8:	8979      	ldrh	r1, [r7, #10]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f9f3 	bl	80030a0 <I2C_RequestMemoryWrite>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00f      	beq.n	8002ce0 <HAL_I2C_Mem_Write+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d105      	bne.n	8002cd4 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b9      	b.n	8002e48 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e0b3      	b.n	8002e48 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2bff      	cmp	r3, #255	; 0xff
 8002ce8:	d90e      	bls.n	8002d08 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	22ff      	movs	r2, #255	; 0xff
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fbc3 	bl	800348c <I2C_TransferConfig>
 8002d06:	e00f      	b.n	8002d28 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fbb2 	bl	800348c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fad3 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d007      	beq.n	8002d48 <HAL_I2C_Mem_Write+0x140>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d101      	bne.n	8002d44 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e081      	b.n	8002e48 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e07f      	b.n	8002e48 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	1c58      	adds	r0, r3, #1
 8002d52:	68f9      	ldr	r1, [r7, #12]
 8002d54:	6248      	str	r0, [r1, #36]	; 0x24
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d135      	bne.n	8002de8 <HAL_I2C_Mem_Write+0x1e0>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d030      	beq.n	8002de8 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2180      	movs	r1, #128	; 0x80
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fa67 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e053      	b.n	8002e48 <HAL_I2C_Mem_Write+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2bff      	cmp	r3, #255	; 0xff
 8002da8:	d90e      	bls.n	8002dc8 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	8979      	ldrh	r1, [r7, #10]
 8002db8:	2300      	movs	r3, #0
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fb63 	bl	800348c <I2C_TransferConfig>
 8002dc6:	e00f      	b.n	8002de8 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fb52 	bl	800348c <I2C_TransferConfig>
        }
      }

    }while(hi2c->XferCount > 0U);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d19a      	bne.n	8002d28 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 faae 	bl	8003358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_I2C_Mem_Write+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e01c      	b.n	8002e48 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e01a      	b.n	8002e48 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2220      	movs	r2, #32
 8002e18:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_I2C_Mem_Write+0x248>)
 8002e26:	400b      	ands	r3, r1
 8002e28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	fe00e800 	.word	0xfe00e800

08002e54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	4611      	mov	r1, r2
 8002e60:	461a      	mov	r2, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	817b      	strh	r3, [r7, #10]
 8002e66:	460b      	mov	r3, r1
 8002e68:	813b      	strh	r3, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	f040 8109 	bne.w	8003092 <HAL_I2C_Mem_Read+0x23e>
  {
    if((pData == NULL) || (Size == 0U))
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_I2C_Mem_Read+0x38>
 8002e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e101      	b.n	8003094 <HAL_I2C_Mem_Read+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_I2C_Mem_Read+0x4a>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e0fa      	b.n	8003094 <HAL_I2C_Mem_Read+0x240>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ea6:	f7ff f8cf 	bl	8002048 <HAL_GetTick>
 8002eaa:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2319      	movs	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f9d3 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e0e5      	b.n	8003094 <HAL_I2C_Mem_Read+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2222      	movs	r2, #34	; 0x22
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2240      	movs	r2, #64	; 0x40
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ef0:	88f8      	ldrh	r0, [r7, #6]
 8002ef2:	893a      	ldrh	r2, [r7, #8]
 8002ef4:	8979      	ldrh	r1, [r7, #10]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	4603      	mov	r3, r0
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f92d 	bl	8003160 <I2C_RequestMemoryRead>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00f      	beq.n	8002f2c <HAL_I2C_Mem_Read+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d105      	bne.n	8002f20 <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0b9      	b.n	8003094 <HAL_I2C_Mem_Read+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0b3      	b.n	8003094 <HAL_I2C_Mem_Read+0x240>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2bff      	cmp	r3, #255	; 0xff
 8002f34:	d90f      	bls.n	8002f56 <HAL_I2C_Mem_Read+0x102>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	22ff      	movs	r2, #255	; 0xff
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	8979      	ldrh	r1, [r7, #10]
 8002f44:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fa9c 	bl	800348c <I2C_TransferConfig>
 8002f54:	e010      	b.n	8002f78 <HAL_I2C_Mem_Read+0x124>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fa8a 	bl	800348c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2104      	movs	r1, #4
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f96e 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Mem_Read+0x13e>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e080      	b.n	8003094 <HAL_I2C_Mem_Read+0x240>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	1c59      	adds	r1, r3, #1
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	6251      	str	r1, [r2, #36]	; 0x24
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d135      	bne.n	8003034 <HAL_I2C_Mem_Read+0x1e0>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d030      	beq.n	8003034 <HAL_I2C_Mem_Read+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2180      	movs	r1, #128	; 0x80
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f941 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_I2C_Mem_Read+0x198>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e053      	b.n	8003094 <HAL_I2C_Mem_Read+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2bff      	cmp	r3, #255	; 0xff
 8002ff4:	d90e      	bls.n	8003014 <HAL_I2C_Mem_Read+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	22ff      	movs	r2, #255	; 0xff
 8002ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	b2da      	uxtb	r2, r3
 8003002:	8979      	ldrh	r1, [r7, #10]
 8003004:	2300      	movs	r3, #0
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fa3d 	bl	800348c <I2C_TransferConfig>
 8003012:	e00f      	b.n	8003034 <HAL_I2C_Mem_Read+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	b2da      	uxtb	r2, r3
 8003024:	8979      	ldrh	r1, [r7, #10]
 8003026:	2300      	movs	r3, #0
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fa2c 	bl	800348c <I2C_TransferConfig>
        }
      }
    }while(hi2c->XferCount > 0U);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d19c      	bne.n	8002f78 <HAL_I2C_Mem_Read+0x124>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f988 	bl	8003358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <HAL_I2C_Mem_Read+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	2b04      	cmp	r3, #4
 8003054:	d101      	bne.n	800305a <HAL_I2C_Mem_Read+0x206>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e01c      	b.n	8003094 <HAL_I2C_Mem_Read+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e01a      	b.n	8003094 <HAL_I2C_Mem_Read+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2220      	movs	r2, #32
 8003064:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_I2C_Mem_Read+0x248>)
 8003072:	400b      	ands	r3, r1
 8003074:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_I2C_Mem_Read+0x240>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	fe00e800 	.word	0xfe00e800

080030a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	817b      	strh	r3, [r7, #10]
 80030b2:	460b      	mov	r3, r1
 80030b4:	813b      	strh	r3, [r7, #8]
 80030b6:	4613      	mov	r3, r2
 80030b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	8979      	ldrh	r1, [r7, #10]
 80030c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f9de 	bl	800348c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	69b9      	ldr	r1, [r7, #24]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f8ff 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <I2C_RequestMemoryWrite+0x50>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d101      	bne.n	80030ec <I2C_RequestMemoryWrite+0x4c>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e034      	b.n	8003156 <I2C_RequestMemoryWrite+0xb6>
    }
    else
    {
      return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e032      	b.n	8003156 <I2C_RequestMemoryWrite+0xb6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d105      	bne.n	8003102 <I2C_RequestMemoryWrite+0x62>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	893a      	ldrh	r2, [r7, #8]
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003100:	e01b      	b.n	800313a <I2C_RequestMemoryWrite+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	893a      	ldrh	r2, [r7, #8]
 8003108:	0a12      	lsrs	r2, r2, #8
 800310a:	b292      	uxth	r2, r2
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	69b9      	ldr	r1, [r7, #24]
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f8df 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <I2C_RequestMemoryWrite+0x90>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	2b04      	cmp	r3, #4
 8003126:	d101      	bne.n	800312c <I2C_RequestMemoryWrite+0x8c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e014      	b.n	8003156 <I2C_RequestMemoryWrite+0xb6>
      }
      else
      {
        return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e012      	b.n	8003156 <I2C_RequestMemoryWrite+0xb6>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	893a      	ldrh	r2, [r7, #8]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2200      	movs	r2, #0
 8003142:	2180      	movs	r1, #128	; 0x80
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f88d 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <I2C_RequestMemoryWrite+0xb4>
  {
    return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e000      	b.n	8003156 <I2C_RequestMemoryWrite+0xb6>
  }

return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop

08003160 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	460b      	mov	r3, r1
 8003174:	813b      	strh	r3, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	8979      	ldrh	r1, [r7, #10]
 8003180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2300      	movs	r3, #0
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f97f 	bl	800348c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	69b9      	ldr	r1, [r7, #24]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f8a0 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <I2C_RequestMemoryRead+0x4e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d101      	bne.n	80031aa <I2C_RequestMemoryRead+0x4a>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e034      	b.n	8003214 <I2C_RequestMemoryRead+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e032      	b.n	8003214 <I2C_RequestMemoryRead+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <I2C_RequestMemoryRead+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	893a      	ldrh	r2, [r7, #8]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	629a      	str	r2, [r3, #40]	; 0x28
 80031be:	e01b      	b.n	80031f8 <I2C_RequestMemoryRead+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	893a      	ldrh	r2, [r7, #8]
 80031c6:	0a12      	lsrs	r2, r2, #8
 80031c8:	b292      	uxth	r2, r2
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	69b9      	ldr	r1, [r7, #24]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f880 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <I2C_RequestMemoryRead+0x8e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d101      	bne.n	80031ea <I2C_RequestMemoryRead+0x8a>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e014      	b.n	8003214 <I2C_RequestMemoryRead+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e012      	b.n	8003214 <I2C_RequestMemoryRead+0xb4>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	893a      	ldrh	r2, [r7, #8]
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2200      	movs	r2, #0
 8003200:	2140      	movs	r1, #64	; 0x40
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f82e 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <I2C_RequestMemoryRead+0xb2>
  {
    return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e000      	b.n	8003214 <I2C_RequestMemoryRead+0xb4>
  }
  
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d107      	bne.n	8003258 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	6992      	ldr	r2, [r2, #24]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	619a      	str	r2, [r3, #24]
  }
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003274:	e01c      	b.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d018      	beq.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003284:	f7fe fee0 	bl	8002048 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	1ad2      	subs	r2, r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d90d      	bls.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e00f      	b.n	80032d0 <I2C_WaitOnFlagUntilTimeout+0x6c>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	401a      	ands	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d0d3      	beq.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x12>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032e4:	e02c      	b.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f870 	bl	80033d0 <I2C_IsAcknowledgeFailed>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e02a      	b.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d01e      	beq.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003308:	f7fe fe9e 	bl	8002048 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	1ad2      	subs	r2, r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d913      	bls.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e007      	b.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0cb      	beq.n	80032e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003364:	e028      	b.n	80033b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f830 	bl	80033d0 <I2C_IsAcknowledgeFailed>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e026      	b.n	80033c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003380:	f7fe fe62 	bl	8002048 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1ad2      	subs	r2, r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	429a      	cmp	r2, r3
 800338e:	d913      	bls.n	80033b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	f043 0220 	orr.w	r2, r3, #32
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e007      	b.n	80033c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0cf      	beq.n	8003366 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d048      	beq.n	800347c <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ea:	e01c      	b.n	8003426 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d018      	beq.n	8003426 <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <I2C_IsAcknowledgeFailed+0x3a>
 80033fa:	f7fe fe25 	bl	8002048 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1ad2      	subs	r2, r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	d90d      	bls.n	8003426 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e02b      	b.n	800347e <I2C_IsAcknowledgeFailed+0xae>
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0db      	beq.n	80033ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2210      	movs	r2, #16
 800343a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2220      	movs	r2, #32
 8003442:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff fee9 	bl	800321c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <I2C_IsAcknowledgeFailed+0xb8>)
 8003456:	400b      	ands	r3, r1
 8003458:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2204      	movs	r2, #4
 800345e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	fe00e800 	.word	0xfe00e800

0800348c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	817b      	strh	r3, [r7, #10]
 800349a:	4613      	mov	r3, r2
 800349c:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <I2C_TransferConfig+0x58>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80034b2:	897b      	ldrh	r3, [r7, #10]
 80034b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034b8:	7a7b      	ldrb	r3, [r7, #9]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	605a      	str	r2, [r3, #4]
}
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	fc009800 	.word	0xfc009800

080034e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d138      	bne.n	8003570 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  { 
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003508:	2302      	movs	r3, #2
 800350a:	e032      	b.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
    
    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800353a:	601a      	str	r2, [r3, #0]
    
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	6811      	ldr	r1, [r2, #0]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]
    
    __HAL_I2C_ENABLE(hi2c); 
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    return HAL_OK; 
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop

08003580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8003586:	af00      	add	r7, sp, #0
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	1d3b      	adds	r3, r7, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 81e8 	beq.w	8003972 <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035a2:	4bb8      	ldr	r3, [pc, #736]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035ae:	4bb5      	ldr	r3, [pc, #724]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	f040 8082 	bne.w	80036c0 <HAL_RCC_OscConfig+0x140>
 80035bc:	4bb1      	ldr	r3, [pc, #708]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d07b      	beq.n	80036c0 <HAL_RCC_OscConfig+0x140>
 80035c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035d4:	fa93 f2a3 	rbit	r2, r3
 80035d8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80035dc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80035de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80035e2:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f043 0320 	orr.w	r3, r3, #32
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d102      	bne.n	8003600 <HAL_RCC_OscConfig+0x80>
 80035fa:	4ba2      	ldr	r3, [pc, #648]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	e039      	b.n	8003674 <HAL_RCC_OscConfig+0xf4>
 8003600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003604:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800360c:	fa93 f2a3 	rbit	r2, r3
 8003610:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003614:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003616:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	fab3 f383 	clz	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f043 0320 	orr.w	r3, r3, #32
 8003626:	b2db      	uxtb	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d102      	bne.n	8003638 <HAL_RCC_OscConfig+0xb8>
 8003632:	4b94      	ldr	r3, [pc, #592]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	e01d      	b.n	8003674 <HAL_RCC_OscConfig+0xf4>
 8003638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800363c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003644:	fa93 f2a3 	rbit	r2, r3
 8003648:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800364c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800364e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f043 0320 	orr.w	r3, r3, #32
 800365e:	b2db      	uxtb	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b04      	cmp	r3, #4
 8003668:	d102      	bne.n	8003670 <HAL_RCC_OscConfig+0xf0>
 800366a:	4b86      	ldr	r3, [pc, #536]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	e001      	b.n	8003674 <HAL_RCC_OscConfig+0xf4>
 8003670:	4b84      	ldr	r3, [pc, #528]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003678:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8003680:	fa92 f1a2 	rbit	r1, r2
 8003684:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8003688:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800368a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	fab2 f282 	clz	r2, r2
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f042 0220 	orr.w	r2, r2, #32
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	f002 021f 	and.w	r2, r2, #31
 80036a2:	40d3      	lsrs	r3, r2
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8161 	beq.w	8003970 <HAL_RCC_OscConfig+0x3f0>
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 815b 	bne.w	8003970 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f001 b81a 	b.w	80046f4 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ca:	d106      	bne.n	80036da <HAL_RCC_OscConfig+0x15a>
 80036cc:	4a6d      	ldr	r2, [pc, #436]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80036ce:	4b6d      	ldr	r3, [pc, #436]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	e030      	b.n	800373c <HAL_RCC_OscConfig+0x1bc>
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10c      	bne.n	80036fe <HAL_RCC_OscConfig+0x17e>
 80036e4:	4a67      	ldr	r2, [pc, #412]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80036e6:	4b67      	ldr	r3, [pc, #412]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	4a64      	ldr	r2, [pc, #400]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80036f2:	4b64      	ldr	r3, [pc, #400]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	e01e      	b.n	800373c <HAL_RCC_OscConfig+0x1bc>
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0x1a4>
 800370a:	4a5e      	ldr	r2, [pc, #376]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 800370c:	4b5d      	ldr	r3, [pc, #372]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	4a5b      	ldr	r2, [pc, #364]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 8003718:	4b5a      	ldr	r3, [pc, #360]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e00b      	b.n	800373c <HAL_RCC_OscConfig+0x1bc>
 8003724:	4a57      	ldr	r2, [pc, #348]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 8003726:	4b57      	ldr	r3, [pc, #348]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	4a54      	ldr	r2, [pc, #336]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 8003732:	4b54      	ldr	r3, [pc, #336]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800373c:	4951      	ldr	r1, [pc, #324]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 800373e:	4b51      	ldr	r3, [pc, #324]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	f023 020f 	bic.w	r2, r3, #15
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4313      	orrs	r3, r2
 800374e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003750:	1d3b      	adds	r3, r7, #4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8083 	beq.w	8003862 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe fc74 	bl	8002048 <HAL_GetTick>
 8003760:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003766:	f7fe fc6f 	bl	8002048 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d902      	bls.n	800377c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	f000 bfbc 	b.w	80046f4 <HAL_RCC_OscConfig+0x1174>
 800377c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003780:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003788:	fa93 f2a3 	rbit	r2, r3
 800378c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003790:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003792:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003796:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003798:	fab3 f383 	clz	r3, r3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f043 0320 	orr.w	r3, r3, #32
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d102      	bne.n	80037b4 <HAL_RCC_OscConfig+0x234>
 80037ae:	4b35      	ldr	r3, [pc, #212]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	e039      	b.n	8003828 <HAL_RCC_OscConfig+0x2a8>
 80037b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037b8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037c0:	fa93 f2a3 	rbit	r2, r3
 80037c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80037c8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80037ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f043 0320 	orr.w	r3, r3, #32
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d102      	bne.n	80037ec <HAL_RCC_OscConfig+0x26c>
 80037e6:	4b27      	ldr	r3, [pc, #156]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	e01d      	b.n	8003828 <HAL_RCC_OscConfig+0x2a8>
 80037ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037f0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80037f8:	fa93 f2a3 	rbit	r2, r3
 80037fc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003800:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003802:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f043 0320 	orr.w	r3, r3, #32
 8003812:	b2db      	uxtb	r3, r3
 8003814:	b2db      	uxtb	r3, r3
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b04      	cmp	r3, #4
 800381c:	d102      	bne.n	8003824 <HAL_RCC_OscConfig+0x2a4>
 800381e:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	e001      	b.n	8003828 <HAL_RCC_OscConfig+0x2a8>
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_RCC_OscConfig+0x304>)
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800382c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8003834:	fa92 f1a2 	rbit	r1, r2
 8003838:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800383c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800383e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	fab2 f282 	clz	r2, r2
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	f042 0220 	orr.w	r2, r2, #32
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f002 021f 	and.w	r2, r2, #31
 8003856:	40d3      	lsrs	r3, r2
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d082      	beq.n	8003766 <HAL_RCC_OscConfig+0x1e6>
 8003860:	e087      	b.n	8003972 <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fe fbf1 	bl	8002048 <HAL_GetTick>
 8003866:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386a:	e00d      	b.n	8003888 <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800386c:	f7fe fbec 	bl	8002048 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b64      	cmp	r3, #100	; 0x64
 800387a:	d905      	bls.n	8003888 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	f000 bf39 	b.w	80046f4 <HAL_RCC_OscConfig+0x1174>
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800388c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003894:	fa93 f2a3 	rbit	r2, r3
 8003898:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800389c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800389e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80038a2:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a4:	fab3 f383 	clz	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f043 0320 	orr.w	r3, r3, #32
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_RCC_OscConfig+0x340>
 80038ba:	4bb6      	ldr	r3, [pc, #728]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	e039      	b.n	8003934 <HAL_RCC_OscConfig+0x3b4>
 80038c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80038cc:	fa93 f2a3 	rbit	r2, r3
 80038d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80038d4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80038d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f043 0320 	orr.w	r3, r3, #32
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d102      	bne.n	80038f8 <HAL_RCC_OscConfig+0x378>
 80038f2:	4ba8      	ldr	r3, [pc, #672]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	e01d      	b.n	8003934 <HAL_RCC_OscConfig+0x3b4>
 80038f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038fc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003904:	fa93 f2a3 	rbit	r2, r3
 8003908:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800390c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800390e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f043 0320 	orr.w	r3, r3, #32
 800391e:	b2db      	uxtb	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b04      	cmp	r3, #4
 8003928:	d102      	bne.n	8003930 <HAL_RCC_OscConfig+0x3b0>
 800392a:	4b9a      	ldr	r3, [pc, #616]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	e001      	b.n	8003934 <HAL_RCC_OscConfig+0x3b4>
 8003930:	4b98      	ldr	r3, [pc, #608]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003938:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003940:	fa92 f1a2 	rbit	r1, r2
 8003944:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8003948:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800394a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	fab2 f282 	clz	r2, r2
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	f042 0220 	orr.w	r2, r2, #32
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f002 021f 	and.w	r2, r2, #31
 8003962:	40d3      	lsrs	r3, r2
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	f47f af7f 	bne.w	800386c <HAL_RCC_OscConfig+0x2ec>
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003972:	1d3b      	adds	r3, r7, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 81f4 	beq.w	8003d6a <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003982:	4b84      	ldr	r3, [pc, #528]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00d      	beq.n	80039aa <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800398e:	4b81      	ldr	r3, [pc, #516]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b08      	cmp	r3, #8
 8003998:	f040 8099 	bne.w	8003ace <HAL_RCC_OscConfig+0x54e>
 800399c:	4b7d      	ldr	r3, [pc, #500]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f040 8092 	bne.w	8003ace <HAL_RCC_OscConfig+0x54e>
 80039aa:	2302      	movs	r3, #2
 80039ac:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80039b4:	fa93 f2a3 	rbit	r2, r3
 80039b8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039bc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80039be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039c2:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f043 0320 	orr.w	r3, r3, #32
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d102      	bne.n	80039e0 <HAL_RCC_OscConfig+0x460>
 80039da:	4b6e      	ldr	r3, [pc, #440]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	e037      	b.n	8003a50 <HAL_RCC_OscConfig+0x4d0>
 80039e0:	2302      	movs	r3, #2
 80039e2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80039ea:	fa93 f2a3 	rbit	r2, r3
 80039ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039f2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80039f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f043 0320 	orr.w	r3, r3, #32
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d102      	bne.n	8003a16 <HAL_RCC_OscConfig+0x496>
 8003a10:	4b60      	ldr	r3, [pc, #384]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	e01c      	b.n	8003a50 <HAL_RCC_OscConfig+0x4d0>
 8003a16:	2302      	movs	r3, #2
 8003a18:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003a20:	fa93 f2a3 	rbit	r2, r3
 8003a24:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a28:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003a2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	fab3 f383 	clz	r3, r3
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f043 0320 	orr.w	r3, r3, #32
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d102      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4cc>
 8003a46:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	e001      	b.n	8003a50 <HAL_RCC_OscConfig+0x4d0>
 8003a4c:	4b51      	ldr	r3, [pc, #324]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	2202      	movs	r2, #2
 8003a52:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8003a5a:	fa92 f1a2 	rbit	r1, r2
 8003a5e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8003a62:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003a64:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	fab2 f282 	clz	r2, r2
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	f042 0220 	orr.w	r2, r2, #32
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	f002 021f 	and.w	r2, r2, #31
 8003a7c:	40d3      	lsrs	r3, r2
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <HAL_RCC_OscConfig+0x516>
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d002      	beq.n	8003a96 <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f000 be2f 	b.w	80046f4 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4c3f      	ldr	r4, [pc, #252]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 8003a98:	4b3e      	ldr	r3, [pc, #248]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa0:	1d3b      	adds	r3, r7, #4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6959      	ldr	r1, [r3, #20]
 8003aa6:	23f8      	movs	r3, #248	; 0xf8
 8003aa8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003ab0:	fa93 f0a3 	rbit	r0, r3
 8003ab4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ab8:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003aba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	fab3 f383 	clz	r3, r3
 8003ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003acc:	e14d      	b.n	8003d6a <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ace:	1d3b      	adds	r3, r7, #4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80b3 	beq.w	8003c40 <HAL_RCC_OscConfig+0x6c0>
 8003ada:	2301      	movs	r3, #1
 8003adc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003ae4:	fa93 f2a3 	rbit	r2, r3
 8003ae8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003aec:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003aee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003af2:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8003afe:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8003b02:	461a      	mov	r2, r3
 8003b04:	2301      	movs	r3, #1
 8003b06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fe fa9e 	bl	8002048 <HAL_GetTick>
 8003b0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fe fa99 	bl	8002048 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d902      	bls.n	8003b28 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	f000 bde6 	b.w	80046f4 <HAL_RCC_OscConfig+0x1174>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003b32:	fa93 f2a3 	rbit	r2, r3
 8003b36:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b3a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003b3c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b40:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f043 0320 	orr.w	r3, r3, #32
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d102      	bne.n	8003b5e <HAL_RCC_OscConfig+0x5de>
 8003b58:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	e039      	b.n	8003bd2 <HAL_RCC_OscConfig+0x652>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003b68:	fa93 f2a3 	rbit	r2, r3
 8003b6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b70:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003b72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f043 0320 	orr.w	r3, r3, #32
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d104      	bne.n	8003b98 <HAL_RCC_OscConfig+0x618>
 8003b8e:	4b01      	ldr	r3, [pc, #4]	; (8003b94 <HAL_RCC_OscConfig+0x614>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	e01e      	b.n	8003bd2 <HAL_RCC_OscConfig+0x652>
 8003b94:	40021000 	.word	0x40021000
 8003b98:	2302      	movs	r3, #2
 8003b9a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003ba2:	fa93 f2a3 	rbit	r2, r3
 8003ba6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003baa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003bac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f043 0320 	orr.w	r3, r3, #32
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d102      	bne.n	8003bce <HAL_RCC_OscConfig+0x64e>
 8003bc8:	4bb9      	ldr	r3, [pc, #740]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	e001      	b.n	8003bd2 <HAL_RCC_OscConfig+0x652>
 8003bce:	4bb8      	ldr	r3, [pc, #736]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003bdc:	fa92 f1a2 	rbit	r1, r2
 8003be0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003be4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003be6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	fab2 f282 	clz	r2, r2
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	f042 0220 	orr.w	r2, r2, #32
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	f002 021f 	and.w	r2, r2, #31
 8003bfe:	40d3      	lsrs	r3, r2
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d084      	beq.n	8003b12 <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c08:	4ca9      	ldr	r4, [pc, #676]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003c0a:	4ba9      	ldr	r3, [pc, #676]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6959      	ldr	r1, [r3, #20]
 8003c18:	23f8      	movs	r3, #248	; 0xf8
 8003c1a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003c22:	fa93 f0a3 	rbit	r0, r3
 8003c26:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003c2a:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003c2c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	e094      	b.n	8003d6a <HAL_RCC_OscConfig+0x7ea>
 8003c40:	2301      	movs	r3, #1
 8003c42:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003c4a:	fa93 f2a3 	rbit	r2, r3
 8003c4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c52:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003c54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c58:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8003c64:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6e:	f7fe f9eb 	bl	8002048 <HAL_GetTick>
 8003c72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c78:	f7fe f9e6 	bl	8002048 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d902      	bls.n	8003c8e <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	f000 bd33 	b.w	80046f4 <HAL_RCC_OscConfig+0x1174>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c98:	fa93 f2a3 	rbit	r2, r3
 8003c9c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ca0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003ca2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ca6:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca8:	fab3 f383 	clz	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f043 0320 	orr.w	r3, r3, #32
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x744>
 8003cbe:	4b7c      	ldr	r3, [pc, #496]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	e037      	b.n	8003d34 <HAL_RCC_OscConfig+0x7b4>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003cce:	fa93 f2a3 	rbit	r2, r3
 8003cd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cd6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003cd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f043 0320 	orr.w	r3, r3, #32
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d102      	bne.n	8003cfa <HAL_RCC_OscConfig+0x77a>
 8003cf4:	4b6e      	ldr	r3, [pc, #440]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	e01c      	b.n	8003d34 <HAL_RCC_OscConfig+0x7b4>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d04:	fa93 f2a3 	rbit	r2, r3
 8003d08:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d0c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003d0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	fab3 f383 	clz	r3, r3
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f043 0320 	orr.w	r3, r3, #32
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d102      	bne.n	8003d30 <HAL_RCC_OscConfig+0x7b0>
 8003d2a:	4b61      	ldr	r3, [pc, #388]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	e001      	b.n	8003d34 <HAL_RCC_OscConfig+0x7b4>
 8003d30:	4b5f      	ldr	r3, [pc, #380]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2202      	movs	r2, #2
 8003d36:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8003d3e:	fa92 f1a2 	rbit	r1, r2
 8003d42:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d46:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003d48:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	fab2 f282 	clz	r2, r2
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	f042 0220 	orr.w	r2, r2, #32
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	f002 021f 	and.w	r2, r2, #31
 8003d60:	40d3      	lsrs	r3, r2
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d186      	bne.n	8003c78 <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8132 	beq.w	8003fde <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8099 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x938>
 8003d86:	2301      	movs	r3, #1
 8003d88:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003d90:	fa93 f2a3 	rbit	r2, r3
 8003d94:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d98:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003d9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d9e:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da0:	fab3 f383 	clz	r3, r3
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b42      	ldr	r3, [pc, #264]	; (8003eb4 <HAL_RCC_OscConfig+0x934>)
 8003daa:	4413      	add	r3, r2
 8003dac:	461a      	mov	r2, r3
 8003dae:	2301      	movs	r3, #1
 8003db0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db2:	f7fe f949 	bl	8002048 <HAL_GetTick>
 8003db6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbc:	f7fe f944 	bl	8002048 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d902      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	f000 bc91 	b.w	80046f4 <HAL_RCC_OscConfig+0x1174>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003ddc:	fa93 f2a3 	rbit	r2, r3
 8003de0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003de4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003de6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003dea:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d102      	bne.n	8003e08 <HAL_RCC_OscConfig+0x888>
 8003e02:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	e037      	b.n	8003e78 <HAL_RCC_OscConfig+0x8f8>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e12:	fa93 f2a3 	rbit	r2, r3
 8003e16:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003e1a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003e1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	fab3 f383 	clz	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d102      	bne.n	8003e3e <HAL_RCC_OscConfig+0x8be>
 8003e38:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	e01c      	b.n	8003e78 <HAL_RCC_OscConfig+0x8f8>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e44:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003e48:	fa93 f2a3 	rbit	r2, r3
 8003e4c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003e50:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003e52:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	fab3 f383 	clz	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d102      	bne.n	8003e74 <HAL_RCC_OscConfig+0x8f4>
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	e001      	b.n	8003e78 <HAL_RCC_OscConfig+0x8f8>
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <HAL_RCC_OscConfig+0x930>)
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e82:	fa92 f1a2 	rbit	r1, r2
 8003e86:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003e8a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003e8c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	fab2 f282 	clz	r2, r2
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	f002 021f 	and.w	r2, r2, #31
 8003ea4:	40d3      	lsrs	r3, r2
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d086      	beq.n	8003dbc <HAL_RCC_OscConfig+0x83c>
 8003eae:	e096      	b.n	8003fde <HAL_RCC_OscConfig+0xa5e>
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	42420480 	.word	0x42420480
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003ec2:	fa93 f2a3 	rbit	r2, r3
 8003ec6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003eca:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003ecc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ed0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4bb5      	ldr	r3, [pc, #724]	; (80041b0 <HAL_RCC_OscConfig+0xc30>)
 8003edc:	4413      	add	r3, r2
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee4:	f7fe f8b0 	bl	8002048 <HAL_GetTick>
 8003ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eec:	e009      	b.n	8003f02 <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eee:	f7fe f8ab 	bl	8002048 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e3f8      	b.n	80046f4 <HAL_RCC_OscConfig+0x1174>
 8003f02:	2302      	movs	r3, #2
 8003f04:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003f0c:	fa93 f2a3 	rbit	r2, r3
 8003f10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f14:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003f16:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f1a:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d102      	bne.n	8003f38 <HAL_RCC_OscConfig+0x9b8>
 8003f32:	4ba0      	ldr	r3, [pc, #640]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	e037      	b.n	8003fa8 <HAL_RCC_OscConfig+0xa28>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003f42:	fa93 f2a3 	rbit	r2, r3
 8003f46:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f4a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003f4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d102      	bne.n	8003f6e <HAL_RCC_OscConfig+0x9ee>
 8003f68:	4b92      	ldr	r3, [pc, #584]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	e01c      	b.n	8003fa8 <HAL_RCC_OscConfig+0xa28>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f74:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003f78:	fa93 f2a3 	rbit	r2, r3
 8003f7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f80:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003f82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	fab3 f383 	clz	r3, r3
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d102      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xa24>
 8003f9e:	4b85      	ldr	r3, [pc, #532]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	e001      	b.n	8003fa8 <HAL_RCC_OscConfig+0xa28>
 8003fa4:	4b83      	ldr	r3, [pc, #524]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003fb2:	fa92 f1a2 	rbit	r1, r2
 8003fb6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003fba:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003fbc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	fab2 f282 	clz	r2, r2
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	f002 021f 	and.w	r2, r2, #31
 8003fd4:	40d3      	lsrs	r3, r2
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d187      	bne.n	8003eee <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 818f 	beq.w	800430c <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff4:	4b6f      	ldr	r3, [pc, #444]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d112      	bne.n	8004026 <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004000:	4a6c      	ldr	r2, [pc, #432]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8004002:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400a:	61d3      	str	r3, [r2, #28]
 800400c:	4b69      	ldr	r3, [pc, #420]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004014:	f107 030c 	add.w	r3, r7, #12
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f107 030c 	add.w	r3, r7, #12
 800401e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004026:	4b64      	ldr	r3, [pc, #400]	; (80041b8 <HAL_RCC_OscConfig+0xc38>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d11a      	bne.n	8004068 <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004032:	4a61      	ldr	r2, [pc, #388]	; (80041b8 <HAL_RCC_OscConfig+0xc38>)
 8004034:	4b60      	ldr	r3, [pc, #384]	; (80041b8 <HAL_RCC_OscConfig+0xc38>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403e:	f7fe f803 	bl	8002048 <HAL_GetTick>
 8004042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004046:	e009      	b.n	800405c <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004048:	f7fd fffe 	bl	8002048 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	; 0x64
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e34b      	b.n	80046f4 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405c:	4b56      	ldr	r3, [pc, #344]	; (80041b8 <HAL_RCC_OscConfig+0xc38>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ef      	beq.n	8004048 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004068:	1d3b      	adds	r3, r7, #4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d106      	bne.n	8004080 <HAL_RCC_OscConfig+0xb00>
 8004072:	4a50      	ldr	r2, [pc, #320]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8004074:	4b4f      	ldr	r3, [pc, #316]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	6213      	str	r3, [r2, #32]
 800407e:	e02f      	b.n	80040e0 <HAL_RCC_OscConfig+0xb60>
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0xb24>
 800408a:	4a4a      	ldr	r2, [pc, #296]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 800408c:	4b49      	ldr	r3, [pc, #292]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	6213      	str	r3, [r2, #32]
 8004096:	4a47      	ldr	r2, [pc, #284]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8004098:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f023 0304 	bic.w	r3, r3, #4
 80040a0:	6213      	str	r3, [r2, #32]
 80040a2:	e01d      	b.n	80040e0 <HAL_RCC_OscConfig+0xb60>
 80040a4:	1d3b      	adds	r3, r7, #4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b05      	cmp	r3, #5
 80040ac:	d10c      	bne.n	80040c8 <HAL_RCC_OscConfig+0xb48>
 80040ae:	4a41      	ldr	r2, [pc, #260]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 80040b0:	4b40      	ldr	r3, [pc, #256]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f043 0304 	orr.w	r3, r3, #4
 80040b8:	6213      	str	r3, [r2, #32]
 80040ba:	4a3e      	ldr	r2, [pc, #248]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 80040bc:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6213      	str	r3, [r2, #32]
 80040c6:	e00b      	b.n	80040e0 <HAL_RCC_OscConfig+0xb60>
 80040c8:	4a3a      	ldr	r2, [pc, #232]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 80040ca:	4b3a      	ldr	r3, [pc, #232]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	6213      	str	r3, [r2, #32]
 80040d4:	4a37      	ldr	r2, [pc, #220]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 80040d6:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0304 	bic.w	r3, r3, #4
 80040de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8087 	beq.w	80041fa <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ec:	f7fd ffac 	bl	8002048 <HAL_GetTick>
 80040f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f4:	e00b      	b.n	800410e <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7fd ffa7 	bl	8002048 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e2f2      	b.n	80046f4 <HAL_RCC_OscConfig+0x1174>
 800410e:	2302      	movs	r3, #2
 8004110:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004118:	fa93 f2a3 	rbit	r2, r3
 800411c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004120:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004122:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004126:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004128:	fab3 f383 	clz	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004132:	b2db      	uxtb	r3, r3
 8004134:	b2db      	uxtb	r3, r3
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d102      	bne.n	8004144 <HAL_RCC_OscConfig+0xbc4>
 800413e:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	e03d      	b.n	80041c0 <HAL_RCC_OscConfig+0xc40>
 8004144:	2302      	movs	r3, #2
 8004146:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800414e:	fa93 f2a3 	rbit	r2, r3
 8004152:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004156:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004158:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004168:	b2db      	uxtb	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d102      	bne.n	800417a <HAL_RCC_OscConfig+0xbfa>
 8004174:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	e022      	b.n	80041c0 <HAL_RCC_OscConfig+0xc40>
 800417a:	2302      	movs	r3, #2
 800417c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004184:	fa93 f2a3 	rbit	r2, r3
 8004188:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800418c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800418e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	fab3 f383 	clz	r3, r3
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d108      	bne.n	80041bc <HAL_RCC_OscConfig+0xc3c>
 80041aa:	4b02      	ldr	r3, [pc, #8]	; (80041b4 <HAL_RCC_OscConfig+0xc34>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	e007      	b.n	80041c0 <HAL_RCC_OscConfig+0xc40>
 80041b0:	42420480 	.word	0x42420480
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
 80041bc:	4bbf      	ldr	r3, [pc, #764]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2202      	movs	r2, #2
 80041c2:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80041ca:	fa92 f1a2 	rbit	r1, r2
 80041ce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80041d2:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80041d4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	fab2 f282 	clz	r2, r2
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	f002 021f 	and.w	r2, r2, #31
 80041ec:	40d3      	lsrs	r3, r2
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f43f af7f 	beq.w	80040f6 <HAL_RCC_OscConfig+0xb76>
 80041f8:	e07e      	b.n	80042f8 <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fa:	f7fd ff25 	bl	8002048 <HAL_GetTick>
 80041fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fd ff20 	bl	8002048 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	; 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e26b      	b.n	80046f4 <HAL_RCC_OscConfig+0x1174>
 800421c:	2302      	movs	r3, #2
 800421e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004226:	fa93 f2a3 	rbit	r2, r3
 800422a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800422e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004230:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004234:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004240:	b2db      	uxtb	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d102      	bne.n	8004252 <HAL_RCC_OscConfig+0xcd2>
 800424c:	4b9b      	ldr	r3, [pc, #620]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	e037      	b.n	80042c2 <HAL_RCC_OscConfig+0xd42>
 8004252:	2302      	movs	r3, #2
 8004254:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004258:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800425c:	fa93 f2a3 	rbit	r2, r3
 8004260:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004264:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004266:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	fab3 f383 	clz	r3, r3
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004276:	b2db      	uxtb	r3, r3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d102      	bne.n	8004288 <HAL_RCC_OscConfig+0xd08>
 8004282:	4b8e      	ldr	r3, [pc, #568]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	e01c      	b.n	80042c2 <HAL_RCC_OscConfig+0xd42>
 8004288:	2302      	movs	r3, #2
 800428a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004292:	fa93 f2a3 	rbit	r2, r3
 8004296:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800429a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800429c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d102      	bne.n	80042be <HAL_RCC_OscConfig+0xd3e>
 80042b8:	4b80      	ldr	r3, [pc, #512]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	e001      	b.n	80042c2 <HAL_RCC_OscConfig+0xd42>
 80042be:	4b7f      	ldr	r3, [pc, #508]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	2202      	movs	r2, #2
 80042c4:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80042cc:	fa92 f1a2 	rbit	r1, r2
 80042d0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80042d4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80042d6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	fab2 f282 	clz	r2, r2
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	f002 021f 	and.w	r2, r2, #31
 80042ee:	40d3      	lsrs	r3, r2
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d185      	bne.n	8004204 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d105      	bne.n	800430c <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004300:	4a6e      	ldr	r2, [pc, #440]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 8004302:	4b6e      	ldr	r3, [pc, #440]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800430c:	1d3b      	adds	r3, r7, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 81ed 	beq.w	80046f2 <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004318:	4b68      	ldr	r3, [pc, #416]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b08      	cmp	r3, #8
 8004322:	f000 81e4 	beq.w	80046ee <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004326:	1d3b      	adds	r3, r7, #4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	2b02      	cmp	r3, #2
 800432e:	f040 8144 	bne.w	80045ba <HAL_RCC_OscConfig+0x103a>
 8004332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004336:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800433e:	fa93 f2a3 	rbit	r2, r3
 8004342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004346:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800434c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004358:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800435c:	461a      	mov	r2, r3
 800435e:	2300      	movs	r3, #0
 8004360:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fd fe71 	bl	8002048 <HAL_GetTick>
 8004366:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800436a:	e009      	b.n	8004380 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436c:	f7fd fe6c 	bl	8002048 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e1b9      	b.n	80046f4 <HAL_RCC_OscConfig+0x1174>
 8004380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004384:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800438c:	fa93 f2a3 	rbit	r2, r3
 8004390:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004394:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004396:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800439a:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800439c:	fab3 f383 	clz	r3, r3
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f043 0320 	orr.w	r3, r3, #32
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d102      	bne.n	80043b8 <HAL_RCC_OscConfig+0xe38>
 80043b2:	4b42      	ldr	r3, [pc, #264]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	e039      	b.n	800442c <HAL_RCC_OscConfig+0xeac>
 80043b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043c4:	fa93 f2a3 	rbit	r2, r3
 80043c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043cc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80043ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	fab3 f383 	clz	r3, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f043 0320 	orr.w	r3, r3, #32
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d102      	bne.n	80043f0 <HAL_RCC_OscConfig+0xe70>
 80043ea:	4b34      	ldr	r3, [pc, #208]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	e01d      	b.n	800442c <HAL_RCC_OscConfig+0xeac>
 80043f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043fc:	fa93 f2a3 	rbit	r2, r3
 8004400:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004404:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004406:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	fab3 f383 	clz	r3, r3
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f043 0320 	orr.w	r3, r3, #32
 8004416:	b2db      	uxtb	r3, r3
 8004418:	b2db      	uxtb	r3, r3
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b04      	cmp	r3, #4
 8004420:	d102      	bne.n	8004428 <HAL_RCC_OscConfig+0xea8>
 8004422:	4b26      	ldr	r3, [pc, #152]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	e001      	b.n	800442c <HAL_RCC_OscConfig+0xeac>
 8004428:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004430:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004434:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004438:	fa92 f1a2 	rbit	r1, r2
 800443c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004440:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004442:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	fab2 f282 	clz	r2, r2
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	f042 0220 	orr.w	r2, r2, #32
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	f002 021f 	and.w	r2, r2, #31
 800445a:	40d3      	lsrs	r3, r2
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d183      	bne.n	800436c <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004464:	4815      	ldr	r0, [pc, #84]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 8004466:	4b15      	ldr	r3, [pc, #84]	; (80044bc <HAL_RCC_OscConfig+0xf3c>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004474:	1d3b      	adds	r3, r7, #4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	430b      	orrs	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	6043      	str	r3, [r0, #4]
 8004480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004484:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800448c:	fa93 f2a3 	rbit	r2, r3
 8004490:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004494:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004496:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800449a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800449c:	fab3 f383 	clz	r3, r3
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80044a6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80044aa:	461a      	mov	r2, r3
 80044ac:	2301      	movs	r3, #1
 80044ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b0:	f7fd fdca 	bl	8002048 <HAL_GetTick>
 80044b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b8:	e00c      	b.n	80044d4 <HAL_RCC_OscConfig+0xf54>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fd fdc2 	bl	8002048 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e10f      	b.n	80046f4 <HAL_RCC_OscConfig+0x1174>
 80044d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80044e0:	fa93 f2a3 	rbit	r2, r3
 80044e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044e8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80044ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044ee:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044f0:	fab3 f383 	clz	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f043 0320 	orr.w	r3, r3, #32
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b01      	cmp	r3, #1
 8004504:	d102      	bne.n	800450c <HAL_RCC_OscConfig+0xf8c>
 8004506:	4b7e      	ldr	r3, [pc, #504]	; (8004700 <HAL_RCC_OscConfig+0x1180>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	e039      	b.n	8004580 <HAL_RCC_OscConfig+0x1000>
 800450c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004510:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004518:	fa93 f2a3 	rbit	r2, r3
 800451c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004520:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f043 0320 	orr.w	r3, r3, #32
 8004532:	b2db      	uxtb	r3, r3
 8004534:	b2db      	uxtb	r3, r3
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d102      	bne.n	8004544 <HAL_RCC_OscConfig+0xfc4>
 800453e:	4b70      	ldr	r3, [pc, #448]	; (8004700 <HAL_RCC_OscConfig+0x1180>)
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	e01d      	b.n	8004580 <HAL_RCC_OscConfig+0x1000>
 8004544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004548:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004550:	fa93 f2a3 	rbit	r2, r3
 8004554:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004558:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800455a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	fab3 f383 	clz	r3, r3
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f043 0320 	orr.w	r3, r3, #32
 800456a:	b2db      	uxtb	r3, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b04      	cmp	r3, #4
 8004574:	d102      	bne.n	800457c <HAL_RCC_OscConfig+0xffc>
 8004576:	4b62      	ldr	r3, [pc, #392]	; (8004700 <HAL_RCC_OscConfig+0x1180>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	e001      	b.n	8004580 <HAL_RCC_OscConfig+0x1000>
 800457c:	4b60      	ldr	r3, [pc, #384]	; (8004700 <HAL_RCC_OscConfig+0x1180>)
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004584:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004588:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800458c:	fa92 f1a2 	rbit	r1, r2
 8004590:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004594:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004596:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	fab2 f282 	clz	r2, r2
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	f042 0220 	orr.w	r2, r2, #32
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	f002 021f 	and.w	r2, r2, #31
 80045ae:	40d3      	lsrs	r3, r2
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d083      	beq.n	80044c0 <HAL_RCC_OscConfig+0xf40>
 80045b8:	e09b      	b.n	80046f2 <HAL_RCC_OscConfig+0x1172>
 80045ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045c6:	fa93 f2a3 	rbit	r2, r3
 80045ca:	f107 0320 	add.w	r3, r7, #32
 80045ce:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80045d0:	f107 0320 	add.w	r3, r7, #32
 80045d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d6:	fab3 f383 	clz	r3, r3
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80045e0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80045e4:	461a      	mov	r2, r3
 80045e6:	2300      	movs	r3, #0
 80045e8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ea:	f7fd fd2d 	bl	8002048 <HAL_GetTick>
 80045ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f2:	e009      	b.n	8004608 <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fd fd28 	bl	8002048 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e075      	b.n	80046f4 <HAL_RCC_OscConfig+0x1174>
 8004608:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800460c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004614:	fa93 f2a3 	rbit	r2, r3
 8004618:	f107 031c 	add.w	r3, r7, #28
 800461c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800461e:	f107 031c 	add.w	r3, r7, #28
 8004622:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f043 0320 	orr.w	r3, r3, #32
 800462e:	b2db      	uxtb	r3, r3
 8004630:	b2db      	uxtb	r3, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	d102      	bne.n	8004640 <HAL_RCC_OscConfig+0x10c0>
 800463a:	4b31      	ldr	r3, [pc, #196]	; (8004700 <HAL_RCC_OscConfig+0x1180>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	e039      	b.n	80046b4 <HAL_RCC_OscConfig+0x1134>
 8004640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004644:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004648:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800464c:	fa93 f2a3 	rbit	r2, r3
 8004650:	f107 0318 	add.w	r3, r7, #24
 8004654:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004656:	f107 0318 	add.w	r3, r7, #24
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	fab3 f383 	clz	r3, r3
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f043 0320 	orr.w	r3, r3, #32
 8004666:	b2db      	uxtb	r3, r3
 8004668:	b2db      	uxtb	r3, r3
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d102      	bne.n	8004678 <HAL_RCC_OscConfig+0x10f8>
 8004672:	4b23      	ldr	r3, [pc, #140]	; (8004700 <HAL_RCC_OscConfig+0x1180>)
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	e01d      	b.n	80046b4 <HAL_RCC_OscConfig+0x1134>
 8004678:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800467c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004684:	fa93 f2a3 	rbit	r2, r3
 8004688:	f107 0314 	add.w	r3, r7, #20
 800468c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800468e:	f107 0314 	add.w	r3, r7, #20
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	fab3 f383 	clz	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f043 0320 	orr.w	r3, r3, #32
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d102      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1130>
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <HAL_RCC_OscConfig+0x1180>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	e001      	b.n	80046b4 <HAL_RCC_OscConfig+0x1134>
 80046b0:	4b13      	ldr	r3, [pc, #76]	; (8004700 <HAL_RCC_OscConfig+0x1180>)
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046b8:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046bc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80046c0:	fa92 f1a2 	rbit	r1, r2
 80046c4:	f107 0210 	add.w	r2, r7, #16
 80046c8:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80046ca:	f107 0210 	add.w	r2, r7, #16
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	fab2 f282 	clz	r2, r2
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	f042 0220 	orr.w	r2, r2, #32
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	f002 021f 	and.w	r2, r2, #31
 80046e2:	40d3      	lsrs	r3, r2
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d183      	bne.n	80045f4 <HAL_RCC_OscConfig+0x1074>
 80046ec:	e001      	b.n	80046f2 <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd90      	pop	{r4, r7, pc}
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000

08004704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b09e      	sub	sp, #120	; 0x78
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004712:	4ba3      	ldr	r3, [pc, #652]	; (80049a0 <HAL_RCC_ClockConfig+0x29c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0207 	and.w	r2, r3, #7
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d210      	bcs.n	8004742 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004720:	499f      	ldr	r1, [pc, #636]	; (80049a0 <HAL_RCC_ClockConfig+0x29c>)
 8004722:	4b9f      	ldr	r3, [pc, #636]	; (80049a0 <HAL_RCC_ClockConfig+0x29c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 0207 	bic.w	r2, r3, #7
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	4313      	orrs	r3, r2
 800472e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004730:	4b9b      	ldr	r3, [pc, #620]	; (80049a0 <HAL_RCC_ClockConfig+0x29c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0207 	and.w	r2, r3, #7
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d001      	beq.n	8004742 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e1d0      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474e:	4995      	ldr	r1, [pc, #596]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 8004750:	4b94      	ldr	r3, [pc, #592]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8168 	beq.w	8004a3e <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d15c      	bne.n	8004830 <HAL_RCC_ClockConfig+0x12c>
 8004776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800477a:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477e:	fa93 f3a3 	rbit	r3, r3
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f043 0320 	orr.w	r3, r3, #32
 8004790:	b2db      	uxtb	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d102      	bne.n	80047a2 <HAL_RCC_ClockConfig+0x9e>
 800479c:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	e02d      	b.n	80047fe <HAL_RCC_ClockConfig+0xfa>
 80047a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047a6:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047aa:	fa93 f3a3 	rbit	r3, r3
 80047ae:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80047b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f043 0320 	orr.w	r3, r3, #32
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d102      	bne.n	80047ce <HAL_RCC_ClockConfig+0xca>
 80047c8:	4b76      	ldr	r3, [pc, #472]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	e017      	b.n	80047fe <HAL_RCC_ClockConfig+0xfa>
 80047ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047d2:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d6:	fa93 f3a3 	rbit	r3, r3
 80047da:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	fab3 f383 	clz	r3, r3
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f043 0320 	orr.w	r3, r3, #32
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d102      	bne.n	80047fa <HAL_RCC_ClockConfig+0xf6>
 80047f4:	4b6b      	ldr	r3, [pc, #428]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	e001      	b.n	80047fe <HAL_RCC_ClockConfig+0xfa>
 80047fa:	4b6a      	ldr	r3, [pc, #424]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004802:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004806:	fa92 f2a2 	rbit	r2, r2
 800480a:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800480c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480e:	fab2 f282 	clz	r2, r2
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	f042 0220 	orr.w	r2, r2, #32
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	f002 021f 	and.w	r2, r2, #31
 8004820:	40d3      	lsrs	r3, r2
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 80be 	bne.w	80049a8 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e159      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d15b      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x1ec>
 8004838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800483c:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004840:	fa93 f3a3 	rbit	r3, r3
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004848:	fab3 f383 	clz	r3, r3
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f043 0320 	orr.w	r3, r3, #32
 8004852:	b2db      	uxtb	r3, r3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	d102      	bne.n	8004864 <HAL_RCC_ClockConfig+0x160>
 800485e:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	e02d      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1bc>
 8004864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004868:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486c:	fa93 f3a3 	rbit	r3, r3
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	fab3 f383 	clz	r3, r3
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f043 0320 	orr.w	r3, r3, #32
 800487e:	b2db      	uxtb	r3, r3
 8004880:	b2db      	uxtb	r3, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d102      	bne.n	8004890 <HAL_RCC_ClockConfig+0x18c>
 800488a:	4b46      	ldr	r3, [pc, #280]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	e017      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1bc>
 8004890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004894:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004898:	fa93 f3a3 	rbit	r3, r3
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	fab3 f383 	clz	r3, r3
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f043 0320 	orr.w	r3, r3, #32
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d102      	bne.n	80048bc <HAL_RCC_ClockConfig+0x1b8>
 80048b6:	4b3b      	ldr	r3, [pc, #236]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	e001      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1bc>
 80048bc:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048c4:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048c8:	fa92 f2a2 	rbit	r2, r2
 80048cc:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80048ce:	6a3a      	ldr	r2, [r7, #32]
 80048d0:	fab2 f282 	clz	r2, r2
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	f042 0220 	orr.w	r2, r2, #32
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	f002 021f 	and.w	r2, r2, #31
 80048e2:	40d3      	lsrs	r3, r2
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d15d      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0f9      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x3e0>
 80048f0:	2302      	movs	r3, #2
 80048f2:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f6:	fa93 f3a3 	rbit	r3, r3
 80048fa:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80048fc:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fe:	fab3 f383 	clz	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f043 0320 	orr.w	r3, r3, #32
 8004908:	b2db      	uxtb	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d102      	bne.n	800491a <HAL_RCC_ClockConfig+0x216>
 8004914:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	e02b      	b.n	8004972 <HAL_RCC_ClockConfig+0x26e>
 800491a:	2302      	movs	r3, #2
 800491c:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	fab3 f383 	clz	r3, r3
 800492c:	b2db      	uxtb	r3, r3
 800492e:	f043 0320 	orr.w	r3, r3, #32
 8004932:	b2db      	uxtb	r3, r3
 8004934:	b2db      	uxtb	r3, r3
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d102      	bne.n	8004944 <HAL_RCC_ClockConfig+0x240>
 800493e:	4b19      	ldr	r3, [pc, #100]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	e016      	b.n	8004972 <HAL_RCC_ClockConfig+0x26e>
 8004944:	2302      	movs	r3, #2
 8004946:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494a:	fa93 f3a3 	rbit	r3, r3
 800494e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	fab3 f383 	clz	r3, r3
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f043 0320 	orr.w	r3, r3, #32
 800495c:	b2db      	uxtb	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b04      	cmp	r3, #4
 8004966:	d102      	bne.n	800496e <HAL_RCC_ClockConfig+0x26a>
 8004968:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	e001      	b.n	8004972 <HAL_RCC_ClockConfig+0x26e>
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <HAL_RCC_ClockConfig+0x2a0>)
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2202      	movs	r2, #2
 8004974:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004978:	fa92 f2a2 	rbit	r2, r2
 800497c:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	fab2 f282 	clz	r2, r2
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	f042 0220 	orr.w	r2, r2, #32
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	f002 021f 	and.w	r2, r2, #31
 8004992:	40d3      	lsrs	r3, r2
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d105      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0a1      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x3e0>
 80049a0:	40022000 	.word	0x40022000
 80049a4:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049a8:	4950      	ldr	r1, [pc, #320]	; (8004aec <HAL_RCC_ClockConfig+0x3e8>)
 80049aa:	4b50      	ldr	r3, [pc, #320]	; (8004aec <HAL_RCC_ClockConfig+0x3e8>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f023 0203 	bic.w	r2, r3, #3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049ba:	f7fd fb45 	bl	8002048 <HAL_GetTick>
 80049be:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d112      	bne.n	80049ee <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ca:	f7fd fb3d 	bl	8002048 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e081      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80049e0:	4b42      	ldr	r3, [pc, #264]	; (8004aec <HAL_RCC_ClockConfig+0x3e8>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d1ee      	bne.n	80049ca <HAL_RCC_ClockConfig+0x2c6>
 80049ec:	e027      	b.n	8004a3e <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d11d      	bne.n	8004a32 <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f8:	f7fd fb26 	bl	8002048 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e06a      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a0e:	4b37      	ldr	r3, [pc, #220]	; (8004aec <HAL_RCC_ClockConfig+0x3e8>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d1ee      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x2f4>
 8004a1a:	e010      	b.n	8004a3e <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a1c:	f7fd fb14 	bl	8002048 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e058      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a32:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_RCC_ClockConfig+0x3e8>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1ee      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <HAL_RCC_ClockConfig+0x3ec>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0207 	and.w	r2, r3, #7
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d910      	bls.n	8004a6e <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4c:	4928      	ldr	r1, [pc, #160]	; (8004af0 <HAL_RCC_ClockConfig+0x3ec>)
 8004a4e:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <HAL_RCC_ClockConfig+0x3ec>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 0207 	bic.w	r2, r3, #7
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a5c:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <HAL_RCC_ClockConfig+0x3ec>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0207 	and.w	r2, r3, #7
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d001      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e03a      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a7a:	491c      	ldr	r1, [pc, #112]	; (8004aec <HAL_RCC_ClockConfig+0x3e8>)
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <HAL_RCC_ClockConfig+0x3e8>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d009      	beq.n	8004aac <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a98:	4914      	ldr	r1, [pc, #80]	; (8004aec <HAL_RCC_ClockConfig+0x3e8>)
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <HAL_RCC_ClockConfig+0x3e8>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004aac:	f000 f826 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8004ab0:	4601      	mov	r1, r0
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <HAL_RCC_ClockConfig+0x3e8>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004aba:	23f0      	movs	r3, #240	; 0xf0
 8004abc:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac0:	fa93 f3a3 	rbit	r3, r3
 8004ac4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	fab3 f383 	clz	r3, r3
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad0:	4a08      	ldr	r2, [pc, #32]	; (8004af4 <HAL_RCC_ClockConfig+0x3f0>)
 8004ad2:	5cd3      	ldrb	r3, [r2, r3]
 8004ad4:	fa21 f303 	lsr.w	r3, r1, r3
 8004ad8:	4a07      	ldr	r2, [pc, #28]	; (8004af8 <HAL_RCC_ClockConfig+0x3f4>)
 8004ada:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004adc:	2000      	movs	r0, #0
 8004ade:	f7fd fa89 	bl	8001ff4 <HAL_InitTick>
  
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3778      	adds	r7, #120	; 0x78
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40022000 	.word	0x40022000
 8004af4:	08009dfc 	.word	0x08009dfc
 8004af8:	2000042c 	.word	0x2000042c

08004afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b08b      	sub	sp, #44	; 0x2c
 8004b00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
 8004b06:	2300      	movs	r3, #0
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004b16:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d002      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x30>
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0x36>
 8004b2a:	e03c      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b2c:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b2e:	623b      	str	r3, [r7, #32]
      break;
 8004b30:	e03c      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b38:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004b3c:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	fa93 f3a3 	rbit	r3, r3
 8004b44:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	fab3 f383 	clz	r3, r3
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b50:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b52:	5cd3      	ldrb	r3, [r2, r3]
 8004b54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004b56:	4b19      	ldr	r3, [pc, #100]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	f003 020f 	and.w	r2, r3, #15
 8004b5e:	230f      	movs	r3, #15
 8004b60:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	fa93 f3a3 	rbit	r3, r3
 8004b68:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	fab3 f383 	clz	r3, r3
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
 8004b74:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b76:	5cd3      	ldrb	r3, [r2, r3]
 8004b78:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004b84:	4a0e      	ldr	r2, [pc, #56]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
 8004b94:	e004      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	4a0c      	ldr	r2, [pc, #48]	; (8004bcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	623b      	str	r3, [r7, #32]
      break;
 8004ba4:	e002      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ba8:	623b      	str	r3, [r7, #32]
      break;
 8004baa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bac:	6a3b      	ldr	r3, [r7, #32]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	372c      	adds	r7, #44	; 0x2c
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	007a1200 	.word	0x007a1200
 8004bc4:	08009e14 	.word	0x08009e14
 8004bc8:	08009e24 	.word	0x08009e24
 8004bcc:	003d0900 	.word	0x003d0900

08004bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	2000042c 	.word	0x2000042c

08004be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004bee:	f7ff ffef 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004bf2:	4601      	mov	r1, r0
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bfc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004c00:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	fa93 f3a3 	rbit	r3, r3
 8004c08:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
 8004c14:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c16:	5cd3      	ldrb	r3, [r2, r3]
 8004c18:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40021000 	.word	0x40021000
 8004c28:	08009e0c 	.word	0x08009e0c

08004c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c32:	f7ff ffcd 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004c36:	4601      	mov	r1, r0
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8004c40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004c44:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	fa93 f3a3 	rbit	r3, r3
 8004c4c:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	fab3 f383 	clz	r3, r3
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
 8004c58:	4a04      	ldr	r2, [pc, #16]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c5a:	5cd3      	ldrb	r3, [r2, r3]
 8004c5c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	08009e0c 	.word	0x08009e0c

08004c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b092      	sub	sp, #72	; 0x48
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80ef 	beq.w	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c94:	4b96      	ldr	r3, [pc, #600]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10e      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca0:	4a93      	ldr	r2, [pc, #588]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ca2:	4b93      	ldr	r3, [pc, #588]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004caa:	61d3      	str	r3, [r2, #28]
 8004cac:	4b90      	ldr	r3, [pc, #576]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cbe:	4b8d      	ldr	r3, [pc, #564]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d118      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cca:	4a8a      	ldr	r2, [pc, #552]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ccc:	4b89      	ldr	r3, [pc, #548]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd6:	f7fd f9b7 	bl	8002048 <HAL_GetTick>
 8004cda:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cde:	f7fd f9b3 	bl	8002048 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b64      	cmp	r3, #100	; 0x64
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e0fa      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x276>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf0:	4b80      	ldr	r3, [pc, #512]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cfc:	4b7c      	ldr	r3, [pc, #496]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 809c 	beq.w	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	f000 8094 	beq.w	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d1e:	4b74      	ldr	r3, [pc, #464]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	fa93 f3a3 	rbit	r3, r3
 8004d34:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d36:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d38:	fab3 f383 	clz	r3, r3
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4b6d      	ldr	r3, [pc, #436]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004d42:	4413      	add	r3, r2
 8004d44:	461a      	mov	r2, r3
 8004d46:	2301      	movs	r3, #1
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	fa93 f3a3 	rbit	r3, r3
 8004d56:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d58:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d5a:	fab3 f383 	clz	r3, r3
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	461a      	mov	r2, r3
 8004d62:	4b65      	ldr	r3, [pc, #404]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004d64:	4413      	add	r3, r2
 8004d66:	461a      	mov	r2, r3
 8004d68:	2300      	movs	r3, #0
 8004d6a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d6c:	4a60      	ldr	r2, [pc, #384]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d70:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d064      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fd f964 	bl	8002048 <HAL_GetTick>
 8004d80:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fd f960 	bl	8002048 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0a5      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	fa93 f3a3 	rbit	r3, r3
 8004da4:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004da6:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d102      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004dbe:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	e02b      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	fa93 f3a3 	rbit	r3, r3
 8004dce:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d102      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8004de8:	4b41      	ldr	r3, [pc, #260]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	e016      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004dee:	2302      	movs	r3, #2
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	fa93 f3a3 	rbit	r3, r3
 8004df8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d102      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004e12:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	e001      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004e18:	4b35      	ldr	r3, [pc, #212]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e22:	fa92 f2a2 	rbit	r2, r2
 8004e26:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	fab2 f282 	clz	r2, r2
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	f002 021f 	and.w	r2, r2, #31
 8004e3c:	40d3      	lsrs	r3, r2
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d09e      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e46:	492a      	ldr	r1, [pc, #168]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e48:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e60:	4a23      	ldr	r2, [pc, #140]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e62:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d008      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e78:	491d      	ldr	r1, [pc, #116]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e96:	4916      	ldr	r1, [pc, #88]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e98:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	f023 0210 	bic.w	r2, r3, #16
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004eb4:	490e      	ldr	r1, [pc, #56]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d008      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ed2:	4907      	ldr	r1, [pc, #28]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ed4:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3748      	adds	r7, #72	; 0x48
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	40007000 	.word	0x40007000
 8004ef8:	42420400 	.word	0x42420400

08004efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e043      	b.n	8004f96 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc ffcc 	bl	8001ec0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2224      	movs	r2, #36	; 0x24
 8004f2c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f995 	bl	8005270 <UART_SetConfig>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e022      	b.n	8004f96 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 faef 	bl	800553c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	6852      	ldr	r2, [r2, #4]
 8004f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f6c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	6892      	ldr	r2, [r2, #8]
 8004f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f7c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fb76 	bl	8005680 <UART_CheckIdleState>
 8004f94:	4603      	mov	r3, r0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop

08004fa0 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	80fb      	strh	r3, [r7, #6]
   uint16_t* tmp;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d16e      	bne.n	800509a <HAL_UART_Transmit+0xfa>
  {
    if((pData == NULL ) || (Size == 0))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_UART_Transmit+0x28>
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e067      	b.n	800509c <HAL_UART_Transmit+0xfc>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Transmit+0x3a>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e060      	b.n	800509c <HAL_UART_Transmit+0xfc>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2221      	movs	r2, #33	; 0x21
 8004fec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    huart->TxXferSize = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	88fa      	ldrh	r2, [r7, #6]
 8004ff4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0)
 8005000:	e031      	b.n	8005066 <HAL_UART_Transmit+0xc6>
    {
      huart->TxXferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	2180      	movs	r1, #128	; 0x80
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fb71 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_UART_Transmit+0x88>
      {
        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e039      	b.n	800509c <HAL_UART_Transmit+0xfc>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005030:	d111      	bne.n	8005056 <HAL_UART_Transmit+0xb6>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10d      	bne.n	8005056 <HAL_UART_Transmit+0xb6>
      {
        tmp = (uint16_t*) pData;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	617b      	str	r3, [r7, #20]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	8812      	ldrh	r2, [r2, #0]
 8005046:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800504a:	b292      	uxth	r2, r2
 800504c:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	3302      	adds	r3, #2
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	e007      	b.n	8005066 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	1c59      	adds	r1, r3, #1
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	8513      	strh	r3, [r2, #40]	; 0x28
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1c8      	bne.n	8005002 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2200      	movs	r2, #0
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fb42 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_UART_Transmit+0xe6>
    {
      return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e00a      	b.n	800509c <HAL_UART_Transmit+0xfc>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	e000      	b.n	800509c <HAL_UART_Transmit+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800509a:	2302      	movs	r3, #2
  }
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* UART parity error interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d010      	beq.n	80050dc <HAL_UART_IRQHandler+0x38>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <HAL_UART_IRQHandler+0x38>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2201      	movs	r2, #1
 80050ce:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d4:	f043 0201 	orr.w	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART frame error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d010      	beq.n	800510c <HAL_UART_IRQHandler+0x68>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d009      	beq.n	800510c <HAL_UART_IRQHandler+0x68>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2202      	movs	r2, #2
 80050fe:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005104:	f043 0204 	orr.w	r2, r3, #4
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART noise error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d010      	beq.n	800513c <HAL_UART_IRQHandler+0x98>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d009      	beq.n	800513c <HAL_UART_IRQHandler+0x98>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2204      	movs	r2, #4
 800512e:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005134:	f043 0202 	orr.w	r2, r3, #2
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART Over-Run interrupt occurred -----------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d010      	beq.n	800516c <HAL_UART_IRQHandler+0xc8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d009      	beq.n	800516c <HAL_UART_IRQHandler+0xc8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2208      	movs	r2, #8
 800515e:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005164:	f043 0208 	orr.w	r2, r3, #8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART wakeup from Stop mode interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d016      	beq.n	80051a8 <HAL_UART_IRQHandler+0x104>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00f      	beq.n	80051a8 <HAL_UART_IRQHandler+0x104>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005190:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    HAL_UARTEx_WakeupCallback(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fc30 	bl	8005a08 <HAL_UARTEx_WakeupCallback>
  }

  /* UART in mode Receiver ---------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <HAL_UART_IRQHandler+0x126>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_UART_IRQHandler+0x126>
  {
    UART_Receive_IT(huart);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fba9 	bl	800591c <UART_Receive_IT>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <HAL_UART_IRQHandler+0x148>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <HAL_UART_IRQHandler+0x148>
  {
    UART_Transmit_IT(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fb2a 	bl	8005840 <UART_Transmit_IT>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <HAL_UART_IRQHandler+0x16a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_UART_IRQHandler+0x16a>
  {
    UART_EndTransmit_IT(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fb6f 	bl	80058ec <UART_EndTransmit_IT>
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_UART_IRQHandler+0x188>
  {
    /* Set the UART state ready to be able to start again the Tx/Rx process */
    huart->gState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    HAL_UART_ErrorCallback(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f818 	bl	800525c <HAL_UART_ErrorCallback>
  }  
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart: UART handle.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800527c:	2310      	movs	r3, #16
 800527e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000;
 8005280:	2300      	movs	r3, #0
 8005282:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000;
 8005284:	2300      	movs	r3, #0
 8005286:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6819      	ldr	r1, [r3, #0]
 80052ae:	4b9e      	ldr	r3, [pc, #632]	; (8005528 <UART_SetConfig+0x2b8>)
 80052b0:	400b      	ands	r3, r1
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	6852      	ldr	r2, [r2, #4]
 80052c2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68d2      	ldr	r2, [r2, #12]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	6892      	ldr	r2, [r2, #8]
 80052e4:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a8e      	ldr	r2, [pc, #568]	; (800552c <UART_SetConfig+0x2bc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d121      	bne.n	800533c <UART_SetConfig+0xcc>
 80052f8:	4b8d      	ldr	r3, [pc, #564]	; (8005530 <UART_SetConfig+0x2c0>)
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	2b03      	cmp	r3, #3
 8005302:	d817      	bhi.n	8005334 <UART_SetConfig+0xc4>
 8005304:	a201      	add	r2, pc, #4	; (adr r2, 800530c <UART_SetConfig+0x9c>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	0800531d 	.word	0x0800531d
 8005310:	08005329 	.word	0x08005329
 8005314:	0800532f 	.word	0x0800532f
 8005318:	08005323 	.word	0x08005323
 800531c:	2300      	movs	r3, #0
 800531e:	75fb      	strb	r3, [r7, #23]
 8005320:	e01e      	b.n	8005360 <UART_SetConfig+0xf0>
 8005322:	2302      	movs	r3, #2
 8005324:	75fb      	strb	r3, [r7, #23]
 8005326:	e01b      	b.n	8005360 <UART_SetConfig+0xf0>
 8005328:	2304      	movs	r3, #4
 800532a:	75fb      	strb	r3, [r7, #23]
 800532c:	e018      	b.n	8005360 <UART_SetConfig+0xf0>
 800532e:	2308      	movs	r3, #8
 8005330:	75fb      	strb	r3, [r7, #23]
 8005332:	e015      	b.n	8005360 <UART_SetConfig+0xf0>
 8005334:	2310      	movs	r3, #16
 8005336:	75fb      	strb	r3, [r7, #23]
 8005338:	bf00      	nop
 800533a:	e011      	b.n	8005360 <UART_SetConfig+0xf0>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a7c      	ldr	r2, [pc, #496]	; (8005534 <UART_SetConfig+0x2c4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d102      	bne.n	800534c <UART_SetConfig+0xdc>
 8005346:	2300      	movs	r3, #0
 8005348:	75fb      	strb	r3, [r7, #23]
 800534a:	e009      	b.n	8005360 <UART_SetConfig+0xf0>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a79      	ldr	r2, [pc, #484]	; (8005538 <UART_SetConfig+0x2c8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d102      	bne.n	800535c <UART_SetConfig+0xec>
 8005356:	2300      	movs	r3, #0
 8005358:	75fb      	strb	r3, [r7, #23]
 800535a:	e001      	b.n	8005360 <UART_SetConfig+0xf0>
 800535c:	2310      	movs	r3, #16
 800535e:	75fb      	strb	r3, [r7, #23]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005368:	d170      	bne.n	800544c <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 800536a:	7dfb      	ldrb	r3, [r7, #23]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d857      	bhi.n	8005420 <UART_SetConfig+0x1b0>
 8005370:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0x108>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053b9 	.word	0x080053b9
 8005380:	080053d5 	.word	0x080053d5
 8005384:	08005421 	.word	0x08005421
 8005388:	080053ef 	.word	0x080053ef
 800538c:	08005421 	.word	0x08005421
 8005390:	08005421 	.word	0x08005421
 8005394:	08005421 	.word	0x08005421
 8005398:	0800540b 	.word	0x0800540b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800539c:	f7ff fc24 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 80053a0:	4603      	mov	r3, r0
 80053a2:	005a      	lsls	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	441a      	add	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	82bb      	strh	r3, [r7, #20]
        break;
 80053b6:	e036      	b.n	8005426 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80053b8:	f7ff fc38 	bl	8004c2c <HAL_RCC_GetPCLK2Freq>
 80053bc:	4603      	mov	r3, r0
 80053be:	005a      	lsls	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	441a      	add	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d0:	82bb      	strh	r3, [r7, #20]
        break;
 80053d2:	e028      	b.n	8005426 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80053de:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6852      	ldr	r2, [r2, #4]
 80053e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80053ea:	82bb      	strh	r3, [r7, #20]
        break;
 80053ec:	e01b      	b.n	8005426 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80053ee:	f7ff fb85 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 80053f2:	4603      	mov	r3, r0
 80053f4:	005a      	lsls	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	441a      	add	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	fbb2 f3f3 	udiv	r3, r2, r3
 8005406:	82bb      	strh	r3, [r7, #20]
        break;
 8005408:	e00d      	b.n	8005426 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	82bb      	strh	r3, [r7, #20]
        break;
 800541e:	e002      	b.n	8005426 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	74fb      	strb	r3, [r7, #19]
        break;
 8005424:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 8005426:	8abb      	ldrh	r3, [r7, #20]
 8005428:	f023 030f 	bic.w	r3, r3, #15
 800542c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 800542e:	8abb      	ldrh	r3, [r7, #20]
 8005430:	105b      	asrs	r3, r3, #1
 8005432:	b29b      	uxth	r3, r3
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	b29a      	uxth	r2, r3
 800543a:	897b      	ldrh	r3, [r7, #10]
 800543c:	4313      	orrs	r3, r2
 800543e:	b29b      	uxth	r3, r3
 8005440:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	897a      	ldrh	r2, [r7, #10]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	e068      	b.n	800551e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 800544c:	7dfb      	ldrb	r3, [r7, #23]
 800544e:	2b08      	cmp	r3, #8
 8005450:	d862      	bhi.n	8005518 <UART_SetConfig+0x2a8>
 8005452:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <UART_SetConfig+0x1e8>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	0800547d 	.word	0x0800547d
 800545c:	0800549d 	.word	0x0800549d
 8005460:	080054bd 	.word	0x080054bd
 8005464:	08005519 	.word	0x08005519
 8005468:	080054dd 	.word	0x080054dd
 800546c:	08005519 	.word	0x08005519
 8005470:	08005519 	.word	0x08005519
 8005474:	08005519 	.word	0x08005519
 8005478:	080054fd 	.word	0x080054fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681c      	ldr	r4, [r3, #0]
 8005480:	f7ff fbb2 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8005484:	4602      	mov	r2, r0
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	085b      	lsrs	r3, r3, #1
 800548c:	441a      	add	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	fbb2 f3f3 	udiv	r3, r2, r3
 8005496:	b29b      	uxth	r3, r3
 8005498:	60e3      	str	r3, [r4, #12]
        break;
 800549a:	e040      	b.n	800551e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681c      	ldr	r4, [r3, #0]
 80054a0:	f7ff fbc4 	bl	8004c2c <HAL_RCC_GetPCLK2Freq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	441a      	add	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	60e3      	str	r3, [r4, #12]
        break;
 80054ba:	e030      	b.n	800551e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	085b      	lsrs	r3, r3, #1
 80054c6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80054ca:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	6849      	ldr	r1, [r1, #4]
 80054d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	60d3      	str	r3, [r2, #12]
        break;
 80054da:	e020      	b.n	800551e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681c      	ldr	r4, [r3, #0]
 80054e0:	f7ff fb0c 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 80054e4:	4602      	mov	r2, r0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	441a      	add	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	60e3      	str	r3, [r4, #12]
        break;
 80054fa:	e010      	b.n	800551e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6852      	ldr	r2, [r2, #4]
 8005504:	0852      	lsrs	r2, r2, #1
 8005506:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6852      	ldr	r2, [r2, #4]
 800550e:	fbb1 f2f2 	udiv	r2, r1, r2
 8005512:	b292      	uxth	r2, r2
 8005514:	60da      	str	r2, [r3, #12]
        break;
 8005516:	e002      	b.n	800551e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	74fb      	strb	r3, [r7, #19]
        break;
 800551c:	bf00      	nop
    }
  }

  return ret;
 800551e:	7cfb      	ldrb	r3, [r7, #19]

}
 8005520:	4618      	mov	r0, r3
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	bd90      	pop	{r4, r7, pc}
 8005528:	efff69f3 	.word	0xefff69f3
 800552c:	40013800 	.word	0x40013800
 8005530:	40021000 	.word	0x40021000
 8005534:	40004400 	.word	0x40004400
 8005538:	40004800 	.word	0x40004800

0800553c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	6852      	ldr	r2, [r2, #4]
 800555a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	6852      	ldr	r2, [r2, #4]
 800557c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	6852      	ldr	r2, [r2, #4]
 800559e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	6852      	ldr	r2, [r2, #4]
 80055c0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055ea:	430a      	orrs	r2, r1
 80055ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	6892      	ldr	r2, [r2, #8]
 8005604:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800560c:	430a      	orrs	r2, r1
 800560e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01a      	beq.n	8005652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	6852      	ldr	r2, [r2, #4]
 8005626:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800563a:	d10a      	bne.n	8005652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	6852      	ldr	r2, [r2, #4]
 8005646:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	6852      	ldr	r2, [r2, #4]
 8005668:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
  }
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00c      	beq.n	80056b6 <UART_CheckIdleState+0x36>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800569c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056a0:	2200      	movs	r2, #0
 80056a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f82a 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <UART_CheckIdleState+0x36>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e020      	b.n	80056f8 <UART_CheckIdleState+0x78>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <UART_CheckIdleState+0x5e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80056c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056c8:	2200      	movs	r2, #0
 80056ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f816 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <UART_CheckIdleState+0x5e>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e00c      	b.n	80056f8 <UART_CheckIdleState+0x78>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 8005710:	f7fc fc9a 	bl	8002048 <HAL_GetTick>
 8005714:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f040 8084 	bne.w	8005826 <UART_WaitOnFlagUntilTimeout+0x126>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800571e:	e03c      	b.n	800579a <UART_WaitOnFlagUntilTimeout+0x9a>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005726:	d038      	beq.n	800579a <UART_WaitOnFlagUntilTimeout+0x9a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <UART_WaitOnFlagUntilTimeout+0x3e>
 800572e:	f7fc fc8b 	bl	8002048 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1ad2      	subs	r2, r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d92d      	bls.n	800579a <UART_WaitOnFlagUntilTimeout+0x9a>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800574c:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	f022 0220 	bic.w	r2, r2, #32
 800575c:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800576c:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	6892      	ldr	r2, [r2, #8]
 8005778:	f022 0201 	bic.w	r2, r2, #1
 800577c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e04e      	b.n	8005838 <UART_WaitOnFlagUntilTimeout+0x138>
  uint32_t tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	401a      	ands	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d1ba      	bne.n	8005720 <UART_WaitOnFlagUntilTimeout+0x20>
 80057aa:	e044      	b.n	8005836 <UART_WaitOnFlagUntilTimeout+0x136>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d038      	beq.n	8005826 <UART_WaitOnFlagUntilTimeout+0x126>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <UART_WaitOnFlagUntilTimeout+0xca>
 80057ba:	f7fc fc45 	bl	8002048 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	1ad2      	subs	r2, r2, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d92d      	bls.n	8005826 <UART_WaitOnFlagUntilTimeout+0x126>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057d8:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	f022 0220 	bic.w	r2, r2, #32
 80057e8:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057f8:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	6892      	ldr	r2, [r2, #8]
 8005804:	f022 0201 	bic.w	r2, r2, #1
 8005808:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e008      	b.n	8005838 <UART_WaitOnFlagUntilTimeout+0x138>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	401a      	ands	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	429a      	cmp	r2, r3
 8005834:	d0ba      	beq.n	80057ac <UART_WaitOnFlagUntilTimeout+0xac>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b21      	cmp	r3, #33	; 0x21
 8005852:	d144      	bne.n	80058de <UART_Transmit_IT+0x9e>
  {

    if(huart->TxXferCount == 0)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800585a:	2b00      	cmp	r3, #0
 800585c:	d111      	bne.n	8005882 <UART_Transmit_IT+0x42>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	6812      	ldr	r2, [r2, #0]
 8005868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800586c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800587c:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e02e      	b.n	80058e0 <UART_Transmit_IT+0xa0>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588a:	d114      	bne.n	80058b6 <UART_Transmit_IT+0x76>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d110      	bne.n	80058b6 <UART_Transmit_IT+0x76>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005898:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	8812      	ldrh	r2, [r2, #0]
 80058a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a6:	b292      	uxth	r2, r2
 80058a8:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ae:	1c9a      	adds	r2, r3, #2
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80058b4:	e009      	b.n	80058ca <UART_Transmit_IT+0x8a>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058be:	1c58      	adds	r0, r3, #1
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	64c8      	str	r0, [r1, #76]	; 0x4c
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <UART_Transmit_IT+0xa0>
    }
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005902:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff fc91 	bl	8005234 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800592a:	81fb      	strh	r3, [r7, #14]

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b22      	cmp	r3, #34	; 0x22
 8005936:	d159      	bne.n	80059ec <UART_Receive_IT+0xd0>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005940:	d115      	bne.n	800596e <UART_Receive_IT+0x52>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d111      	bne.n	800596e <UART_Receive_IT+0x52>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005956:	b29a      	uxth	r2, r3
 8005958:	89fb      	ldrh	r3, [r7, #14]
 800595a:	4013      	ands	r3, r2
 800595c:	b29a      	uxth	r2, r3
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005966:	1c9a      	adds	r2, r3, #2
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	655a      	str	r2, [r3, #84]	; 0x54
 800596c:	e00e      	b.n	800598c <UART_Receive_IT+0x70>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	1c59      	adds	r1, r3, #1
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6551      	str	r1, [r2, #84]	; 0x54
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800597e:	b292      	uxth	r2, r2
 8005980:	b2d1      	uxtb	r1, r2
 8005982:	89fa      	ldrh	r2, [r7, #14]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	400a      	ands	r2, r1
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d120      	bne.n	80059e8 <UART_Receive_IT+0xcc>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	f022 0220 	bic.w	r2, r2, #32
 80059b4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6812      	ldr	r2, [r2, #0]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059c4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	6892      	ldr	r2, [r2, #8]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fc32 	bl	8005248 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	e00a      	b.n	80059fe <UART_Receive_IT+0xe2>
    }

    return HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e008      	b.n	80059fe <UART_Receive_IT+0xe2>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	6992      	ldr	r2, [r2, #24]
 80059f6:	f042 0208 	orr.w	r2, r2, #8
 80059fa:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
  }
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop

08005a08 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback
  * @param  huart: UART handle
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e01d      	b.n	8005a6a <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fc fa16 	bl	8001e74 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f000 fada 	bl	8006014 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop

08005a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim: TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	68d2      	ldr	r2, [r2, #12]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop

08005aac <HAL_TIM_Encoder_Init>:
  * @param  htim: TIM Encoder Interface handle
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e083      	b.n	8005bd4 <HAL_TIM_Encoder_Init+0x128>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d106      	bne.n	8005ae6 <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7fc f997 	bl	8001e14 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afc:	f023 0307 	bic.w	r3, r3, #7
 8005b00:	6093      	str	r3, [r2, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f000 fa81 	bl	8006014 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
  
  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b58:	f023 030c 	bic.w	r3, r3, #12
 8005b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	4313      	orrs	r3, r2
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	011a      	lsls	r2, r3, #4
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	031b      	lsls	r3, r3, #12
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	4313      	orrs	r3, r2
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d022      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01b      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0202 	mvn.w	r2, #2
 8005c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9da 	bl	8005fd8 <HAL_TIM_IC_CaptureCallback>
 8005c24:	e005      	b.n	8005c32 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f9cc 	bl	8005fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f9dd 	bl	8005fec <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d022      	beq.n	8005c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01b      	beq.n	8005c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0204 	mvn.w	r2, #4
 8005c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2202      	movs	r2, #2
 8005c62:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f9b0 	bl	8005fd8 <HAL_TIM_IC_CaptureCallback>
 8005c78:	e005      	b.n	8005c86 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f9a2 	bl	8005fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f9b3 	bl	8005fec <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	761a      	strb	r2, [r3, #24]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d022      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01b      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0208 	mvn.w	r2, #8
 8005cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2204      	movs	r2, #4
 8005cb6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f986 	bl	8005fd8 <HAL_TIM_IC_CaptureCallback>
 8005ccc:	e005      	b.n	8005cda <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f978 	bl	8005fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f989 	bl	8005fec <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d022      	beq.n	8005d34 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0310 	and.w	r3, r3, #16
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01b      	beq.n	8005d34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0210 	mvn.w	r2, #16
 8005d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2208      	movs	r2, #8
 8005d0a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f95c 	bl	8005fd8 <HAL_TIM_IC_CaptureCallback>
 8005d20:	e005      	b.n	8005d2e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f94e 	bl	8005fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f95f 	bl	8005fec <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	761a      	strb	r2, [r3, #24]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00e      	beq.n	8005d60 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0201 	mvn.w	r2, #1
 8005d58:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f928 	bl	8005fb0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00e      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d84:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fab8 	bl	80062fc <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00e      	beq.n	8005db8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <HAL_TIM_IRQHandler+0x1dc>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005db0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f924 	bl	8006000 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00e      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x208>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0220 	mvn.w	r2, #32
 8005ddc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa82 	bl	80062e8 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8005de4:	bf00      	nop
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIM_ConfigClockSource+0x1c>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e0cf      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b40      	cmp	r3, #64	; 0x40
 8005e42:	d07c      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x152>
 8005e44:	2b40      	cmp	r3, #64	; 0x40
 8005e46:	d80f      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x7c>
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	f000 808f 	beq.w	8005f6c <HAL_TIM_ConfigClockSource+0x180>
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d803      	bhi.n	8005e5a <HAL_TIM_ConfigClockSource+0x6e>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 8083 	beq.w	8005f5e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8005e58:	e09d      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	f000 808d 	beq.w	8005f7a <HAL_TIM_ConfigClockSource+0x18e>
 8005e60:	2b30      	cmp	r3, #48	; 0x30
 8005e62:	f000 8091 	beq.w	8005f88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8005e66:	e096      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8005e68:	2b70      	cmp	r3, #112	; 0x70
 8005e6a:	d018      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0xb2>
 8005e6c:	2b70      	cmp	r3, #112	; 0x70
 8005e6e:	d804      	bhi.n	8005e7a <HAL_TIM_ConfigClockSource+0x8e>
 8005e70:	2b50      	cmp	r3, #80	; 0x50
 8005e72:	d044      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x112>
 8005e74:	2b60      	cmp	r3, #96	; 0x60
 8005e76:	d052      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x132>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8005e78:	e08d      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	d003      	beq.n	8005e88 <HAL_TIM_ConfigClockSource+0x9c>
 8005e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e84:	d028      	beq.n	8005ed8 <HAL_TIM_ConfigClockSource+0xec>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8005e86:	e086      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e96:	f023 0307 	bic.w	r3, r3, #7
 8005e9a:	6093      	str	r3, [r2, #8]
    }
    break;
 8005e9c:	e07b      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6899      	ldr	r1, [r3, #8]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f000 f9ab 	bl	8006208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	60fb      	str	r3, [r7, #12]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ec4:	60fb      	str	r3, [r7, #12]
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ecc:	60fb      	str	r3, [r7, #12]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	609a      	str	r2, [r3, #8]
    }
    break;
 8005ed6:	e05e      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	6899      	ldr	r1, [r3, #8]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f000 f98e 	bl	8006208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	6892      	ldr	r2, [r2, #8]
 8005ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005efa:	609a      	str	r2, [r3, #8]
    }
    break;
 8005efc:	e04b      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6859      	ldr	r1, [r3, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f000 f8f4 	bl	80060f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity, 
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2150      	movs	r1, #80	; 0x50
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 f956 	bl	80061c8 <TIM_ITRx_SetConfig>
    }
    break;
 8005f1c:	e03b      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
      
       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f000 f918 	bl	8006160 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity, 
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2160      	movs	r1, #96	; 0x60
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 f946 	bl	80061c8 <TIM_ITRx_SetConfig>
    }
    break;
 8005f3c:	e02b      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f000 f8d4 	bl	80060f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2140      	movs	r1, #64	; 0x40
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 f936 	bl	80061c8 <TIM_ITRx_SetConfig>
    }
    break;
 8005f5c:	e01b      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR0:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
      
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2100      	movs	r1, #0
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 f92f 	bl	80061c8 <TIM_ITRx_SetConfig>
    }
    break;
 8005f6a:	e014      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
      
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2110      	movs	r1, #16
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 f928 	bl	80061c8 <TIM_ITRx_SetConfig>
    }
    break;
 8005f78:	e00d      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
      
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2120      	movs	r1, #32
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f921 	bl	80061c8 <TIM_ITRx_SetConfig>
    }
    break;
 8005f86:	e006      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
      
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2130      	movs	r1, #48	; 0x30
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f91a 	bl	80061c8 <TIM_ITRx_SetConfig>
    }
    break;
 8005f94:	bf00      	nop
    
  default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim: TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim: TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a2e      	ldr	r2, [pc, #184]	; (80060e4 <TIM_Base_SetConfig+0xd0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d007      	beq.n	8006040 <TIM_Base_SetConfig+0x2c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006036:	d003      	beq.n	8006040 <TIM_Base_SetConfig+0x2c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a2b      	ldr	r2, [pc, #172]	; (80060e8 <TIM_Base_SetConfig+0xd4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d108      	bne.n	8006052 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a23      	ldr	r2, [pc, #140]	; (80060e4 <TIM_Base_SetConfig+0xd0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <TIM_Base_SetConfig+0x6e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006060:	d00f      	beq.n	8006082 <TIM_Base_SetConfig+0x6e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a20      	ldr	r2, [pc, #128]	; (80060e8 <TIM_Base_SetConfig+0xd4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00b      	beq.n	8006082 <TIM_Base_SetConfig+0x6e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1f      	ldr	r2, [pc, #124]	; (80060ec <TIM_Base_SetConfig+0xd8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0x6e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a1e      	ldr	r2, [pc, #120]	; (80060f0 <TIM_Base_SetConfig+0xdc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0x6e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <TIM_Base_SetConfig+0xe0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d108      	bne.n	8006094 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a0d      	ldr	r2, [pc, #52]	; (80060e4 <TIM_Base_SetConfig+0xd0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00b      	beq.n	80060ca <TIM_Base_SetConfig+0xb6>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a0d      	ldr	r2, [pc, #52]	; (80060ec <TIM_Base_SetConfig+0xd8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d007      	beq.n	80060ca <TIM_Base_SetConfig+0xb6>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a0c      	ldr	r2, [pc, #48]	; (80060f0 <TIM_Base_SetConfig+0xdc>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d003      	beq.n	80060ca <TIM_Base_SetConfig+0xb6>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a0b      	ldr	r2, [pc, #44]	; (80060f4 <TIM_Base_SetConfig+0xe0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d103      	bne.n	80060d2 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	615a      	str	r2, [r3, #20]
}
 80060d8:	bf00      	nop
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	40012c00 	.word	0x40012c00
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800

080060f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800612a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f023 030a 	bic.w	r3, r3, #10
 800613c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop

08006160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f023 0210 	bic.w	r2, r3, #16
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006192:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	031b      	lsls	r3, r3, #12
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	621a      	str	r2, [r3, #32]
}
 80061bc:	bf00      	nop
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e4:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80061e6:	887b      	ldrh	r3, [r7, #2]
 80061e8:	f043 0307 	orr.w	r3, r3, #7
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	609a      	str	r2, [r3, #8]
}
 80061fc:	bf00      	nop
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	021a      	lsls	r2, r3, #8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	431a      	orrs	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4313      	orrs	r3, r2
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	609a      	str	r2, [r3, #8]
} 
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006260:	2302      	movs	r3, #2
 8006262:	e038      	b.n	80062d6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d108      	bne.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800628c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
} 
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40012c00 	.word	0x40012c00

080062e8 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <__errno>:
 8006310:	4b01      	ldr	r3, [pc, #4]	; (8006318 <__errno+0x8>)
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	20000428 	.word	0x20000428

0800631c <sprintf>:
 800631c:	b40e      	push	{r1, r2, r3}
 800631e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006320:	b09c      	sub	sp, #112	; 0x70
 8006322:	ab21      	add	r3, sp, #132	; 0x84
 8006324:	490f      	ldr	r1, [pc, #60]	; (8006364 <sprintf+0x48>)
 8006326:	f853 2b04 	ldr.w	r2, [r3], #4
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	4605      	mov	r5, r0
 800632e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8006332:	6808      	ldr	r0, [r1, #0]
 8006334:	9502      	str	r5, [sp, #8]
 8006336:	f44f 7702 	mov.w	r7, #520	; 0x208
 800633a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800633e:	a902      	add	r1, sp, #8
 8006340:	9506      	str	r5, [sp, #24]
 8006342:	f8ad 7014 	strh.w	r7, [sp, #20]
 8006346:	9404      	str	r4, [sp, #16]
 8006348:	9407      	str	r4, [sp, #28]
 800634a:	f8ad 6016 	strh.w	r6, [sp, #22]
 800634e:	f000 f80b 	bl	8006368 <_svfprintf_r>
 8006352:	9b02      	ldr	r3, [sp, #8]
 8006354:	2200      	movs	r2, #0
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	b01c      	add	sp, #112	; 0x70
 800635a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800635e:	b003      	add	sp, #12
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000428 	.word	0x20000428

08006368 <_svfprintf_r>:
 8006368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636c:	b0bd      	sub	sp, #244	; 0xf4
 800636e:	460c      	mov	r4, r1
 8006370:	9104      	str	r1, [sp, #16]
 8006372:	4692      	mov	sl, r2
 8006374:	930a      	str	r3, [sp, #40]	; 0x28
 8006376:	9006      	str	r0, [sp, #24]
 8006378:	f002 faf4 	bl	8008964 <_localeconv_r>
 800637c:	6803      	ldr	r3, [r0, #0]
 800637e:	9311      	str	r3, [sp, #68]	; 0x44
 8006380:	4618      	mov	r0, r3
 8006382:	f7fa fc3d 	bl	8000c00 <strlen>
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	9012      	str	r0, [sp, #72]	; 0x48
 800638a:	061d      	lsls	r5, r3, #24
 800638c:	d503      	bpl.n	8006396 <_svfprintf_r+0x2e>
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f001 8136 	beq.w	8007602 <_svfprintf_r+0x129a>
 8006396:	ed9f 7ba4 	vldr	d7, [pc, #656]	; 8006628 <_svfprintf_r+0x2c0>
 800639a:	2300      	movs	r3, #0
 800639c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80063a0:	9310      	str	r3, [sp, #64]	; 0x40
 80063a2:	9321      	str	r3, [sp, #132]	; 0x84
 80063a4:	9320      	str	r3, [sp, #128]	; 0x80
 80063a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80063a8:	9307      	str	r3, [sp, #28]
 80063aa:	ab2c      	add	r3, sp, #176	; 0xb0
 80063ac:	931f      	str	r3, [sp, #124]	; 0x7c
 80063ae:	4699      	mov	r9, r3
 80063b0:	f89a 3000 	ldrb.w	r3, [sl]
 80063b4:	4654      	mov	r4, sl
 80063b6:	b1eb      	cbz	r3, 80063f4 <_svfprintf_r+0x8c>
 80063b8:	2b25      	cmp	r3, #37	; 0x25
 80063ba:	d102      	bne.n	80063c2 <_svfprintf_r+0x5a>
 80063bc:	e01a      	b.n	80063f4 <_svfprintf_r+0x8c>
 80063be:	2b25      	cmp	r3, #37	; 0x25
 80063c0:	d003      	beq.n	80063ca <_svfprintf_r+0x62>
 80063c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f9      	bne.n	80063be <_svfprintf_r+0x56>
 80063ca:	ebca 0504 	rsb	r5, sl, r4
 80063ce:	b18d      	cbz	r5, 80063f4 <_svfprintf_r+0x8c>
 80063d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063d4:	f8c9 a000 	str.w	sl, [r9]
 80063d8:	3301      	adds	r3, #1
 80063da:	442a      	add	r2, r5
 80063dc:	2b07      	cmp	r3, #7
 80063de:	f8c9 5004 	str.w	r5, [r9, #4]
 80063e2:	9221      	str	r2, [sp, #132]	; 0x84
 80063e4:	9320      	str	r3, [sp, #128]	; 0x80
 80063e6:	f300 80a6 	bgt.w	8006536 <_svfprintf_r+0x1ce>
 80063ea:	f109 0908 	add.w	r9, r9, #8
 80063ee:	9b07      	ldr	r3, [sp, #28]
 80063f0:	442b      	add	r3, r5
 80063f2:	9307      	str	r3, [sp, #28]
 80063f4:	7823      	ldrb	r3, [r4, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 80a6 	beq.w	8006548 <_svfprintf_r+0x1e0>
 80063fc:	2300      	movs	r3, #0
 80063fe:	461a      	mov	r2, r3
 8006400:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006404:	4619      	mov	r1, r3
 8006406:	9308      	str	r3, [sp, #32]
 8006408:	9303      	str	r3, [sp, #12]
 800640a:	f04f 3bff 	mov.w	fp, #4294967295
 800640e:	7863      	ldrb	r3, [r4, #1]
 8006410:	f104 0a01 	add.w	sl, r4, #1
 8006414:	465d      	mov	r5, fp
 8006416:	f10a 0a01 	add.w	sl, sl, #1
 800641a:	f1a3 0020 	sub.w	r0, r3, #32
 800641e:	2858      	cmp	r0, #88	; 0x58
 8006420:	f200 841f 	bhi.w	8006c62 <_svfprintf_r+0x8fa>
 8006424:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006428:	041d038b 	.word	0x041d038b
 800642c:	0393041d 	.word	0x0393041d
 8006430:	041d041d 	.word	0x041d041d
 8006434:	041d041d 	.word	0x041d041d
 8006438:	041d041d 	.word	0x041d041d
 800643c:	03a8039a 	.word	0x03a8039a
 8006440:	005d041d 	.word	0x005d041d
 8006444:	041d00e2 	.word	0x041d00e2
 8006448:	010d0106 	.word	0x010d0106
 800644c:	010d010d 	.word	0x010d010d
 8006450:	010d010d 	.word	0x010d010d
 8006454:	010d010d 	.word	0x010d010d
 8006458:	010d010d 	.word	0x010d010d
 800645c:	041d041d 	.word	0x041d041d
 8006460:	041d041d 	.word	0x041d041d
 8006464:	041d041d 	.word	0x041d041d
 8006468:	041d041d 	.word	0x041d041d
 800646c:	041d041d 	.word	0x041d041d
 8006470:	0285011d 	.word	0x0285011d
 8006474:	0285041d 	.word	0x0285041d
 8006478:	041d041d 	.word	0x041d041d
 800647c:	041d041d 	.word	0x041d041d
 8006480:	041d02c0 	.word	0x041d02c0
 8006484:	02c7041d 	.word	0x02c7041d
 8006488:	041d041d 	.word	0x041d041d
 800648c:	041d041d 	.word	0x041d041d
 8006490:	02fa041d 	.word	0x02fa041d
 8006494:	041d041d 	.word	0x041d041d
 8006498:	041d0328 	.word	0x041d0328
 800649c:	041d041d 	.word	0x041d041d
 80064a0:	041d041d 	.word	0x041d041d
 80064a4:	041d041d 	.word	0x041d041d
 80064a8:	041d041d 	.word	0x041d041d
 80064ac:	0369041d 	.word	0x0369041d
 80064b0:	0285037c 	.word	0x0285037c
 80064b4:	02850285 	.word	0x02850285
 80064b8:	037c0384 	.word	0x037c0384
 80064bc:	041d041d 	.word	0x041d041d
 80064c0:	041d03f2 	.word	0x041d03f2
 80064c4:	00a303fd 	.word	0x00a303fd
 80064c8:	03ad0064 	.word	0x03ad0064
 80064cc:	03b4041d 	.word	0x03b4041d
 80064d0:	03d5041d 	.word	0x03d5041d
 80064d4:	041d041d 	.word	0x041d041d
 80064d8:	03dd      	.short	0x03dd
 80064da:	9808      	ldr	r0, [sp, #32]
 80064dc:	930a      	str	r3, [sp, #40]	; 0x28
 80064de:	4240      	negs	r0, r0
 80064e0:	9008      	str	r0, [sp, #32]
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	f043 0304 	orr.w	r3, r3, #4
 80064e8:	9303      	str	r3, [sp, #12]
 80064ea:	f89a 3000 	ldrb.w	r3, [sl]
 80064ee:	e792      	b.n	8006416 <_svfprintf_r+0xae>
 80064f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80064f2:	46ab      	mov	fp, r5
 80064f4:	2100      	movs	r1, #0
 80064f6:	6804      	ldr	r4, [r0, #0]
 80064f8:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80064fc:	1d07      	adds	r7, r0, #4
 80064fe:	9803      	ldr	r0, [sp, #12]
 8006500:	2330      	movs	r3, #48	; 0x30
 8006502:	2278      	movs	r2, #120	; 0x78
 8006504:	458b      	cmp	fp, r1
 8006506:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800650a:	f04f 0500 	mov.w	r5, #0
 800650e:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8006512:	f040 0302 	orr.w	r3, r0, #2
 8006516:	f2c0 83c1 	blt.w	8006c9c <_svfprintf_r+0x934>
 800651a:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800651e:	f043 0302 	orr.w	r3, r3, #2
 8006522:	9303      	str	r3, [sp, #12]
 8006524:	ea54 0305 	orrs.w	r3, r4, r5
 8006528:	970a      	str	r7, [sp, #40]	; 0x28
 800652a:	f000 838d 	beq.w	8006c48 <_svfprintf_r+0x8e0>
 800652e:	460f      	mov	r7, r1
 8006530:	920c      	str	r2, [sp, #48]	; 0x30
 8006532:	483f      	ldr	r0, [pc, #252]	; (8006630 <_svfprintf_r+0x2c8>)
 8006534:	e2d1      	b.n	8006ada <_svfprintf_r+0x772>
 8006536:	aa1f      	add	r2, sp, #124	; 0x7c
 8006538:	9904      	ldr	r1, [sp, #16]
 800653a:	9806      	ldr	r0, [sp, #24]
 800653c:	f003 f812 	bl	8009564 <__ssprint_r>
 8006540:	b948      	cbnz	r0, 8006556 <_svfprintf_r+0x1ee>
 8006542:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006546:	e752      	b.n	80063ee <_svfprintf_r+0x86>
 8006548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800654a:	b123      	cbz	r3, 8006556 <_svfprintf_r+0x1ee>
 800654c:	9806      	ldr	r0, [sp, #24]
 800654e:	9904      	ldr	r1, [sp, #16]
 8006550:	aa1f      	add	r2, sp, #124	; 0x7c
 8006552:	f003 f807 	bl	8009564 <__ssprint_r>
 8006556:	9b04      	ldr	r3, [sp, #16]
 8006558:	899b      	ldrh	r3, [r3, #12]
 800655a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800655e:	9b07      	ldr	r3, [sp, #28]
 8006560:	bf18      	it	ne
 8006562:	f04f 33ff 	movne.w	r3, #4294967295
 8006566:	4618      	mov	r0, r3
 8006568:	b03d      	add	sp, #244	; 0xf4
 800656a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656e:	930c      	str	r3, [sp, #48]	; 0x30
 8006570:	46ab      	mov	fp, r5
 8006572:	2a00      	cmp	r2, #0
 8006574:	f041 822d 	bne.w	80079d2 <_svfprintf_r+0x166a>
 8006578:	9a03      	ldr	r2, [sp, #12]
 800657a:	f012 0320 	ands.w	r3, r2, #32
 800657e:	f000 8228 	beq.w	80069d2 <_svfprintf_r+0x66a>
 8006582:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006584:	3707      	adds	r7, #7
 8006586:	f027 0307 	bic.w	r3, r7, #7
 800658a:	2700      	movs	r7, #0
 800658c:	f103 0108 	add.w	r1, r3, #8
 8006590:	45bb      	cmp	fp, r7
 8006592:	910a      	str	r1, [sp, #40]	; 0x28
 8006594:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006598:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 800659c:	f2c0 86d5 	blt.w	800734a <_svfprintf_r+0xfe2>
 80065a0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80065a4:	9303      	str	r3, [sp, #12]
 80065a6:	ea54 0305 	orrs.w	r3, r4, r5
 80065aa:	f000 836f 	beq.w	8006c8c <_svfprintf_r+0x924>
 80065ae:	ae2c      	add	r6, sp, #176	; 0xb0
 80065b0:	08e2      	lsrs	r2, r4, #3
 80065b2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80065b6:	08e9      	lsrs	r1, r5, #3
 80065b8:	f004 0307 	and.w	r3, r4, #7
 80065bc:	460d      	mov	r5, r1
 80065be:	4614      	mov	r4, r2
 80065c0:	3330      	adds	r3, #48	; 0x30
 80065c2:	ea54 0205 	orrs.w	r2, r4, r5
 80065c6:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80065ca:	d1f1      	bne.n	80065b0 <_svfprintf_r+0x248>
 80065cc:	9a03      	ldr	r2, [sp, #12]
 80065ce:	07d1      	lsls	r1, r2, #31
 80065d0:	f140 808c 	bpl.w	80066ec <_svfprintf_r+0x384>
 80065d4:	2b30      	cmp	r3, #48	; 0x30
 80065d6:	f000 8089 	beq.w	80066ec <_svfprintf_r+0x384>
 80065da:	2230      	movs	r2, #48	; 0x30
 80065dc:	1e73      	subs	r3, r6, #1
 80065de:	f806 2c01 	strb.w	r2, [r6, #-1]
 80065e2:	aa2c      	add	r2, sp, #176	; 0xb0
 80065e4:	1ad2      	subs	r2, r2, r3
 80065e6:	9209      	str	r2, [sp, #36]	; 0x24
 80065e8:	461e      	mov	r6, r3
 80065ea:	e082      	b.n	80066f2 <_svfprintf_r+0x38a>
 80065ec:	f89a 3000 	ldrb.w	r3, [sl]
 80065f0:	2b2a      	cmp	r3, #42	; 0x2a
 80065f2:	f10a 0401 	add.w	r4, sl, #1
 80065f6:	f001 81ad 	beq.w	8007954 <_svfprintf_r+0x15ec>
 80065fa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80065fe:	2809      	cmp	r0, #9
 8006600:	bf98      	it	ls
 8006602:	2500      	movls	r5, #0
 8006604:	f201 80f8 	bhi.w	80077f8 <_svfprintf_r+0x1490>
 8006608:	f814 3b01 	ldrb.w	r3, [r4], #1
 800660c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006610:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8006614:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006618:	2809      	cmp	r0, #9
 800661a:	d9f5      	bls.n	8006608 <_svfprintf_r+0x2a0>
 800661c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8006620:	46a2      	mov	sl, r4
 8006622:	e6fa      	b.n	800641a <_svfprintf_r+0xb2>
 8006624:	f3af 8000 	nop.w
	...
 8006630:	08009e68 	.word	0x08009e68
 8006634:	9b03      	ldr	r3, [sp, #12]
 8006636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663a:	9303      	str	r3, [sp, #12]
 800663c:	f89a 3000 	ldrb.w	r3, [sl]
 8006640:	e6e9      	b.n	8006416 <_svfprintf_r+0xae>
 8006642:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006646:	2300      	movs	r3, #0
 8006648:	461c      	mov	r4, r3
 800664a:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800664e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006652:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8006656:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800665a:	2809      	cmp	r0, #9
 800665c:	d9f5      	bls.n	800664a <_svfprintf_r+0x2e2>
 800665e:	9408      	str	r4, [sp, #32]
 8006660:	e6db      	b.n	800641a <_svfprintf_r+0xb2>
 8006662:	930c      	str	r3, [sp, #48]	; 0x30
 8006664:	46ab      	mov	fp, r5
 8006666:	2a00      	cmp	r2, #0
 8006668:	f041 81bb 	bne.w	80079e2 <_svfprintf_r+0x167a>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	f043 0310 	orr.w	r3, r3, #16
 8006672:	9303      	str	r3, [sp, #12]
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	069c      	lsls	r4, r3, #26
 8006678:	f140 8521 	bpl.w	80070be <_svfprintf_r+0xd56>
 800667c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800667e:	3707      	adds	r7, #7
 8006680:	f027 0707 	bic.w	r7, r7, #7
 8006684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006688:	f107 0108 	add.w	r1, r7, #8
 800668c:	910a      	str	r1, [sp, #40]	; 0x28
 800668e:	4614      	mov	r4, r2
 8006690:	461d      	mov	r5, r3
 8006692:	2a00      	cmp	r2, #0
 8006694:	f173 0300 	sbcs.w	r3, r3, #0
 8006698:	f2c0 854e 	blt.w	8007138 <_svfprintf_r+0xdd0>
 800669c:	f1bb 0f00 	cmp.w	fp, #0
 80066a0:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 80066a4:	f2c0 8529 	blt.w	80070fa <_svfprintf_r+0xd92>
 80066a8:	9b03      	ldr	r3, [sp, #12]
 80066aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ae:	9303      	str	r3, [sp, #12]
 80066b0:	ea54 0305 	orrs.w	r3, r4, r5
 80066b4:	f000 81d6 	beq.w	8006a64 <_svfprintf_r+0x6fc>
 80066b8:	2d00      	cmp	r5, #0
 80066ba:	bf08      	it	eq
 80066bc:	2c0a      	cmpeq	r4, #10
 80066be:	f0c0 81d6 	bcc.w	8006a6e <_svfprintf_r+0x706>
 80066c2:	ae2c      	add	r6, sp, #176	; 0xb0
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	220a      	movs	r2, #10
 80066ca:	2300      	movs	r3, #0
 80066cc:	f7fa fc08 	bl	8000ee0 <__aeabi_uldivmod>
 80066d0:	3230      	adds	r2, #48	; 0x30
 80066d2:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80066d6:	4620      	mov	r0, r4
 80066d8:	4629      	mov	r1, r5
 80066da:	2300      	movs	r3, #0
 80066dc:	220a      	movs	r2, #10
 80066de:	f7fa fbff 	bl	8000ee0 <__aeabi_uldivmod>
 80066e2:	4604      	mov	r4, r0
 80066e4:	460d      	mov	r5, r1
 80066e6:	ea54 0305 	orrs.w	r3, r4, r5
 80066ea:	d1eb      	bne.n	80066c4 <_svfprintf_r+0x35c>
 80066ec:	ab2c      	add	r3, sp, #176	; 0xb0
 80066ee:	1b9b      	subs	r3, r3, r6
 80066f0:	9309      	str	r3, [sp, #36]	; 0x24
 80066f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f4:	455b      	cmp	r3, fp
 80066f6:	bfb8      	it	lt
 80066f8:	465b      	movlt	r3, fp
 80066fa:	9305      	str	r3, [sp, #20]
 80066fc:	2300      	movs	r3, #0
 80066fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006700:	b117      	cbz	r7, 8006708 <_svfprintf_r+0x3a0>
 8006702:	9b05      	ldr	r3, [sp, #20]
 8006704:	3301      	adds	r3, #1
 8006706:	9305      	str	r3, [sp, #20]
 8006708:	9b03      	ldr	r3, [sp, #12]
 800670a:	f013 0302 	ands.w	r3, r3, #2
 800670e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006710:	d002      	beq.n	8006718 <_svfprintf_r+0x3b0>
 8006712:	9b05      	ldr	r3, [sp, #20]
 8006714:	3302      	adds	r3, #2
 8006716:	9305      	str	r3, [sp, #20]
 8006718:	9b03      	ldr	r3, [sp, #12]
 800671a:	f013 0884 	ands.w	r8, r3, #132	; 0x84
 800671e:	f040 82ca 	bne.w	8006cb6 <_svfprintf_r+0x94e>
 8006722:	9b08      	ldr	r3, [sp, #32]
 8006724:	9a05      	ldr	r2, [sp, #20]
 8006726:	1a9d      	subs	r5, r3, r2
 8006728:	2d00      	cmp	r5, #0
 800672a:	f340 82c4 	ble.w	8006cb6 <_svfprintf_r+0x94e>
 800672e:	2d10      	cmp	r5, #16
 8006730:	9921      	ldr	r1, [sp, #132]	; 0x84
 8006732:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006734:	4fb5      	ldr	r7, [pc, #724]	; (8006a0c <_svfprintf_r+0x6a4>)
 8006736:	dd23      	ble.n	8006780 <_svfprintf_r+0x418>
 8006738:	4648      	mov	r0, r9
 800673a:	2410      	movs	r4, #16
 800673c:	46c1      	mov	r9, r8
 800673e:	46b0      	mov	r8, r6
 8006740:	9e06      	ldr	r6, [sp, #24]
 8006742:	e004      	b.n	800674e <_svfprintf_r+0x3e6>
 8006744:	3d10      	subs	r5, #16
 8006746:	2d10      	cmp	r5, #16
 8006748:	f100 0008 	add.w	r0, r0, #8
 800674c:	dd15      	ble.n	800677a <_svfprintf_r+0x412>
 800674e:	3201      	adds	r2, #1
 8006750:	3110      	adds	r1, #16
 8006752:	2a07      	cmp	r2, #7
 8006754:	9121      	str	r1, [sp, #132]	; 0x84
 8006756:	9220      	str	r2, [sp, #128]	; 0x80
 8006758:	6007      	str	r7, [r0, #0]
 800675a:	6044      	str	r4, [r0, #4]
 800675c:	ddf2      	ble.n	8006744 <_svfprintf_r+0x3dc>
 800675e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006760:	9904      	ldr	r1, [sp, #16]
 8006762:	4630      	mov	r0, r6
 8006764:	f002 fefe 	bl	8009564 <__ssprint_r>
 8006768:	2800      	cmp	r0, #0
 800676a:	f47f aef4 	bne.w	8006556 <_svfprintf_r+0x1ee>
 800676e:	3d10      	subs	r5, #16
 8006770:	2d10      	cmp	r5, #16
 8006772:	9921      	ldr	r1, [sp, #132]	; 0x84
 8006774:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006776:	a82c      	add	r0, sp, #176	; 0xb0
 8006778:	dce9      	bgt.n	800674e <_svfprintf_r+0x3e6>
 800677a:	4646      	mov	r6, r8
 800677c:	46c8      	mov	r8, r9
 800677e:	4681      	mov	r9, r0
 8006780:	3201      	adds	r2, #1
 8006782:	186c      	adds	r4, r5, r1
 8006784:	2a07      	cmp	r2, #7
 8006786:	9421      	str	r4, [sp, #132]	; 0x84
 8006788:	9220      	str	r2, [sp, #128]	; 0x80
 800678a:	f8c9 7000 	str.w	r7, [r9]
 800678e:	f8c9 5004 	str.w	r5, [r9, #4]
 8006792:	f300 8420 	bgt.w	8006fd6 <_svfprintf_r+0xc6e>
 8006796:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 800679a:	f109 0908 	add.w	r9, r9, #8
 800679e:	b177      	cbz	r7, 80067be <_svfprintf_r+0x456>
 80067a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80067a2:	3301      	adds	r3, #1
 80067a4:	3401      	adds	r4, #1
 80067a6:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 80067aa:	2201      	movs	r2, #1
 80067ac:	2b07      	cmp	r3, #7
 80067ae:	9421      	str	r4, [sp, #132]	; 0x84
 80067b0:	9320      	str	r3, [sp, #128]	; 0x80
 80067b2:	e889 0006 	stmia.w	r9, {r1, r2}
 80067b6:	f300 8397 	bgt.w	8006ee8 <_svfprintf_r+0xb80>
 80067ba:	f109 0908 	add.w	r9, r9, #8
 80067be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067c0:	b16b      	cbz	r3, 80067de <_svfprintf_r+0x476>
 80067c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80067c4:	3301      	adds	r3, #1
 80067c6:	3402      	adds	r4, #2
 80067c8:	a918      	add	r1, sp, #96	; 0x60
 80067ca:	2202      	movs	r2, #2
 80067cc:	2b07      	cmp	r3, #7
 80067ce:	9421      	str	r4, [sp, #132]	; 0x84
 80067d0:	9320      	str	r3, [sp, #128]	; 0x80
 80067d2:	e889 0006 	stmia.w	r9, {r1, r2}
 80067d6:	f300 8393 	bgt.w	8006f00 <_svfprintf_r+0xb98>
 80067da:	f109 0908 	add.w	r9, r9, #8
 80067de:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80067e2:	f000 82d4 	beq.w	8006d8e <_svfprintf_r+0xa26>
 80067e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e8:	ebc3 070b 	rsb	r7, r3, fp
 80067ec:	2f00      	cmp	r7, #0
 80067ee:	dd3a      	ble.n	8006866 <_svfprintf_r+0x4fe>
 80067f0:	2f10      	cmp	r7, #16
 80067f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80067f4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8006a18 <_svfprintf_r+0x6b0>
 80067f8:	dd28      	ble.n	800684c <_svfprintf_r+0x4e4>
 80067fa:	4641      	mov	r1, r8
 80067fc:	4622      	mov	r2, r4
 80067fe:	46b0      	mov	r8, r6
 8006800:	f04f 0b10 	mov.w	fp, #16
 8006804:	9d06      	ldr	r5, [sp, #24]
 8006806:	9c04      	ldr	r4, [sp, #16]
 8006808:	460e      	mov	r6, r1
 800680a:	e004      	b.n	8006816 <_svfprintf_r+0x4ae>
 800680c:	3f10      	subs	r7, #16
 800680e:	2f10      	cmp	r7, #16
 8006810:	f109 0908 	add.w	r9, r9, #8
 8006814:	dd16      	ble.n	8006844 <_svfprintf_r+0x4dc>
 8006816:	3301      	adds	r3, #1
 8006818:	3210      	adds	r2, #16
 800681a:	2b07      	cmp	r3, #7
 800681c:	9221      	str	r2, [sp, #132]	; 0x84
 800681e:	9320      	str	r3, [sp, #128]	; 0x80
 8006820:	e889 0840 	stmia.w	r9, {r6, fp}
 8006824:	ddf2      	ble.n	800680c <_svfprintf_r+0x4a4>
 8006826:	aa1f      	add	r2, sp, #124	; 0x7c
 8006828:	4621      	mov	r1, r4
 800682a:	4628      	mov	r0, r5
 800682c:	f002 fe9a 	bl	8009564 <__ssprint_r>
 8006830:	2800      	cmp	r0, #0
 8006832:	f47f ae90 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8006836:	3f10      	subs	r7, #16
 8006838:	2f10      	cmp	r7, #16
 800683a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800683c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800683e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006842:	dce8      	bgt.n	8006816 <_svfprintf_r+0x4ae>
 8006844:	4614      	mov	r4, r2
 8006846:	4632      	mov	r2, r6
 8006848:	4646      	mov	r6, r8
 800684a:	4690      	mov	r8, r2
 800684c:	3301      	adds	r3, #1
 800684e:	443c      	add	r4, r7
 8006850:	2b07      	cmp	r3, #7
 8006852:	9421      	str	r4, [sp, #132]	; 0x84
 8006854:	9320      	str	r3, [sp, #128]	; 0x80
 8006856:	f8c9 8000 	str.w	r8, [r9]
 800685a:	f8c9 7004 	str.w	r7, [r9, #4]
 800685e:	f300 8337 	bgt.w	8006ed0 <_svfprintf_r+0xb68>
 8006862:	f109 0908 	add.w	r9, r9, #8
 8006866:	9b03      	ldr	r3, [sp, #12]
 8006868:	05da      	lsls	r2, r3, #23
 800686a:	f100 8226 	bmi.w	8006cba <_svfprintf_r+0x952>
 800686e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006872:	f8c9 6000 	str.w	r6, [r9]
 8006876:	3301      	adds	r3, #1
 8006878:	440c      	add	r4, r1
 800687a:	2b07      	cmp	r3, #7
 800687c:	9421      	str	r4, [sp, #132]	; 0x84
 800687e:	f8c9 1004 	str.w	r1, [r9, #4]
 8006882:	9320      	str	r3, [sp, #128]	; 0x80
 8006884:	f300 830e 	bgt.w	8006ea4 <_svfprintf_r+0xb3c>
 8006888:	f109 0908 	add.w	r9, r9, #8
 800688c:	9b03      	ldr	r3, [sp, #12]
 800688e:	0759      	lsls	r1, r3, #29
 8006890:	d53f      	bpl.n	8006912 <_svfprintf_r+0x5aa>
 8006892:	9b08      	ldr	r3, [sp, #32]
 8006894:	9a05      	ldr	r2, [sp, #20]
 8006896:	1a9d      	subs	r5, r3, r2
 8006898:	2d00      	cmp	r5, #0
 800689a:	dd3a      	ble.n	8006912 <_svfprintf_r+0x5aa>
 800689c:	2d10      	cmp	r5, #16
 800689e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068a0:	4f5a      	ldr	r7, [pc, #360]	; (8006a0c <_svfprintf_r+0x6a4>)
 80068a2:	dd23      	ble.n	80068ec <_svfprintf_r+0x584>
 80068a4:	2610      	movs	r6, #16
 80068a6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80068aa:	f8dd b010 	ldr.w	fp, [sp, #16]
 80068ae:	e004      	b.n	80068ba <_svfprintf_r+0x552>
 80068b0:	3d10      	subs	r5, #16
 80068b2:	2d10      	cmp	r5, #16
 80068b4:	f109 0908 	add.w	r9, r9, #8
 80068b8:	dd18      	ble.n	80068ec <_svfprintf_r+0x584>
 80068ba:	3301      	adds	r3, #1
 80068bc:	3410      	adds	r4, #16
 80068be:	2b07      	cmp	r3, #7
 80068c0:	9421      	str	r4, [sp, #132]	; 0x84
 80068c2:	9320      	str	r3, [sp, #128]	; 0x80
 80068c4:	f8c9 7000 	str.w	r7, [r9]
 80068c8:	f8c9 6004 	str.w	r6, [r9, #4]
 80068cc:	ddf0      	ble.n	80068b0 <_svfprintf_r+0x548>
 80068ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80068d0:	4659      	mov	r1, fp
 80068d2:	4640      	mov	r0, r8
 80068d4:	f002 fe46 	bl	8009564 <__ssprint_r>
 80068d8:	2800      	cmp	r0, #0
 80068da:	f47f ae3c 	bne.w	8006556 <_svfprintf_r+0x1ee>
 80068de:	3d10      	subs	r5, #16
 80068e0:	2d10      	cmp	r5, #16
 80068e2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80068e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068e6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80068ea:	dce6      	bgt.n	80068ba <_svfprintf_r+0x552>
 80068ec:	3301      	adds	r3, #1
 80068ee:	442c      	add	r4, r5
 80068f0:	2b07      	cmp	r3, #7
 80068f2:	9421      	str	r4, [sp, #132]	; 0x84
 80068f4:	9320      	str	r3, [sp, #128]	; 0x80
 80068f6:	f8c9 7000 	str.w	r7, [r9]
 80068fa:	f8c9 5004 	str.w	r5, [r9, #4]
 80068fe:	dd08      	ble.n	8006912 <_svfprintf_r+0x5aa>
 8006900:	aa1f      	add	r2, sp, #124	; 0x7c
 8006902:	9904      	ldr	r1, [sp, #16]
 8006904:	9806      	ldr	r0, [sp, #24]
 8006906:	f002 fe2d 	bl	8009564 <__ssprint_r>
 800690a:	2800      	cmp	r0, #0
 800690c:	f47f ae23 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8006910:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006912:	9b07      	ldr	r3, [sp, #28]
 8006914:	9a08      	ldr	r2, [sp, #32]
 8006916:	9905      	ldr	r1, [sp, #20]
 8006918:	428a      	cmp	r2, r1
 800691a:	bfac      	ite	ge
 800691c:	189b      	addge	r3, r3, r2
 800691e:	185b      	addlt	r3, r3, r1
 8006920:	9307      	str	r3, [sp, #28]
 8006922:	2c00      	cmp	r4, #0
 8006924:	f040 82ca 	bne.w	8006ebc <_svfprintf_r+0xb54>
 8006928:	2300      	movs	r3, #0
 800692a:	9320      	str	r3, [sp, #128]	; 0x80
 800692c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006930:	e53e      	b.n	80063b0 <_svfprintf_r+0x48>
 8006932:	930c      	str	r3, [sp, #48]	; 0x30
 8006934:	46ab      	mov	fp, r5
 8006936:	2a00      	cmp	r2, #0
 8006938:	f041 804f 	bne.w	80079da <_svfprintf_r+0x1672>
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006940:	071a      	lsls	r2, r3, #28
 8006942:	f107 0707 	add.w	r7, r7, #7
 8006946:	f140 84c7 	bpl.w	80072d8 <_svfprintf_r+0xf70>
 800694a:	f027 0307 	bic.w	r3, r7, #7
 800694e:	ed93 7b00 	vldr	d7, [r3]
 8006952:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006956:	f103 0208 	add.w	r2, r3, #8
 800695a:	920a      	str	r2, [sp, #40]	; 0x28
 800695c:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8006960:	ec45 4b10 	vmov	d0, r4, r5
 8006964:	f002 fdd0 	bl	8009508 <__fpclassifyd>
 8006968:	2801      	cmp	r0, #1
 800696a:	f040 849b 	bne.w	80072a4 <_svfprintf_r+0xf3c>
 800696e:	2200      	movs	r2, #0
 8006970:	2300      	movs	r3, #0
 8006972:	4620      	mov	r0, r4
 8006974:	4629      	mov	r1, r5
 8006976:	f7fa fa63 	bl	8000e40 <__aeabi_dcmplt>
 800697a:	2800      	cmp	r0, #0
 800697c:	f040 86d9 	bne.w	8007732 <_svfprintf_r+0x13ca>
 8006980:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8006984:	9903      	ldr	r1, [sp, #12]
 8006986:	4e22      	ldr	r6, [pc, #136]	; (8006a10 <_svfprintf_r+0x6a8>)
 8006988:	4b22      	ldr	r3, [pc, #136]	; (8006a14 <_svfprintf_r+0x6ac>)
 800698a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800698e:	9103      	str	r1, [sp, #12]
 8006990:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006992:	2203      	movs	r2, #3
 8006994:	f04f 0b00 	mov.w	fp, #0
 8006998:	9205      	str	r2, [sp, #20]
 800699a:	2947      	cmp	r1, #71	; 0x47
 800699c:	bfd8      	it	le
 800699e:	461e      	movle	r6, r3
 80069a0:	9209      	str	r2, [sp, #36]	; 0x24
 80069a2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80069a6:	e6ab      	b.n	8006700 <_svfprintf_r+0x398>
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	f043 0308 	orr.w	r3, r3, #8
 80069ae:	9303      	str	r3, [sp, #12]
 80069b0:	f89a 3000 	ldrb.w	r3, [sl]
 80069b4:	e52f      	b.n	8006416 <_svfprintf_r+0xae>
 80069b6:	930c      	str	r3, [sp, #48]	; 0x30
 80069b8:	46ab      	mov	fp, r5
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	f041 8003 	bne.w	80079c6 <_svfprintf_r+0x165e>
 80069c0:	9b03      	ldr	r3, [sp, #12]
 80069c2:	f043 0310 	orr.w	r3, r3, #16
 80069c6:	9303      	str	r3, [sp, #12]
 80069c8:	9a03      	ldr	r2, [sp, #12]
 80069ca:	f012 0320 	ands.w	r3, r2, #32
 80069ce:	f47f add8 	bne.w	8006582 <_svfprintf_r+0x21a>
 80069d2:	9903      	ldr	r1, [sp, #12]
 80069d4:	f011 0210 	ands.w	r2, r1, #16
 80069d8:	f000 84a5 	beq.w	8007326 <_svfprintf_r+0xfbe>
 80069dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80069de:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80069e2:	f1bb 0f00 	cmp.w	fp, #0
 80069e6:	6804      	ldr	r4, [r0, #0]
 80069e8:	f100 0704 	add.w	r7, r0, #4
 80069ec:	f04f 0500 	mov.w	r5, #0
 80069f0:	f2c0 84aa 	blt.w	8007348 <_svfprintf_r+0xfe0>
 80069f4:	460a      	mov	r2, r1
 80069f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069fa:	9203      	str	r2, [sp, #12]
 80069fc:	ea54 0205 	orrs.w	r2, r4, r5
 8006a00:	970a      	str	r7, [sp, #40]	; 0x28
 8006a02:	f000 8143 	beq.w	8006c8c <_svfprintf_r+0x924>
 8006a06:	461f      	mov	r7, r3
 8006a08:	e5d1      	b.n	80065ae <_svfprintf_r+0x246>
 8006a0a:	bf00      	nop
 8006a0c:	08009e34 	.word	0x08009e34
 8006a10:	08009e48 	.word	0x08009e48
 8006a14:	08009e44 	.word	0x08009e44
 8006a18:	08009e88 	.word	0x08009e88
 8006a1c:	930c      	str	r3, [sp, #48]	; 0x30
 8006a1e:	46ab      	mov	fp, r5
 8006a20:	2a00      	cmp	r2, #0
 8006a22:	f040 87cc 	bne.w	80079be <_svfprintf_r+0x1656>
 8006a26:	9b03      	ldr	r3, [sp, #12]
 8006a28:	f043 0310 	orr.w	r3, r3, #16
 8006a2c:	9303      	str	r3, [sp, #12]
 8006a2e:	9a03      	ldr	r2, [sp, #12]
 8006a30:	f012 0320 	ands.w	r3, r2, #32
 8006a34:	f000 8328 	beq.w	8007088 <_svfprintf_r+0xd20>
 8006a38:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006a3a:	3707      	adds	r7, #7
 8006a3c:	f027 0307 	bic.w	r3, r7, #7
 8006a40:	2700      	movs	r7, #0
 8006a42:	f103 0108 	add.w	r1, r3, #8
 8006a46:	45bb      	cmp	fp, r7
 8006a48:	910a      	str	r1, [sp, #40]	; 0x28
 8006a4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006a4e:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8006a52:	f2c0 8352 	blt.w	80070fa <_svfprintf_r+0xd92>
 8006a56:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006a5a:	9303      	str	r3, [sp, #12]
 8006a5c:	ea54 0305 	orrs.w	r3, r4, r5
 8006a60:	f47f ae2a 	bne.w	80066b8 <_svfprintf_r+0x350>
 8006a64:	f1bb 0f00 	cmp.w	fp, #0
 8006a68:	f000 80f5 	beq.w	8006c56 <_svfprintf_r+0x8ee>
 8006a6c:	2400      	movs	r4, #0
 8006a6e:	ae3c      	add	r6, sp, #240	; 0xf0
 8006a70:	3430      	adds	r4, #48	; 0x30
 8006a72:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8006a76:	e639      	b.n	80066ec <_svfprintf_r+0x384>
 8006a78:	930c      	str	r3, [sp, #48]	; 0x30
 8006a7a:	46ab      	mov	fp, r5
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	f040 879a 	bne.w	80079b6 <_svfprintf_r+0x164e>
 8006a82:	9b03      	ldr	r3, [sp, #12]
 8006a84:	48af      	ldr	r0, [pc, #700]	; (8006d44 <_svfprintf_r+0x9dc>)
 8006a86:	069d      	lsls	r5, r3, #26
 8006a88:	f140 80b5 	bpl.w	8006bf6 <_svfprintf_r+0x88e>
 8006a8c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006a8e:	3707      	adds	r7, #7
 8006a90:	f027 0307 	bic.w	r3, r7, #7
 8006a94:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006a98:	f103 0208 	add.w	r2, r3, #8
 8006a9c:	920a      	str	r2, [sp, #40]	; 0x28
 8006a9e:	9a03      	ldr	r2, [sp, #12]
 8006aa0:	f012 0701 	ands.w	r7, r2, #1
 8006aa4:	f000 8238 	beq.w	8006f18 <_svfprintf_r+0xbb0>
 8006aa8:	ea54 0305 	orrs.w	r3, r4, r5
 8006aac:	f000 8487 	beq.w	80073be <_svfprintf_r+0x1056>
 8006ab0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8006ab4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8006ab8:	2700      	movs	r7, #0
 8006aba:	9a03      	ldr	r2, [sp, #12]
 8006abc:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8006ac0:	2330      	movs	r3, #48	; 0x30
 8006ac2:	45bb      	cmp	fp, r7
 8006ac4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8006ac8:	f042 0302 	orr.w	r3, r2, #2
 8006acc:	f2c0 862e 	blt.w	800772c <_svfprintf_r+0x13c4>
 8006ad0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006ad4:	f043 0302 	orr.w	r3, r3, #2
 8006ad8:	9303      	str	r3, [sp, #12]
 8006ada:	ae2c      	add	r6, sp, #176	; 0xb0
 8006adc:	0923      	lsrs	r3, r4, #4
 8006ade:	f004 010f 	and.w	r1, r4, #15
 8006ae2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006ae6:	092a      	lsrs	r2, r5, #4
 8006ae8:	461c      	mov	r4, r3
 8006aea:	4615      	mov	r5, r2
 8006aec:	5c43      	ldrb	r3, [r0, r1]
 8006aee:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006af2:	ea54 0305 	orrs.w	r3, r4, r5
 8006af6:	d1f1      	bne.n	8006adc <_svfprintf_r+0x774>
 8006af8:	e5f8      	b.n	80066ec <_svfprintf_r+0x384>
 8006afa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006afc:	930c      	str	r3, [sp, #48]	; 0x30
 8006afe:	680a      	ldr	r2, [r1, #0]
 8006b00:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8006b04:	2300      	movs	r3, #0
 8006b06:	460a      	mov	r2, r1
 8006b08:	461f      	mov	r7, r3
 8006b0a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006b0e:	3204      	adds	r2, #4
 8006b10:	2301      	movs	r3, #1
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	46bb      	mov	fp, r7
 8006b16:	970d      	str	r7, [sp, #52]	; 0x34
 8006b18:	920a      	str	r2, [sp, #40]	; 0x28
 8006b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b1c:	ae22      	add	r6, sp, #136	; 0x88
 8006b1e:	e5f3      	b.n	8006708 <_svfprintf_r+0x3a0>
 8006b20:	930c      	str	r3, [sp, #48]	; 0x30
 8006b22:	46ab      	mov	fp, r5
 8006b24:	2a00      	cmp	r2, #0
 8006b26:	f43f ada5 	beq.w	8006674 <_svfprintf_r+0x30c>
 8006b2a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8006b2e:	e5a1      	b.n	8006674 <_svfprintf_r+0x30c>
 8006b30:	9b03      	ldr	r3, [sp, #12]
 8006b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b36:	9303      	str	r3, [sp, #12]
 8006b38:	f89a 3000 	ldrb.w	r3, [sl]
 8006b3c:	e46b      	b.n	8006416 <_svfprintf_r+0xae>
 8006b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b42:	2900      	cmp	r1, #0
 8006b44:	f47f ac67 	bne.w	8006416 <_svfprintf_r+0xae>
 8006b48:	2201      	movs	r2, #1
 8006b4a:	2120      	movs	r1, #32
 8006b4c:	e463      	b.n	8006416 <_svfprintf_r+0xae>
 8006b4e:	9b03      	ldr	r3, [sp, #12]
 8006b50:	f043 0301 	orr.w	r3, r3, #1
 8006b54:	9303      	str	r3, [sp, #12]
 8006b56:	f89a 3000 	ldrb.w	r3, [sl]
 8006b5a:	e45c      	b.n	8006416 <_svfprintf_r+0xae>
 8006b5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	9308      	str	r3, [sp, #32]
 8006b62:	4618      	mov	r0, r3
 8006b64:	2800      	cmp	r0, #0
 8006b66:	4623      	mov	r3, r4
 8006b68:	f103 0304 	add.w	r3, r3, #4
 8006b6c:	f6ff acb5 	blt.w	80064da <_svfprintf_r+0x172>
 8006b70:	930a      	str	r3, [sp, #40]	; 0x28
 8006b72:	f89a 3000 	ldrb.w	r3, [sl]
 8006b76:	e44e      	b.n	8006416 <_svfprintf_r+0xae>
 8006b78:	f89a 3000 	ldrb.w	r3, [sl]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	212b      	movs	r1, #43	; 0x2b
 8006b80:	e449      	b.n	8006416 <_svfprintf_r+0xae>
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	f043 0320 	orr.w	r3, r3, #32
 8006b88:	9303      	str	r3, [sp, #12]
 8006b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8e:	e442      	b.n	8006416 <_svfprintf_r+0xae>
 8006b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b92:	930c      	str	r3, [sp, #48]	; 0x30
 8006b94:	6816      	ldr	r6, [r2, #0]
 8006b96:	2400      	movs	r4, #0
 8006b98:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
 8006b9c:	1d17      	adds	r7, r2, #4
 8006b9e:	2e00      	cmp	r6, #0
 8006ba0:	f000 85ab 	beq.w	80076fa <_svfprintf_r+0x1392>
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	f2c0 8567 	blt.w	8007678 <_svfprintf_r+0x1310>
 8006baa:	462a      	mov	r2, r5
 8006bac:	4621      	mov	r1, r4
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f7fa f896 	bl	8000ce0 <memchr>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	f000 85db 	beq.w	8007770 <_svfprintf_r+0x1408>
 8006bba:	1b83      	subs	r3, r0, r6
 8006bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bbe:	46a3      	mov	fp, r4
 8006bc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006bc4:	970a      	str	r7, [sp, #40]	; 0x28
 8006bc6:	9305      	str	r3, [sp, #20]
 8006bc8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006bcc:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8006bd0:	e596      	b.n	8006700 <_svfprintf_r+0x398>
 8006bd2:	930c      	str	r3, [sp, #48]	; 0x30
 8006bd4:	46ab      	mov	fp, r5
 8006bd6:	2a00      	cmp	r2, #0
 8006bd8:	f43f af29 	beq.w	8006a2e <_svfprintf_r+0x6c6>
 8006bdc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8006be0:	e725      	b.n	8006a2e <_svfprintf_r+0x6c6>
 8006be2:	930c      	str	r3, [sp, #48]	; 0x30
 8006be4:	46ab      	mov	fp, r5
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	f040 8703 	bne.w	80079f2 <_svfprintf_r+0x168a>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	4856      	ldr	r0, [pc, #344]	; (8006d48 <_svfprintf_r+0x9e0>)
 8006bf0:	069d      	lsls	r5, r3, #26
 8006bf2:	f53f af4b 	bmi.w	8006a8c <_svfprintf_r+0x724>
 8006bf6:	9b03      	ldr	r3, [sp, #12]
 8006bf8:	06dc      	lsls	r4, r3, #27
 8006bfa:	f140 83c0 	bpl.w	800737e <_svfprintf_r+0x1016>
 8006bfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c00:	4613      	mov	r3, r2
 8006c02:	3304      	adds	r3, #4
 8006c04:	6814      	ldr	r4, [r2, #0]
 8006c06:	930a      	str	r3, [sp, #40]	; 0x28
 8006c08:	2500      	movs	r5, #0
 8006c0a:	e748      	b.n	8006a9e <_svfprintf_r+0x736>
 8006c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c10:	2b6c      	cmp	r3, #108	; 0x6c
 8006c12:	f000 8452 	beq.w	80074ba <_svfprintf_r+0x1152>
 8006c16:	9803      	ldr	r0, [sp, #12]
 8006c18:	f040 0010 	orr.w	r0, r0, #16
 8006c1c:	9003      	str	r0, [sp, #12]
 8006c1e:	f7ff bbfa 	b.w	8006416 <_svfprintf_r+0xae>
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	f040 86e1 	bne.w	80079ea <_svfprintf_r+0x1682>
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	069b      	lsls	r3, r3, #26
 8006c2c:	f140 8390 	bpl.w	8007350 <_svfprintf_r+0xfe8>
 8006c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c32:	9907      	ldr	r1, [sp, #28]
 8006c34:	6813      	ldr	r3, [r2, #0]
 8006c36:	17cd      	asrs	r5, r1, #31
 8006c38:	4608      	mov	r0, r1
 8006c3a:	3204      	adds	r2, #4
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	920a      	str	r2, [sp, #40]	; 0x28
 8006c40:	e9c3 0100 	strd	r0, r1, [r3]
 8006c44:	f7ff bbb4 	b.w	80063b0 <_svfprintf_r+0x48>
 8006c48:	483f      	ldr	r0, [pc, #252]	; (8006d48 <_svfprintf_r+0x9e0>)
 8006c4a:	920c      	str	r2, [sp, #48]	; 0x30
 8006c4c:	f1bb 0f00 	cmp.w	fp, #0
 8006c50:	f040 8173 	bne.w	8006f3a <_svfprintf_r+0xbd2>
 8006c54:	465f      	mov	r7, fp
 8006c56:	f04f 0b00 	mov.w	fp, #0
 8006c5a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006c5e:	ae2c      	add	r6, sp, #176	; 0xb0
 8006c60:	e547      	b.n	80066f2 <_svfprintf_r+0x38a>
 8006c62:	930c      	str	r3, [sp, #48]	; 0x30
 8006c64:	2a00      	cmp	r2, #0
 8006c66:	f040 86a2 	bne.w	80079ae <_svfprintf_r+0x1646>
 8006c6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c6c:	2a00      	cmp	r2, #0
 8006c6e:	f43f ac6b 	beq.w	8006548 <_svfprintf_r+0x1e0>
 8006c72:	2300      	movs	r3, #0
 8006c74:	2101      	movs	r1, #1
 8006c76:	461f      	mov	r7, r3
 8006c78:	9105      	str	r1, [sp, #20]
 8006c7a:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8006c7e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006c82:	469b      	mov	fp, r3
 8006c84:	930d      	str	r3, [sp, #52]	; 0x34
 8006c86:	9109      	str	r1, [sp, #36]	; 0x24
 8006c88:	ae22      	add	r6, sp, #136	; 0x88
 8006c8a:	e53d      	b.n	8006708 <_svfprintf_r+0x3a0>
 8006c8c:	f1bb 0f00 	cmp.w	fp, #0
 8006c90:	f000 866e 	beq.w	8007970 <_svfprintf_r+0x1608>
 8006c94:	2700      	movs	r7, #0
 8006c96:	2400      	movs	r4, #0
 8006c98:	2500      	movs	r5, #0
 8006c9a:	e488      	b.n	80065ae <_svfprintf_r+0x246>
 8006c9c:	482a      	ldr	r0, [pc, #168]	; (8006d48 <_svfprintf_r+0x9e0>)
 8006c9e:	9303      	str	r3, [sp, #12]
 8006ca0:	920c      	str	r2, [sp, #48]	; 0x30
 8006ca2:	ea54 0305 	orrs.w	r3, r4, r5
 8006ca6:	970a      	str	r7, [sp, #40]	; 0x28
 8006ca8:	f04f 0700 	mov.w	r7, #0
 8006cac:	f47f af15 	bne.w	8006ada <_svfprintf_r+0x772>
 8006cb0:	2400      	movs	r4, #0
 8006cb2:	2500      	movs	r5, #0
 8006cb4:	e711      	b.n	8006ada <_svfprintf_r+0x772>
 8006cb6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006cb8:	e571      	b.n	800679e <_svfprintf_r+0x436>
 8006cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cbc:	2b65      	cmp	r3, #101	; 0x65
 8006cbe:	f340 80a9 	ble.w	8006e14 <_svfprintf_r+0xaac>
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006cca:	f7fa f8af 	bl	8000e2c <__aeabi_dcmpeq>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f000 8135 	beq.w	8006f3e <_svfprintf_r+0xbd6>
 8006cd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006cd6:	4a1d      	ldr	r2, [pc, #116]	; (8006d4c <_svfprintf_r+0x9e4>)
 8006cd8:	f8c9 2000 	str.w	r2, [r9]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	3401      	adds	r4, #1
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	2b07      	cmp	r3, #7
 8006ce4:	9421      	str	r4, [sp, #132]	; 0x84
 8006ce6:	9320      	str	r3, [sp, #128]	; 0x80
 8006ce8:	f8c9 2004 	str.w	r2, [r9, #4]
 8006cec:	f300 8372 	bgt.w	80073d4 <_svfprintf_r+0x106c>
 8006cf0:	f109 0908 	add.w	r9, r9, #8
 8006cf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	db03      	blt.n	8006d04 <_svfprintf_r+0x99c>
 8006cfc:	9b03      	ldr	r3, [sp, #12]
 8006cfe:	07db      	lsls	r3, r3, #31
 8006d00:	f57f adc4 	bpl.w	800688c <_svfprintf_r+0x524>
 8006d04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d06:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006d08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d0a:	f8c9 2000 	str.w	r2, [r9]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	440c      	add	r4, r1
 8006d12:	2b07      	cmp	r3, #7
 8006d14:	9421      	str	r4, [sp, #132]	; 0x84
 8006d16:	f8c9 1004 	str.w	r1, [r9, #4]
 8006d1a:	9320      	str	r3, [sp, #128]	; 0x80
 8006d1c:	f300 83d7 	bgt.w	80074ce <_svfprintf_r+0x1166>
 8006d20:	f109 0908 	add.w	r9, r9, #8
 8006d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d26:	1e5d      	subs	r5, r3, #1
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	f77f adaf 	ble.w	800688c <_svfprintf_r+0x524>
 8006d2e:	2d10      	cmp	r5, #16
 8006d30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d32:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8006d50 <_svfprintf_r+0x9e8>
 8006d36:	f340 81e6 	ble.w	8007106 <_svfprintf_r+0xd9e>
 8006d3a:	2610      	movs	r6, #16
 8006d3c:	9f06      	ldr	r7, [sp, #24]
 8006d3e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006d42:	e00d      	b.n	8006d60 <_svfprintf_r+0x9f8>
 8006d44:	08009e54 	.word	0x08009e54
 8006d48:	08009e68 	.word	0x08009e68
 8006d4c:	08009e84 	.word	0x08009e84
 8006d50:	08009e88 	.word	0x08009e88
 8006d54:	f109 0908 	add.w	r9, r9, #8
 8006d58:	3d10      	subs	r5, #16
 8006d5a:	2d10      	cmp	r5, #16
 8006d5c:	f340 81d3 	ble.w	8007106 <_svfprintf_r+0xd9e>
 8006d60:	3301      	adds	r3, #1
 8006d62:	3410      	adds	r4, #16
 8006d64:	2b07      	cmp	r3, #7
 8006d66:	9421      	str	r4, [sp, #132]	; 0x84
 8006d68:	9320      	str	r3, [sp, #128]	; 0x80
 8006d6a:	f8c9 8000 	str.w	r8, [r9]
 8006d6e:	f8c9 6004 	str.w	r6, [r9, #4]
 8006d72:	ddef      	ble.n	8006d54 <_svfprintf_r+0x9ec>
 8006d74:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d76:	4659      	mov	r1, fp
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f002 fbf3 	bl	8009564 <__ssprint_r>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	f47f abe9 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8006d84:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006d86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d88:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006d8c:	e7e4      	b.n	8006d58 <_svfprintf_r+0x9f0>
 8006d8e:	9b08      	ldr	r3, [sp, #32]
 8006d90:	9a05      	ldr	r2, [sp, #20]
 8006d92:	1a9f      	subs	r7, r3, r2
 8006d94:	2f00      	cmp	r7, #0
 8006d96:	f77f ad26 	ble.w	80067e6 <_svfprintf_r+0x47e>
 8006d9a:	2f10      	cmp	r7, #16
 8006d9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d9e:	f8df 8754 	ldr.w	r8, [pc, #1876]	; 80074f4 <_svfprintf_r+0x118c>
 8006da2:	dd29      	ble.n	8006df8 <_svfprintf_r+0xa90>
 8006da4:	4640      	mov	r0, r8
 8006da6:	464a      	mov	r2, r9
 8006da8:	4621      	mov	r1, r4
 8006daa:	46b0      	mov	r8, r6
 8006dac:	2510      	movs	r5, #16
 8006dae:	9c06      	ldr	r4, [sp, #24]
 8006db0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8006db4:	4606      	mov	r6, r0
 8006db6:	e004      	b.n	8006dc2 <_svfprintf_r+0xa5a>
 8006db8:	3f10      	subs	r7, #16
 8006dba:	2f10      	cmp	r7, #16
 8006dbc:	f102 0208 	add.w	r2, r2, #8
 8006dc0:	dd15      	ble.n	8006dee <_svfprintf_r+0xa86>
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	3110      	adds	r1, #16
 8006dc6:	2b07      	cmp	r3, #7
 8006dc8:	9121      	str	r1, [sp, #132]	; 0x84
 8006dca:	9320      	str	r3, [sp, #128]	; 0x80
 8006dcc:	6016      	str	r6, [r2, #0]
 8006dce:	6055      	str	r5, [r2, #4]
 8006dd0:	ddf2      	ble.n	8006db8 <_svfprintf_r+0xa50>
 8006dd2:	aa1f      	add	r2, sp, #124	; 0x7c
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f002 fbc4 	bl	8009564 <__ssprint_r>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	f47f abba 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8006de2:	3f10      	subs	r7, #16
 8006de4:	2f10      	cmp	r7, #16
 8006de6:	9921      	ldr	r1, [sp, #132]	; 0x84
 8006de8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006dea:	aa2c      	add	r2, sp, #176	; 0xb0
 8006dec:	dce9      	bgt.n	8006dc2 <_svfprintf_r+0xa5a>
 8006dee:	4691      	mov	r9, r2
 8006df0:	4632      	mov	r2, r6
 8006df2:	460c      	mov	r4, r1
 8006df4:	4646      	mov	r6, r8
 8006df6:	4690      	mov	r8, r2
 8006df8:	3301      	adds	r3, #1
 8006dfa:	443c      	add	r4, r7
 8006dfc:	2b07      	cmp	r3, #7
 8006dfe:	9421      	str	r4, [sp, #132]	; 0x84
 8006e00:	9320      	str	r3, [sp, #128]	; 0x80
 8006e02:	f8c9 8000 	str.w	r8, [r9]
 8006e06:	f8c9 7004 	str.w	r7, [r9, #4]
 8006e0a:	f300 823e 	bgt.w	800728a <_svfprintf_r+0xf22>
 8006e0e:	f109 0908 	add.w	r9, r9, #8
 8006e12:	e4e8      	b.n	80067e6 <_svfprintf_r+0x47e>
 8006e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e16:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	f340 820b 	ble.w	8007234 <_svfprintf_r+0xecc>
 8006e1e:	3501      	adds	r5, #1
 8006e20:	3401      	adds	r4, #1
 8006e22:	2301      	movs	r3, #1
 8006e24:	2d07      	cmp	r5, #7
 8006e26:	9421      	str	r4, [sp, #132]	; 0x84
 8006e28:	9520      	str	r5, [sp, #128]	; 0x80
 8006e2a:	f8c9 6000 	str.w	r6, [r9]
 8006e2e:	f8c9 3004 	str.w	r3, [r9, #4]
 8006e32:	f300 8210 	bgt.w	8007256 <_svfprintf_r+0xeee>
 8006e36:	f109 0908 	add.w	r9, r9, #8
 8006e3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e3e:	f8c9 3000 	str.w	r3, [r9]
 8006e42:	3501      	adds	r5, #1
 8006e44:	4414      	add	r4, r2
 8006e46:	2d07      	cmp	r5, #7
 8006e48:	9421      	str	r4, [sp, #132]	; 0x84
 8006e4a:	9520      	str	r5, [sp, #128]	; 0x80
 8006e4c:	f8c9 2004 	str.w	r2, [r9, #4]
 8006e50:	f300 820e 	bgt.w	8007270 <_svfprintf_r+0xf08>
 8006e54:	f109 0908 	add.w	r9, r9, #8
 8006e58:	2300      	movs	r3, #0
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006e60:	f7f9 ffe4 	bl	8000e2c <__aeabi_dcmpeq>
 8006e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f040 80c4 	bne.w	8006ff4 <_svfprintf_r+0xc8c>
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	3501      	adds	r5, #1
 8006e70:	3601      	adds	r6, #1
 8006e72:	441c      	add	r4, r3
 8006e74:	2d07      	cmp	r5, #7
 8006e76:	9520      	str	r5, [sp, #128]	; 0x80
 8006e78:	9421      	str	r4, [sp, #132]	; 0x84
 8006e7a:	f8c9 6000 	str.w	r6, [r9]
 8006e7e:	f8c9 3004 	str.w	r3, [r9, #4]
 8006e82:	f300 80f4 	bgt.w	800706e <_svfprintf_r+0xd06>
 8006e86:	f109 0908 	add.w	r9, r9, #8
 8006e8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e8c:	f8c9 2004 	str.w	r2, [r9, #4]
 8006e90:	3501      	adds	r5, #1
 8006e92:	4414      	add	r4, r2
 8006e94:	ab1b      	add	r3, sp, #108	; 0x6c
 8006e96:	2d07      	cmp	r5, #7
 8006e98:	9421      	str	r4, [sp, #132]	; 0x84
 8006e9a:	9520      	str	r5, [sp, #128]	; 0x80
 8006e9c:	f8c9 3000 	str.w	r3, [r9]
 8006ea0:	f77f acf2 	ble.w	8006888 <_svfprintf_r+0x520>
 8006ea4:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ea6:	9904      	ldr	r1, [sp, #16]
 8006ea8:	9806      	ldr	r0, [sp, #24]
 8006eaa:	f002 fb5b 	bl	8009564 <__ssprint_r>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f47f ab51 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8006eb4:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006eb6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006eba:	e4e7      	b.n	800688c <_svfprintf_r+0x524>
 8006ebc:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ebe:	9904      	ldr	r1, [sp, #16]
 8006ec0:	9806      	ldr	r0, [sp, #24]
 8006ec2:	f002 fb4f 	bl	8009564 <__ssprint_r>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f43f ad2e 	beq.w	8006928 <_svfprintf_r+0x5c0>
 8006ecc:	f7ff bb43 	b.w	8006556 <_svfprintf_r+0x1ee>
 8006ed0:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ed2:	9904      	ldr	r1, [sp, #16]
 8006ed4:	9806      	ldr	r0, [sp, #24]
 8006ed6:	f002 fb45 	bl	8009564 <__ssprint_r>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f47f ab3b 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8006ee0:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006ee2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006ee6:	e4be      	b.n	8006866 <_svfprintf_r+0x4fe>
 8006ee8:	aa1f      	add	r2, sp, #124	; 0x7c
 8006eea:	9904      	ldr	r1, [sp, #16]
 8006eec:	9806      	ldr	r0, [sp, #24]
 8006eee:	f002 fb39 	bl	8009564 <__ssprint_r>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	f47f ab2f 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8006ef8:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006efa:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006efe:	e45e      	b.n	80067be <_svfprintf_r+0x456>
 8006f00:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f02:	9904      	ldr	r1, [sp, #16]
 8006f04:	9806      	ldr	r0, [sp, #24]
 8006f06:	f002 fb2d 	bl	8009564 <__ssprint_r>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	f47f ab23 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8006f10:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006f12:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006f16:	e462      	b.n	80067de <_svfprintf_r+0x476>
 8006f18:	f1bb 0f00 	cmp.w	fp, #0
 8006f1c:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8006f20:	f2c0 8264 	blt.w	80073ec <_svfprintf_r+0x1084>
 8006f24:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006f28:	9303      	str	r3, [sp, #12]
 8006f2a:	ea54 0305 	orrs.w	r3, r4, r5
 8006f2e:	f47f add4 	bne.w	8006ada <_svfprintf_r+0x772>
 8006f32:	f1bb 0f00 	cmp.w	fp, #0
 8006f36:	f43f ae8d 	beq.w	8006c54 <_svfprintf_r+0x8ec>
 8006f3a:	2700      	movs	r7, #0
 8006f3c:	e6b8      	b.n	8006cb0 <_svfprintf_r+0x948>
 8006f3e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006f40:	2d00      	cmp	r5, #0
 8006f42:	f340 8255 	ble.w	80073f0 <_svfprintf_r+0x1088>
 8006f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	bfa8      	it	ge
 8006f4e:	4613      	movge	r3, r2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	461d      	mov	r5, r3
 8006f54:	dd0d      	ble.n	8006f72 <_svfprintf_r+0xc0a>
 8006f56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f58:	f8c9 6000 	str.w	r6, [r9]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	442c      	add	r4, r5
 8006f60:	2b07      	cmp	r3, #7
 8006f62:	9421      	str	r4, [sp, #132]	; 0x84
 8006f64:	f8c9 5004 	str.w	r5, [r9, #4]
 8006f68:	9320      	str	r3, [sp, #128]	; 0x80
 8006f6a:	f300 838d 	bgt.w	8007688 <_svfprintf_r+0x1320>
 8006f6e:	f109 0908 	add.w	r9, r9, #8
 8006f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f74:	2d00      	cmp	r5, #0
 8006f76:	bfa8      	it	ge
 8006f78:	1b5b      	subge	r3, r3, r5
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	461d      	mov	r5, r3
 8006f7e:	f340 80f7 	ble.w	8007170 <_svfprintf_r+0xe08>
 8006f82:	2d10      	cmp	r5, #16
 8006f84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f86:	f8df 856c 	ldr.w	r8, [pc, #1388]	; 80074f4 <_svfprintf_r+0x118c>
 8006f8a:	f340 820a 	ble.w	80073a2 <_svfprintf_r+0x103a>
 8006f8e:	4641      	mov	r1, r8
 8006f90:	4622      	mov	r2, r4
 8006f92:	46b0      	mov	r8, r6
 8006f94:	2710      	movs	r7, #16
 8006f96:	f8dd b018 	ldr.w	fp, [sp, #24]
 8006f9a:	9c04      	ldr	r4, [sp, #16]
 8006f9c:	460e      	mov	r6, r1
 8006f9e:	e005      	b.n	8006fac <_svfprintf_r+0xc44>
 8006fa0:	f109 0908 	add.w	r9, r9, #8
 8006fa4:	3d10      	subs	r5, #16
 8006fa6:	2d10      	cmp	r5, #16
 8006fa8:	f340 81f7 	ble.w	800739a <_svfprintf_r+0x1032>
 8006fac:	3301      	adds	r3, #1
 8006fae:	3210      	adds	r2, #16
 8006fb0:	2b07      	cmp	r3, #7
 8006fb2:	9221      	str	r2, [sp, #132]	; 0x84
 8006fb4:	9320      	str	r3, [sp, #128]	; 0x80
 8006fb6:	e889 00c0 	stmia.w	r9, {r6, r7}
 8006fba:	ddf1      	ble.n	8006fa0 <_svfprintf_r+0xc38>
 8006fbc:	aa1f      	add	r2, sp, #124	; 0x7c
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	4658      	mov	r0, fp
 8006fc2:	f002 facf 	bl	8009564 <__ssprint_r>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f47f aac5 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8006fcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006fce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006fd0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006fd4:	e7e6      	b.n	8006fa4 <_svfprintf_r+0xc3c>
 8006fd6:	aa1f      	add	r2, sp, #124	; 0x7c
 8006fd8:	9904      	ldr	r1, [sp, #16]
 8006fda:	9806      	ldr	r0, [sp, #24]
 8006fdc:	f002 fac2 	bl	8009564 <__ssprint_r>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	f47f aab8 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8006fe6:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8006fea:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006fec:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006ff0:	f7ff bbd5 	b.w	800679e <_svfprintf_r+0x436>
 8006ff4:	1e5e      	subs	r6, r3, #1
 8006ff6:	2e00      	cmp	r6, #0
 8006ff8:	f77f af47 	ble.w	8006e8a <_svfprintf_r+0xb22>
 8006ffc:	2e10      	cmp	r6, #16
 8006ffe:	f8df 84f4 	ldr.w	r8, [pc, #1268]	; 80074f4 <_svfprintf_r+0x118c>
 8007002:	dd29      	ble.n	8007058 <_svfprintf_r+0xcf0>
 8007004:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007008:	2710      	movs	r7, #16
 800700a:	46c2      	mov	sl, r8
 800700c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8007010:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007014:	e004      	b.n	8007020 <_svfprintf_r+0xcb8>
 8007016:	3e10      	subs	r6, #16
 8007018:	2e10      	cmp	r6, #16
 800701a:	f109 0908 	add.w	r9, r9, #8
 800701e:	dd18      	ble.n	8007052 <_svfprintf_r+0xcea>
 8007020:	3501      	adds	r5, #1
 8007022:	3410      	adds	r4, #16
 8007024:	2d07      	cmp	r5, #7
 8007026:	9421      	str	r4, [sp, #132]	; 0x84
 8007028:	9520      	str	r5, [sp, #128]	; 0x80
 800702a:	f8c9 a000 	str.w	sl, [r9]
 800702e:	f8c9 7004 	str.w	r7, [r9, #4]
 8007032:	ddf0      	ble.n	8007016 <_svfprintf_r+0xcae>
 8007034:	aa1f      	add	r2, sp, #124	; 0x7c
 8007036:	4641      	mov	r1, r8
 8007038:	4658      	mov	r0, fp
 800703a:	f002 fa93 	bl	8009564 <__ssprint_r>
 800703e:	2800      	cmp	r0, #0
 8007040:	f47f aa89 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8007044:	3e10      	subs	r6, #16
 8007046:	2e10      	cmp	r6, #16
 8007048:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800704a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800704c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8007050:	dce6      	bgt.n	8007020 <_svfprintf_r+0xcb8>
 8007052:	46d0      	mov	r8, sl
 8007054:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007058:	f8c9 8000 	str.w	r8, [r9]
 800705c:	3501      	adds	r5, #1
 800705e:	4434      	add	r4, r6
 8007060:	2d07      	cmp	r5, #7
 8007062:	9421      	str	r4, [sp, #132]	; 0x84
 8007064:	9520      	str	r5, [sp, #128]	; 0x80
 8007066:	f8c9 6004 	str.w	r6, [r9, #4]
 800706a:	f77f af0c 	ble.w	8006e86 <_svfprintf_r+0xb1e>
 800706e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007070:	9904      	ldr	r1, [sp, #16]
 8007072:	9806      	ldr	r0, [sp, #24]
 8007074:	f002 fa76 	bl	8009564 <__ssprint_r>
 8007078:	2800      	cmp	r0, #0
 800707a:	f47f aa6c 	bne.w	8006556 <_svfprintf_r+0x1ee>
 800707e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8007080:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007082:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8007086:	e700      	b.n	8006e8a <_svfprintf_r+0xb22>
 8007088:	9903      	ldr	r1, [sp, #12]
 800708a:	f011 0210 	ands.w	r2, r1, #16
 800708e:	f000 812e 	beq.w	80072ee <_svfprintf_r+0xf86>
 8007092:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007094:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8007098:	f1bb 0f00 	cmp.w	fp, #0
 800709c:	6804      	ldr	r4, [r0, #0]
 800709e:	f100 0704 	add.w	r7, r0, #4
 80070a2:	f04f 0500 	mov.w	r5, #0
 80070a6:	db26      	blt.n	80070f6 <_svfprintf_r+0xd8e>
 80070a8:	460a      	mov	r2, r1
 80070aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070ae:	9203      	str	r2, [sp, #12]
 80070b0:	ea54 0205 	orrs.w	r2, r4, r5
 80070b4:	970a      	str	r7, [sp, #40]	; 0x28
 80070b6:	461f      	mov	r7, r3
 80070b8:	f47f aafe 	bne.w	80066b8 <_svfprintf_r+0x350>
 80070bc:	e4d2      	b.n	8006a64 <_svfprintf_r+0x6fc>
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	06d8      	lsls	r0, r3, #27
 80070c2:	d42c      	bmi.n	800711e <_svfprintf_r+0xdb6>
 80070c4:	9b03      	ldr	r3, [sp, #12]
 80070c6:	0659      	lsls	r1, r3, #25
 80070c8:	d529      	bpl.n	800711e <_svfprintf_r+0xdb6>
 80070ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070cc:	f9b1 4000 	ldrsh.w	r4, [r1]
 80070d0:	3104      	adds	r1, #4
 80070d2:	17e5      	asrs	r5, r4, #31
 80070d4:	4622      	mov	r2, r4
 80070d6:	462b      	mov	r3, r5
 80070d8:	910a      	str	r1, [sp, #40]	; 0x28
 80070da:	f7ff bada 	b.w	8006692 <_svfprintf_r+0x32a>
 80070de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070e0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80070e4:	f1bb 0f00 	cmp.w	fp, #0
 80070e8:	680c      	ldr	r4, [r1, #0]
 80070ea:	f101 0704 	add.w	r7, r1, #4
 80070ee:	f04f 0500 	mov.w	r5, #0
 80070f2:	f280 81e0 	bge.w	80074b6 <_svfprintf_r+0x114e>
 80070f6:	970a      	str	r7, [sp, #40]	; 0x28
 80070f8:	461f      	mov	r7, r3
 80070fa:	ea54 0305 	orrs.w	r3, r4, r5
 80070fe:	f47f aadb 	bne.w	80066b8 <_svfprintf_r+0x350>
 8007102:	e4b4      	b.n	8006a6e <_svfprintf_r+0x706>
 8007104:	46b8      	mov	r8, r7
 8007106:	3301      	adds	r3, #1
 8007108:	442c      	add	r4, r5
 800710a:	2b07      	cmp	r3, #7
 800710c:	9421      	str	r4, [sp, #132]	; 0x84
 800710e:	9320      	str	r3, [sp, #128]	; 0x80
 8007110:	f8c9 8000 	str.w	r8, [r9]
 8007114:	f8c9 5004 	str.w	r5, [r9, #4]
 8007118:	f77f abb6 	ble.w	8006888 <_svfprintf_r+0x520>
 800711c:	e6c2      	b.n	8006ea4 <_svfprintf_r+0xb3c>
 800711e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007120:	6814      	ldr	r4, [r2, #0]
 8007122:	4613      	mov	r3, r2
 8007124:	3304      	adds	r3, #4
 8007126:	17e5      	asrs	r5, r4, #31
 8007128:	4622      	mov	r2, r4
 800712a:	930a      	str	r3, [sp, #40]	; 0x28
 800712c:	2a00      	cmp	r2, #0
 800712e:	462b      	mov	r3, r5
 8007130:	f173 0300 	sbcs.w	r3, r3, #0
 8007134:	f6bf aab2 	bge.w	800669c <_svfprintf_r+0x334>
 8007138:	4264      	negs	r4, r4
 800713a:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800713e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8007142:	f1bb 0f00 	cmp.w	fp, #0
 8007146:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 800714a:	f6ff aab5 	blt.w	80066b8 <_svfprintf_r+0x350>
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007154:	9303      	str	r3, [sp, #12]
 8007156:	f7ff baaf 	b.w	80066b8 <_svfprintf_r+0x350>
 800715a:	aa1f      	add	r2, sp, #124	; 0x7c
 800715c:	9904      	ldr	r1, [sp, #16]
 800715e:	9806      	ldr	r0, [sp, #24]
 8007160:	f002 fa00 	bl	8009564 <__ssprint_r>
 8007164:	2800      	cmp	r0, #0
 8007166:	f47f a9f6 	bne.w	8006556 <_svfprintf_r+0x1ee>
 800716a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800716c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8007170:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007172:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007174:	4432      	add	r2, r6
 8007176:	4617      	mov	r7, r2
 8007178:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800717a:	4293      	cmp	r3, r2
 800717c:	db49      	blt.n	8007212 <_svfprintf_r+0xeaa>
 800717e:	9a03      	ldr	r2, [sp, #12]
 8007180:	07d5      	lsls	r5, r2, #31
 8007182:	d446      	bmi.n	8007212 <_svfprintf_r+0xeaa>
 8007184:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007186:	440e      	add	r6, r1
 8007188:	1bf5      	subs	r5, r6, r7
 800718a:	1acb      	subs	r3, r1, r3
 800718c:	429d      	cmp	r5, r3
 800718e:	bfa8      	it	ge
 8007190:	461d      	movge	r5, r3
 8007192:	2d00      	cmp	r5, #0
 8007194:	462e      	mov	r6, r5
 8007196:	dd0d      	ble.n	80071b4 <_svfprintf_r+0xe4c>
 8007198:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800719a:	f8c9 7000 	str.w	r7, [r9]
 800719e:	3201      	adds	r2, #1
 80071a0:	442c      	add	r4, r5
 80071a2:	2a07      	cmp	r2, #7
 80071a4:	9421      	str	r4, [sp, #132]	; 0x84
 80071a6:	f8c9 5004 	str.w	r5, [r9, #4]
 80071aa:	9220      	str	r2, [sp, #128]	; 0x80
 80071ac:	f300 8296 	bgt.w	80076dc <_svfprintf_r+0x1374>
 80071b0:	f109 0908 	add.w	r9, r9, #8
 80071b4:	2e00      	cmp	r6, #0
 80071b6:	bfac      	ite	ge
 80071b8:	1b9d      	subge	r5, r3, r6
 80071ba:	461d      	movlt	r5, r3
 80071bc:	2d00      	cmp	r5, #0
 80071be:	f77f ab65 	ble.w	800688c <_svfprintf_r+0x524>
 80071c2:	2d10      	cmp	r5, #16
 80071c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071c6:	f8df 832c 	ldr.w	r8, [pc, #812]	; 80074f4 <_svfprintf_r+0x118c>
 80071ca:	dd9c      	ble.n	8007106 <_svfprintf_r+0xd9e>
 80071cc:	4647      	mov	r7, r8
 80071ce:	2610      	movs	r6, #16
 80071d0:	f8dd b010 	ldr.w	fp, [sp, #16]
 80071d4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80071d8:	e004      	b.n	80071e4 <_svfprintf_r+0xe7c>
 80071da:	f109 0908 	add.w	r9, r9, #8
 80071de:	3d10      	subs	r5, #16
 80071e0:	2d10      	cmp	r5, #16
 80071e2:	dd8f      	ble.n	8007104 <_svfprintf_r+0xd9c>
 80071e4:	3301      	adds	r3, #1
 80071e6:	3410      	adds	r4, #16
 80071e8:	2b07      	cmp	r3, #7
 80071ea:	9421      	str	r4, [sp, #132]	; 0x84
 80071ec:	9320      	str	r3, [sp, #128]	; 0x80
 80071ee:	f8c9 7000 	str.w	r7, [r9]
 80071f2:	f8c9 6004 	str.w	r6, [r9, #4]
 80071f6:	ddf0      	ble.n	80071da <_svfprintf_r+0xe72>
 80071f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80071fa:	4659      	mov	r1, fp
 80071fc:	4640      	mov	r0, r8
 80071fe:	f002 f9b1 	bl	8009564 <__ssprint_r>
 8007202:	2800      	cmp	r0, #0
 8007204:	f47f a9a7 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8007208:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800720a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800720c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8007210:	e7e5      	b.n	80071de <_svfprintf_r+0xe76>
 8007212:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007214:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007216:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007218:	f8c9 1000 	str.w	r1, [r9]
 800721c:	3201      	adds	r2, #1
 800721e:	4404      	add	r4, r0
 8007220:	2a07      	cmp	r2, #7
 8007222:	9421      	str	r4, [sp, #132]	; 0x84
 8007224:	f8c9 0004 	str.w	r0, [r9, #4]
 8007228:	9220      	str	r2, [sp, #128]	; 0x80
 800722a:	f300 824a 	bgt.w	80076c2 <_svfprintf_r+0x135a>
 800722e:	f109 0908 	add.w	r9, r9, #8
 8007232:	e7a7      	b.n	8007184 <_svfprintf_r+0xe1c>
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	07d8      	lsls	r0, r3, #31
 8007238:	f53f adf1 	bmi.w	8006e1e <_svfprintf_r+0xab6>
 800723c:	3501      	adds	r5, #1
 800723e:	3401      	adds	r4, #1
 8007240:	2301      	movs	r3, #1
 8007242:	2d07      	cmp	r5, #7
 8007244:	9421      	str	r4, [sp, #132]	; 0x84
 8007246:	9520      	str	r5, [sp, #128]	; 0x80
 8007248:	f8c9 6000 	str.w	r6, [r9]
 800724c:	f8c9 3004 	str.w	r3, [r9, #4]
 8007250:	f77f ae19 	ble.w	8006e86 <_svfprintf_r+0xb1e>
 8007254:	e70b      	b.n	800706e <_svfprintf_r+0xd06>
 8007256:	aa1f      	add	r2, sp, #124	; 0x7c
 8007258:	9904      	ldr	r1, [sp, #16]
 800725a:	9806      	ldr	r0, [sp, #24]
 800725c:	f002 f982 	bl	8009564 <__ssprint_r>
 8007260:	2800      	cmp	r0, #0
 8007262:	f47f a978 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8007266:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8007268:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800726a:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800726e:	e5e4      	b.n	8006e3a <_svfprintf_r+0xad2>
 8007270:	aa1f      	add	r2, sp, #124	; 0x7c
 8007272:	9904      	ldr	r1, [sp, #16]
 8007274:	9806      	ldr	r0, [sp, #24]
 8007276:	f002 f975 	bl	8009564 <__ssprint_r>
 800727a:	2800      	cmp	r0, #0
 800727c:	f47f a96b 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8007280:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8007282:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007284:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8007288:	e5e6      	b.n	8006e58 <_svfprintf_r+0xaf0>
 800728a:	aa1f      	add	r2, sp, #124	; 0x7c
 800728c:	9904      	ldr	r1, [sp, #16]
 800728e:	9806      	ldr	r0, [sp, #24]
 8007290:	f002 f968 	bl	8009564 <__ssprint_r>
 8007294:	2800      	cmp	r0, #0
 8007296:	f47f a95e 	bne.w	8006556 <_svfprintf_r+0x1ee>
 800729a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800729c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80072a0:	f7ff baa1 	b.w	80067e6 <_svfprintf_r+0x47e>
 80072a4:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80072a8:	f002 f92e 	bl	8009508 <__fpclassifyd>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	f040 8123 	bne.w	80074f8 <_svfprintf_r+0x1190>
 80072b2:	9903      	ldr	r1, [sp, #12]
 80072b4:	4e8c      	ldr	r6, [pc, #560]	; (80074e8 <_svfprintf_r+0x1180>)
 80072b6:	4b8d      	ldr	r3, [pc, #564]	; (80074ec <_svfprintf_r+0x1184>)
 80072b8:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 80072bc:	900d      	str	r0, [sp, #52]	; 0x34
 80072be:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80072c2:	9103      	str	r1, [sp, #12]
 80072c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072c6:	2203      	movs	r2, #3
 80072c8:	4683      	mov	fp, r0
 80072ca:	9205      	str	r2, [sp, #20]
 80072cc:	2947      	cmp	r1, #71	; 0x47
 80072ce:	bfd8      	it	le
 80072d0:	461e      	movle	r6, r3
 80072d2:	9209      	str	r2, [sp, #36]	; 0x24
 80072d4:	f7ff ba14 	b.w	8006700 <_svfprintf_r+0x398>
 80072d8:	f027 0707 	bic.w	r7, r7, #7
 80072dc:	ed97 7b00 	vldr	d7, [r7]
 80072e0:	f107 0308 	add.w	r3, r7, #8
 80072e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80072e8:	930a      	str	r3, [sp, #40]	; 0x28
 80072ea:	f7ff bb37 	b.w	800695c <_svfprintf_r+0x5f4>
 80072ee:	9903      	ldr	r1, [sp, #12]
 80072f0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80072f4:	f43f aef3 	beq.w	80070de <_svfprintf_r+0xd76>
 80072f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072fa:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80072fe:	f1bb 0f00 	cmp.w	fp, #0
 8007302:	8804      	ldrh	r4, [r0, #0]
 8007304:	f100 0704 	add.w	r7, r0, #4
 8007308:	f04f 0500 	mov.w	r5, #0
 800730c:	f2c0 8198 	blt.w	8007640 <_svfprintf_r+0x12d8>
 8007310:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	ea54 0305 	orrs.w	r3, r4, r5
 800731a:	970a      	str	r7, [sp, #40]	; 0x28
 800731c:	4617      	mov	r7, r2
 800731e:	f47f a9cb 	bne.w	80066b8 <_svfprintf_r+0x350>
 8007322:	f7ff bb9f 	b.w	8006a64 <_svfprintf_r+0x6fc>
 8007326:	9903      	ldr	r1, [sp, #12]
 8007328:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800732c:	f000 80b4 	beq.w	8007498 <_svfprintf_r+0x1130>
 8007330:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007332:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8007336:	f1bb 0f00 	cmp.w	fp, #0
 800733a:	8804      	ldrh	r4, [r0, #0]
 800733c:	f100 0704 	add.w	r7, r0, #4
 8007340:	f04f 0500 	mov.w	r5, #0
 8007344:	f280 8152 	bge.w	80075ec <_svfprintf_r+0x1284>
 8007348:	970a      	str	r7, [sp, #40]	; 0x28
 800734a:	2700      	movs	r7, #0
 800734c:	f7ff b92f 	b.w	80065ae <_svfprintf_r+0x246>
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	06df      	lsls	r7, r3, #27
 8007354:	d40b      	bmi.n	800736e <_svfprintf_r+0x1006>
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	065e      	lsls	r6, r3, #25
 800735a:	d508      	bpl.n	800736e <_svfprintf_r+0x1006>
 800735c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800735e:	6813      	ldr	r3, [r2, #0]
 8007360:	3204      	adds	r2, #4
 8007362:	920a      	str	r2, [sp, #40]	; 0x28
 8007364:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	f7ff b821 	b.w	80063b0 <_svfprintf_r+0x48>
 800736e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007370:	6813      	ldr	r3, [r2, #0]
 8007372:	3204      	adds	r2, #4
 8007374:	920a      	str	r2, [sp, #40]	; 0x28
 8007376:	9a07      	ldr	r2, [sp, #28]
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	f7ff b819 	b.w	80063b0 <_svfprintf_r+0x48>
 800737e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007380:	9b03      	ldr	r3, [sp, #12]
 8007382:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007386:	4613      	mov	r3, r2
 8007388:	f103 0304 	add.w	r3, r3, #4
 800738c:	bf0c      	ite	eq
 800738e:	6814      	ldreq	r4, [r2, #0]
 8007390:	8814      	ldrhne	r4, [r2, #0]
 8007392:	930a      	str	r3, [sp, #40]	; 0x28
 8007394:	2500      	movs	r5, #0
 8007396:	f7ff bb82 	b.w	8006a9e <_svfprintf_r+0x736>
 800739a:	4614      	mov	r4, r2
 800739c:	4632      	mov	r2, r6
 800739e:	4646      	mov	r6, r8
 80073a0:	4690      	mov	r8, r2
 80073a2:	3301      	adds	r3, #1
 80073a4:	442c      	add	r4, r5
 80073a6:	2b07      	cmp	r3, #7
 80073a8:	9421      	str	r4, [sp, #132]	; 0x84
 80073aa:	9320      	str	r3, [sp, #128]	; 0x80
 80073ac:	f8c9 8000 	str.w	r8, [r9]
 80073b0:	f8c9 5004 	str.w	r5, [r9, #4]
 80073b4:	f73f aed1 	bgt.w	800715a <_svfprintf_r+0xdf2>
 80073b8:	f109 0908 	add.w	r9, r9, #8
 80073bc:	e6d8      	b.n	8007170 <_svfprintf_r+0xe08>
 80073be:	2700      	movs	r7, #0
 80073c0:	45bb      	cmp	fp, r7
 80073c2:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 80073c6:	f6ff ac73 	blt.w	8006cb0 <_svfprintf_r+0x948>
 80073ca:	9b03      	ldr	r3, [sp, #12]
 80073cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d0:	9303      	str	r3, [sp, #12]
 80073d2:	e43b      	b.n	8006c4c <_svfprintf_r+0x8e4>
 80073d4:	aa1f      	add	r2, sp, #124	; 0x7c
 80073d6:	9904      	ldr	r1, [sp, #16]
 80073d8:	9806      	ldr	r0, [sp, #24]
 80073da:	f002 f8c3 	bl	8009564 <__ssprint_r>
 80073de:	2800      	cmp	r0, #0
 80073e0:	f47f a8b9 	bne.w	8006556 <_svfprintf_r+0x1ee>
 80073e4:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80073e6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80073ea:	e483      	b.n	8006cf4 <_svfprintf_r+0x98c>
 80073ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80073ee:	e458      	b.n	8006ca2 <_svfprintf_r+0x93a>
 80073f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073f2:	4a3f      	ldr	r2, [pc, #252]	; (80074f0 <_svfprintf_r+0x1188>)
 80073f4:	f8c9 2000 	str.w	r2, [r9]
 80073f8:	3301      	adds	r3, #1
 80073fa:	3401      	adds	r4, #1
 80073fc:	2201      	movs	r2, #1
 80073fe:	2b07      	cmp	r3, #7
 8007400:	9421      	str	r4, [sp, #132]	; 0x84
 8007402:	9320      	str	r3, [sp, #128]	; 0x80
 8007404:	f8c9 2004 	str.w	r2, [r9, #4]
 8007408:	f300 810a 	bgt.w	8007620 <_svfprintf_r+0x12b8>
 800740c:	f109 0908 	add.w	r9, r9, #8
 8007410:	b92d      	cbnz	r5, 800741e <_svfprintf_r+0x10b6>
 8007412:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007414:	b91b      	cbnz	r3, 800741e <_svfprintf_r+0x10b6>
 8007416:	9b03      	ldr	r3, [sp, #12]
 8007418:	07df      	lsls	r7, r3, #31
 800741a:	f57f aa37 	bpl.w	800688c <_svfprintf_r+0x524>
 800741e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007420:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007422:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007424:	f8c9 2000 	str.w	r2, [r9]
 8007428:	3301      	adds	r3, #1
 800742a:	440c      	add	r4, r1
 800742c:	2b07      	cmp	r3, #7
 800742e:	9421      	str	r4, [sp, #132]	; 0x84
 8007430:	f8c9 1004 	str.w	r1, [r9, #4]
 8007434:	9320      	str	r3, [sp, #128]	; 0x80
 8007436:	f300 81d1 	bgt.w	80077dc <_svfprintf_r+0x1474>
 800743a:	f109 0908 	add.w	r9, r9, #8
 800743e:	426d      	negs	r5, r5
 8007440:	2d00      	cmp	r5, #0
 8007442:	f340 810c 	ble.w	800765e <_svfprintf_r+0x12f6>
 8007446:	2d10      	cmp	r5, #16
 8007448:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80074f4 <_svfprintf_r+0x118c>
 800744c:	f340 812c 	ble.w	80076a8 <_svfprintf_r+0x1340>
 8007450:	4641      	mov	r1, r8
 8007452:	4622      	mov	r2, r4
 8007454:	46b0      	mov	r8, r6
 8007456:	2710      	movs	r7, #16
 8007458:	f8dd b018 	ldr.w	fp, [sp, #24]
 800745c:	9c04      	ldr	r4, [sp, #16]
 800745e:	460e      	mov	r6, r1
 8007460:	e005      	b.n	800746e <_svfprintf_r+0x1106>
 8007462:	f109 0908 	add.w	r9, r9, #8
 8007466:	3d10      	subs	r5, #16
 8007468:	2d10      	cmp	r5, #16
 800746a:	f340 8119 	ble.w	80076a0 <_svfprintf_r+0x1338>
 800746e:	3301      	adds	r3, #1
 8007470:	3210      	adds	r2, #16
 8007472:	2b07      	cmp	r3, #7
 8007474:	9221      	str	r2, [sp, #132]	; 0x84
 8007476:	9320      	str	r3, [sp, #128]	; 0x80
 8007478:	e889 00c0 	stmia.w	r9, {r6, r7}
 800747c:	ddf1      	ble.n	8007462 <_svfprintf_r+0x10fa>
 800747e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007480:	4621      	mov	r1, r4
 8007482:	4658      	mov	r0, fp
 8007484:	f002 f86e 	bl	8009564 <__ssprint_r>
 8007488:	2800      	cmp	r0, #0
 800748a:	f47f a864 	bne.w	8006556 <_svfprintf_r+0x1ee>
 800748e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007490:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007492:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8007496:	e7e6      	b.n	8007466 <_svfprintf_r+0x10fe>
 8007498:	990a      	ldr	r1, [sp, #40]	; 0x28
 800749a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800749e:	f1bb 0f00 	cmp.w	fp, #0
 80074a2:	680c      	ldr	r4, [r1, #0]
 80074a4:	f101 0704 	add.w	r7, r1, #4
 80074a8:	f04f 0500 	mov.w	r5, #0
 80074ac:	f6ff af4c 	blt.w	8007348 <_svfprintf_r+0xfe0>
 80074b0:	9a03      	ldr	r2, [sp, #12]
 80074b2:	f7ff baa0 	b.w	80069f6 <_svfprintf_r+0x68e>
 80074b6:	9a03      	ldr	r2, [sp, #12]
 80074b8:	e5f7      	b.n	80070aa <_svfprintf_r+0xd42>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	f043 0320 	orr.w	r3, r3, #32
 80074c0:	9303      	str	r3, [sp, #12]
 80074c2:	f10a 0a01 	add.w	sl, sl, #1
 80074c6:	f89a 3000 	ldrb.w	r3, [sl]
 80074ca:	f7fe bfa4 	b.w	8006416 <_svfprintf_r+0xae>
 80074ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80074d0:	9904      	ldr	r1, [sp, #16]
 80074d2:	9806      	ldr	r0, [sp, #24]
 80074d4:	f002 f846 	bl	8009564 <__ssprint_r>
 80074d8:	2800      	cmp	r0, #0
 80074da:	f47f a83c 	bne.w	8006556 <_svfprintf_r+0x1ee>
 80074de:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80074e0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80074e4:	e41e      	b.n	8006d24 <_svfprintf_r+0x9bc>
 80074e6:	bf00      	nop
 80074e8:	08009e50 	.word	0x08009e50
 80074ec:	08009e4c 	.word	0x08009e4c
 80074f0:	08009e84 	.word	0x08009e84
 80074f4:	08009e88 	.word	0x08009e88
 80074f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074fa:	f1bb 3fff 	cmp.w	fp, #4294967295
 80074fe:	f023 0720 	bic.w	r7, r3, #32
 8007502:	f000 809a 	beq.w	800763a <_svfprintf_r+0x12d2>
 8007506:	2f47      	cmp	r7, #71	; 0x47
 8007508:	d104      	bne.n	8007514 <_svfprintf_r+0x11ac>
 800750a:	f1bb 0f00 	cmp.w	fp, #0
 800750e:	bf08      	it	eq
 8007510:	f04f 0b01 	moveq.w	fp, #1
 8007514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007516:	9a03      	ldr	r2, [sp, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800751e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007520:	f2c0 8184 	blt.w	800782c <_svfprintf_r+0x14c4>
 8007524:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8007528:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800752c:	f04f 0800 	mov.w	r8, #0
 8007530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007532:	2b66      	cmp	r3, #102	; 0x66
 8007534:	f000 8164 	beq.w	8007800 <_svfprintf_r+0x1498>
 8007538:	2b46      	cmp	r3, #70	; 0x46
 800753a:	f000 819c 	beq.w	8007876 <_svfprintf_r+0x150e>
 800753e:	2f45      	cmp	r7, #69	; 0x45
 8007540:	bf0c      	ite	eq
 8007542:	f10b 0501 	addeq.w	r5, fp, #1
 8007546:	465d      	movne	r5, fp
 8007548:	aa1d      	add	r2, sp, #116	; 0x74
 800754a:	ab1a      	add	r3, sp, #104	; 0x68
 800754c:	9201      	str	r2, [sp, #4]
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	462a      	mov	r2, r5
 8007552:	ab19      	add	r3, sp, #100	; 0x64
 8007554:	2102      	movs	r1, #2
 8007556:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800755a:	9806      	ldr	r0, [sp, #24]
 800755c:	f000 fae8 	bl	8007b30 <_dtoa_r>
 8007560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007562:	2b67      	cmp	r3, #103	; 0x67
 8007564:	4606      	mov	r6, r0
 8007566:	f000 80fb 	beq.w	8007760 <_svfprintf_r+0x13f8>
 800756a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800756c:	2b47      	cmp	r3, #71	; 0x47
 800756e:	f000 80e5 	beq.w	800773c <_svfprintf_r+0x13d4>
 8007572:	1974      	adds	r4, r6, r5
 8007574:	2200      	movs	r2, #0
 8007576:	2300      	movs	r3, #0
 8007578:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800757c:	f7f9 fc56 	bl	8000e2c <__aeabi_dcmpeq>
 8007580:	2800      	cmp	r0, #0
 8007582:	f040 80f3 	bne.w	800776c <_svfprintf_r+0x1404>
 8007586:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007588:	429c      	cmp	r4, r3
 800758a:	d906      	bls.n	800759a <_svfprintf_r+0x1232>
 800758c:	2130      	movs	r1, #48	; 0x30
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	921d      	str	r2, [sp, #116]	; 0x74
 8007592:	7019      	strb	r1, [r3, #0]
 8007594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007596:	429c      	cmp	r4, r3
 8007598:	d8f9      	bhi.n	800758e <_svfprintf_r+0x1226>
 800759a:	1b9b      	subs	r3, r3, r6
 800759c:	2f47      	cmp	r7, #71	; 0x47
 800759e:	9310      	str	r3, [sp, #64]	; 0x40
 80075a0:	f000 80d7 	beq.w	8007752 <_svfprintf_r+0x13ea>
 80075a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075a6:	2b65      	cmp	r3, #101	; 0x65
 80075a8:	f340 8211 	ble.w	80079ce <_svfprintf_r+0x1666>
 80075ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075ae:	2b66      	cmp	r3, #102	; 0x66
 80075b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075b2:	930d      	str	r3, [sp, #52]	; 0x34
 80075b4:	f000 8152 	beq.w	800785c <_svfprintf_r+0x14f4>
 80075b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 80075bc:	428a      	cmp	r2, r1
 80075be:	f2c0 813e 	blt.w	800783e <_svfprintf_r+0x14d6>
 80075c2:	9b03      	ldr	r3, [sp, #12]
 80075c4:	07d9      	lsls	r1, r3, #31
 80075c6:	f100 81a2 	bmi.w	800790e <_svfprintf_r+0x15a6>
 80075ca:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80075ce:	9209      	str	r2, [sp, #36]	; 0x24
 80075d0:	2267      	movs	r2, #103	; 0x67
 80075d2:	920c      	str	r2, [sp, #48]	; 0x30
 80075d4:	f1b8 0f00 	cmp.w	r8, #0
 80075d8:	f040 809e 	bne.w	8007718 <_svfprintf_r+0x13b0>
 80075dc:	9305      	str	r3, [sp, #20]
 80075de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075e0:	9303      	str	r3, [sp, #12]
 80075e2:	46c3      	mov	fp, r8
 80075e4:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 80075e8:	f7ff b88a 	b.w	8006700 <_svfprintf_r+0x398>
 80075ec:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 80075f0:	9303      	str	r3, [sp, #12]
 80075f2:	ea54 0305 	orrs.w	r3, r4, r5
 80075f6:	970a      	str	r7, [sp, #40]	; 0x28
 80075f8:	f43f ab48 	beq.w	8006c8c <_svfprintf_r+0x924>
 80075fc:	4617      	mov	r7, r2
 80075fe:	f7fe bfd6 	b.w	80065ae <_svfprintf_r+0x246>
 8007602:	2140      	movs	r1, #64	; 0x40
 8007604:	9806      	ldr	r0, [sp, #24]
 8007606:	f001 f9b1 	bl	800896c <_malloc_r>
 800760a:	9a04      	ldr	r2, [sp, #16]
 800760c:	6010      	str	r0, [r2, #0]
 800760e:	6110      	str	r0, [r2, #16]
 8007610:	2800      	cmp	r0, #0
 8007612:	f000 81c5 	beq.w	80079a0 <_svfprintf_r+0x1638>
 8007616:	9a04      	ldr	r2, [sp, #16]
 8007618:	2340      	movs	r3, #64	; 0x40
 800761a:	6153      	str	r3, [r2, #20]
 800761c:	f7fe bebb 	b.w	8006396 <_svfprintf_r+0x2e>
 8007620:	aa1f      	add	r2, sp, #124	; 0x7c
 8007622:	9904      	ldr	r1, [sp, #16]
 8007624:	9806      	ldr	r0, [sp, #24]
 8007626:	f001 ff9d 	bl	8009564 <__ssprint_r>
 800762a:	2800      	cmp	r0, #0
 800762c:	f47e af93 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8007630:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007632:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8007634:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8007638:	e6ea      	b.n	8007410 <_svfprintf_r+0x10a8>
 800763a:	f04f 0b06 	mov.w	fp, #6
 800763e:	e769      	b.n	8007514 <_svfprintf_r+0x11ac>
 8007640:	970a      	str	r7, [sp, #40]	; 0x28
 8007642:	4617      	mov	r7, r2
 8007644:	e559      	b.n	80070fa <_svfprintf_r+0xd92>
 8007646:	aa1f      	add	r2, sp, #124	; 0x7c
 8007648:	9904      	ldr	r1, [sp, #16]
 800764a:	9806      	ldr	r0, [sp, #24]
 800764c:	f001 ff8a 	bl	8009564 <__ssprint_r>
 8007650:	2800      	cmp	r0, #0
 8007652:	f47e af80 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8007656:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8007658:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800765a:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800765e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007660:	f8c9 6000 	str.w	r6, [r9]
 8007664:	3301      	adds	r3, #1
 8007666:	440c      	add	r4, r1
 8007668:	2b07      	cmp	r3, #7
 800766a:	9421      	str	r4, [sp, #132]	; 0x84
 800766c:	9320      	str	r3, [sp, #128]	; 0x80
 800766e:	f8c9 1004 	str.w	r1, [r9, #4]
 8007672:	f77f a909 	ble.w	8006888 <_svfprintf_r+0x520>
 8007676:	e415      	b.n	8006ea4 <_svfprintf_r+0xb3c>
 8007678:	4630      	mov	r0, r6
 800767a:	f7f9 fac1 	bl	8000c00 <strlen>
 800767e:	46a3      	mov	fp, r4
 8007680:	4603      	mov	r3, r0
 8007682:	9009      	str	r0, [sp, #36]	; 0x24
 8007684:	f7ff ba9c 	b.w	8006bc0 <_svfprintf_r+0x858>
 8007688:	aa1f      	add	r2, sp, #124	; 0x7c
 800768a:	9904      	ldr	r1, [sp, #16]
 800768c:	9806      	ldr	r0, [sp, #24]
 800768e:	f001 ff69 	bl	8009564 <__ssprint_r>
 8007692:	2800      	cmp	r0, #0
 8007694:	f47e af5f 	bne.w	8006556 <_svfprintf_r+0x1ee>
 8007698:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800769a:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800769e:	e468      	b.n	8006f72 <_svfprintf_r+0xc0a>
 80076a0:	4614      	mov	r4, r2
 80076a2:	4632      	mov	r2, r6
 80076a4:	4646      	mov	r6, r8
 80076a6:	4690      	mov	r8, r2
 80076a8:	3301      	adds	r3, #1
 80076aa:	442c      	add	r4, r5
 80076ac:	2b07      	cmp	r3, #7
 80076ae:	9421      	str	r4, [sp, #132]	; 0x84
 80076b0:	9320      	str	r3, [sp, #128]	; 0x80
 80076b2:	f8c9 8000 	str.w	r8, [r9]
 80076b6:	f8c9 5004 	str.w	r5, [r9, #4]
 80076ba:	dcc4      	bgt.n	8007646 <_svfprintf_r+0x12de>
 80076bc:	f109 0908 	add.w	r9, r9, #8
 80076c0:	e7cd      	b.n	800765e <_svfprintf_r+0x12f6>
 80076c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80076c4:	9904      	ldr	r1, [sp, #16]
 80076c6:	9806      	ldr	r0, [sp, #24]
 80076c8:	f001 ff4c 	bl	8009564 <__ssprint_r>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f47e af42 	bne.w	8006556 <_svfprintf_r+0x1ee>
 80076d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076d4:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80076d6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80076da:	e553      	b.n	8007184 <_svfprintf_r+0xe1c>
 80076dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80076de:	9904      	ldr	r1, [sp, #16]
 80076e0:	9806      	ldr	r0, [sp, #24]
 80076e2:	f001 ff3f 	bl	8009564 <__ssprint_r>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f47e af35 	bne.w	8006556 <_svfprintf_r+0x1ee>
 80076ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076f0:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80076f8:	e55c      	b.n	80071b4 <_svfprintf_r+0xe4c>
 80076fa:	2d06      	cmp	r5, #6
 80076fc:	462b      	mov	r3, r5
 80076fe:	bf28      	it	cs
 8007700:	2306      	movcs	r3, #6
 8007702:	9309      	str	r3, [sp, #36]	; 0x24
 8007704:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007708:	46b3      	mov	fp, r6
 800770a:	970a      	str	r7, [sp, #40]	; 0x28
 800770c:	960d      	str	r6, [sp, #52]	; 0x34
 800770e:	4637      	mov	r7, r6
 8007710:	9305      	str	r3, [sp, #20]
 8007712:	4eba      	ldr	r6, [pc, #744]	; (80079fc <_svfprintf_r+0x1694>)
 8007714:	f7fe bff4 	b.w	8006700 <_svfprintf_r+0x398>
 8007718:	272d      	movs	r7, #45	; 0x2d
 800771a:	9305      	str	r3, [sp, #20]
 800771c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800771e:	9303      	str	r3, [sp, #12]
 8007720:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8007724:	f04f 0b00 	mov.w	fp, #0
 8007728:	f7fe bfeb 	b.w	8006702 <_svfprintf_r+0x39a>
 800772c:	9303      	str	r3, [sp, #12]
 800772e:	f7ff b9d4 	b.w	8006ada <_svfprintf_r+0x772>
 8007732:	272d      	movs	r7, #45	; 0x2d
 8007734:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8007738:	f7ff b924 	b.w	8006984 <_svfprintf_r+0x61c>
 800773c:	9b03      	ldr	r3, [sp, #12]
 800773e:	07db      	lsls	r3, r3, #31
 8007740:	f100 80a7 	bmi.w	8007892 <_svfprintf_r+0x152a>
 8007744:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007746:	2f47      	cmp	r7, #71	; 0x47
 8007748:	eba3 0306 	sub.w	r3, r3, r6
 800774c:	9310      	str	r3, [sp, #64]	; 0x40
 800774e:	f040 813e 	bne.w	80079ce <_svfprintf_r+0x1666>
 8007752:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007754:	1cdd      	adds	r5, r3, #3
 8007756:	db16      	blt.n	8007786 <_svfprintf_r+0x141e>
 8007758:	459b      	cmp	fp, r3
 800775a:	db14      	blt.n	8007786 <_svfprintf_r+0x141e>
 800775c:	930d      	str	r3, [sp, #52]	; 0x34
 800775e:	e72b      	b.n	80075b8 <_svfprintf_r+0x1250>
 8007760:	9b03      	ldr	r3, [sp, #12]
 8007762:	07da      	lsls	r2, r3, #31
 8007764:	f53f af05 	bmi.w	8007572 <_svfprintf_r+0x120a>
 8007768:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800776a:	e716      	b.n	800759a <_svfprintf_r+0x1232>
 800776c:	4623      	mov	r3, r4
 800776e:	e714      	b.n	800759a <_svfprintf_r+0x1232>
 8007770:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007774:	970a      	str	r7, [sp, #40]	; 0x28
 8007776:	9305      	str	r3, [sp, #20]
 8007778:	9509      	str	r5, [sp, #36]	; 0x24
 800777a:	4683      	mov	fp, r0
 800777c:	900d      	str	r0, [sp, #52]	; 0x34
 800777e:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8007782:	f7fe bfbd 	b.w	8006700 <_svfprintf_r+0x398>
 8007786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007788:	3a02      	subs	r2, #2
 800778a:	920c      	str	r2, [sp, #48]	; 0x30
 800778c:	3b01      	subs	r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8007794:	9319      	str	r3, [sp, #100]	; 0x64
 8007796:	bfb8      	it	lt
 8007798:	425b      	neglt	r3, r3
 800779a:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800779e:	bfb4      	ite	lt
 80077a0:	222d      	movlt	r2, #45	; 0x2d
 80077a2:	222b      	movge	r2, #43	; 0x2b
 80077a4:	2b09      	cmp	r3, #9
 80077a6:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80077aa:	dc78      	bgt.n	800789e <_svfprintf_r+0x1536>
 80077ac:	3330      	adds	r3, #48	; 0x30
 80077ae:	2230      	movs	r2, #48	; 0x30
 80077b0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80077b4:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80077b8:	ab1c      	add	r3, sp, #112	; 0x70
 80077ba:	aa1b      	add	r2, sp, #108	; 0x6c
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80077c2:	2a01      	cmp	r2, #1
 80077c4:	4413      	add	r3, r2
 80077c6:	9309      	str	r3, [sp, #36]	; 0x24
 80077c8:	f340 80ba 	ble.w	8007940 <_svfprintf_r+0x15d8>
 80077cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ce:	2200      	movs	r2, #0
 80077d0:	3301      	adds	r3, #1
 80077d2:	9309      	str	r3, [sp, #36]	; 0x24
 80077d4:	920d      	str	r2, [sp, #52]	; 0x34
 80077d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80077da:	e6fb      	b.n	80075d4 <_svfprintf_r+0x126c>
 80077dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80077de:	9904      	ldr	r1, [sp, #16]
 80077e0:	9806      	ldr	r0, [sp, #24]
 80077e2:	f001 febf 	bl	8009564 <__ssprint_r>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	f47e aeb5 	bne.w	8006556 <_svfprintf_r+0x1ee>
 80077ec:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80077ee:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80077f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80077f2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80077f6:	e622      	b.n	800743e <_svfprintf_r+0x10d6>
 80077f8:	46a2      	mov	sl, r4
 80077fa:	2500      	movs	r5, #0
 80077fc:	f7fe be0d 	b.w	800641a <_svfprintf_r+0xb2>
 8007800:	aa1d      	add	r2, sp, #116	; 0x74
 8007802:	ab1a      	add	r3, sp, #104	; 0x68
 8007804:	9201      	str	r2, [sp, #4]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	465a      	mov	r2, fp
 800780a:	ab19      	add	r3, sp, #100	; 0x64
 800780c:	2103      	movs	r1, #3
 800780e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8007812:	9806      	ldr	r0, [sp, #24]
 8007814:	f000 f98c 	bl	8007b30 <_dtoa_r>
 8007818:	465d      	mov	r5, fp
 800781a:	4606      	mov	r6, r0
 800781c:	eb00 040b 	add.w	r4, r0, fp
 8007820:	7833      	ldrb	r3, [r6, #0]
 8007822:	2b30      	cmp	r3, #48	; 0x30
 8007824:	d066      	beq.n	80078f4 <_svfprintf_r+0x158c>
 8007826:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007828:	442c      	add	r4, r5
 800782a:	e6a3      	b.n	8007574 <_svfprintf_r+0x120c>
 800782c:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8007830:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8007834:	9114      	str	r1, [sp, #80]	; 0x50
 8007836:	9315      	str	r3, [sp, #84]	; 0x54
 8007838:	f04f 082d 	mov.w	r8, #45	; 0x2d
 800783c:	e678      	b.n	8007530 <_svfprintf_r+0x11c8>
 800783e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007840:	2b00      	cmp	r3, #0
 8007842:	bfd8      	it	le
 8007844:	f1c3 0502 	rsble	r5, r3, #2
 8007848:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800784a:	bfc8      	it	gt
 800784c:	2501      	movgt	r5, #1
 800784e:	18eb      	adds	r3, r5, r3
 8007850:	2267      	movs	r2, #103	; 0x67
 8007852:	9309      	str	r3, [sp, #36]	; 0x24
 8007854:	920c      	str	r2, [sp, #48]	; 0x30
 8007856:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800785a:	e6bb      	b.n	80075d4 <_svfprintf_r+0x126c>
 800785c:	2b00      	cmp	r3, #0
 800785e:	dd66      	ble.n	800792e <_svfprintf_r+0x15c6>
 8007860:	f1bb 0f00 	cmp.w	fp, #0
 8007864:	d15b      	bne.n	800791e <_svfprintf_r+0x15b6>
 8007866:	9a03      	ldr	r2, [sp, #12]
 8007868:	07d4      	lsls	r4, r2, #31
 800786a:	d458      	bmi.n	800791e <_svfprintf_r+0x15b6>
 800786c:	461a      	mov	r2, r3
 800786e:	9209      	str	r2, [sp, #36]	; 0x24
 8007870:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007874:	e6ae      	b.n	80075d4 <_svfprintf_r+0x126c>
 8007876:	aa1d      	add	r2, sp, #116	; 0x74
 8007878:	ab1a      	add	r3, sp, #104	; 0x68
 800787a:	9201      	str	r2, [sp, #4]
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	465a      	mov	r2, fp
 8007880:	ab19      	add	r3, sp, #100	; 0x64
 8007882:	2103      	movs	r1, #3
 8007884:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8007888:	9806      	ldr	r0, [sp, #24]
 800788a:	f000 f951 	bl	8007b30 <_dtoa_r>
 800788e:	465d      	mov	r5, fp
 8007890:	4606      	mov	r6, r0
 8007892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007894:	2b46      	cmp	r3, #70	; 0x46
 8007896:	eb06 0405 	add.w	r4, r6, r5
 800789a:	d0c1      	beq.n	8007820 <_svfprintf_r+0x14b8>
 800789c:	e66a      	b.n	8007574 <_svfprintf_r+0x120c>
 800789e:	f10d 047b 	add.w	r4, sp, #123	; 0x7b
 80078a2:	4620      	mov	r0, r4
 80078a4:	4a56      	ldr	r2, [pc, #344]	; (8007a00 <_svfprintf_r+0x1698>)
 80078a6:	fb82 2103 	smull	r2, r1, r2, r3
 80078aa:	17da      	asrs	r2, r3, #31
 80078ac:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80078b0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80078b4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80078b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078bc:	2a09      	cmp	r2, #9
 80078be:	4613      	mov	r3, r2
 80078c0:	f800 1d01 	strb.w	r1, [r0, #-1]!
 80078c4:	dcee      	bgt.n	80078a4 <_svfprintf_r+0x153c>
 80078c6:	4602      	mov	r2, r0
 80078c8:	3330      	adds	r3, #48	; 0x30
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80078d0:	4294      	cmp	r4, r2
 80078d2:	d962      	bls.n	800799a <_svfprintf_r+0x1632>
 80078d4:	f10d 016e 	add.w	r1, sp, #110	; 0x6e
 80078d8:	4602      	mov	r2, r0
 80078da:	e001      	b.n	80078e0 <_svfprintf_r+0x1578>
 80078dc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80078e0:	f801 3b01 	strb.w	r3, [r1], #1
 80078e4:	4294      	cmp	r4, r2
 80078e6:	d1f9      	bne.n	80078dc <_svfprintf_r+0x1574>
 80078e8:	1c63      	adds	r3, r4, #1
 80078ea:	1a1b      	subs	r3, r3, r0
 80078ec:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 80078f0:	4413      	add	r3, r2
 80078f2:	e762      	b.n	80077ba <_svfprintf_r+0x1452>
 80078f4:	2200      	movs	r2, #0
 80078f6:	2300      	movs	r3, #0
 80078f8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80078fc:	f7f9 fa96 	bl	8000e2c <__aeabi_dcmpeq>
 8007900:	2800      	cmp	r0, #0
 8007902:	d190      	bne.n	8007826 <_svfprintf_r+0x14be>
 8007904:	f1c5 0501 	rsb	r5, r5, #1
 8007908:	9519      	str	r5, [sp, #100]	; 0x64
 800790a:	442c      	add	r4, r5
 800790c:	e632      	b.n	8007574 <_svfprintf_r+0x120c>
 800790e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007910:	2267      	movs	r2, #103	; 0x67
 8007912:	3301      	adds	r3, #1
 8007914:	9309      	str	r3, [sp, #36]	; 0x24
 8007916:	920c      	str	r2, [sp, #48]	; 0x30
 8007918:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800791c:	e65a      	b.n	80075d4 <_svfprintf_r+0x126c>
 800791e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007920:	f10b 0501 	add.w	r5, fp, #1
 8007924:	442b      	add	r3, r5
 8007926:	9309      	str	r3, [sp, #36]	; 0x24
 8007928:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800792c:	e652      	b.n	80075d4 <_svfprintf_r+0x126c>
 800792e:	f1bb 0f00 	cmp.w	fp, #0
 8007932:	d12c      	bne.n	800798e <_svfprintf_r+0x1626>
 8007934:	9b03      	ldr	r3, [sp, #12]
 8007936:	07d8      	lsls	r0, r3, #31
 8007938:	d429      	bmi.n	800798e <_svfprintf_r+0x1626>
 800793a:	2301      	movs	r3, #1
 800793c:	9309      	str	r3, [sp, #36]	; 0x24
 800793e:	e649      	b.n	80075d4 <_svfprintf_r+0x126c>
 8007940:	9b03      	ldr	r3, [sp, #12]
 8007942:	f013 0301 	ands.w	r3, r3, #1
 8007946:	f47f af41 	bne.w	80077cc <_svfprintf_r+0x1464>
 800794a:	930d      	str	r3, [sp, #52]	; 0x34
 800794c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800794e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007952:	e63f      	b.n	80075d4 <_svfprintf_r+0x126c>
 8007954:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007956:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800795a:	6805      	ldr	r5, [r0, #0]
 800795c:	3004      	adds	r0, #4
 800795e:	2d00      	cmp	r5, #0
 8007960:	900a      	str	r0, [sp, #40]	; 0x28
 8007962:	46a2      	mov	sl, r4
 8007964:	f6be ad57 	bge.w	8006416 <_svfprintf_r+0xae>
 8007968:	f04f 35ff 	mov.w	r5, #4294967295
 800796c:	f7fe bd53 	b.w	8006416 <_svfprintf_r+0xae>
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	07db      	lsls	r3, r3, #31
 8007974:	465f      	mov	r7, fp
 8007976:	d505      	bpl.n	8007984 <_svfprintf_r+0x161c>
 8007978:	ae3c      	add	r6, sp, #240	; 0xf0
 800797a:	2330      	movs	r3, #48	; 0x30
 800797c:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8007980:	f7fe beb4 	b.w	80066ec <_svfprintf_r+0x384>
 8007984:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007988:	ae2c      	add	r6, sp, #176	; 0xb0
 800798a:	f7fe beb2 	b.w	80066f2 <_svfprintf_r+0x38a>
 800798e:	f10b 0302 	add.w	r3, fp, #2
 8007992:	9309      	str	r3, [sp, #36]	; 0x24
 8007994:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007998:	e61c      	b.n	80075d4 <_svfprintf_r+0x126c>
 800799a:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800799e:	e70c      	b.n	80077ba <_svfprintf_r+0x1452>
 80079a0:	9a06      	ldr	r2, [sp, #24]
 80079a2:	230c      	movs	r3, #12
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295
 80079aa:	f7fe bddd 	b.w	8006568 <_svfprintf_r+0x200>
 80079ae:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80079b2:	f7ff b95a 	b.w	8006c6a <_svfprintf_r+0x902>
 80079b6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80079ba:	f7ff b862 	b.w	8006a82 <_svfprintf_r+0x71a>
 80079be:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80079c2:	f7ff b830 	b.w	8006a26 <_svfprintf_r+0x6be>
 80079c6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80079ca:	f7fe bff9 	b.w	80069c0 <_svfprintf_r+0x658>
 80079ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079d0:	e6dc      	b.n	800778c <_svfprintf_r+0x1424>
 80079d2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80079d6:	f7fe bdcf 	b.w	8006578 <_svfprintf_r+0x210>
 80079da:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80079de:	f7fe bfad 	b.w	800693c <_svfprintf_r+0x5d4>
 80079e2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80079e6:	f7fe be41 	b.w	800666c <_svfprintf_r+0x304>
 80079ea:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80079ee:	f7ff b91b 	b.w	8006c28 <_svfprintf_r+0x8c0>
 80079f2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80079f6:	f7ff b8f9 	b.w	8006bec <_svfprintf_r+0x884>
 80079fa:	bf00      	nop
 80079fc:	08009e7c 	.word	0x08009e7c
 8007a00:	66666667 	.word	0x66666667

08007a04 <quorem>:
 8007a04:	6902      	ldr	r2, [r0, #16]
 8007a06:	690b      	ldr	r3, [r1, #16]
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	f300 808d 	bgt.w	8007b28 <quorem+0x124>
 8007a0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a12:	f103 38ff 	add.w	r8, r3, #4294967295
 8007a16:	f101 0714 	add.w	r7, r1, #20
 8007a1a:	f100 0b14 	add.w	fp, r0, #20
 8007a1e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8007a22:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8007a26:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	3201      	adds	r2, #1
 8007a2e:	fbb3 f9f2 	udiv	r9, r3, r2
 8007a32:	eb0b 0304 	add.w	r3, fp, r4
 8007a36:	9400      	str	r4, [sp, #0]
 8007a38:	eb07 0a04 	add.w	sl, r7, r4
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	f1b9 0f00 	cmp.w	r9, #0
 8007a42:	d039      	beq.n	8007ab8 <quorem+0xb4>
 8007a44:	2500      	movs	r5, #0
 8007a46:	46bc      	mov	ip, r7
 8007a48:	46de      	mov	lr, fp
 8007a4a:	462b      	mov	r3, r5
 8007a4c:	f85c 6b04 	ldr.w	r6, [ip], #4
 8007a50:	f8de 2000 	ldr.w	r2, [lr]
 8007a54:	b2b4      	uxth	r4, r6
 8007a56:	fb09 5504 	mla	r5, r9, r4, r5
 8007a5a:	0c36      	lsrs	r6, r6, #16
 8007a5c:	0c2c      	lsrs	r4, r5, #16
 8007a5e:	fb09 4406 	mla	r4, r9, r6, r4
 8007a62:	b2ad      	uxth	r5, r5
 8007a64:	1b5b      	subs	r3, r3, r5
 8007a66:	b2a6      	uxth	r6, r4
 8007a68:	fa13 f382 	uxtah	r3, r3, r2
 8007a6c:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 8007a70:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007a7a:	45e2      	cmp	sl, ip
 8007a7c:	f84e 3b04 	str.w	r3, [lr], #4
 8007a80:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8007a84:	ea4f 4326 	mov.w	r3, r6, asr #16
 8007a88:	d2e0      	bcs.n	8007a4c <quorem+0x48>
 8007a8a:	9b00      	ldr	r3, [sp, #0]
 8007a8c:	f85b 3003 	ldr.w	r3, [fp, r3]
 8007a90:	b993      	cbnz	r3, 8007ab8 <quorem+0xb4>
 8007a92:	9c01      	ldr	r4, [sp, #4]
 8007a94:	1f23      	subs	r3, r4, #4
 8007a96:	459b      	cmp	fp, r3
 8007a98:	d20c      	bcs.n	8007ab4 <quorem+0xb0>
 8007a9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007a9e:	b94b      	cbnz	r3, 8007ab4 <quorem+0xb0>
 8007aa0:	f1a4 0308 	sub.w	r3, r4, #8
 8007aa4:	e002      	b.n	8007aac <quorem+0xa8>
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	3b04      	subs	r3, #4
 8007aaa:	b91a      	cbnz	r2, 8007ab4 <quorem+0xb0>
 8007aac:	459b      	cmp	fp, r3
 8007aae:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ab2:	d3f8      	bcc.n	8007aa6 <quorem+0xa2>
 8007ab4:	f8c0 8010 	str.w	r8, [r0, #16]
 8007ab8:	4604      	mov	r4, r0
 8007aba:	f001 fc1b 	bl	80092f4 <__mcmp>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	db2e      	blt.n	8007b20 <quorem+0x11c>
 8007ac2:	f109 0901 	add.w	r9, r9, #1
 8007ac6:	465d      	mov	r5, fp
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f857 1b04 	ldr.w	r1, [r7], #4
 8007ace:	6828      	ldr	r0, [r5, #0]
 8007ad0:	b28a      	uxth	r2, r1
 8007ad2:	1a9a      	subs	r2, r3, r2
 8007ad4:	0c09      	lsrs	r1, r1, #16
 8007ad6:	fa12 f280 	uxtah	r2, r2, r0
 8007ada:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8007ade:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8007ae2:	b291      	uxth	r1, r2
 8007ae4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007ae8:	45ba      	cmp	sl, r7
 8007aea:	f845 1b04 	str.w	r1, [r5], #4
 8007aee:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007af2:	d2ea      	bcs.n	8007aca <quorem+0xc6>
 8007af4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8007af8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8007afc:	b982      	cbnz	r2, 8007b20 <quorem+0x11c>
 8007afe:	1f1a      	subs	r2, r3, #4
 8007b00:	4593      	cmp	fp, r2
 8007b02:	d20b      	bcs.n	8007b1c <quorem+0x118>
 8007b04:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8007b08:	b942      	cbnz	r2, 8007b1c <quorem+0x118>
 8007b0a:	3b08      	subs	r3, #8
 8007b0c:	e002      	b.n	8007b14 <quorem+0x110>
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	3b04      	subs	r3, #4
 8007b12:	b91a      	cbnz	r2, 8007b1c <quorem+0x118>
 8007b14:	459b      	cmp	fp, r3
 8007b16:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b1a:	d3f8      	bcc.n	8007b0e <quorem+0x10a>
 8007b1c:	f8c4 8010 	str.w	r8, [r4, #16]
 8007b20:	4648      	mov	r0, r9
 8007b22:	b003      	add	sp, #12
 8007b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b28:	2000      	movs	r0, #0
 8007b2a:	4770      	bx	lr
 8007b2c:	0000      	movs	r0, r0
	...

08007b30 <_dtoa_r>:
 8007b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b34:	ec57 6b10 	vmov	r6, r7, d0
 8007b38:	b09b      	sub	sp, #108	; 0x6c
 8007b3a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007b3c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8007b3e:	9100      	str	r1, [sp, #0]
 8007b40:	4681      	mov	r9, r0
 8007b42:	9205      	str	r2, [sp, #20]
 8007b44:	9303      	str	r3, [sp, #12]
 8007b46:	ee10 aa10 	vmov	sl, s0
 8007b4a:	46bb      	mov	fp, r7
 8007b4c:	b154      	cbz	r4, 8007b64 <_dtoa_r+0x34>
 8007b4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b50:	6062      	str	r2, [r4, #4]
 8007b52:	2301      	movs	r3, #1
 8007b54:	4093      	lsls	r3, r2
 8007b56:	60a3      	str	r3, [r4, #8]
 8007b58:	4621      	mov	r1, r4
 8007b5a:	f001 f9e9 	bl	8008f30 <_Bfree>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8007b64:	f1bb 0f00 	cmp.w	fp, #0
 8007b68:	465c      	mov	r4, fp
 8007b6a:	db34      	blt.n	8007bd6 <_dtoa_r+0xa6>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	602b      	str	r3, [r5, #0]
 8007b70:	4ba1      	ldr	r3, [pc, #644]	; (8007df8 <_dtoa_r+0x2c8>)
 8007b72:	461a      	mov	r2, r3
 8007b74:	4023      	ands	r3, r4
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d016      	beq.n	8007ba8 <_dtoa_r+0x78>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4650      	mov	r0, sl
 8007b80:	4659      	mov	r1, fp
 8007b82:	f7f9 f953 	bl	8000e2c <__aeabi_dcmpeq>
 8007b86:	4656      	mov	r6, sl
 8007b88:	465f      	mov	r7, fp
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	b348      	cbz	r0, 8007be2 <_dtoa_r+0xb2>
 8007b8e:	9a03      	ldr	r2, [sp, #12]
 8007b90:	2301      	movs	r3, #1
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 80be 	beq.w	8007d18 <_dtoa_r+0x1e8>
 8007b9c:	4897      	ldr	r0, [pc, #604]	; (8007dfc <_dtoa_r+0x2cc>)
 8007b9e:	6018      	str	r0, [r3, #0]
 8007ba0:	3801      	subs	r0, #1
 8007ba2:	b01b      	add	sp, #108	; 0x6c
 8007ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba8:	9a03      	ldr	r2, [sp, #12]
 8007baa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	f1ba 0f00 	cmp.w	sl, #0
 8007bb4:	f000 809a 	beq.w	8007cec <_dtoa_r+0x1bc>
 8007bb8:	4891      	ldr	r0, [pc, #580]	; (8007e00 <_dtoa_r+0x2d0>)
 8007bba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0f0      	beq.n	8007ba2 <_dtoa_r+0x72>
 8007bc0:	78c3      	ldrb	r3, [r0, #3]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 80aa 	beq.w	8007d1c <_dtoa_r+0x1ec>
 8007bc8:	f100 0308 	add.w	r3, r0, #8
 8007bcc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	b01b      	add	sp, #108	; 0x6c
 8007bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 8007bdc:	602b      	str	r3, [r5, #0]
 8007bde:	46a3      	mov	fp, r4
 8007be0:	e7c6      	b.n	8007b70 <_dtoa_r+0x40>
 8007be2:	aa18      	add	r2, sp, #96	; 0x60
 8007be4:	a919      	add	r1, sp, #100	; 0x64
 8007be6:	ec47 6b10 	vmov	d0, r6, r7
 8007bea:	4648      	mov	r0, r9
 8007bec:	f001 fc2e 	bl	800944c <__d2b>
 8007bf0:	0d25      	lsrs	r5, r4, #20
 8007bf2:	900a      	str	r0, [sp, #40]	; 0x28
 8007bf4:	f040 8083 	bne.w	8007cfe <_dtoa_r+0x1ce>
 8007bf8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8007bfa:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007bfc:	442e      	add	r6, r5
 8007bfe:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	f340 8288 	ble.w	8008118 <_dtoa_r+0x5e8>
 8007c08:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007c0c:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8007c10:	409c      	lsls	r4, r3
 8007c12:	fa2a f000 	lsr.w	r0, sl, r0
 8007c16:	4320      	orrs	r0, r4
 8007c18:	f7f8 fc66 	bl	80004e8 <__aeabi_ui2d>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	1e74      	subs	r4, r6, #1
 8007c20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007c24:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c26:	2200      	movs	r2, #0
 8007c28:	4b76      	ldr	r3, [pc, #472]	; (8007e04 <_dtoa_r+0x2d4>)
 8007c2a:	f7f8 fb1f 	bl	800026c <__aeabi_dsub>
 8007c2e:	a36c      	add	r3, pc, #432	; (adr r3, 8007de0 <_dtoa_r+0x2b0>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f7f8 fcce 	bl	80005d4 <__aeabi_dmul>
 8007c38:	a36b      	add	r3, pc, #428	; (adr r3, 8007de8 <_dtoa_r+0x2b8>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fb17 	bl	8000270 <__adddf3>
 8007c42:	4606      	mov	r6, r0
 8007c44:	4620      	mov	r0, r4
 8007c46:	460f      	mov	r7, r1
 8007c48:	f7f8 fc5e 	bl	8000508 <__aeabi_i2d>
 8007c4c:	a368      	add	r3, pc, #416	; (adr r3, 8007df0 <_dtoa_r+0x2c0>)
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	f7f8 fcbf 	bl	80005d4 <__aeabi_dmul>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	f7f8 fb07 	bl	8000270 <__adddf3>
 8007c62:	4606      	mov	r6, r0
 8007c64:	460f      	mov	r7, r1
 8007c66:	f7f9 f913 	bl	8000e90 <__aeabi_d2iz>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	9004      	str	r0, [sp, #16]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	f7f9 f8e4 	bl	8000e40 <__aeabi_dcmplt>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	f040 8228 	bne.w	80080ce <_dtoa_r+0x59e>
 8007c7e:	9e04      	ldr	r6, [sp, #16]
 8007c80:	2e16      	cmp	r6, #22
 8007c82:	f200 8221 	bhi.w	80080c8 <_dtoa_r+0x598>
 8007c86:	4b60      	ldr	r3, [pc, #384]	; (8007e08 <_dtoa_r+0x2d8>)
 8007c88:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c90:	4652      	mov	r2, sl
 8007c92:	465b      	mov	r3, fp
 8007c94:	f7f9 f8f2 	bl	8000e7c <__aeabi_dcmpgt>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	f000 8242 	beq.w	8008122 <_dtoa_r+0x5f2>
 8007c9e:	1e73      	subs	r3, r6, #1
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ca6:	1b2d      	subs	r5, r5, r4
 8007ca8:	f1b5 0801 	subs.w	r8, r5, #1
 8007cac:	f100 822a 	bmi.w	8008104 <_dtoa_r+0x5d4>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	9307      	str	r3, [sp, #28]
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f2c0 821b 	blt.w	80080f2 <_dtoa_r+0x5c2>
 8007cbc:	4498      	add	r8, r3
 8007cbe:	930c      	str	r3, [sp, #48]	; 0x30
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9306      	str	r3, [sp, #24]
 8007cc4:	9b00      	ldr	r3, [sp, #0]
 8007cc6:	2b09      	cmp	r3, #9
 8007cc8:	d82a      	bhi.n	8007d20 <_dtoa_r+0x1f0>
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	f340 8644 	ble.w	8008958 <_dtoa_r+0xe28>
 8007cd0:	3b04      	subs	r3, #4
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	2600      	movs	r6, #0
 8007cd6:	9b00      	ldr	r3, [sp, #0]
 8007cd8:	3b02      	subs	r3, #2
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	f200 8623 	bhi.w	8008926 <_dtoa_r+0xdf6>
 8007ce0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007ce4:	0224032b 	.word	0x0224032b
 8007ce8:	04500336 	.word	0x04500336
 8007cec:	4b44      	ldr	r3, [pc, #272]	; (8007e00 <_dtoa_r+0x2d0>)
 8007cee:	4a47      	ldr	r2, [pc, #284]	; (8007e0c <_dtoa_r+0x2dc>)
 8007cf0:	f3c4 0013 	ubfx	r0, r4, #0, #20
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	bf14      	ite	ne
 8007cf8:	4618      	movne	r0, r3
 8007cfa:	4610      	moveq	r0, r2
 8007cfc:	e75d      	b.n	8007bba <_dtoa_r+0x8a>
 8007cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d02:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007d06:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8007d0a:	4650      	mov	r0, sl
 8007d0c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8007d10:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007d14:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8007d16:	e786      	b.n	8007c26 <_dtoa_r+0xf6>
 8007d18:	483d      	ldr	r0, [pc, #244]	; (8007e10 <_dtoa_r+0x2e0>)
 8007d1a:	e742      	b.n	8007ba2 <_dtoa_r+0x72>
 8007d1c:	1cc3      	adds	r3, r0, #3
 8007d1e:	e755      	b.n	8007bcc <_dtoa_r+0x9c>
 8007d20:	2100      	movs	r1, #0
 8007d22:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007d26:	4648      	mov	r0, r9
 8007d28:	460c      	mov	r4, r1
 8007d2a:	9100      	str	r1, [sp, #0]
 8007d2c:	f001 f8da 	bl	8008ee4 <_Balloc>
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295
 8007d34:	9308      	str	r3, [sp, #32]
 8007d36:	930e      	str	r3, [sp, #56]	; 0x38
 8007d38:	2301      	movs	r3, #1
 8007d3a:	9009      	str	r0, [sp, #36]	; 0x24
 8007d3c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007d40:	9405      	str	r4, [sp, #20]
 8007d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f2c0 80d0 	blt.w	8007eec <_dtoa_r+0x3bc>
 8007d4c:	9a04      	ldr	r2, [sp, #16]
 8007d4e:	2a0e      	cmp	r2, #14
 8007d50:	f300 80cc 	bgt.w	8007eec <_dtoa_r+0x3bc>
 8007d54:	4b2c      	ldr	r3, [pc, #176]	; (8007e08 <_dtoa_r+0x2d8>)
 8007d56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d5a:	ed93 7b00 	vldr	d7, [r3]
 8007d5e:	9b05      	ldr	r3, [sp, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	ed8d 7b00 	vstr	d7, [sp]
 8007d66:	f2c0 82fe 	blt.w	8008366 <_dtoa_r+0x836>
 8007d6a:	4656      	mov	r6, sl
 8007d6c:	465f      	mov	r7, fp
 8007d6e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8007d72:	4630      	mov	r0, r6
 8007d74:	4652      	mov	r2, sl
 8007d76:	465b      	mov	r3, fp
 8007d78:	4639      	mov	r1, r7
 8007d7a:	f7f8 fd55 	bl	8000828 <__aeabi_ddiv>
 8007d7e:	f7f9 f887 	bl	8000e90 <__aeabi_d2iz>
 8007d82:	4604      	mov	r4, r0
 8007d84:	f7f8 fbc0 	bl	8000508 <__aeabi_i2d>
 8007d88:	4652      	mov	r2, sl
 8007d8a:	465b      	mov	r3, fp
 8007d8c:	f7f8 fc22 	bl	80005d4 <__aeabi_dmul>
 8007d90:	460b      	mov	r3, r1
 8007d92:	4602      	mov	r2, r0
 8007d94:	4639      	mov	r1, r7
 8007d96:	4630      	mov	r0, r6
 8007d98:	f7f8 fa68 	bl	800026c <__aeabi_dsub>
 8007d9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007d9e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8007da2:	702b      	strb	r3, [r5, #0]
 8007da4:	9b08      	ldr	r3, [sp, #32]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	4606      	mov	r6, r0
 8007daa:	460f      	mov	r7, r1
 8007dac:	f105 0501 	add.w	r5, r5, #1
 8007db0:	d061      	beq.n	8007e76 <_dtoa_r+0x346>
 8007db2:	2200      	movs	r2, #0
 8007db4:	4b17      	ldr	r3, [pc, #92]	; (8007e14 <_dtoa_r+0x2e4>)
 8007db6:	f7f8 fc0d 	bl	80005d4 <__aeabi_dmul>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	460f      	mov	r7, r1
 8007dc2:	f7f9 f833 	bl	8000e2c <__aeabi_dcmpeq>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d17d      	bne.n	8007ec6 <_dtoa_r+0x396>
 8007dca:	f8cd 9014 	str.w	r9, [sp, #20]
 8007dce:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007dd2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8007dd6:	e9dd 8900 	ldrd	r8, r9, [sp]
 8007dda:	e028      	b.n	8007e2e <_dtoa_r+0x2fe>
 8007ddc:	f3af 8000 	nop.w
 8007de0:	636f4361 	.word	0x636f4361
 8007de4:	3fd287a7 	.word	0x3fd287a7
 8007de8:	8b60c8b3 	.word	0x8b60c8b3
 8007dec:	3fc68a28 	.word	0x3fc68a28
 8007df0:	509f79fb 	.word	0x509f79fb
 8007df4:	3fd34413 	.word	0x3fd34413
 8007df8:	7ff00000 	.word	0x7ff00000
 8007dfc:	08009e85 	.word	0x08009e85
 8007e00:	08009ea4 	.word	0x08009ea4
 8007e04:	3ff80000 	.word	0x3ff80000
 8007e08:	08009ec0 	.word	0x08009ec0
 8007e0c:	08009e98 	.word	0x08009e98
 8007e10:	08009e84 	.word	0x08009e84
 8007e14:	40240000 	.word	0x40240000
 8007e18:	f7f8 fbdc 	bl	80005d4 <__aeabi_dmul>
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2300      	movs	r3, #0
 8007e20:	4606      	mov	r6, r0
 8007e22:	460f      	mov	r7, r1
 8007e24:	f7f9 f802 	bl	8000e2c <__aeabi_dcmpeq>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	f040 83ae 	bne.w	800858a <_dtoa_r+0xa5a>
 8007e2e:	4642      	mov	r2, r8
 8007e30:	464b      	mov	r3, r9
 8007e32:	4630      	mov	r0, r6
 8007e34:	4639      	mov	r1, r7
 8007e36:	f7f8 fcf7 	bl	8000828 <__aeabi_ddiv>
 8007e3a:	f7f9 f829 	bl	8000e90 <__aeabi_d2iz>
 8007e3e:	4604      	mov	r4, r0
 8007e40:	f7f8 fb62 	bl	8000508 <__aeabi_i2d>
 8007e44:	4642      	mov	r2, r8
 8007e46:	464b      	mov	r3, r9
 8007e48:	f7f8 fbc4 	bl	80005d4 <__aeabi_dmul>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 fa0a 	bl	800026c <__aeabi_dsub>
 8007e58:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007e5c:	f805 eb01 	strb.w	lr, [r5], #1
 8007e60:	ebcb 0e05 	rsb	lr, fp, r5
 8007e64:	45d6      	cmp	lr, sl
 8007e66:	4606      	mov	r6, r0
 8007e68:	460f      	mov	r7, r1
 8007e6a:	f04f 0200 	mov.w	r2, #0
 8007e6e:	4bae      	ldr	r3, [pc, #696]	; (8008128 <_dtoa_r+0x5f8>)
 8007e70:	d1d2      	bne.n	8007e18 <_dtoa_r+0x2e8>
 8007e72:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007e76:	4632      	mov	r2, r6
 8007e78:	463b      	mov	r3, r7
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	f7f8 f9f7 	bl	8000270 <__adddf3>
 8007e82:	4606      	mov	r6, r0
 8007e84:	460f      	mov	r7, r1
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e8e:	f7f8 ffd7 	bl	8000e40 <__aeabi_dcmplt>
 8007e92:	b940      	cbnz	r0, 8007ea6 <_dtoa_r+0x376>
 8007e94:	4632      	mov	r2, r6
 8007e96:	463b      	mov	r3, r7
 8007e98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e9c:	f7f8 ffc6 	bl	8000e2c <__aeabi_dcmpeq>
 8007ea0:	b188      	cbz	r0, 8007ec6 <_dtoa_r+0x396>
 8007ea2:	07e3      	lsls	r3, r4, #31
 8007ea4:	d50f      	bpl.n	8007ec6 <_dtoa_r+0x396>
 8007ea6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8007eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eac:	1e6b      	subs	r3, r5, #1
 8007eae:	e004      	b.n	8007eba <_dtoa_r+0x38a>
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	f000 83fc 	beq.w	80086ae <_dtoa_r+0xb7e>
 8007eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eba:	2c39      	cmp	r4, #57	; 0x39
 8007ebc:	f103 0501 	add.w	r5, r3, #1
 8007ec0:	d0f6      	beq.n	8007eb0 <_dtoa_r+0x380>
 8007ec2:	3401      	adds	r4, #1
 8007ec4:	701c      	strb	r4, [r3, #0]
 8007ec6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ec8:	4648      	mov	r0, r9
 8007eca:	f001 f831 	bl	8008f30 <_Bfree>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	9b04      	ldr	r3, [sp, #16]
 8007ed2:	702a      	strb	r2, [r5, #0]
 8007ed4:	9a03      	ldr	r2, [sp, #12]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 839b 	beq.w	8008618 <_dtoa_r+0xae8>
 8007ee2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ee4:	601d      	str	r5, [r3, #0]
 8007ee6:	b01b      	add	sp, #108	; 0x6c
 8007ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007eee:	2a00      	cmp	r2, #0
 8007ef0:	f000 810e 	beq.w	8008110 <_dtoa_r+0x5e0>
 8007ef4:	9a00      	ldr	r2, [sp, #0]
 8007ef6:	2a01      	cmp	r2, #1
 8007ef8:	f340 8257 	ble.w	80083aa <_dtoa_r+0x87a>
 8007efc:	9b08      	ldr	r3, [sp, #32]
 8007efe:	9a06      	ldr	r2, [sp, #24]
 8007f00:	1e5f      	subs	r7, r3, #1
 8007f02:	42ba      	cmp	r2, r7
 8007f04:	f2c0 838b 	blt.w	800861e <_dtoa_r+0xaee>
 8007f08:	1bd7      	subs	r7, r2, r7
 8007f0a:	9b08      	ldr	r3, [sp, #32]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f2c0 8480 	blt.w	8008812 <_dtoa_r+0xce2>
 8007f12:	9d07      	ldr	r5, [sp, #28]
 8007f14:	9b08      	ldr	r3, [sp, #32]
 8007f16:	9a07      	ldr	r2, [sp, #28]
 8007f18:	2101      	movs	r1, #1
 8007f1a:	441a      	add	r2, r3
 8007f1c:	4648      	mov	r0, r9
 8007f1e:	9207      	str	r2, [sp, #28]
 8007f20:	4498      	add	r8, r3
 8007f22:	f001 f89d 	bl	8009060 <__i2b>
 8007f26:	4606      	mov	r6, r0
 8007f28:	b165      	cbz	r5, 8007f44 <_dtoa_r+0x414>
 8007f2a:	f1b8 0f00 	cmp.w	r8, #0
 8007f2e:	dd09      	ble.n	8007f44 <_dtoa_r+0x414>
 8007f30:	4545      	cmp	r5, r8
 8007f32:	9a07      	ldr	r2, [sp, #28]
 8007f34:	462b      	mov	r3, r5
 8007f36:	bfa8      	it	ge
 8007f38:	4643      	movge	r3, r8
 8007f3a:	1ad2      	subs	r2, r2, r3
 8007f3c:	9207      	str	r2, [sp, #28]
 8007f3e:	1aed      	subs	r5, r5, r3
 8007f40:	ebc3 0808 	rsb	r8, r3, r8
 8007f44:	9b06      	ldr	r3, [sp, #24]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f340 82f5 	ble.w	8008536 <_dtoa_r+0xa06>
 8007f4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f4e:	2a00      	cmp	r2, #0
 8007f50:	f000 8202 	beq.w	8008358 <_dtoa_r+0x828>
 8007f54:	2f00      	cmp	r7, #0
 8007f56:	f000 81ff 	beq.w	8008358 <_dtoa_r+0x828>
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	463a      	mov	r2, r7
 8007f5e:	4648      	mov	r0, r9
 8007f60:	f001 f920 	bl	80091a4 <__pow5mult>
 8007f64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f66:	4601      	mov	r1, r0
 8007f68:	4606      	mov	r6, r0
 8007f6a:	4648      	mov	r0, r9
 8007f6c:	f001 f882 	bl	8009074 <__multiply>
 8007f70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f72:	4604      	mov	r4, r0
 8007f74:	4648      	mov	r0, r9
 8007f76:	f000 ffdb 	bl	8008f30 <_Bfree>
 8007f7a:	9b06      	ldr	r3, [sp, #24]
 8007f7c:	1bdb      	subs	r3, r3, r7
 8007f7e:	9306      	str	r3, [sp, #24]
 8007f80:	f040 81e9 	bne.w	8008356 <_dtoa_r+0x826>
 8007f84:	2101      	movs	r1, #1
 8007f86:	4648      	mov	r0, r9
 8007f88:	f001 f86a 	bl	8009060 <__i2b>
 8007f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f8e:	9006      	str	r0, [sp, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 8215 	beq.w	80083c0 <_dtoa_r+0x890>
 8007f96:	4601      	mov	r1, r0
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4648      	mov	r0, r9
 8007f9c:	f001 f902 	bl	80091a4 <__pow5mult>
 8007fa0:	9b00      	ldr	r3, [sp, #0]
 8007fa2:	9006      	str	r0, [sp, #24]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	f340 82f3 	ble.w	8008590 <_dtoa_r+0xa60>
 8007faa:	2700      	movs	r7, #0
 8007fac:	9a06      	ldr	r2, [sp, #24]
 8007fae:	6913      	ldr	r3, [r2, #16]
 8007fb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fb4:	6918      	ldr	r0, [r3, #16]
 8007fb6:	f001 f805 	bl	8008fc4 <__hi0bits>
 8007fba:	f1c0 0020 	rsb	r0, r0, #32
 8007fbe:	4440      	add	r0, r8
 8007fc0:	f010 001f 	ands.w	r0, r0, #31
 8007fc4:	f000 81fa 	beq.w	80083bc <_dtoa_r+0x88c>
 8007fc8:	f1c0 0320 	rsb	r3, r0, #32
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	f340 84bd 	ble.w	800894c <_dtoa_r+0xe1c>
 8007fd2:	f1c0 001c 	rsb	r0, r0, #28
 8007fd6:	9b07      	ldr	r3, [sp, #28]
 8007fd8:	4403      	add	r3, r0
 8007fda:	9307      	str	r3, [sp, #28]
 8007fdc:	4405      	add	r5, r0
 8007fde:	4480      	add	r8, r0
 8007fe0:	9b07      	ldr	r3, [sp, #28]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	dd05      	ble.n	8007ff2 <_dtoa_r+0x4c2>
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4648      	mov	r0, r9
 8007fec:	f001 f92a 	bl	8009244 <__lshift>
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	f1b8 0f00 	cmp.w	r8, #0
 8007ff6:	dd05      	ble.n	8008004 <_dtoa_r+0x4d4>
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	9906      	ldr	r1, [sp, #24]
 8007ffc:	4648      	mov	r0, r9
 8007ffe:	f001 f921 	bl	8009244 <__lshift>
 8008002:	9006      	str	r0, [sp, #24]
 8008004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008006:	2b00      	cmp	r3, #0
 8008008:	f040 827a 	bne.w	8008500 <_dtoa_r+0x9d0>
 800800c:	9b08      	ldr	r3, [sp, #32]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f340 8293 	ble.w	800853a <_dtoa_r+0xa0a>
 8008014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008016:	2b00      	cmp	r3, #0
 8008018:	f040 81f4 	bne.w	8008404 <_dtoa_r+0x8d4>
 800801c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8008020:	9f08      	ldr	r7, [sp, #32]
 8008022:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008026:	465d      	mov	r5, fp
 8008028:	e002      	b.n	8008030 <_dtoa_r+0x500>
 800802a:	f000 ff8b 	bl	8008f44 <__multadd>
 800802e:	4604      	mov	r4, r0
 8008030:	4641      	mov	r1, r8
 8008032:	4620      	mov	r0, r4
 8008034:	f7ff fce6 	bl	8007a04 <quorem>
 8008038:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800803c:	f805 ab01 	strb.w	sl, [r5], #1
 8008040:	ebcb 0305 	rsb	r3, fp, r5
 8008044:	42bb      	cmp	r3, r7
 8008046:	f04f 020a 	mov.w	r2, #10
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	4621      	mov	r1, r4
 8008050:	4648      	mov	r0, r9
 8008052:	dbea      	blt.n	800802a <_dtoa_r+0x4fa>
 8008054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008056:	9a08      	ldr	r2, [sp, #32]
 8008058:	2a01      	cmp	r2, #1
 800805a:	bfac      	ite	ge
 800805c:	189b      	addge	r3, r3, r2
 800805e:	3301      	addlt	r3, #1
 8008060:	461d      	mov	r5, r3
 8008062:	f04f 0b00 	mov.w	fp, #0
 8008066:	4621      	mov	r1, r4
 8008068:	2201      	movs	r2, #1
 800806a:	4648      	mov	r0, r9
 800806c:	f001 f8ea 	bl	8009244 <__lshift>
 8008070:	9906      	ldr	r1, [sp, #24]
 8008072:	900a      	str	r0, [sp, #40]	; 0x28
 8008074:	f001 f93e 	bl	80092f4 <__mcmp>
 8008078:	2800      	cmp	r0, #0
 800807a:	f340 8305 	ble.w	8008688 <_dtoa_r+0xb58>
 800807e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008082:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008084:	1e6b      	subs	r3, r5, #1
 8008086:	e004      	b.n	8008092 <_dtoa_r+0x562>
 8008088:	428b      	cmp	r3, r1
 800808a:	f000 8274 	beq.w	8008576 <_dtoa_r+0xa46>
 800808e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008092:	2a39      	cmp	r2, #57	; 0x39
 8008094:	f103 0501 	add.w	r5, r3, #1
 8008098:	d0f6      	beq.n	8008088 <_dtoa_r+0x558>
 800809a:	3201      	adds	r2, #1
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	9906      	ldr	r1, [sp, #24]
 80080a0:	4648      	mov	r0, r9
 80080a2:	f000 ff45 	bl	8008f30 <_Bfree>
 80080a6:	2e00      	cmp	r6, #0
 80080a8:	f43f af0d 	beq.w	8007ec6 <_dtoa_r+0x396>
 80080ac:	f1bb 0f00 	cmp.w	fp, #0
 80080b0:	d005      	beq.n	80080be <_dtoa_r+0x58e>
 80080b2:	45b3      	cmp	fp, r6
 80080b4:	d003      	beq.n	80080be <_dtoa_r+0x58e>
 80080b6:	4659      	mov	r1, fp
 80080b8:	4648      	mov	r0, r9
 80080ba:	f000 ff39 	bl	8008f30 <_Bfree>
 80080be:	4631      	mov	r1, r6
 80080c0:	4648      	mov	r0, r9
 80080c2:	f000 ff35 	bl	8008f30 <_Bfree>
 80080c6:	e6fe      	b.n	8007ec6 <_dtoa_r+0x396>
 80080c8:	2301      	movs	r3, #1
 80080ca:	930d      	str	r3, [sp, #52]	; 0x34
 80080cc:	e5eb      	b.n	8007ca6 <_dtoa_r+0x176>
 80080ce:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80080d2:	4640      	mov	r0, r8
 80080d4:	f7f8 fa18 	bl	8000508 <__aeabi_i2d>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fea4 	bl	8000e2c <__aeabi_dcmpeq>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	f47f adca 	bne.w	8007c7e <_dtoa_r+0x14e>
 80080ea:	f108 33ff 	add.w	r3, r8, #4294967295
 80080ee:	9304      	str	r3, [sp, #16]
 80080f0:	e5c5      	b.n	8007c7e <_dtoa_r+0x14e>
 80080f2:	9a07      	ldr	r2, [sp, #28]
 80080f4:	9b04      	ldr	r3, [sp, #16]
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	425b      	negs	r3, r3
 80080fa:	9306      	str	r3, [sp, #24]
 80080fc:	2300      	movs	r3, #0
 80080fe:	9207      	str	r2, [sp, #28]
 8008100:	930c      	str	r3, [sp, #48]	; 0x30
 8008102:	e5df      	b.n	8007cc4 <_dtoa_r+0x194>
 8008104:	f1c8 0300 	rsb	r3, r8, #0
 8008108:	9307      	str	r3, [sp, #28]
 800810a:	f04f 0800 	mov.w	r8, #0
 800810e:	e5d1      	b.n	8007cb4 <_dtoa_r+0x184>
 8008110:	9f06      	ldr	r7, [sp, #24]
 8008112:	9d07      	ldr	r5, [sp, #28]
 8008114:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008116:	e707      	b.n	8007f28 <_dtoa_r+0x3f8>
 8008118:	f1c3 0420 	rsb	r4, r3, #32
 800811c:	fa0a f004 	lsl.w	r0, sl, r4
 8008120:	e57a      	b.n	8007c18 <_dtoa_r+0xe8>
 8008122:	900d      	str	r0, [sp, #52]	; 0x34
 8008124:	e5bf      	b.n	8007ca6 <_dtoa_r+0x176>
 8008126:	bf00      	nop
 8008128:	40240000 	.word	0x40240000
 800812c:	2300      	movs	r3, #0
 800812e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008130:	9b04      	ldr	r3, [sp, #16]
 8008132:	9a05      	ldr	r2, [sp, #20]
 8008134:	4413      	add	r3, r2
 8008136:	930e      	str	r3, [sp, #56]	; 0x38
 8008138:	3301      	adds	r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	9308      	str	r3, [sp, #32]
 800813e:	f340 827d 	ble.w	800863c <_dtoa_r+0xb0c>
 8008142:	9c08      	ldr	r4, [sp, #32]
 8008144:	4625      	mov	r5, r4
 8008146:	2100      	movs	r1, #0
 8008148:	2d17      	cmp	r5, #23
 800814a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800814e:	d90b      	bls.n	8008168 <_dtoa_r+0x638>
 8008150:	2201      	movs	r2, #1
 8008152:	2304      	movs	r3, #4
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	f103 0014 	add.w	r0, r3, #20
 800815a:	42a8      	cmp	r0, r5
 800815c:	4611      	mov	r1, r2
 800815e:	f102 0201 	add.w	r2, r2, #1
 8008162:	d9f7      	bls.n	8008154 <_dtoa_r+0x624>
 8008164:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8008168:	4648      	mov	r0, r9
 800816a:	f000 febb 	bl	8008ee4 <_Balloc>
 800816e:	2c0e      	cmp	r4, #14
 8008170:	9009      	str	r0, [sp, #36]	; 0x24
 8008172:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8008176:	f63f ade5 	bhi.w	8007d44 <_dtoa_r+0x214>
 800817a:	2e00      	cmp	r6, #0
 800817c:	f43f ade2 	beq.w	8007d44 <_dtoa_r+0x214>
 8008180:	9904      	ldr	r1, [sp, #16]
 8008182:	2900      	cmp	r1, #0
 8008184:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8008188:	f340 829a 	ble.w	80086c0 <_dtoa_r+0xb90>
 800818c:	4b90      	ldr	r3, [pc, #576]	; (80083d0 <_dtoa_r+0x8a0>)
 800818e:	f001 020f 	and.w	r2, r1, #15
 8008192:	110e      	asrs	r6, r1, #4
 8008194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008198:	06f0      	lsls	r0, r6, #27
 800819a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800819e:	f140 8246 	bpl.w	800862e <_dtoa_r+0xafe>
 80081a2:	4b8c      	ldr	r3, [pc, #560]	; (80083d4 <_dtoa_r+0x8a4>)
 80081a4:	4650      	mov	r0, sl
 80081a6:	4659      	mov	r1, fp
 80081a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081ac:	f7f8 fb3c 	bl	8000828 <__aeabi_ddiv>
 80081b0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80081b4:	f006 060f 	and.w	r6, r6, #15
 80081b8:	f04f 0a03 	mov.w	sl, #3
 80081bc:	b186      	cbz	r6, 80081e0 <_dtoa_r+0x6b0>
 80081be:	4f85      	ldr	r7, [pc, #532]	; (80083d4 <_dtoa_r+0x8a4>)
 80081c0:	07f1      	lsls	r1, r6, #31
 80081c2:	d509      	bpl.n	80081d8 <_dtoa_r+0x6a8>
 80081c4:	4620      	mov	r0, r4
 80081c6:	4629      	mov	r1, r5
 80081c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081cc:	f7f8 fa02 	bl	80005d4 <__aeabi_dmul>
 80081d0:	f10a 0a01 	add.w	sl, sl, #1
 80081d4:	4604      	mov	r4, r0
 80081d6:	460d      	mov	r5, r1
 80081d8:	1076      	asrs	r6, r6, #1
 80081da:	f107 0708 	add.w	r7, r7, #8
 80081de:	d1ef      	bne.n	80081c0 <_dtoa_r+0x690>
 80081e0:	4622      	mov	r2, r4
 80081e2:	462b      	mov	r3, r5
 80081e4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80081e8:	f7f8 fb1e 	bl	8000828 <__aeabi_ddiv>
 80081ec:	4606      	mov	r6, r0
 80081ee:	460f      	mov	r7, r1
 80081f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f2:	b143      	cbz	r3, 8008206 <_dtoa_r+0x6d6>
 80081f4:	2200      	movs	r2, #0
 80081f6:	4b78      	ldr	r3, [pc, #480]	; (80083d8 <_dtoa_r+0x8a8>)
 80081f8:	4630      	mov	r0, r6
 80081fa:	4639      	mov	r1, r7
 80081fc:	f7f8 fe20 	bl	8000e40 <__aeabi_dcmplt>
 8008200:	2800      	cmp	r0, #0
 8008202:	f040 831a 	bne.w	800883a <_dtoa_r+0xd0a>
 8008206:	4650      	mov	r0, sl
 8008208:	f7f8 f97e 	bl	8000508 <__aeabi_i2d>
 800820c:	4632      	mov	r2, r6
 800820e:	463b      	mov	r3, r7
 8008210:	f7f8 f9e0 	bl	80005d4 <__aeabi_dmul>
 8008214:	4b71      	ldr	r3, [pc, #452]	; (80083dc <_dtoa_r+0x8ac>)
 8008216:	2200      	movs	r2, #0
 8008218:	f7f8 f82a 	bl	8000270 <__adddf3>
 800821c:	9b08      	ldr	r3, [sp, #32]
 800821e:	4604      	mov	r4, r0
 8008220:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 81db 	beq.w	80085e0 <_dtoa_r+0xab0>
 800822a:	9b04      	ldr	r3, [sp, #16]
 800822c:	9316      	str	r3, [sp, #88]	; 0x58
 800822e:	9b08      	ldr	r3, [sp, #32]
 8008230:	9312      	str	r3, [sp, #72]	; 0x48
 8008232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8294 	beq.w	8008762 <_dtoa_r+0xc32>
 800823a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800823c:	4b64      	ldr	r3, [pc, #400]	; (80083d0 <_dtoa_r+0x8a0>)
 800823e:	4968      	ldr	r1, [pc, #416]	; (80083e0 <_dtoa_r+0x8b0>)
 8008240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008244:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008248:	2000      	movs	r0, #0
 800824a:	f7f8 faed 	bl	8000828 <__aeabi_ddiv>
 800824e:	4622      	mov	r2, r4
 8008250:	462b      	mov	r3, r5
 8008252:	f7f8 f80b 	bl	800026c <__aeabi_dsub>
 8008256:	4682      	mov	sl, r0
 8008258:	468b      	mov	fp, r1
 800825a:	4630      	mov	r0, r6
 800825c:	4639      	mov	r1, r7
 800825e:	f7f8 fe17 	bl	8000e90 <__aeabi_d2iz>
 8008262:	4604      	mov	r4, r0
 8008264:	f7f8 f950 	bl	8000508 <__aeabi_i2d>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4630      	mov	r0, r6
 800826e:	4639      	mov	r1, r7
 8008270:	f7f7 fffc 	bl	800026c <__aeabi_dsub>
 8008274:	3430      	adds	r4, #48	; 0x30
 8008276:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008278:	b2e4      	uxtb	r4, r4
 800827a:	4606      	mov	r6, r0
 800827c:	460f      	mov	r7, r1
 800827e:	702c      	strb	r4, [r5, #0]
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4650      	mov	r0, sl
 8008286:	4659      	mov	r1, fp
 8008288:	3501      	adds	r5, #1
 800828a:	f7f8 fdf7 	bl	8000e7c <__aeabi_dcmpgt>
 800828e:	2800      	cmp	r0, #0
 8008290:	d150      	bne.n	8008334 <_dtoa_r+0x804>
 8008292:	4632      	mov	r2, r6
 8008294:	463b      	mov	r3, r7
 8008296:	2000      	movs	r0, #0
 8008298:	494f      	ldr	r1, [pc, #316]	; (80083d8 <_dtoa_r+0x8a8>)
 800829a:	f7f7 ffe7 	bl	800026c <__aeabi_dsub>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4650      	mov	r0, sl
 80082a4:	4659      	mov	r1, fp
 80082a6:	f7f8 fde9 	bl	8000e7c <__aeabi_dcmpgt>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	f040 8308 	bne.w	80088c0 <_dtoa_r+0xd90>
 80082b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082b2:	2a01      	cmp	r2, #1
 80082b4:	f340 81f7 	ble.w	80086a6 <_dtoa_r+0xb76>
 80082b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082bc:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 80082c0:	4413      	add	r3, r2
 80082c2:	4698      	mov	r8, r3
 80082c4:	e00d      	b.n	80082e2 <_dtoa_r+0x7b2>
 80082c6:	2000      	movs	r0, #0
 80082c8:	4943      	ldr	r1, [pc, #268]	; (80083d8 <_dtoa_r+0x8a8>)
 80082ca:	f7f7 ffcf 	bl	800026c <__aeabi_dsub>
 80082ce:	4652      	mov	r2, sl
 80082d0:	465b      	mov	r3, fp
 80082d2:	f7f8 fdb5 	bl	8000e40 <__aeabi_dcmplt>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f040 82f2 	bne.w	80088c0 <_dtoa_r+0xd90>
 80082dc:	4545      	cmp	r5, r8
 80082de:	f000 81e0 	beq.w	80086a2 <_dtoa_r+0xb72>
 80082e2:	4650      	mov	r0, sl
 80082e4:	4659      	mov	r1, fp
 80082e6:	2200      	movs	r2, #0
 80082e8:	4b3e      	ldr	r3, [pc, #248]	; (80083e4 <_dtoa_r+0x8b4>)
 80082ea:	f7f8 f973 	bl	80005d4 <__aeabi_dmul>
 80082ee:	2200      	movs	r2, #0
 80082f0:	4b3c      	ldr	r3, [pc, #240]	; (80083e4 <_dtoa_r+0x8b4>)
 80082f2:	4682      	mov	sl, r0
 80082f4:	468b      	mov	fp, r1
 80082f6:	4630      	mov	r0, r6
 80082f8:	4639      	mov	r1, r7
 80082fa:	f7f8 f96b 	bl	80005d4 <__aeabi_dmul>
 80082fe:	460f      	mov	r7, r1
 8008300:	4606      	mov	r6, r0
 8008302:	f7f8 fdc5 	bl	8000e90 <__aeabi_d2iz>
 8008306:	4604      	mov	r4, r0
 8008308:	f7f8 f8fe 	bl	8000508 <__aeabi_i2d>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4630      	mov	r0, r6
 8008312:	4639      	mov	r1, r7
 8008314:	f7f7 ffaa 	bl	800026c <__aeabi_dsub>
 8008318:	3430      	adds	r4, #48	; 0x30
 800831a:	b2e4      	uxtb	r4, r4
 800831c:	4652      	mov	r2, sl
 800831e:	465b      	mov	r3, fp
 8008320:	f805 4b01 	strb.w	r4, [r5], #1
 8008324:	4606      	mov	r6, r0
 8008326:	460f      	mov	r7, r1
 8008328:	f7f8 fd8a 	bl	8000e40 <__aeabi_dcmplt>
 800832c:	4632      	mov	r2, r6
 800832e:	463b      	mov	r3, r7
 8008330:	2800      	cmp	r0, #0
 8008332:	d0c8      	beq.n	80082c6 <_dtoa_r+0x796>
 8008334:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008336:	9304      	str	r3, [sp, #16]
 8008338:	e5c5      	b.n	8007ec6 <_dtoa_r+0x396>
 800833a:	2300      	movs	r3, #0
 800833c:	930b      	str	r3, [sp, #44]	; 0x2c
 800833e:	9b05      	ldr	r3, [sp, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	f340 8180 	ble.w	8008646 <_dtoa_r+0xb16>
 8008346:	461d      	mov	r5, r3
 8008348:	461c      	mov	r4, r3
 800834a:	930e      	str	r3, [sp, #56]	; 0x38
 800834c:	9308      	str	r3, [sp, #32]
 800834e:	e6fa      	b.n	8008146 <_dtoa_r+0x616>
 8008350:	2301      	movs	r3, #1
 8008352:	930b      	str	r3, [sp, #44]	; 0x2c
 8008354:	e7f3      	b.n	800833e <_dtoa_r+0x80e>
 8008356:	940a      	str	r4, [sp, #40]	; 0x28
 8008358:	9a06      	ldr	r2, [sp, #24]
 800835a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800835c:	4648      	mov	r0, r9
 800835e:	f000 ff21 	bl	80091a4 <__pow5mult>
 8008362:	4604      	mov	r4, r0
 8008364:	e60e      	b.n	8007f84 <_dtoa_r+0x454>
 8008366:	9b08      	ldr	r3, [sp, #32]
 8008368:	2b00      	cmp	r3, #0
 800836a:	f73f acfe 	bgt.w	8007d6a <_dtoa_r+0x23a>
 800836e:	f040 814f 	bne.w	8008610 <_dtoa_r+0xae0>
 8008372:	2200      	movs	r2, #0
 8008374:	4b1c      	ldr	r3, [pc, #112]	; (80083e8 <_dtoa_r+0x8b8>)
 8008376:	e9dd 0100 	ldrd	r0, r1, [sp]
 800837a:	f7f8 f92b 	bl	80005d4 <__aeabi_dmul>
 800837e:	465b      	mov	r3, fp
 8008380:	4652      	mov	r2, sl
 8008382:	f7f8 fd71 	bl	8000e68 <__aeabi_dcmpge>
 8008386:	9b08      	ldr	r3, [sp, #32]
 8008388:	9306      	str	r3, [sp, #24]
 800838a:	461e      	mov	r6, r3
 800838c:	2800      	cmp	r0, #0
 800838e:	f000 80ea 	beq.w	8008566 <_dtoa_r+0xa36>
 8008392:	9b05      	ldr	r3, [sp, #20]
 8008394:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008396:	43db      	mvns	r3, r3
 8008398:	9304      	str	r3, [sp, #16]
 800839a:	9906      	ldr	r1, [sp, #24]
 800839c:	4648      	mov	r0, r9
 800839e:	f000 fdc7 	bl	8008f30 <_Bfree>
 80083a2:	2e00      	cmp	r6, #0
 80083a4:	f43f ad8f 	beq.w	8007ec6 <_dtoa_r+0x396>
 80083a8:	e689      	b.n	80080be <_dtoa_r+0x58e>
 80083aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083ac:	2a00      	cmp	r2, #0
 80083ae:	f000 8238 	beq.w	8008822 <_dtoa_r+0xcf2>
 80083b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083b6:	9f06      	ldr	r7, [sp, #24]
 80083b8:	9d07      	ldr	r5, [sp, #28]
 80083ba:	e5ac      	b.n	8007f16 <_dtoa_r+0x3e6>
 80083bc:	201c      	movs	r0, #28
 80083be:	e60a      	b.n	8007fd6 <_dtoa_r+0x4a6>
 80083c0:	9b00      	ldr	r3, [sp, #0]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	f340 8280 	ble.w	80088c8 <_dtoa_r+0xd98>
 80083c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80083ca:	2001      	movs	r0, #1
 80083cc:	e5f7      	b.n	8007fbe <_dtoa_r+0x48e>
 80083ce:	bf00      	nop
 80083d0:	08009ec0 	.word	0x08009ec0
 80083d4:	08009f88 	.word	0x08009f88
 80083d8:	3ff00000 	.word	0x3ff00000
 80083dc:	401c0000 	.word	0x401c0000
 80083e0:	3fe00000 	.word	0x3fe00000
 80083e4:	40240000 	.word	0x40240000
 80083e8:	40140000 	.word	0x40140000
 80083ec:	4631      	mov	r1, r6
 80083ee:	2300      	movs	r3, #0
 80083f0:	220a      	movs	r2, #10
 80083f2:	4648      	mov	r0, r9
 80083f4:	f000 fda6 	bl	8008f44 <__multadd>
 80083f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	4606      	mov	r6, r0
 80083fe:	f340 828d 	ble.w	800891c <_dtoa_r+0xdec>
 8008402:	9308      	str	r3, [sp, #32]
 8008404:	2d00      	cmp	r5, #0
 8008406:	dd05      	ble.n	8008414 <_dtoa_r+0x8e4>
 8008408:	4631      	mov	r1, r6
 800840a:	462a      	mov	r2, r5
 800840c:	4648      	mov	r0, r9
 800840e:	f000 ff19 	bl	8009244 <__lshift>
 8008412:	4606      	mov	r6, r0
 8008414:	2f00      	cmp	r7, #0
 8008416:	f040 817c 	bne.w	8008712 <_dtoa_r+0xbe2>
 800841a:	46b0      	mov	r8, r6
 800841c:	9b08      	ldr	r3, [sp, #32]
 800841e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008420:	3b01      	subs	r3, #1
 8008422:	18d3      	adds	r3, r2, r3
 8008424:	9308      	str	r3, [sp, #32]
 8008426:	f00a 0301 	and.w	r3, sl, #1
 800842a:	930a      	str	r3, [sp, #40]	; 0x28
 800842c:	4617      	mov	r7, r2
 800842e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8008432:	4620      	mov	r0, r4
 8008434:	4659      	mov	r1, fp
 8008436:	f7ff fae5 	bl	8007a04 <quorem>
 800843a:	4631      	mov	r1, r6
 800843c:	4605      	mov	r5, r0
 800843e:	4620      	mov	r0, r4
 8008440:	f000 ff58 	bl	80092f4 <__mcmp>
 8008444:	4642      	mov	r2, r8
 8008446:	4659      	mov	r1, fp
 8008448:	4682      	mov	sl, r0
 800844a:	4648      	mov	r0, r9
 800844c:	f000 ff74 	bl	8009338 <__mdiff>
 8008450:	68c2      	ldr	r2, [r0, #12]
 8008452:	4683      	mov	fp, r0
 8008454:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8008458:	2a00      	cmp	r2, #0
 800845a:	d149      	bne.n	80084f0 <_dtoa_r+0x9c0>
 800845c:	4601      	mov	r1, r0
 800845e:	4620      	mov	r0, r4
 8008460:	9307      	str	r3, [sp, #28]
 8008462:	f000 ff47 	bl	80092f4 <__mcmp>
 8008466:	4659      	mov	r1, fp
 8008468:	9005      	str	r0, [sp, #20]
 800846a:	4648      	mov	r0, r9
 800846c:	f000 fd60 	bl	8008f30 <_Bfree>
 8008470:	9a05      	ldr	r2, [sp, #20]
 8008472:	9b07      	ldr	r3, [sp, #28]
 8008474:	b92a      	cbnz	r2, 8008482 <_dtoa_r+0x952>
 8008476:	9900      	ldr	r1, [sp, #0]
 8008478:	b919      	cbnz	r1, 8008482 <_dtoa_r+0x952>
 800847a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800847c:	2900      	cmp	r1, #0
 800847e:	f000 8235 	beq.w	80088ec <_dtoa_r+0xdbc>
 8008482:	f1ba 0f00 	cmp.w	sl, #0
 8008486:	f2c0 80e3 	blt.w	8008650 <_dtoa_r+0xb20>
 800848a:	d105      	bne.n	8008498 <_dtoa_r+0x968>
 800848c:	9900      	ldr	r1, [sp, #0]
 800848e:	b919      	cbnz	r1, 8008498 <_dtoa_r+0x968>
 8008490:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008492:	2900      	cmp	r1, #0
 8008494:	f000 80dc 	beq.w	8008650 <_dtoa_r+0xb20>
 8008498:	2a00      	cmp	r2, #0
 800849a:	f300 814e 	bgt.w	800873a <_dtoa_r+0xc0a>
 800849e:	9a08      	ldr	r2, [sp, #32]
 80084a0:	703b      	strb	r3, [r7, #0]
 80084a2:	f107 0a01 	add.w	sl, r7, #1
 80084a6:	4297      	cmp	r7, r2
 80084a8:	4655      	mov	r5, sl
 80084aa:	f000 8152 	beq.w	8008752 <_dtoa_r+0xc22>
 80084ae:	4621      	mov	r1, r4
 80084b0:	2300      	movs	r3, #0
 80084b2:	220a      	movs	r2, #10
 80084b4:	4648      	mov	r0, r9
 80084b6:	f000 fd45 	bl	8008f44 <__multadd>
 80084ba:	4546      	cmp	r6, r8
 80084bc:	4604      	mov	r4, r0
 80084be:	4631      	mov	r1, r6
 80084c0:	f04f 0300 	mov.w	r3, #0
 80084c4:	f04f 020a 	mov.w	r2, #10
 80084c8:	4648      	mov	r0, r9
 80084ca:	d00b      	beq.n	80084e4 <_dtoa_r+0x9b4>
 80084cc:	f000 fd3a 	bl	8008f44 <__multadd>
 80084d0:	4641      	mov	r1, r8
 80084d2:	4606      	mov	r6, r0
 80084d4:	2300      	movs	r3, #0
 80084d6:	220a      	movs	r2, #10
 80084d8:	4648      	mov	r0, r9
 80084da:	f000 fd33 	bl	8008f44 <__multadd>
 80084de:	4657      	mov	r7, sl
 80084e0:	4680      	mov	r8, r0
 80084e2:	e7a4      	b.n	800842e <_dtoa_r+0x8fe>
 80084e4:	f000 fd2e 	bl	8008f44 <__multadd>
 80084e8:	4657      	mov	r7, sl
 80084ea:	4606      	mov	r6, r0
 80084ec:	4680      	mov	r8, r0
 80084ee:	e79e      	b.n	800842e <_dtoa_r+0x8fe>
 80084f0:	4601      	mov	r1, r0
 80084f2:	4648      	mov	r0, r9
 80084f4:	9305      	str	r3, [sp, #20]
 80084f6:	f000 fd1b 	bl	8008f30 <_Bfree>
 80084fa:	2201      	movs	r2, #1
 80084fc:	9b05      	ldr	r3, [sp, #20]
 80084fe:	e7c0      	b.n	8008482 <_dtoa_r+0x952>
 8008500:	9906      	ldr	r1, [sp, #24]
 8008502:	4620      	mov	r0, r4
 8008504:	f000 fef6 	bl	80092f4 <__mcmp>
 8008508:	2800      	cmp	r0, #0
 800850a:	f6bf ad7f 	bge.w	800800c <_dtoa_r+0x4dc>
 800850e:	4621      	mov	r1, r4
 8008510:	9c04      	ldr	r4, [sp, #16]
 8008512:	2300      	movs	r3, #0
 8008514:	3c01      	subs	r4, #1
 8008516:	220a      	movs	r2, #10
 8008518:	4648      	mov	r0, r9
 800851a:	9404      	str	r4, [sp, #16]
 800851c:	f000 fd12 	bl	8008f44 <__multadd>
 8008520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008522:	4604      	mov	r4, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	f47f af61 	bne.w	80083ec <_dtoa_r+0x8bc>
 800852a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800852c:	2b00      	cmp	r3, #0
 800852e:	f340 81ed 	ble.w	800890c <_dtoa_r+0xddc>
 8008532:	9308      	str	r3, [sp, #32]
 8008534:	e572      	b.n	800801c <_dtoa_r+0x4ec>
 8008536:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008538:	e524      	b.n	8007f84 <_dtoa_r+0x454>
 800853a:	9b00      	ldr	r3, [sp, #0]
 800853c:	2b02      	cmp	r3, #2
 800853e:	f77f ad69 	ble.w	8008014 <_dtoa_r+0x4e4>
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f040 819d 	bne.w	8008884 <_dtoa_r+0xd54>
 800854a:	9906      	ldr	r1, [sp, #24]
 800854c:	2205      	movs	r2, #5
 800854e:	4648      	mov	r0, r9
 8008550:	f000 fcf8 	bl	8008f44 <__multadd>
 8008554:	4601      	mov	r1, r0
 8008556:	9006      	str	r0, [sp, #24]
 8008558:	4620      	mov	r0, r4
 800855a:	f000 fecb 	bl	80092f4 <__mcmp>
 800855e:	2800      	cmp	r0, #0
 8008560:	940a      	str	r4, [sp, #40]	; 0x28
 8008562:	f77f af16 	ble.w	8008392 <_dtoa_r+0x862>
 8008566:	9a04      	ldr	r2, [sp, #16]
 8008568:	9909      	ldr	r1, [sp, #36]	; 0x24
 800856a:	2331      	movs	r3, #49	; 0x31
 800856c:	3201      	adds	r2, #1
 800856e:	9204      	str	r2, [sp, #16]
 8008570:	700b      	strb	r3, [r1, #0]
 8008572:	1c4d      	adds	r5, r1, #1
 8008574:	e711      	b.n	800839a <_dtoa_r+0x86a>
 8008576:	9a04      	ldr	r2, [sp, #16]
 8008578:	3201      	adds	r2, #1
 800857a:	9204      	str	r2, [sp, #16]
 800857c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857e:	2331      	movs	r3, #49	; 0x31
 8008580:	7013      	strb	r3, [r2, #0]
 8008582:	e58c      	b.n	800809e <_dtoa_r+0x56e>
 8008584:	2301      	movs	r3, #1
 8008586:	930b      	str	r3, [sp, #44]	; 0x2c
 8008588:	e5d2      	b.n	8008130 <_dtoa_r+0x600>
 800858a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800858e:	e49a      	b.n	8007ec6 <_dtoa_r+0x396>
 8008590:	f1ba 0f00 	cmp.w	sl, #0
 8008594:	f47f ad09 	bne.w	8007faa <_dtoa_r+0x47a>
 8008598:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800859c:	2b00      	cmp	r3, #0
 800859e:	f040 813e 	bne.w	800881e <_dtoa_r+0xcee>
 80085a2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80085a6:	0d3f      	lsrs	r7, r7, #20
 80085a8:	053f      	lsls	r7, r7, #20
 80085aa:	b12f      	cbz	r7, 80085b8 <_dtoa_r+0xa88>
 80085ac:	9b07      	ldr	r3, [sp, #28]
 80085ae:	3301      	adds	r3, #1
 80085b0:	9307      	str	r3, [sp, #28]
 80085b2:	f108 0801 	add.w	r8, r8, #1
 80085b6:	2701      	movs	r7, #1
 80085b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ba:	2001      	movs	r0, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f43f acfe 	beq.w	8007fbe <_dtoa_r+0x48e>
 80085c2:	e4f3      	b.n	8007fac <_dtoa_r+0x47c>
 80085c4:	4650      	mov	r0, sl
 80085c6:	f7f7 ff9f 	bl	8000508 <__aeabi_i2d>
 80085ca:	4632      	mov	r2, r6
 80085cc:	463b      	mov	r3, r7
 80085ce:	f7f8 f801 	bl	80005d4 <__aeabi_dmul>
 80085d2:	2200      	movs	r2, #0
 80085d4:	4bbf      	ldr	r3, [pc, #764]	; (80088d4 <_dtoa_r+0xda4>)
 80085d6:	f7f7 fe4b 	bl	8000270 <__adddf3>
 80085da:	4604      	mov	r4, r0
 80085dc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	2200      	movs	r2, #0
 80085e6:	4bbc      	ldr	r3, [pc, #752]	; (80088d8 <_dtoa_r+0xda8>)
 80085e8:	f7f7 fe40 	bl	800026c <__aeabi_dsub>
 80085ec:	4622      	mov	r2, r4
 80085ee:	462b      	mov	r3, r5
 80085f0:	4606      	mov	r6, r0
 80085f2:	460f      	mov	r7, r1
 80085f4:	f7f8 fc42 	bl	8000e7c <__aeabi_dcmpgt>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	f040 80ae 	bne.w	800875a <_dtoa_r+0xc2a>
 80085fe:	4622      	mov	r2, r4
 8008600:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f8 fc1a 	bl	8000e40 <__aeabi_dcmplt>
 800860c:	2800      	cmp	r0, #0
 800860e:	d04a      	beq.n	80086a6 <_dtoa_r+0xb76>
 8008610:	2300      	movs	r3, #0
 8008612:	9306      	str	r3, [sp, #24]
 8008614:	461e      	mov	r6, r3
 8008616:	e6bc      	b.n	8008392 <_dtoa_r+0x862>
 8008618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800861a:	f7ff bac2 	b.w	8007ba2 <_dtoa_r+0x72>
 800861e:	9b06      	ldr	r3, [sp, #24]
 8008620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008622:	9706      	str	r7, [sp, #24]
 8008624:	1afb      	subs	r3, r7, r3
 8008626:	441a      	add	r2, r3
 8008628:	920c      	str	r2, [sp, #48]	; 0x30
 800862a:	2700      	movs	r7, #0
 800862c:	e46d      	b.n	8007f0a <_dtoa_r+0x3da>
 800862e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8008632:	f04f 0a02 	mov.w	sl, #2
 8008636:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800863a:	e5bf      	b.n	80081bc <_dtoa_r+0x68c>
 800863c:	461c      	mov	r4, r3
 800863e:	2100      	movs	r1, #0
 8008640:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8008644:	e590      	b.n	8008168 <_dtoa_r+0x638>
 8008646:	2401      	movs	r4, #1
 8008648:	940e      	str	r4, [sp, #56]	; 0x38
 800864a:	9408      	str	r4, [sp, #32]
 800864c:	9405      	str	r4, [sp, #20]
 800864e:	e7f6      	b.n	800863e <_dtoa_r+0xb0e>
 8008650:	2a00      	cmp	r2, #0
 8008652:	469a      	mov	sl, r3
 8008654:	dd11      	ble.n	800867a <_dtoa_r+0xb4a>
 8008656:	4621      	mov	r1, r4
 8008658:	2201      	movs	r2, #1
 800865a:	4648      	mov	r0, r9
 800865c:	f000 fdf2 	bl	8009244 <__lshift>
 8008660:	9906      	ldr	r1, [sp, #24]
 8008662:	4604      	mov	r4, r0
 8008664:	f000 fe46 	bl	80092f4 <__mcmp>
 8008668:	2800      	cmp	r0, #0
 800866a:	f340 8148 	ble.w	80088fe <_dtoa_r+0xdce>
 800866e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008672:	f000 8109 	beq.w	8008888 <_dtoa_r+0xd58>
 8008676:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800867a:	46b3      	mov	fp, r6
 800867c:	f887 a000 	strb.w	sl, [r7]
 8008680:	1c7d      	adds	r5, r7, #1
 8008682:	4646      	mov	r6, r8
 8008684:	940a      	str	r4, [sp, #40]	; 0x28
 8008686:	e50a      	b.n	800809e <_dtoa_r+0x56e>
 8008688:	d104      	bne.n	8008694 <_dtoa_r+0xb64>
 800868a:	f01a 0f01 	tst.w	sl, #1
 800868e:	d001      	beq.n	8008694 <_dtoa_r+0xb64>
 8008690:	e4f5      	b.n	800807e <_dtoa_r+0x54e>
 8008692:	4615      	mov	r5, r2
 8008694:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008698:	2b30      	cmp	r3, #48	; 0x30
 800869a:	f105 32ff 	add.w	r2, r5, #4294967295
 800869e:	d0f8      	beq.n	8008692 <_dtoa_r+0xb62>
 80086a0:	e4fd      	b.n	800809e <_dtoa_r+0x56e>
 80086a2:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 80086a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 80086aa:	f7ff bb4b 	b.w	8007d44 <_dtoa_r+0x214>
 80086ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086b0:	2230      	movs	r2, #48	; 0x30
 80086b2:	700a      	strb	r2, [r1, #0]
 80086b4:	9a04      	ldr	r2, [sp, #16]
 80086b6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80086ba:	3201      	adds	r2, #1
 80086bc:	9204      	str	r2, [sp, #16]
 80086be:	e400      	b.n	8007ec2 <_dtoa_r+0x392>
 80086c0:	9b04      	ldr	r3, [sp, #16]
 80086c2:	425c      	negs	r4, r3
 80086c4:	2c00      	cmp	r4, #0
 80086c6:	f000 80b3 	beq.w	8008830 <_dtoa_r+0xd00>
 80086ca:	4b84      	ldr	r3, [pc, #528]	; (80088dc <_dtoa_r+0xdac>)
 80086cc:	f004 020f 	and.w	r2, r4, #15
 80086d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086dc:	f7f7 ff7a 	bl	80005d4 <__aeabi_dmul>
 80086e0:	1124      	asrs	r4, r4, #4
 80086e2:	4606      	mov	r6, r0
 80086e4:	460f      	mov	r7, r1
 80086e6:	f000 8116 	beq.w	8008916 <_dtoa_r+0xde6>
 80086ea:	4d7d      	ldr	r5, [pc, #500]	; (80088e0 <_dtoa_r+0xdb0>)
 80086ec:	f04f 0a02 	mov.w	sl, #2
 80086f0:	07e2      	lsls	r2, r4, #31
 80086f2:	d509      	bpl.n	8008708 <_dtoa_r+0xbd8>
 80086f4:	4630      	mov	r0, r6
 80086f6:	4639      	mov	r1, r7
 80086f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086fc:	f7f7 ff6a 	bl	80005d4 <__aeabi_dmul>
 8008700:	f10a 0a01 	add.w	sl, sl, #1
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	1064      	asrs	r4, r4, #1
 800870a:	f105 0508 	add.w	r5, r5, #8
 800870e:	d1ef      	bne.n	80086f0 <_dtoa_r+0xbc0>
 8008710:	e56e      	b.n	80081f0 <_dtoa_r+0x6c0>
 8008712:	6871      	ldr	r1, [r6, #4]
 8008714:	4648      	mov	r0, r9
 8008716:	f000 fbe5 	bl	8008ee4 <_Balloc>
 800871a:	6933      	ldr	r3, [r6, #16]
 800871c:	1c9a      	adds	r2, r3, #2
 800871e:	4605      	mov	r5, r0
 8008720:	0092      	lsls	r2, r2, #2
 8008722:	f106 010c 	add.w	r1, r6, #12
 8008726:	300c      	adds	r0, #12
 8008728:	f7f8 f9b6 	bl	8000a98 <memcpy>
 800872c:	4629      	mov	r1, r5
 800872e:	2201      	movs	r2, #1
 8008730:	4648      	mov	r0, r9
 8008732:	f000 fd87 	bl	8009244 <__lshift>
 8008736:	4680      	mov	r8, r0
 8008738:	e670      	b.n	800841c <_dtoa_r+0x8ec>
 800873a:	2b39      	cmp	r3, #57	; 0x39
 800873c:	f000 80a4 	beq.w	8008888 <_dtoa_r+0xd58>
 8008740:	f103 0a01 	add.w	sl, r3, #1
 8008744:	46b3      	mov	fp, r6
 8008746:	f887 a000 	strb.w	sl, [r7]
 800874a:	1c7d      	adds	r5, r7, #1
 800874c:	4646      	mov	r6, r8
 800874e:	940a      	str	r4, [sp, #40]	; 0x28
 8008750:	e4a5      	b.n	800809e <_dtoa_r+0x56e>
 8008752:	46b3      	mov	fp, r6
 8008754:	469a      	mov	sl, r3
 8008756:	4646      	mov	r6, r8
 8008758:	e485      	b.n	8008066 <_dtoa_r+0x536>
 800875a:	2300      	movs	r3, #0
 800875c:	9306      	str	r3, [sp, #24]
 800875e:	461e      	mov	r6, r3
 8008760:	e701      	b.n	8008566 <_dtoa_r+0xa36>
 8008762:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008764:	495d      	ldr	r1, [pc, #372]	; (80088dc <_dtoa_r+0xdac>)
 8008766:	1e5a      	subs	r2, r3, #1
 8008768:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800876c:	462b      	mov	r3, r5
 800876e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008774:	4622      	mov	r2, r4
 8008776:	f7f7 ff2d 	bl	80005d4 <__aeabi_dmul>
 800877a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800877e:	4639      	mov	r1, r7
 8008780:	4630      	mov	r0, r6
 8008782:	f7f8 fb85 	bl	8000e90 <__aeabi_d2iz>
 8008786:	4604      	mov	r4, r0
 8008788:	f7f7 febe 	bl	8000508 <__aeabi_i2d>
 800878c:	460b      	mov	r3, r1
 800878e:	4602      	mov	r2, r0
 8008790:	4639      	mov	r1, r7
 8008792:	4630      	mov	r0, r6
 8008794:	f7f7 fd6a 	bl	800026c <__aeabi_dsub>
 8008798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800879a:	460f      	mov	r7, r1
 800879c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800879e:	3430      	adds	r4, #48	; 0x30
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	4606      	mov	r6, r0
 80087a4:	700c      	strb	r4, [r1, #0]
 80087a6:	f101 0501 	add.w	r5, r1, #1
 80087aa:	d020      	beq.n	80087ee <_dtoa_r+0xcbe>
 80087ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087b0:	4413      	add	r3, r2
 80087b2:	469a      	mov	sl, r3
 80087b4:	46ab      	mov	fp, r5
 80087b6:	2200      	movs	r2, #0
 80087b8:	4b4a      	ldr	r3, [pc, #296]	; (80088e4 <_dtoa_r+0xdb4>)
 80087ba:	4630      	mov	r0, r6
 80087bc:	4639      	mov	r1, r7
 80087be:	f7f7 ff09 	bl	80005d4 <__aeabi_dmul>
 80087c2:	460f      	mov	r7, r1
 80087c4:	4606      	mov	r6, r0
 80087c6:	f7f8 fb63 	bl	8000e90 <__aeabi_d2iz>
 80087ca:	4604      	mov	r4, r0
 80087cc:	f7f7 fe9c 	bl	8000508 <__aeabi_i2d>
 80087d0:	3430      	adds	r4, #48	; 0x30
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4630      	mov	r0, r6
 80087d8:	4639      	mov	r1, r7
 80087da:	f7f7 fd47 	bl	800026c <__aeabi_dsub>
 80087de:	f80b 4b01 	strb.w	r4, [fp], #1
 80087e2:	45da      	cmp	sl, fp
 80087e4:	4606      	mov	r6, r0
 80087e6:	460f      	mov	r7, r1
 80087e8:	d1e5      	bne.n	80087b6 <_dtoa_r+0xc86>
 80087ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087ec:	441d      	add	r5, r3
 80087ee:	2200      	movs	r2, #0
 80087f0:	4b3d      	ldr	r3, [pc, #244]	; (80088e8 <_dtoa_r+0xdb8>)
 80087f2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80087f6:	f7f7 fd3b 	bl	8000270 <__adddf3>
 80087fa:	4632      	mov	r2, r6
 80087fc:	463b      	mov	r3, r7
 80087fe:	f7f8 fb1f 	bl	8000e40 <__aeabi_dcmplt>
 8008802:	2800      	cmp	r0, #0
 8008804:	d048      	beq.n	8008898 <_dtoa_r+0xd68>
 8008806:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800880e:	f7ff bb4c 	b.w	8007eaa <_dtoa_r+0x37a>
 8008812:	9b07      	ldr	r3, [sp, #28]
 8008814:	9a08      	ldr	r2, [sp, #32]
 8008816:	1a9d      	subs	r5, r3, r2
 8008818:	2300      	movs	r3, #0
 800881a:	f7ff bb7c 	b.w	8007f16 <_dtoa_r+0x3e6>
 800881e:	2700      	movs	r7, #0
 8008820:	e6ca      	b.n	80085b8 <_dtoa_r+0xa88>
 8008822:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008824:	9f06      	ldr	r7, [sp, #24]
 8008826:	9d07      	ldr	r5, [sp, #28]
 8008828:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800882c:	f7ff bb73 	b.w	8007f16 <_dtoa_r+0x3e6>
 8008830:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008834:	f04f 0a02 	mov.w	sl, #2
 8008838:	e4da      	b.n	80081f0 <_dtoa_r+0x6c0>
 800883a:	9b08      	ldr	r3, [sp, #32]
 800883c:	2b00      	cmp	r3, #0
 800883e:	f43f aec1 	beq.w	80085c4 <_dtoa_r+0xa94>
 8008842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008844:	2b00      	cmp	r3, #0
 8008846:	f77f af2e 	ble.w	80086a6 <_dtoa_r+0xb76>
 800884a:	2200      	movs	r2, #0
 800884c:	4b25      	ldr	r3, [pc, #148]	; (80088e4 <_dtoa_r+0xdb4>)
 800884e:	4630      	mov	r0, r6
 8008850:	4639      	mov	r1, r7
 8008852:	f7f7 febf 	bl	80005d4 <__aeabi_dmul>
 8008856:	4606      	mov	r6, r0
 8008858:	460f      	mov	r7, r1
 800885a:	f10a 0001 	add.w	r0, sl, #1
 800885e:	f7f7 fe53 	bl	8000508 <__aeabi_i2d>
 8008862:	4632      	mov	r2, r6
 8008864:	463b      	mov	r3, r7
 8008866:	f7f7 feb5 	bl	80005d4 <__aeabi_dmul>
 800886a:	2200      	movs	r2, #0
 800886c:	4b19      	ldr	r3, [pc, #100]	; (80088d4 <_dtoa_r+0xda4>)
 800886e:	f7f7 fcff 	bl	8000270 <__adddf3>
 8008872:	9a04      	ldr	r2, [sp, #16]
 8008874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008876:	9312      	str	r3, [sp, #72]	; 0x48
 8008878:	3a01      	subs	r2, #1
 800887a:	4604      	mov	r4, r0
 800887c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008880:	9216      	str	r2, [sp, #88]	; 0x58
 8008882:	e4d6      	b.n	8008232 <_dtoa_r+0x702>
 8008884:	940a      	str	r4, [sp, #40]	; 0x28
 8008886:	e584      	b.n	8008392 <_dtoa_r+0x862>
 8008888:	2239      	movs	r2, #57	; 0x39
 800888a:	46b3      	mov	fp, r6
 800888c:	940a      	str	r4, [sp, #40]	; 0x28
 800888e:	4646      	mov	r6, r8
 8008890:	703a      	strb	r2, [r7, #0]
 8008892:	1c7d      	adds	r5, r7, #1
 8008894:	f7ff bbf5 	b.w	8008082 <_dtoa_r+0x552>
 8008898:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800889c:	2000      	movs	r0, #0
 800889e:	4912      	ldr	r1, [pc, #72]	; (80088e8 <_dtoa_r+0xdb8>)
 80088a0:	f7f7 fce4 	bl	800026c <__aeabi_dsub>
 80088a4:	4632      	mov	r2, r6
 80088a6:	463b      	mov	r3, r7
 80088a8:	f7f8 fae8 	bl	8000e7c <__aeabi_dcmpgt>
 80088ac:	b908      	cbnz	r0, 80088b2 <_dtoa_r+0xd82>
 80088ae:	e6fa      	b.n	80086a6 <_dtoa_r+0xb76>
 80088b0:	4615      	mov	r5, r2
 80088b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088b6:	2b30      	cmp	r3, #48	; 0x30
 80088b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80088bc:	d0f8      	beq.n	80088b0 <_dtoa_r+0xd80>
 80088be:	e539      	b.n	8008334 <_dtoa_r+0x804>
 80088c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088c2:	9304      	str	r3, [sp, #16]
 80088c4:	f7ff baf1 	b.w	8007eaa <_dtoa_r+0x37a>
 80088c8:	f1ba 0f00 	cmp.w	sl, #0
 80088cc:	f47f ad7c 	bne.w	80083c8 <_dtoa_r+0x898>
 80088d0:	e662      	b.n	8008598 <_dtoa_r+0xa68>
 80088d2:	bf00      	nop
 80088d4:	401c0000 	.word	0x401c0000
 80088d8:	40140000 	.word	0x40140000
 80088dc:	08009ec0 	.word	0x08009ec0
 80088e0:	08009f88 	.word	0x08009f88
 80088e4:	40240000 	.word	0x40240000
 80088e8:	3fe00000 	.word	0x3fe00000
 80088ec:	2b39      	cmp	r3, #57	; 0x39
 80088ee:	46d3      	mov	fp, sl
 80088f0:	469a      	mov	sl, r3
 80088f2:	d0c9      	beq.n	8008888 <_dtoa_r+0xd58>
 80088f4:	f1bb 0f00 	cmp.w	fp, #0
 80088f8:	f73f aebd 	bgt.w	8008676 <_dtoa_r+0xb46>
 80088fc:	e6bd      	b.n	800867a <_dtoa_r+0xb4a>
 80088fe:	f47f aebc 	bne.w	800867a <_dtoa_r+0xb4a>
 8008902:	f01a 0f01 	tst.w	sl, #1
 8008906:	f43f aeb8 	beq.w	800867a <_dtoa_r+0xb4a>
 800890a:	e6b0      	b.n	800866e <_dtoa_r+0xb3e>
 800890c:	9b00      	ldr	r3, [sp, #0]
 800890e:	2b02      	cmp	r3, #2
 8008910:	dc25      	bgt.n	800895e <_dtoa_r+0xe2e>
 8008912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008914:	e60d      	b.n	8008532 <_dtoa_r+0xa02>
 8008916:	f04f 0a02 	mov.w	sl, #2
 800891a:	e469      	b.n	80081f0 <_dtoa_r+0x6c0>
 800891c:	9b00      	ldr	r3, [sp, #0]
 800891e:	2b02      	cmp	r3, #2
 8008920:	dc1d      	bgt.n	800895e <_dtoa_r+0xe2e>
 8008922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008924:	e56d      	b.n	8008402 <_dtoa_r+0x8d2>
 8008926:	2400      	movs	r4, #0
 8008928:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800892c:	4621      	mov	r1, r4
 800892e:	4648      	mov	r0, r9
 8008930:	f000 fad8 	bl	8008ee4 <_Balloc>
 8008934:	f04f 33ff 	mov.w	r3, #4294967295
 8008938:	9308      	str	r3, [sp, #32]
 800893a:	930e      	str	r3, [sp, #56]	; 0x38
 800893c:	2301      	movs	r3, #1
 800893e:	9009      	str	r0, [sp, #36]	; 0x24
 8008940:	9405      	str	r4, [sp, #20]
 8008942:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8008946:	930b      	str	r3, [sp, #44]	; 0x2c
 8008948:	f7ff b9fc 	b.w	8007d44 <_dtoa_r+0x214>
 800894c:	f43f ab48 	beq.w	8007fe0 <_dtoa_r+0x4b0>
 8008950:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8008954:	f7ff bb3f 	b.w	8007fd6 <_dtoa_r+0x4a6>
 8008958:	2601      	movs	r6, #1
 800895a:	f7ff b9bc 	b.w	8007cd6 <_dtoa_r+0x1a6>
 800895e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008960:	9308      	str	r3, [sp, #32]
 8008962:	e5ee      	b.n	8008542 <_dtoa_r+0xa12>

08008964 <_localeconv_r>:
 8008964:	4800      	ldr	r0, [pc, #0]	; (8008968 <_localeconv_r+0x4>)
 8008966:	4770      	bx	lr
 8008968:	20000430 	.word	0x20000430

0800896c <_malloc_r>:
 800896c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008970:	f101 050b 	add.w	r5, r1, #11
 8008974:	2d16      	cmp	r5, #22
 8008976:	b083      	sub	sp, #12
 8008978:	4606      	mov	r6, r0
 800897a:	f240 809f 	bls.w	8008abc <_malloc_r+0x150>
 800897e:	f035 0507 	bics.w	r5, r5, #7
 8008982:	f100 80bf 	bmi.w	8008b04 <_malloc_r+0x198>
 8008986:	42a9      	cmp	r1, r5
 8008988:	f200 80bc 	bhi.w	8008b04 <_malloc_r+0x198>
 800898c:	f000 faa6 	bl	8008edc <__malloc_lock>
 8008990:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008994:	f0c0 829c 	bcc.w	8008ed0 <_malloc_r+0x564>
 8008998:	0a6b      	lsrs	r3, r5, #9
 800899a:	f000 80ba 	beq.w	8008b12 <_malloc_r+0x1a6>
 800899e:	2b04      	cmp	r3, #4
 80089a0:	f200 8183 	bhi.w	8008caa <_malloc_r+0x33e>
 80089a4:	09a8      	lsrs	r0, r5, #6
 80089a6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 80089aa:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80089ae:	3038      	adds	r0, #56	; 0x38
 80089b0:	4fc4      	ldr	r7, [pc, #784]	; (8008cc4 <_malloc_r+0x358>)
 80089b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80089b6:	f1a3 0108 	sub.w	r1, r3, #8
 80089ba:	685c      	ldr	r4, [r3, #4]
 80089bc:	42a1      	cmp	r1, r4
 80089be:	d107      	bne.n	80089d0 <_malloc_r+0x64>
 80089c0:	e0ac      	b.n	8008b1c <_malloc_r+0x1b0>
 80089c2:	2a00      	cmp	r2, #0
 80089c4:	f280 80ac 	bge.w	8008b20 <_malloc_r+0x1b4>
 80089c8:	68e4      	ldr	r4, [r4, #12]
 80089ca:	42a1      	cmp	r1, r4
 80089cc:	f000 80a6 	beq.w	8008b1c <_malloc_r+0x1b0>
 80089d0:	6863      	ldr	r3, [r4, #4]
 80089d2:	f023 0303 	bic.w	r3, r3, #3
 80089d6:	1b5a      	subs	r2, r3, r5
 80089d8:	2a0f      	cmp	r2, #15
 80089da:	ddf2      	ble.n	80089c2 <_malloc_r+0x56>
 80089dc:	49b9      	ldr	r1, [pc, #740]	; (8008cc4 <_malloc_r+0x358>)
 80089de:	693c      	ldr	r4, [r7, #16]
 80089e0:	f101 0e08 	add.w	lr, r1, #8
 80089e4:	4574      	cmp	r4, lr
 80089e6:	f000 81b3 	beq.w	8008d50 <_malloc_r+0x3e4>
 80089ea:	6863      	ldr	r3, [r4, #4]
 80089ec:	f023 0303 	bic.w	r3, r3, #3
 80089f0:	1b5a      	subs	r2, r3, r5
 80089f2:	2a0f      	cmp	r2, #15
 80089f4:	f300 8199 	bgt.w	8008d2a <_malloc_r+0x3be>
 80089f8:	2a00      	cmp	r2, #0
 80089fa:	f8c1 e014 	str.w	lr, [r1, #20]
 80089fe:	f8c1 e010 	str.w	lr, [r1, #16]
 8008a02:	f280 809e 	bge.w	8008b42 <_malloc_r+0x1d6>
 8008a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a0a:	f080 8167 	bcs.w	8008cdc <_malloc_r+0x370>
 8008a0e:	08db      	lsrs	r3, r3, #3
 8008a10:	f103 0c01 	add.w	ip, r3, #1
 8008a14:	2201      	movs	r2, #1
 8008a16:	109b      	asrs	r3, r3, #2
 8008a18:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1c:	684a      	ldr	r2, [r1, #4]
 8008a1e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8008a22:	f8c4 8008 	str.w	r8, [r4, #8]
 8008a26:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	f1a9 0308 	sub.w	r3, r9, #8
 8008a30:	60e3      	str	r3, [r4, #12]
 8008a32:	604a      	str	r2, [r1, #4]
 8008a34:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8008a38:	f8c8 400c 	str.w	r4, [r8, #12]
 8008a3c:	1083      	asrs	r3, r0, #2
 8008a3e:	2401      	movs	r4, #1
 8008a40:	409c      	lsls	r4, r3
 8008a42:	4294      	cmp	r4, r2
 8008a44:	f200 808a 	bhi.w	8008b5c <_malloc_r+0x1f0>
 8008a48:	4214      	tst	r4, r2
 8008a4a:	d106      	bne.n	8008a5a <_malloc_r+0xee>
 8008a4c:	f020 0003 	bic.w	r0, r0, #3
 8008a50:	0064      	lsls	r4, r4, #1
 8008a52:	4214      	tst	r4, r2
 8008a54:	f100 0004 	add.w	r0, r0, #4
 8008a58:	d0fa      	beq.n	8008a50 <_malloc_r+0xe4>
 8008a5a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8008a5e:	46cc      	mov	ip, r9
 8008a60:	4680      	mov	r8, r0
 8008a62:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8008a66:	458c      	cmp	ip, r1
 8008a68:	d107      	bne.n	8008a7a <_malloc_r+0x10e>
 8008a6a:	e173      	b.n	8008d54 <_malloc_r+0x3e8>
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	f280 8181 	bge.w	8008d74 <_malloc_r+0x408>
 8008a72:	68c9      	ldr	r1, [r1, #12]
 8008a74:	458c      	cmp	ip, r1
 8008a76:	f000 816d 	beq.w	8008d54 <_malloc_r+0x3e8>
 8008a7a:	684b      	ldr	r3, [r1, #4]
 8008a7c:	f023 0303 	bic.w	r3, r3, #3
 8008a80:	1b5a      	subs	r2, r3, r5
 8008a82:	2a0f      	cmp	r2, #15
 8008a84:	ddf2      	ble.n	8008a6c <_malloc_r+0x100>
 8008a86:	460c      	mov	r4, r1
 8008a88:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8008a8c:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8008a90:	194b      	adds	r3, r1, r5
 8008a92:	f045 0501 	orr.w	r5, r5, #1
 8008a96:	604d      	str	r5, [r1, #4]
 8008a98:	f042 0101 	orr.w	r1, r2, #1
 8008a9c:	f8c8 c00c 	str.w	ip, [r8, #12]
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f8cc 8008 	str.w	r8, [ip, #8]
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	613b      	str	r3, [r7, #16]
 8008aaa:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008aae:	f8c3 e008 	str.w	lr, [r3, #8]
 8008ab2:	6059      	str	r1, [r3, #4]
 8008ab4:	509a      	str	r2, [r3, r2]
 8008ab6:	f000 fa13 	bl	8008ee0 <__malloc_unlock>
 8008aba:	e01f      	b.n	8008afc <_malloc_r+0x190>
 8008abc:	2910      	cmp	r1, #16
 8008abe:	d821      	bhi.n	8008b04 <_malloc_r+0x198>
 8008ac0:	f000 fa0c 	bl	8008edc <__malloc_lock>
 8008ac4:	2510      	movs	r5, #16
 8008ac6:	2306      	movs	r3, #6
 8008ac8:	2002      	movs	r0, #2
 8008aca:	4f7e      	ldr	r7, [pc, #504]	; (8008cc4 <_malloc_r+0x358>)
 8008acc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008ad0:	f1a3 0208 	sub.w	r2, r3, #8
 8008ad4:	685c      	ldr	r4, [r3, #4]
 8008ad6:	4294      	cmp	r4, r2
 8008ad8:	f000 8145 	beq.w	8008d66 <_malloc_r+0x3fa>
 8008adc:	6863      	ldr	r3, [r4, #4]
 8008ade:	68e1      	ldr	r1, [r4, #12]
 8008ae0:	68a5      	ldr	r5, [r4, #8]
 8008ae2:	f023 0303 	bic.w	r3, r3, #3
 8008ae6:	4423      	add	r3, r4
 8008ae8:	4630      	mov	r0, r6
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	60e9      	str	r1, [r5, #12]
 8008aee:	f042 0201 	orr.w	r2, r2, #1
 8008af2:	608d      	str	r5, [r1, #8]
 8008af4:	605a      	str	r2, [r3, #4]
 8008af6:	f000 f9f3 	bl	8008ee0 <__malloc_unlock>
 8008afa:	3408      	adds	r4, #8
 8008afc:	4620      	mov	r0, r4
 8008afe:	b003      	add	sp, #12
 8008b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b04:	2400      	movs	r4, #0
 8008b06:	230c      	movs	r3, #12
 8008b08:	4620      	mov	r0, r4
 8008b0a:	6033      	str	r3, [r6, #0]
 8008b0c:	b003      	add	sp, #12
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	2380      	movs	r3, #128	; 0x80
 8008b14:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8008b18:	203f      	movs	r0, #63	; 0x3f
 8008b1a:	e749      	b.n	80089b0 <_malloc_r+0x44>
 8008b1c:	4670      	mov	r0, lr
 8008b1e:	e75d      	b.n	80089dc <_malloc_r+0x70>
 8008b20:	4423      	add	r3, r4
 8008b22:	68e1      	ldr	r1, [r4, #12]
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	68a5      	ldr	r5, [r4, #8]
 8008b28:	f042 0201 	orr.w	r2, r2, #1
 8008b2c:	60e9      	str	r1, [r5, #12]
 8008b2e:	4630      	mov	r0, r6
 8008b30:	608d      	str	r5, [r1, #8]
 8008b32:	605a      	str	r2, [r3, #4]
 8008b34:	f000 f9d4 	bl	8008ee0 <__malloc_unlock>
 8008b38:	3408      	adds	r4, #8
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	b003      	add	sp, #12
 8008b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b42:	4423      	add	r3, r4
 8008b44:	4630      	mov	r0, r6
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	f042 0201 	orr.w	r2, r2, #1
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	f000 f9c7 	bl	8008ee0 <__malloc_unlock>
 8008b52:	3408      	adds	r4, #8
 8008b54:	4620      	mov	r0, r4
 8008b56:	b003      	add	sp, #12
 8008b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5c:	68bc      	ldr	r4, [r7, #8]
 8008b5e:	6863      	ldr	r3, [r4, #4]
 8008b60:	f023 0803 	bic.w	r8, r3, #3
 8008b64:	45a8      	cmp	r8, r5
 8008b66:	d304      	bcc.n	8008b72 <_malloc_r+0x206>
 8008b68:	ebc5 0308 	rsb	r3, r5, r8
 8008b6c:	2b0f      	cmp	r3, #15
 8008b6e:	f300 808c 	bgt.w	8008c8a <_malloc_r+0x31e>
 8008b72:	4b55      	ldr	r3, [pc, #340]	; (8008cc8 <_malloc_r+0x35c>)
 8008b74:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8008cd8 <_malloc_r+0x36c>
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	f8d9 3000 	ldr.w	r3, [r9]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	442a      	add	r2, r5
 8008b82:	eb04 0a08 	add.w	sl, r4, r8
 8008b86:	f000 8160 	beq.w	8008e4a <_malloc_r+0x4de>
 8008b8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b8e:	320f      	adds	r2, #15
 8008b90:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8008b94:	f022 020f 	bic.w	r2, r2, #15
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	9201      	str	r2, [sp, #4]
 8008b9e:	f7f8 ffd3 	bl	8001b48 <_sbrk_r>
 8008ba2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ba6:	4683      	mov	fp, r0
 8008ba8:	9a01      	ldr	r2, [sp, #4]
 8008baa:	f000 8158 	beq.w	8008e5e <_malloc_r+0x4f2>
 8008bae:	4582      	cmp	sl, r0
 8008bb0:	f200 80fc 	bhi.w	8008dac <_malloc_r+0x440>
 8008bb4:	4b45      	ldr	r3, [pc, #276]	; (8008ccc <_malloc_r+0x360>)
 8008bb6:	6819      	ldr	r1, [r3, #0]
 8008bb8:	45da      	cmp	sl, fp
 8008bba:	4411      	add	r1, r2
 8008bbc:	6019      	str	r1, [r3, #0]
 8008bbe:	f000 8153 	beq.w	8008e68 <_malloc_r+0x4fc>
 8008bc2:	f8d9 0000 	ldr.w	r0, [r9]
 8008bc6:	f8df e110 	ldr.w	lr, [pc, #272]	; 8008cd8 <_malloc_r+0x36c>
 8008bca:	3001      	adds	r0, #1
 8008bcc:	bf1b      	ittet	ne
 8008bce:	ebca 0a0b 	rsbne	sl, sl, fp
 8008bd2:	4451      	addne	r1, sl
 8008bd4:	f8ce b000 	streq.w	fp, [lr]
 8008bd8:	6019      	strne	r1, [r3, #0]
 8008bda:	f01b 0107 	ands.w	r1, fp, #7
 8008bde:	f000 8117 	beq.w	8008e10 <_malloc_r+0x4a4>
 8008be2:	f1c1 0008 	rsb	r0, r1, #8
 8008be6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8008bea:	4483      	add	fp, r0
 8008bec:	3108      	adds	r1, #8
 8008bee:	445a      	add	r2, fp
 8008bf0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008bf4:	ebc2 0901 	rsb	r9, r2, r1
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	f7f8 ffa3 	bl	8001b48 <_sbrk_r>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	f000 813f 	beq.w	8008e88 <_malloc_r+0x51c>
 8008c0a:	ebcb 0200 	rsb	r2, fp, r0
 8008c0e:	444a      	add	r2, r9
 8008c10:	f042 0201 	orr.w	r2, r2, #1
 8008c14:	6819      	ldr	r1, [r3, #0]
 8008c16:	f8c7 b008 	str.w	fp, [r7, #8]
 8008c1a:	4449      	add	r1, r9
 8008c1c:	42bc      	cmp	r4, r7
 8008c1e:	f8cb 2004 	str.w	r2, [fp, #4]
 8008c22:	6019      	str	r1, [r3, #0]
 8008c24:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8008ccc <_malloc_r+0x360>
 8008c28:	d016      	beq.n	8008c58 <_malloc_r+0x2ec>
 8008c2a:	f1b8 0f0f 	cmp.w	r8, #15
 8008c2e:	f240 80fd 	bls.w	8008e2c <_malloc_r+0x4c0>
 8008c32:	6862      	ldr	r2, [r4, #4]
 8008c34:	f1a8 030c 	sub.w	r3, r8, #12
 8008c38:	f023 0307 	bic.w	r3, r3, #7
 8008c3c:	18e0      	adds	r0, r4, r3
 8008c3e:	f002 0201 	and.w	r2, r2, #1
 8008c42:	f04f 0e05 	mov.w	lr, #5
 8008c46:	431a      	orrs	r2, r3
 8008c48:	2b0f      	cmp	r3, #15
 8008c4a:	6062      	str	r2, [r4, #4]
 8008c4c:	f8c0 e004 	str.w	lr, [r0, #4]
 8008c50:	f8c0 e008 	str.w	lr, [r0, #8]
 8008c54:	f200 811c 	bhi.w	8008e90 <_malloc_r+0x524>
 8008c58:	4b1d      	ldr	r3, [pc, #116]	; (8008cd0 <_malloc_r+0x364>)
 8008c5a:	68bc      	ldr	r4, [r7, #8]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4291      	cmp	r1, r2
 8008c60:	bf88      	it	hi
 8008c62:	6019      	strhi	r1, [r3, #0]
 8008c64:	4b1b      	ldr	r3, [pc, #108]	; (8008cd4 <_malloc_r+0x368>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	4291      	cmp	r1, r2
 8008c6a:	6862      	ldr	r2, [r4, #4]
 8008c6c:	bf88      	it	hi
 8008c6e:	6019      	strhi	r1, [r3, #0]
 8008c70:	f022 0203 	bic.w	r2, r2, #3
 8008c74:	4295      	cmp	r5, r2
 8008c76:	eba2 0305 	sub.w	r3, r2, r5
 8008c7a:	d801      	bhi.n	8008c80 <_malloc_r+0x314>
 8008c7c:	2b0f      	cmp	r3, #15
 8008c7e:	dc04      	bgt.n	8008c8a <_malloc_r+0x31e>
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 f92d 	bl	8008ee0 <__malloc_unlock>
 8008c86:	2400      	movs	r4, #0
 8008c88:	e738      	b.n	8008afc <_malloc_r+0x190>
 8008c8a:	1962      	adds	r2, r4, r5
 8008c8c:	f043 0301 	orr.w	r3, r3, #1
 8008c90:	f045 0501 	orr.w	r5, r5, #1
 8008c94:	6065      	str	r5, [r4, #4]
 8008c96:	4630      	mov	r0, r6
 8008c98:	60ba      	str	r2, [r7, #8]
 8008c9a:	6053      	str	r3, [r2, #4]
 8008c9c:	f000 f920 	bl	8008ee0 <__malloc_unlock>
 8008ca0:	3408      	adds	r4, #8
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	b003      	add	sp, #12
 8008ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008caa:	2b14      	cmp	r3, #20
 8008cac:	d971      	bls.n	8008d92 <_malloc_r+0x426>
 8008cae:	2b54      	cmp	r3, #84	; 0x54
 8008cb0:	f200 80a4 	bhi.w	8008dfc <_malloc_r+0x490>
 8008cb4:	0b28      	lsrs	r0, r5, #12
 8008cb6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 8008cba:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008cbe:	306e      	adds	r0, #110	; 0x6e
 8008cc0:	e676      	b.n	80089b0 <_malloc_r+0x44>
 8008cc2:	bf00      	nop
 8008cc4:	20000468 	.word	0x20000468
 8008cc8:	20000e58 	.word	0x20000e58
 8008ccc:	20000e5c 	.word	0x20000e5c
 8008cd0:	20000e54 	.word	0x20000e54
 8008cd4:	20000e50 	.word	0x20000e50
 8008cd8:	20000874 	.word	0x20000874
 8008cdc:	0a5a      	lsrs	r2, r3, #9
 8008cde:	2a04      	cmp	r2, #4
 8008ce0:	d95e      	bls.n	8008da0 <_malloc_r+0x434>
 8008ce2:	2a14      	cmp	r2, #20
 8008ce4:	f200 80b3 	bhi.w	8008e4e <_malloc_r+0x4e2>
 8008ce8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8008cec:	0049      	lsls	r1, r1, #1
 8008cee:	325b      	adds	r2, #91	; 0x5b
 8008cf0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8008cf4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8008cf8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8008ed8 <_malloc_r+0x56c>
 8008cfc:	f1ac 0c08 	sub.w	ip, ip, #8
 8008d00:	458c      	cmp	ip, r1
 8008d02:	f000 8088 	beq.w	8008e16 <_malloc_r+0x4aa>
 8008d06:	684a      	ldr	r2, [r1, #4]
 8008d08:	f022 0203 	bic.w	r2, r2, #3
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d202      	bcs.n	8008d16 <_malloc_r+0x3aa>
 8008d10:	6889      	ldr	r1, [r1, #8]
 8008d12:	458c      	cmp	ip, r1
 8008d14:	d1f7      	bne.n	8008d06 <_malloc_r+0x39a>
 8008d16:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8008d20:	60a1      	str	r1, [r4, #8]
 8008d22:	f8cc 4008 	str.w	r4, [ip, #8]
 8008d26:	60cc      	str	r4, [r1, #12]
 8008d28:	e688      	b.n	8008a3c <_malloc_r+0xd0>
 8008d2a:	1963      	adds	r3, r4, r5
 8008d2c:	f042 0701 	orr.w	r7, r2, #1
 8008d30:	f045 0501 	orr.w	r5, r5, #1
 8008d34:	6065      	str	r5, [r4, #4]
 8008d36:	4630      	mov	r0, r6
 8008d38:	614b      	str	r3, [r1, #20]
 8008d3a:	610b      	str	r3, [r1, #16]
 8008d3c:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008d40:	f8c3 e008 	str.w	lr, [r3, #8]
 8008d44:	605f      	str	r7, [r3, #4]
 8008d46:	509a      	str	r2, [r3, r2]
 8008d48:	3408      	adds	r4, #8
 8008d4a:	f000 f8c9 	bl	8008ee0 <__malloc_unlock>
 8008d4e:	e6d5      	b.n	8008afc <_malloc_r+0x190>
 8008d50:	684a      	ldr	r2, [r1, #4]
 8008d52:	e673      	b.n	8008a3c <_malloc_r+0xd0>
 8008d54:	f108 0801 	add.w	r8, r8, #1
 8008d58:	f018 0f03 	tst.w	r8, #3
 8008d5c:	f10c 0c08 	add.w	ip, ip, #8
 8008d60:	f47f ae7f 	bne.w	8008a62 <_malloc_r+0xf6>
 8008d64:	e030      	b.n	8008dc8 <_malloc_r+0x45c>
 8008d66:	68dc      	ldr	r4, [r3, #12]
 8008d68:	42a3      	cmp	r3, r4
 8008d6a:	bf08      	it	eq
 8008d6c:	3002      	addeq	r0, #2
 8008d6e:	f43f ae35 	beq.w	80089dc <_malloc_r+0x70>
 8008d72:	e6b3      	b.n	8008adc <_malloc_r+0x170>
 8008d74:	440b      	add	r3, r1
 8008d76:	460c      	mov	r4, r1
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	68c9      	ldr	r1, [r1, #12]
 8008d7c:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8008d80:	f042 0201 	orr.w	r2, r2, #1
 8008d84:	605a      	str	r2, [r3, #4]
 8008d86:	4630      	mov	r0, r6
 8008d88:	60e9      	str	r1, [r5, #12]
 8008d8a:	608d      	str	r5, [r1, #8]
 8008d8c:	f000 f8a8 	bl	8008ee0 <__malloc_unlock>
 8008d90:	e6b4      	b.n	8008afc <_malloc_r+0x190>
 8008d92:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 8008d96:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 8008d9a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008d9e:	e607      	b.n	80089b0 <_malloc_r+0x44>
 8008da0:	099a      	lsrs	r2, r3, #6
 8008da2:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8008da6:	0049      	lsls	r1, r1, #1
 8008da8:	3238      	adds	r2, #56	; 0x38
 8008daa:	e7a1      	b.n	8008cf0 <_malloc_r+0x384>
 8008dac:	42bc      	cmp	r4, r7
 8008dae:	4b4a      	ldr	r3, [pc, #296]	; (8008ed8 <_malloc_r+0x56c>)
 8008db0:	f43f af00 	beq.w	8008bb4 <_malloc_r+0x248>
 8008db4:	689c      	ldr	r4, [r3, #8]
 8008db6:	6862      	ldr	r2, [r4, #4]
 8008db8:	f022 0203 	bic.w	r2, r2, #3
 8008dbc:	e75a      	b.n	8008c74 <_malloc_r+0x308>
 8008dbe:	f859 3908 	ldr.w	r3, [r9], #-8
 8008dc2:	4599      	cmp	r9, r3
 8008dc4:	f040 8082 	bne.w	8008ecc <_malloc_r+0x560>
 8008dc8:	f010 0f03 	tst.w	r0, #3
 8008dcc:	f100 30ff 	add.w	r0, r0, #4294967295
 8008dd0:	d1f5      	bne.n	8008dbe <_malloc_r+0x452>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	ea23 0304 	bic.w	r3, r3, r4
 8008dd8:	607b      	str	r3, [r7, #4]
 8008dda:	0064      	lsls	r4, r4, #1
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	f63f aebd 	bhi.w	8008b5c <_malloc_r+0x1f0>
 8008de2:	2c00      	cmp	r4, #0
 8008de4:	f43f aeba 	beq.w	8008b5c <_malloc_r+0x1f0>
 8008de8:	421c      	tst	r4, r3
 8008dea:	4640      	mov	r0, r8
 8008dec:	f47f ae35 	bne.w	8008a5a <_malloc_r+0xee>
 8008df0:	0064      	lsls	r4, r4, #1
 8008df2:	421c      	tst	r4, r3
 8008df4:	f100 0004 	add.w	r0, r0, #4
 8008df8:	d0fa      	beq.n	8008df0 <_malloc_r+0x484>
 8008dfa:	e62e      	b.n	8008a5a <_malloc_r+0xee>
 8008dfc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008e00:	d818      	bhi.n	8008e34 <_malloc_r+0x4c8>
 8008e02:	0be8      	lsrs	r0, r5, #15
 8008e04:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8008e08:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008e0c:	3077      	adds	r0, #119	; 0x77
 8008e0e:	e5cf      	b.n	80089b0 <_malloc_r+0x44>
 8008e10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e14:	e6eb      	b.n	8008bee <_malloc_r+0x282>
 8008e16:	2101      	movs	r1, #1
 8008e18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e1c:	1092      	asrs	r2, r2, #2
 8008e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8008e22:	431a      	orrs	r2, r3
 8008e24:	f8c8 2004 	str.w	r2, [r8, #4]
 8008e28:	4661      	mov	r1, ip
 8008e2a:	e777      	b.n	8008d1c <_malloc_r+0x3b0>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f8cb 3004 	str.w	r3, [fp, #4]
 8008e32:	e725      	b.n	8008c80 <_malloc_r+0x314>
 8008e34:	f240 5254 	movw	r2, #1364	; 0x554
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d820      	bhi.n	8008e7e <_malloc_r+0x512>
 8008e3c:	0ca8      	lsrs	r0, r5, #18
 8008e3e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8008e42:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008e46:	307c      	adds	r0, #124	; 0x7c
 8008e48:	e5b2      	b.n	80089b0 <_malloc_r+0x44>
 8008e4a:	3210      	adds	r2, #16
 8008e4c:	e6a4      	b.n	8008b98 <_malloc_r+0x22c>
 8008e4e:	2a54      	cmp	r2, #84	; 0x54
 8008e50:	d826      	bhi.n	8008ea0 <_malloc_r+0x534>
 8008e52:	0b1a      	lsrs	r2, r3, #12
 8008e54:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8008e58:	0049      	lsls	r1, r1, #1
 8008e5a:	326e      	adds	r2, #110	; 0x6e
 8008e5c:	e748      	b.n	8008cf0 <_malloc_r+0x384>
 8008e5e:	68bc      	ldr	r4, [r7, #8]
 8008e60:	6862      	ldr	r2, [r4, #4]
 8008e62:	f022 0203 	bic.w	r2, r2, #3
 8008e66:	e705      	b.n	8008c74 <_malloc_r+0x308>
 8008e68:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	f47f aea8 	bne.w	8008bc2 <_malloc_r+0x256>
 8008e72:	4442      	add	r2, r8
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f042 0201 	orr.w	r2, r2, #1
 8008e7a:	605a      	str	r2, [r3, #4]
 8008e7c:	e6ec      	b.n	8008c58 <_malloc_r+0x2ec>
 8008e7e:	23fe      	movs	r3, #254	; 0xfe
 8008e80:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8008e84:	207e      	movs	r0, #126	; 0x7e
 8008e86:	e593      	b.n	80089b0 <_malloc_r+0x44>
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f04f 0900 	mov.w	r9, #0
 8008e8e:	e6c1      	b.n	8008c14 <_malloc_r+0x2a8>
 8008e90:	f104 0108 	add.w	r1, r4, #8
 8008e94:	4630      	mov	r0, r6
 8008e96:	f000 fc63 	bl	8009760 <_free_r>
 8008e9a:	f8d9 1000 	ldr.w	r1, [r9]
 8008e9e:	e6db      	b.n	8008c58 <_malloc_r+0x2ec>
 8008ea0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008ea4:	d805      	bhi.n	8008eb2 <_malloc_r+0x546>
 8008ea6:	0bda      	lsrs	r2, r3, #15
 8008ea8:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8008eac:	0049      	lsls	r1, r1, #1
 8008eae:	3277      	adds	r2, #119	; 0x77
 8008eb0:	e71e      	b.n	8008cf0 <_malloc_r+0x384>
 8008eb2:	f240 5154 	movw	r1, #1364	; 0x554
 8008eb6:	428a      	cmp	r2, r1
 8008eb8:	d805      	bhi.n	8008ec6 <_malloc_r+0x55a>
 8008eba:	0c9a      	lsrs	r2, r3, #18
 8008ebc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8008ec0:	0049      	lsls	r1, r1, #1
 8008ec2:	327c      	adds	r2, #124	; 0x7c
 8008ec4:	e714      	b.n	8008cf0 <_malloc_r+0x384>
 8008ec6:	21fe      	movs	r1, #254	; 0xfe
 8008ec8:	227e      	movs	r2, #126	; 0x7e
 8008eca:	e711      	b.n	8008cf0 <_malloc_r+0x384>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	e784      	b.n	8008dda <_malloc_r+0x46e>
 8008ed0:	08e8      	lsrs	r0, r5, #3
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	e5f8      	b.n	8008aca <_malloc_r+0x15e>
 8008ed8:	20000468 	.word	0x20000468

08008edc <__malloc_lock>:
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop

08008ee0 <__malloc_unlock>:
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop

08008ee4 <_Balloc>:
 8008ee4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008ee6:	b570      	push	{r4, r5, r6, lr}
 8008ee8:	4605      	mov	r5, r0
 8008eea:	460c      	mov	r4, r1
 8008eec:	b14b      	cbz	r3, 8008f02 <_Balloc+0x1e>
 8008eee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008ef2:	b180      	cbz	r0, 8008f16 <_Balloc+0x32>
 8008ef4:	6802      	ldr	r2, [r0, #0]
 8008ef6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008efa:	2300      	movs	r3, #0
 8008efc:	6103      	str	r3, [r0, #16]
 8008efe:	60c3      	str	r3, [r0, #12]
 8008f00:	bd70      	pop	{r4, r5, r6, pc}
 8008f02:	2221      	movs	r2, #33	; 0x21
 8008f04:	2104      	movs	r1, #4
 8008f06:	f000 fbad 	bl	8009664 <_calloc_r>
 8008f0a:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d1ed      	bne.n	8008eee <_Balloc+0xa>
 8008f12:	2000      	movs	r0, #0
 8008f14:	bd70      	pop	{r4, r5, r6, pc}
 8008f16:	2101      	movs	r1, #1
 8008f18:	fa01 f604 	lsl.w	r6, r1, r4
 8008f1c:	1d72      	adds	r2, r6, #5
 8008f1e:	4628      	mov	r0, r5
 8008f20:	0092      	lsls	r2, r2, #2
 8008f22:	f000 fb9f 	bl	8009664 <_calloc_r>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d0f3      	beq.n	8008f12 <_Balloc+0x2e>
 8008f2a:	6044      	str	r4, [r0, #4]
 8008f2c:	6086      	str	r6, [r0, #8]
 8008f2e:	e7e4      	b.n	8008efa <_Balloc+0x16>

08008f30 <_Bfree>:
 8008f30:	b131      	cbz	r1, 8008f40 <_Bfree+0x10>
 8008f32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008f34:	684a      	ldr	r2, [r1, #4]
 8008f36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008f3a:	6008      	str	r0, [r1, #0]
 8008f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop

08008f44 <__multadd>:
 8008f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f46:	690c      	ldr	r4, [r1, #16]
 8008f48:	b083      	sub	sp, #12
 8008f4a:	460d      	mov	r5, r1
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	f101 0e14 	add.w	lr, r1, #20
 8008f52:	2700      	movs	r7, #0
 8008f54:	f8de 0000 	ldr.w	r0, [lr]
 8008f58:	b281      	uxth	r1, r0
 8008f5a:	fb02 3101 	mla	r1, r2, r1, r3
 8008f5e:	0c0b      	lsrs	r3, r1, #16
 8008f60:	0c00      	lsrs	r0, r0, #16
 8008f62:	fb02 3300 	mla	r3, r2, r0, r3
 8008f66:	b289      	uxth	r1, r1
 8008f68:	3701      	adds	r7, #1
 8008f6a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f6e:	42bc      	cmp	r4, r7
 8008f70:	f84e 1b04 	str.w	r1, [lr], #4
 8008f74:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008f78:	dcec      	bgt.n	8008f54 <__multadd+0x10>
 8008f7a:	b13b      	cbz	r3, 8008f8c <__multadd+0x48>
 8008f7c:	68aa      	ldr	r2, [r5, #8]
 8008f7e:	4294      	cmp	r4, r2
 8008f80:	da07      	bge.n	8008f92 <__multadd+0x4e>
 8008f82:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8008f86:	3401      	adds	r4, #1
 8008f88:	6153      	str	r3, [r2, #20]
 8008f8a:	612c      	str	r4, [r5, #16]
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	b003      	add	sp, #12
 8008f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f92:	6869      	ldr	r1, [r5, #4]
 8008f94:	9301      	str	r3, [sp, #4]
 8008f96:	3101      	adds	r1, #1
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7ff ffa3 	bl	8008ee4 <_Balloc>
 8008f9e:	692a      	ldr	r2, [r5, #16]
 8008fa0:	3202      	adds	r2, #2
 8008fa2:	f105 010c 	add.w	r1, r5, #12
 8008fa6:	4607      	mov	r7, r0
 8008fa8:	0092      	lsls	r2, r2, #2
 8008faa:	300c      	adds	r0, #12
 8008fac:	f7f7 fd74 	bl	8000a98 <memcpy>
 8008fb0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8008fb2:	6869      	ldr	r1, [r5, #4]
 8008fb4:	9b01      	ldr	r3, [sp, #4]
 8008fb6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008fba:	6028      	str	r0, [r5, #0]
 8008fbc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8008fc0:	463d      	mov	r5, r7
 8008fc2:	e7de      	b.n	8008f82 <__multadd+0x3e>

08008fc4 <__hi0bits>:
 8008fc4:	0c03      	lsrs	r3, r0, #16
 8008fc6:	041b      	lsls	r3, r3, #16
 8008fc8:	b9b3      	cbnz	r3, 8008ff8 <__hi0bits+0x34>
 8008fca:	0400      	lsls	r0, r0, #16
 8008fcc:	2310      	movs	r3, #16
 8008fce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008fd2:	bf04      	itt	eq
 8008fd4:	0200      	lsleq	r0, r0, #8
 8008fd6:	3308      	addeq	r3, #8
 8008fd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008fdc:	bf04      	itt	eq
 8008fde:	0100      	lsleq	r0, r0, #4
 8008fe0:	3304      	addeq	r3, #4
 8008fe2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008fe6:	bf04      	itt	eq
 8008fe8:	0080      	lsleq	r0, r0, #2
 8008fea:	3302      	addeq	r3, #2
 8008fec:	2800      	cmp	r0, #0
 8008fee:	db07      	blt.n	8009000 <__hi0bits+0x3c>
 8008ff0:	0042      	lsls	r2, r0, #1
 8008ff2:	d403      	bmi.n	8008ffc <__hi0bits+0x38>
 8008ff4:	2020      	movs	r0, #32
 8008ff6:	4770      	bx	lr
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	e7e8      	b.n	8008fce <__hi0bits+0xa>
 8008ffc:	1c58      	adds	r0, r3, #1
 8008ffe:	4770      	bx	lr
 8009000:	4618      	mov	r0, r3
 8009002:	4770      	bx	lr

08009004 <__lo0bits>:
 8009004:	6803      	ldr	r3, [r0, #0]
 8009006:	f013 0207 	ands.w	r2, r3, #7
 800900a:	d007      	beq.n	800901c <__lo0bits+0x18>
 800900c:	07d9      	lsls	r1, r3, #31
 800900e:	d420      	bmi.n	8009052 <__lo0bits+0x4e>
 8009010:	079a      	lsls	r2, r3, #30
 8009012:	d420      	bmi.n	8009056 <__lo0bits+0x52>
 8009014:	089b      	lsrs	r3, r3, #2
 8009016:	6003      	str	r3, [r0, #0]
 8009018:	2002      	movs	r0, #2
 800901a:	4770      	bx	lr
 800901c:	b299      	uxth	r1, r3
 800901e:	b909      	cbnz	r1, 8009024 <__lo0bits+0x20>
 8009020:	0c1b      	lsrs	r3, r3, #16
 8009022:	2210      	movs	r2, #16
 8009024:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009028:	bf04      	itt	eq
 800902a:	0a1b      	lsreq	r3, r3, #8
 800902c:	3208      	addeq	r2, #8
 800902e:	0719      	lsls	r1, r3, #28
 8009030:	bf04      	itt	eq
 8009032:	091b      	lsreq	r3, r3, #4
 8009034:	3204      	addeq	r2, #4
 8009036:	0799      	lsls	r1, r3, #30
 8009038:	bf04      	itt	eq
 800903a:	089b      	lsreq	r3, r3, #2
 800903c:	3202      	addeq	r2, #2
 800903e:	07d9      	lsls	r1, r3, #31
 8009040:	d404      	bmi.n	800904c <__lo0bits+0x48>
 8009042:	085b      	lsrs	r3, r3, #1
 8009044:	d101      	bne.n	800904a <__lo0bits+0x46>
 8009046:	2020      	movs	r0, #32
 8009048:	4770      	bx	lr
 800904a:	3201      	adds	r2, #1
 800904c:	6003      	str	r3, [r0, #0]
 800904e:	4610      	mov	r0, r2
 8009050:	4770      	bx	lr
 8009052:	2000      	movs	r0, #0
 8009054:	4770      	bx	lr
 8009056:	085b      	lsrs	r3, r3, #1
 8009058:	6003      	str	r3, [r0, #0]
 800905a:	2001      	movs	r0, #1
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop

08009060 <__i2b>:
 8009060:	b510      	push	{r4, lr}
 8009062:	460c      	mov	r4, r1
 8009064:	2101      	movs	r1, #1
 8009066:	f7ff ff3d 	bl	8008ee4 <_Balloc>
 800906a:	2201      	movs	r2, #1
 800906c:	6144      	str	r4, [r0, #20]
 800906e:	6102      	str	r2, [r0, #16]
 8009070:	bd10      	pop	{r4, pc}
 8009072:	bf00      	nop

08009074 <__multiply>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	690d      	ldr	r5, [r1, #16]
 800907a:	6917      	ldr	r7, [r2, #16]
 800907c:	42bd      	cmp	r5, r7
 800907e:	b083      	sub	sp, #12
 8009080:	460c      	mov	r4, r1
 8009082:	4616      	mov	r6, r2
 8009084:	da04      	bge.n	8009090 <__multiply+0x1c>
 8009086:	462a      	mov	r2, r5
 8009088:	4634      	mov	r4, r6
 800908a:	463d      	mov	r5, r7
 800908c:	460e      	mov	r6, r1
 800908e:	4617      	mov	r7, r2
 8009090:	68a3      	ldr	r3, [r4, #8]
 8009092:	6861      	ldr	r1, [r4, #4]
 8009094:	eb05 0807 	add.w	r8, r5, r7
 8009098:	4598      	cmp	r8, r3
 800909a:	bfc8      	it	gt
 800909c:	3101      	addgt	r1, #1
 800909e:	f7ff ff21 	bl	8008ee4 <_Balloc>
 80090a2:	f100 0c14 	add.w	ip, r0, #20
 80090a6:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80090aa:	45cc      	cmp	ip, r9
 80090ac:	9000      	str	r0, [sp, #0]
 80090ae:	d205      	bcs.n	80090bc <__multiply+0x48>
 80090b0:	4663      	mov	r3, ip
 80090b2:	2100      	movs	r1, #0
 80090b4:	f843 1b04 	str.w	r1, [r3], #4
 80090b8:	4599      	cmp	r9, r3
 80090ba:	d8fb      	bhi.n	80090b4 <__multiply+0x40>
 80090bc:	f106 0214 	add.w	r2, r6, #20
 80090c0:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80090c4:	f104 0314 	add.w	r3, r4, #20
 80090c8:	4552      	cmp	r2, sl
 80090ca:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 80090ce:	d254      	bcs.n	800917a <__multiply+0x106>
 80090d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80090d4:	4699      	mov	r9, r3
 80090d6:	f852 3b04 	ldr.w	r3, [r2], #4
 80090da:	fa1f fb83 	uxth.w	fp, r3
 80090de:	f1bb 0f00 	cmp.w	fp, #0
 80090e2:	d020      	beq.n	8009126 <__multiply+0xb2>
 80090e4:	2000      	movs	r0, #0
 80090e6:	464f      	mov	r7, r9
 80090e8:	4666      	mov	r6, ip
 80090ea:	4605      	mov	r5, r0
 80090ec:	e000      	b.n	80090f0 <__multiply+0x7c>
 80090ee:	461e      	mov	r6, r3
 80090f0:	f857 4b04 	ldr.w	r4, [r7], #4
 80090f4:	6830      	ldr	r0, [r6, #0]
 80090f6:	b2a1      	uxth	r1, r4
 80090f8:	b283      	uxth	r3, r0
 80090fa:	fb0b 3101 	mla	r1, fp, r1, r3
 80090fe:	0c24      	lsrs	r4, r4, #16
 8009100:	0c00      	lsrs	r0, r0, #16
 8009102:	194b      	adds	r3, r1, r5
 8009104:	fb0b 0004 	mla	r0, fp, r4, r0
 8009108:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800910c:	b299      	uxth	r1, r3
 800910e:	4633      	mov	r3, r6
 8009110:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009114:	45be      	cmp	lr, r7
 8009116:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800911a:	f843 1b04 	str.w	r1, [r3], #4
 800911e:	d8e6      	bhi.n	80090ee <__multiply+0x7a>
 8009120:	6075      	str	r5, [r6, #4]
 8009122:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8009126:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800912a:	d020      	beq.n	800916e <__multiply+0xfa>
 800912c:	f8dc 3000 	ldr.w	r3, [ip]
 8009130:	4667      	mov	r7, ip
 8009132:	4618      	mov	r0, r3
 8009134:	464d      	mov	r5, r9
 8009136:	2100      	movs	r1, #0
 8009138:	e000      	b.n	800913c <__multiply+0xc8>
 800913a:	4637      	mov	r7, r6
 800913c:	882c      	ldrh	r4, [r5, #0]
 800913e:	0c00      	lsrs	r0, r0, #16
 8009140:	fb0b 0004 	mla	r0, fp, r4, r0
 8009144:	4401      	add	r1, r0
 8009146:	b29c      	uxth	r4, r3
 8009148:	463e      	mov	r6, r7
 800914a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800914e:	f846 3b04 	str.w	r3, [r6], #4
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f855 4b04 	ldr.w	r4, [r5], #4
 8009158:	b283      	uxth	r3, r0
 800915a:	0c24      	lsrs	r4, r4, #16
 800915c:	fb0b 3404 	mla	r4, fp, r4, r3
 8009160:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8009164:	45ae      	cmp	lr, r5
 8009166:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800916a:	d8e6      	bhi.n	800913a <__multiply+0xc6>
 800916c:	607b      	str	r3, [r7, #4]
 800916e:	4592      	cmp	sl, r2
 8009170:	f10c 0c04 	add.w	ip, ip, #4
 8009174:	d8af      	bhi.n	80090d6 <__multiply+0x62>
 8009176:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800917a:	f1b8 0f00 	cmp.w	r8, #0
 800917e:	dd0b      	ble.n	8009198 <__multiply+0x124>
 8009180:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009184:	f1a9 0904 	sub.w	r9, r9, #4
 8009188:	b11b      	cbz	r3, 8009192 <__multiply+0x11e>
 800918a:	e005      	b.n	8009198 <__multiply+0x124>
 800918c:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8009190:	b913      	cbnz	r3, 8009198 <__multiply+0x124>
 8009192:	f1b8 0801 	subs.w	r8, r8, #1
 8009196:	d1f9      	bne.n	800918c <__multiply+0x118>
 8009198:	9800      	ldr	r0, [sp, #0]
 800919a:	f8c0 8010 	str.w	r8, [r0, #16]
 800919e:	b003      	add	sp, #12
 80091a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091a4 <__pow5mult>:
 80091a4:	f012 0303 	ands.w	r3, r2, #3
 80091a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ac:	4614      	mov	r4, r2
 80091ae:	4607      	mov	r7, r0
 80091b0:	d12e      	bne.n	8009210 <__pow5mult+0x6c>
 80091b2:	460e      	mov	r6, r1
 80091b4:	10a4      	asrs	r4, r4, #2
 80091b6:	d01c      	beq.n	80091f2 <__pow5mult+0x4e>
 80091b8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80091ba:	b395      	cbz	r5, 8009222 <__pow5mult+0x7e>
 80091bc:	07e3      	lsls	r3, r4, #31
 80091be:	f04f 0800 	mov.w	r8, #0
 80091c2:	d406      	bmi.n	80091d2 <__pow5mult+0x2e>
 80091c4:	1064      	asrs	r4, r4, #1
 80091c6:	d014      	beq.n	80091f2 <__pow5mult+0x4e>
 80091c8:	6828      	ldr	r0, [r5, #0]
 80091ca:	b1a8      	cbz	r0, 80091f8 <__pow5mult+0x54>
 80091cc:	4605      	mov	r5, r0
 80091ce:	07e3      	lsls	r3, r4, #31
 80091d0:	d5f8      	bpl.n	80091c4 <__pow5mult+0x20>
 80091d2:	462a      	mov	r2, r5
 80091d4:	4631      	mov	r1, r6
 80091d6:	4638      	mov	r0, r7
 80091d8:	f7ff ff4c 	bl	8009074 <__multiply>
 80091dc:	b1b6      	cbz	r6, 800920c <__pow5mult+0x68>
 80091de:	6872      	ldr	r2, [r6, #4]
 80091e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e2:	1064      	asrs	r4, r4, #1
 80091e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091e8:	6031      	str	r1, [r6, #0]
 80091ea:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80091ee:	4606      	mov	r6, r0
 80091f0:	d1ea      	bne.n	80091c8 <__pow5mult+0x24>
 80091f2:	4630      	mov	r0, r6
 80091f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f8:	462a      	mov	r2, r5
 80091fa:	4629      	mov	r1, r5
 80091fc:	4638      	mov	r0, r7
 80091fe:	f7ff ff39 	bl	8009074 <__multiply>
 8009202:	6028      	str	r0, [r5, #0]
 8009204:	f8c0 8000 	str.w	r8, [r0]
 8009208:	4605      	mov	r5, r0
 800920a:	e7e0      	b.n	80091ce <__pow5mult+0x2a>
 800920c:	4606      	mov	r6, r0
 800920e:	e7d9      	b.n	80091c4 <__pow5mult+0x20>
 8009210:	1e5a      	subs	r2, r3, #1
 8009212:	4d0b      	ldr	r5, [pc, #44]	; (8009240 <__pow5mult+0x9c>)
 8009214:	2300      	movs	r3, #0
 8009216:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800921a:	f7ff fe93 	bl	8008f44 <__multadd>
 800921e:	4606      	mov	r6, r0
 8009220:	e7c8      	b.n	80091b4 <__pow5mult+0x10>
 8009222:	2101      	movs	r1, #1
 8009224:	4638      	mov	r0, r7
 8009226:	f7ff fe5d 	bl	8008ee4 <_Balloc>
 800922a:	f240 2171 	movw	r1, #625	; 0x271
 800922e:	2201      	movs	r2, #1
 8009230:	2300      	movs	r3, #0
 8009232:	6141      	str	r1, [r0, #20]
 8009234:	6102      	str	r2, [r0, #16]
 8009236:	4605      	mov	r5, r0
 8009238:	64b8      	str	r0, [r7, #72]	; 0x48
 800923a:	6003      	str	r3, [r0, #0]
 800923c:	e7be      	b.n	80091bc <__pow5mult+0x18>
 800923e:	bf00      	nop
 8009240:	08009eb4 	.word	0x08009eb4

08009244 <__lshift>:
 8009244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009248:	4691      	mov	r9, r2
 800924a:	690a      	ldr	r2, [r1, #16]
 800924c:	688b      	ldr	r3, [r1, #8]
 800924e:	ea4f 1469 	mov.w	r4, r9, asr #5
 8009252:	eb04 0802 	add.w	r8, r4, r2
 8009256:	f108 0501 	add.w	r5, r8, #1
 800925a:	429d      	cmp	r5, r3
 800925c:	460e      	mov	r6, r1
 800925e:	4682      	mov	sl, r0
 8009260:	6849      	ldr	r1, [r1, #4]
 8009262:	dd04      	ble.n	800926e <__lshift+0x2a>
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	429d      	cmp	r5, r3
 8009268:	f101 0101 	add.w	r1, r1, #1
 800926c:	dcfa      	bgt.n	8009264 <__lshift+0x20>
 800926e:	4650      	mov	r0, sl
 8009270:	f7ff fe38 	bl	8008ee4 <_Balloc>
 8009274:	2c00      	cmp	r4, #0
 8009276:	f100 0214 	add.w	r2, r0, #20
 800927a:	dd38      	ble.n	80092ee <__lshift+0xaa>
 800927c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8009280:	2100      	movs	r1, #0
 8009282:	f842 1b04 	str.w	r1, [r2], #4
 8009286:	4293      	cmp	r3, r2
 8009288:	d1fb      	bne.n	8009282 <__lshift+0x3e>
 800928a:	6934      	ldr	r4, [r6, #16]
 800928c:	f106 0114 	add.w	r1, r6, #20
 8009290:	f019 091f 	ands.w	r9, r9, #31
 8009294:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8009298:	d021      	beq.n	80092de <__lshift+0x9a>
 800929a:	f1c9 0220 	rsb	r2, r9, #32
 800929e:	2400      	movs	r4, #0
 80092a0:	680f      	ldr	r7, [r1, #0]
 80092a2:	fa07 fc09 	lsl.w	ip, r7, r9
 80092a6:	ea4c 0404 	orr.w	r4, ip, r4
 80092aa:	469c      	mov	ip, r3
 80092ac:	f843 4b04 	str.w	r4, [r3], #4
 80092b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80092b4:	458e      	cmp	lr, r1
 80092b6:	fa24 f402 	lsr.w	r4, r4, r2
 80092ba:	d8f1      	bhi.n	80092a0 <__lshift+0x5c>
 80092bc:	f8cc 4004 	str.w	r4, [ip, #4]
 80092c0:	b10c      	cbz	r4, 80092c6 <__lshift+0x82>
 80092c2:	f108 0502 	add.w	r5, r8, #2
 80092c6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80092ca:	6872      	ldr	r2, [r6, #4]
 80092cc:	3d01      	subs	r5, #1
 80092ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092d2:	6105      	str	r5, [r0, #16]
 80092d4:	6031      	str	r1, [r6, #0]
 80092d6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80092da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092de:	3b04      	subs	r3, #4
 80092e0:	f851 2b04 	ldr.w	r2, [r1], #4
 80092e4:	f843 2f04 	str.w	r2, [r3, #4]!
 80092e8:	458e      	cmp	lr, r1
 80092ea:	d8f9      	bhi.n	80092e0 <__lshift+0x9c>
 80092ec:	e7eb      	b.n	80092c6 <__lshift+0x82>
 80092ee:	4613      	mov	r3, r2
 80092f0:	e7cb      	b.n	800928a <__lshift+0x46>
 80092f2:	bf00      	nop

080092f4 <__mcmp>:
 80092f4:	6902      	ldr	r2, [r0, #16]
 80092f6:	690b      	ldr	r3, [r1, #16]
 80092f8:	1ad2      	subs	r2, r2, r3
 80092fa:	d113      	bne.n	8009324 <__mcmp+0x30>
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	3014      	adds	r0, #20
 8009300:	3114      	adds	r1, #20
 8009302:	4419      	add	r1, r3
 8009304:	b410      	push	{r4}
 8009306:	4403      	add	r3, r0
 8009308:	e001      	b.n	800930e <__mcmp+0x1a>
 800930a:	4298      	cmp	r0, r3
 800930c:	d20c      	bcs.n	8009328 <__mcmp+0x34>
 800930e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8009312:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009316:	4294      	cmp	r4, r2
 8009318:	d0f7      	beq.n	800930a <__mcmp+0x16>
 800931a:	d309      	bcc.n	8009330 <__mcmp+0x3c>
 800931c:	2001      	movs	r0, #1
 800931e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	4610      	mov	r0, r2
 8009326:	4770      	bx	lr
 8009328:	2000      	movs	r0, #0
 800932a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	f04f 30ff 	mov.w	r0, #4294967295
 8009334:	e7f3      	b.n	800931e <__mcmp+0x2a>
 8009336:	bf00      	nop

08009338 <__mdiff>:
 8009338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800933c:	690b      	ldr	r3, [r1, #16]
 800933e:	460f      	mov	r7, r1
 8009340:	6911      	ldr	r1, [r2, #16]
 8009342:	1a5b      	subs	r3, r3, r1
 8009344:	2b00      	cmp	r3, #0
 8009346:	4690      	mov	r8, r2
 8009348:	d117      	bne.n	800937a <__mdiff+0x42>
 800934a:	0089      	lsls	r1, r1, #2
 800934c:	f107 0214 	add.w	r2, r7, #20
 8009350:	f108 0514 	add.w	r5, r8, #20
 8009354:	1853      	adds	r3, r2, r1
 8009356:	4429      	add	r1, r5
 8009358:	e001      	b.n	800935e <__mdiff+0x26>
 800935a:	429a      	cmp	r2, r3
 800935c:	d25e      	bcs.n	800941c <__mdiff+0xe4>
 800935e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8009362:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009366:	42a6      	cmp	r6, r4
 8009368:	d0f7      	beq.n	800935a <__mdiff+0x22>
 800936a:	d260      	bcs.n	800942e <__mdiff+0xf6>
 800936c:	463b      	mov	r3, r7
 800936e:	4614      	mov	r4, r2
 8009370:	4647      	mov	r7, r8
 8009372:	f04f 0901 	mov.w	r9, #1
 8009376:	4698      	mov	r8, r3
 8009378:	e006      	b.n	8009388 <__mdiff+0x50>
 800937a:	db5d      	blt.n	8009438 <__mdiff+0x100>
 800937c:	f107 0514 	add.w	r5, r7, #20
 8009380:	f102 0414 	add.w	r4, r2, #20
 8009384:	f04f 0900 	mov.w	r9, #0
 8009388:	6879      	ldr	r1, [r7, #4]
 800938a:	f7ff fdab 	bl	8008ee4 <_Balloc>
 800938e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009392:	693e      	ldr	r6, [r7, #16]
 8009394:	f8c0 900c 	str.w	r9, [r0, #12]
 8009398:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800939c:	46a6      	mov	lr, r4
 800939e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80093a2:	f100 0414 	add.w	r4, r0, #20
 80093a6:	2300      	movs	r3, #0
 80093a8:	f85e 1b04 	ldr.w	r1, [lr], #4
 80093ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80093b0:	b28a      	uxth	r2, r1
 80093b2:	fa13 f388 	uxtah	r3, r3, r8
 80093b6:	0c09      	lsrs	r1, r1, #16
 80093b8:	1a9a      	subs	r2, r3, r2
 80093ba:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 80093be:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80093c2:	b292      	uxth	r2, r2
 80093c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093c8:	45f4      	cmp	ip, lr
 80093ca:	f844 2b04 	str.w	r2, [r4], #4
 80093ce:	ea4f 4323 	mov.w	r3, r3, asr #16
 80093d2:	d8e9      	bhi.n	80093a8 <__mdiff+0x70>
 80093d4:	42af      	cmp	r7, r5
 80093d6:	d917      	bls.n	8009408 <__mdiff+0xd0>
 80093d8:	46a4      	mov	ip, r4
 80093da:	4629      	mov	r1, r5
 80093dc:	f851 eb04 	ldr.w	lr, [r1], #4
 80093e0:	fa13 f28e 	uxtah	r2, r3, lr
 80093e4:	1413      	asrs	r3, r2, #16
 80093e6:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 80093ea:	b292      	uxth	r2, r2
 80093ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093f0:	428f      	cmp	r7, r1
 80093f2:	f84c 2b04 	str.w	r2, [ip], #4
 80093f6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80093fa:	d8ef      	bhi.n	80093dc <__mdiff+0xa4>
 80093fc:	43ed      	mvns	r5, r5
 80093fe:	443d      	add	r5, r7
 8009400:	f025 0503 	bic.w	r5, r5, #3
 8009404:	3504      	adds	r5, #4
 8009406:	442c      	add	r4, r5
 8009408:	3c04      	subs	r4, #4
 800940a:	b922      	cbnz	r2, 8009416 <__mdiff+0xde>
 800940c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8009410:	3e01      	subs	r6, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0fa      	beq.n	800940c <__mdiff+0xd4>
 8009416:	6106      	str	r6, [r0, #16]
 8009418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800941c:	2100      	movs	r1, #0
 800941e:	f7ff fd61 	bl	8008ee4 <_Balloc>
 8009422:	2201      	movs	r2, #1
 8009424:	2300      	movs	r3, #0
 8009426:	6102      	str	r2, [r0, #16]
 8009428:	6143      	str	r3, [r0, #20]
 800942a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942e:	462c      	mov	r4, r5
 8009430:	f04f 0900 	mov.w	r9, #0
 8009434:	4615      	mov	r5, r2
 8009436:	e7a7      	b.n	8009388 <__mdiff+0x50>
 8009438:	463b      	mov	r3, r7
 800943a:	f107 0414 	add.w	r4, r7, #20
 800943e:	f108 0514 	add.w	r5, r8, #20
 8009442:	4647      	mov	r7, r8
 8009444:	f04f 0901 	mov.w	r9, #1
 8009448:	4698      	mov	r8, r3
 800944a:	e79d      	b.n	8009388 <__mdiff+0x50>

0800944c <__d2b>:
 800944c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009450:	ec57 6b10 	vmov	r6, r7, d0
 8009454:	b083      	sub	sp, #12
 8009456:	4688      	mov	r8, r1
 8009458:	2101      	movs	r1, #1
 800945a:	463c      	mov	r4, r7
 800945c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009460:	4617      	mov	r7, r2
 8009462:	f7ff fd3f 	bl	8008ee4 <_Balloc>
 8009466:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800946a:	4681      	mov	r9, r0
 800946c:	b10d      	cbz	r5, 8009472 <__d2b+0x26>
 800946e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009472:	9401      	str	r4, [sp, #4]
 8009474:	b31e      	cbz	r6, 80094be <__d2b+0x72>
 8009476:	a802      	add	r0, sp, #8
 8009478:	f840 6d08 	str.w	r6, [r0, #-8]!
 800947c:	f7ff fdc2 	bl	8009004 <__lo0bits>
 8009480:	2800      	cmp	r0, #0
 8009482:	d134      	bne.n	80094ee <__d2b+0xa2>
 8009484:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009488:	f8c9 2014 	str.w	r2, [r9, #20]
 800948c:	2b00      	cmp	r3, #0
 800948e:	bf0c      	ite	eq
 8009490:	2101      	moveq	r1, #1
 8009492:	2102      	movne	r1, #2
 8009494:	f8c9 3018 	str.w	r3, [r9, #24]
 8009498:	f8c9 1010 	str.w	r1, [r9, #16]
 800949c:	b9dd      	cbnz	r5, 80094d6 <__d2b+0x8a>
 800949e:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 80094a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094a6:	f8c8 0000 	str.w	r0, [r8]
 80094aa:	6918      	ldr	r0, [r3, #16]
 80094ac:	f7ff fd8a 	bl	8008fc4 <__hi0bits>
 80094b0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80094b4:	6038      	str	r0, [r7, #0]
 80094b6:	4648      	mov	r0, r9
 80094b8:	b003      	add	sp, #12
 80094ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094be:	a801      	add	r0, sp, #4
 80094c0:	f7ff fda0 	bl	8009004 <__lo0bits>
 80094c4:	9b01      	ldr	r3, [sp, #4]
 80094c6:	f8c9 3014 	str.w	r3, [r9, #20]
 80094ca:	2101      	movs	r1, #1
 80094cc:	3020      	adds	r0, #32
 80094ce:	f8c9 1010 	str.w	r1, [r9, #16]
 80094d2:	2d00      	cmp	r5, #0
 80094d4:	d0e3      	beq.n	800949e <__d2b+0x52>
 80094d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094da:	4405      	add	r5, r0
 80094dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094e0:	f8c8 5000 	str.w	r5, [r8]
 80094e4:	6038      	str	r0, [r7, #0]
 80094e6:	4648      	mov	r0, r9
 80094e8:	b003      	add	sp, #12
 80094ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094ee:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80094f2:	f1c0 0120 	rsb	r1, r0, #32
 80094f6:	fa03 f101 	lsl.w	r1, r3, r1
 80094fa:	430a      	orrs	r2, r1
 80094fc:	40c3      	lsrs	r3, r0
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	f8c9 2014 	str.w	r2, [r9, #20]
 8009504:	e7c2      	b.n	800948c <__d2b+0x40>
 8009506:	bf00      	nop

08009508 <__fpclassifyd>:
 8009508:	ec53 2b10 	vmov	r2, r3, d0
 800950c:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8009510:	b410      	push	{r4}
 8009512:	d008      	beq.n	8009526 <__fpclassifyd+0x1e>
 8009514:	4811      	ldr	r0, [pc, #68]	; (800955c <__fpclassifyd+0x54>)
 8009516:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 800951a:	4284      	cmp	r4, r0
 800951c:	d808      	bhi.n	8009530 <__fpclassifyd+0x28>
 800951e:	2004      	movs	r0, #4
 8009520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	b91a      	cbnz	r2, 8009530 <__fpclassifyd+0x28>
 8009528:	2002      	movs	r0, #2
 800952a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8009534:	4809      	ldr	r0, [pc, #36]	; (800955c <__fpclassifyd+0x54>)
 8009536:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800953a:	4283      	cmp	r3, r0
 800953c:	d9ef      	bls.n	800951e <__fpclassifyd+0x16>
 800953e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009542:	d201      	bcs.n	8009548 <__fpclassifyd+0x40>
 8009544:	2003      	movs	r0, #3
 8009546:	e7eb      	b.n	8009520 <__fpclassifyd+0x18>
 8009548:	4b05      	ldr	r3, [pc, #20]	; (8009560 <__fpclassifyd+0x58>)
 800954a:	4299      	cmp	r1, r3
 800954c:	d001      	beq.n	8009552 <__fpclassifyd+0x4a>
 800954e:	2000      	movs	r0, #0
 8009550:	e7e6      	b.n	8009520 <__fpclassifyd+0x18>
 8009552:	fab2 f082 	clz	r0, r2
 8009556:	0940      	lsrs	r0, r0, #5
 8009558:	e7e2      	b.n	8009520 <__fpclassifyd+0x18>
 800955a:	bf00      	nop
 800955c:	7fdfffff 	.word	0x7fdfffff
 8009560:	7ff00000 	.word	0x7ff00000

08009564 <__ssprint_r>:
 8009564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	6893      	ldr	r3, [r2, #8]
 800956a:	b083      	sub	sp, #12
 800956c:	4690      	mov	r8, r2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d072      	beq.n	8009658 <__ssprint_r+0xf4>
 8009572:	4683      	mov	fp, r0
 8009574:	f04f 0900 	mov.w	r9, #0
 8009578:	6816      	ldr	r6, [r2, #0]
 800957a:	6808      	ldr	r0, [r1, #0]
 800957c:	688b      	ldr	r3, [r1, #8]
 800957e:	460d      	mov	r5, r1
 8009580:	464c      	mov	r4, r9
 8009582:	2c00      	cmp	r4, #0
 8009584:	d045      	beq.n	8009612 <__ssprint_r+0xae>
 8009586:	429c      	cmp	r4, r3
 8009588:	461f      	mov	r7, r3
 800958a:	469a      	mov	sl, r3
 800958c:	d346      	bcc.n	800961c <__ssprint_r+0xb8>
 800958e:	89ab      	ldrh	r3, [r5, #12]
 8009590:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8009594:	d02d      	beq.n	80095f2 <__ssprint_r+0x8e>
 8009596:	696f      	ldr	r7, [r5, #20]
 8009598:	6929      	ldr	r1, [r5, #16]
 800959a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800959e:	ebc1 0a00 	rsb	sl, r1, r0
 80095a2:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80095a6:	1c60      	adds	r0, r4, #1
 80095a8:	107f      	asrs	r7, r7, #1
 80095aa:	4450      	add	r0, sl
 80095ac:	42b8      	cmp	r0, r7
 80095ae:	463a      	mov	r2, r7
 80095b0:	bf84      	itt	hi
 80095b2:	4607      	movhi	r7, r0
 80095b4:	463a      	movhi	r2, r7
 80095b6:	055b      	lsls	r3, r3, #21
 80095b8:	d533      	bpl.n	8009622 <__ssprint_r+0xbe>
 80095ba:	4611      	mov	r1, r2
 80095bc:	4658      	mov	r0, fp
 80095be:	f7ff f9d5 	bl	800896c <_malloc_r>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d037      	beq.n	8009636 <__ssprint_r+0xd2>
 80095c6:	4652      	mov	r2, sl
 80095c8:	6929      	ldr	r1, [r5, #16]
 80095ca:	9001      	str	r0, [sp, #4]
 80095cc:	f7f7 fa64 	bl	8000a98 <memcpy>
 80095d0:	89aa      	ldrh	r2, [r5, #12]
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80095d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80095dc:	81aa      	strh	r2, [r5, #12]
 80095de:	ebca 0207 	rsb	r2, sl, r7
 80095e2:	eb03 000a 	add.w	r0, r3, sl
 80095e6:	616f      	str	r7, [r5, #20]
 80095e8:	612b      	str	r3, [r5, #16]
 80095ea:	6028      	str	r0, [r5, #0]
 80095ec:	60aa      	str	r2, [r5, #8]
 80095ee:	4627      	mov	r7, r4
 80095f0:	46a2      	mov	sl, r4
 80095f2:	4652      	mov	r2, sl
 80095f4:	4649      	mov	r1, r9
 80095f6:	f000 f99b 	bl	8009930 <memmove>
 80095fa:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80095fe:	68ab      	ldr	r3, [r5, #8]
 8009600:	6828      	ldr	r0, [r5, #0]
 8009602:	1bdb      	subs	r3, r3, r7
 8009604:	4450      	add	r0, sl
 8009606:	1b14      	subs	r4, r2, r4
 8009608:	60ab      	str	r3, [r5, #8]
 800960a:	6028      	str	r0, [r5, #0]
 800960c:	f8c8 4008 	str.w	r4, [r8, #8]
 8009610:	b314      	cbz	r4, 8009658 <__ssprint_r+0xf4>
 8009612:	f8d6 9000 	ldr.w	r9, [r6]
 8009616:	6874      	ldr	r4, [r6, #4]
 8009618:	3608      	adds	r6, #8
 800961a:	e7b2      	b.n	8009582 <__ssprint_r+0x1e>
 800961c:	4627      	mov	r7, r4
 800961e:	46a2      	mov	sl, r4
 8009620:	e7e7      	b.n	80095f2 <__ssprint_r+0x8e>
 8009622:	4658      	mov	r0, fp
 8009624:	f000 f9e8 	bl	80099f8 <_realloc_r>
 8009628:	4603      	mov	r3, r0
 800962a:	2800      	cmp	r0, #0
 800962c:	d1d7      	bne.n	80095de <__ssprint_r+0x7a>
 800962e:	6929      	ldr	r1, [r5, #16]
 8009630:	4658      	mov	r0, fp
 8009632:	f000 f895 	bl	8009760 <_free_r>
 8009636:	230c      	movs	r3, #12
 8009638:	f8cb 3000 	str.w	r3, [fp]
 800963c:	89ab      	ldrh	r3, [r5, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	81ab      	strh	r3, [r5, #12]
 800964a:	f8c8 2008 	str.w	r2, [r8, #8]
 800964e:	f8c8 2004 	str.w	r2, [r8, #4]
 8009652:	b003      	add	sp, #12
 8009654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009658:	2000      	movs	r0, #0
 800965a:	f8c8 0004 	str.w	r0, [r8, #4]
 800965e:	b003      	add	sp, #12
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009664 <_calloc_r>:
 8009664:	b510      	push	{r4, lr}
 8009666:	fb02 f101 	mul.w	r1, r2, r1
 800966a:	f7ff f97f 	bl	800896c <_malloc_r>
 800966e:	4604      	mov	r4, r0
 8009670:	b1d8      	cbz	r0, 80096aa <_calloc_r+0x46>
 8009672:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009676:	f022 0203 	bic.w	r2, r2, #3
 800967a:	3a04      	subs	r2, #4
 800967c:	2a24      	cmp	r2, #36	; 0x24
 800967e:	d818      	bhi.n	80096b2 <_calloc_r+0x4e>
 8009680:	2a13      	cmp	r2, #19
 8009682:	d914      	bls.n	80096ae <_calloc_r+0x4a>
 8009684:	2300      	movs	r3, #0
 8009686:	2a1b      	cmp	r2, #27
 8009688:	6003      	str	r3, [r0, #0]
 800968a:	6043      	str	r3, [r0, #4]
 800968c:	d916      	bls.n	80096bc <_calloc_r+0x58>
 800968e:	2a24      	cmp	r2, #36	; 0x24
 8009690:	6083      	str	r3, [r0, #8]
 8009692:	60c3      	str	r3, [r0, #12]
 8009694:	bf11      	iteee	ne
 8009696:	f100 0210 	addne.w	r2, r0, #16
 800969a:	6103      	streq	r3, [r0, #16]
 800969c:	6143      	streq	r3, [r0, #20]
 800969e:	f100 0218 	addeq.w	r2, r0, #24
 80096a2:	2300      	movs	r3, #0
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	6053      	str	r3, [r2, #4]
 80096a8:	6093      	str	r3, [r2, #8]
 80096aa:	4620      	mov	r0, r4
 80096ac:	bd10      	pop	{r4, pc}
 80096ae:	4602      	mov	r2, r0
 80096b0:	e7f7      	b.n	80096a2 <_calloc_r+0x3e>
 80096b2:	2100      	movs	r1, #0
 80096b4:	f7f7 fdc8 	bl	8001248 <memset>
 80096b8:	4620      	mov	r0, r4
 80096ba:	bd10      	pop	{r4, pc}
 80096bc:	f100 0208 	add.w	r2, r0, #8
 80096c0:	e7ef      	b.n	80096a2 <_calloc_r+0x3e>
 80096c2:	bf00      	nop

080096c4 <_malloc_trim_r>:
 80096c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c6:	4f23      	ldr	r7, [pc, #140]	; (8009754 <_malloc_trim_r+0x90>)
 80096c8:	460c      	mov	r4, r1
 80096ca:	4606      	mov	r6, r0
 80096cc:	f7ff fc06 	bl	8008edc <__malloc_lock>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	685d      	ldr	r5, [r3, #4]
 80096d4:	f025 0503 	bic.w	r5, r5, #3
 80096d8:	1b29      	subs	r1, r5, r4
 80096da:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80096de:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80096e2:	f021 010f 	bic.w	r1, r1, #15
 80096e6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80096ea:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80096ee:	db07      	blt.n	8009700 <_malloc_trim_r+0x3c>
 80096f0:	2100      	movs	r1, #0
 80096f2:	4630      	mov	r0, r6
 80096f4:	f7f8 fa28 	bl	8001b48 <_sbrk_r>
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	442b      	add	r3, r5
 80096fc:	4298      	cmp	r0, r3
 80096fe:	d004      	beq.n	800970a <_malloc_trim_r+0x46>
 8009700:	4630      	mov	r0, r6
 8009702:	f7ff fbed 	bl	8008ee0 <__malloc_unlock>
 8009706:	2000      	movs	r0, #0
 8009708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970a:	4261      	negs	r1, r4
 800970c:	4630      	mov	r0, r6
 800970e:	f7f8 fa1b 	bl	8001b48 <_sbrk_r>
 8009712:	3001      	adds	r0, #1
 8009714:	d00d      	beq.n	8009732 <_malloc_trim_r+0x6e>
 8009716:	4b10      	ldr	r3, [pc, #64]	; (8009758 <_malloc_trim_r+0x94>)
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	6819      	ldr	r1, [r3, #0]
 800971c:	1b2d      	subs	r5, r5, r4
 800971e:	f045 0501 	orr.w	r5, r5, #1
 8009722:	4630      	mov	r0, r6
 8009724:	1b09      	subs	r1, r1, r4
 8009726:	6055      	str	r5, [r2, #4]
 8009728:	6019      	str	r1, [r3, #0]
 800972a:	f7ff fbd9 	bl	8008ee0 <__malloc_unlock>
 800972e:	2001      	movs	r0, #1
 8009730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009732:	2100      	movs	r1, #0
 8009734:	4630      	mov	r0, r6
 8009736:	f7f8 fa07 	bl	8001b48 <_sbrk_r>
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	1a83      	subs	r3, r0, r2
 800973e:	2b0f      	cmp	r3, #15
 8009740:	ddde      	ble.n	8009700 <_malloc_trim_r+0x3c>
 8009742:	4c06      	ldr	r4, [pc, #24]	; (800975c <_malloc_trim_r+0x98>)
 8009744:	4904      	ldr	r1, [pc, #16]	; (8009758 <_malloc_trim_r+0x94>)
 8009746:	6824      	ldr	r4, [r4, #0]
 8009748:	f043 0301 	orr.w	r3, r3, #1
 800974c:	1b00      	subs	r0, r0, r4
 800974e:	6053      	str	r3, [r2, #4]
 8009750:	6008      	str	r0, [r1, #0]
 8009752:	e7d5      	b.n	8009700 <_malloc_trim_r+0x3c>
 8009754:	20000468 	.word	0x20000468
 8009758:	20000e5c 	.word	0x20000e5c
 800975c:	20000874 	.word	0x20000874

08009760 <_free_r>:
 8009760:	2900      	cmp	r1, #0
 8009762:	d045      	beq.n	80097f0 <_free_r+0x90>
 8009764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009768:	460d      	mov	r5, r1
 800976a:	4680      	mov	r8, r0
 800976c:	f7ff fbb6 	bl	8008edc <__malloc_lock>
 8009770:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8009774:	496a      	ldr	r1, [pc, #424]	; (8009920 <_free_r+0x1c0>)
 8009776:	f027 0301 	bic.w	r3, r7, #1
 800977a:	f1a5 0408 	sub.w	r4, r5, #8
 800977e:	18e2      	adds	r2, r4, r3
 8009780:	688e      	ldr	r6, [r1, #8]
 8009782:	6850      	ldr	r0, [r2, #4]
 8009784:	42b2      	cmp	r2, r6
 8009786:	f020 0003 	bic.w	r0, r0, #3
 800978a:	d062      	beq.n	8009852 <_free_r+0xf2>
 800978c:	07fe      	lsls	r6, r7, #31
 800978e:	6050      	str	r0, [r2, #4]
 8009790:	d40b      	bmi.n	80097aa <_free_r+0x4a>
 8009792:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8009796:	1be4      	subs	r4, r4, r7
 8009798:	f101 0e08 	add.w	lr, r1, #8
 800979c:	68a5      	ldr	r5, [r4, #8]
 800979e:	4575      	cmp	r5, lr
 80097a0:	443b      	add	r3, r7
 80097a2:	d06f      	beq.n	8009884 <_free_r+0x124>
 80097a4:	68e7      	ldr	r7, [r4, #12]
 80097a6:	60ef      	str	r7, [r5, #12]
 80097a8:	60bd      	str	r5, [r7, #8]
 80097aa:	1815      	adds	r5, r2, r0
 80097ac:	686d      	ldr	r5, [r5, #4]
 80097ae:	07ed      	lsls	r5, r5, #31
 80097b0:	d542      	bpl.n	8009838 <_free_r+0xd8>
 80097b2:	f043 0201 	orr.w	r2, r3, #1
 80097b6:	6062      	str	r2, [r4, #4]
 80097b8:	50e3      	str	r3, [r4, r3]
 80097ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097be:	d218      	bcs.n	80097f2 <_free_r+0x92>
 80097c0:	08db      	lsrs	r3, r3, #3
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	684d      	ldr	r5, [r1, #4]
 80097c6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 80097ca:	60a7      	str	r7, [r4, #8]
 80097cc:	2001      	movs	r0, #1
 80097ce:	109b      	asrs	r3, r3, #2
 80097d0:	fa00 f303 	lsl.w	r3, r0, r3
 80097d4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 80097d8:	431d      	orrs	r5, r3
 80097da:	3808      	subs	r0, #8
 80097dc:	60e0      	str	r0, [r4, #12]
 80097de:	604d      	str	r5, [r1, #4]
 80097e0:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 80097e4:	60fc      	str	r4, [r7, #12]
 80097e6:	4640      	mov	r0, r8
 80097e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ec:	f7ff bb78 	b.w	8008ee0 <__malloc_unlock>
 80097f0:	4770      	bx	lr
 80097f2:	0a5a      	lsrs	r2, r3, #9
 80097f4:	2a04      	cmp	r2, #4
 80097f6:	d853      	bhi.n	80098a0 <_free_r+0x140>
 80097f8:	099a      	lsrs	r2, r3, #6
 80097fa:	f102 0739 	add.w	r7, r2, #57	; 0x39
 80097fe:	007f      	lsls	r7, r7, #1
 8009800:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8009804:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8009808:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 800980c:	4944      	ldr	r1, [pc, #272]	; (8009920 <_free_r+0x1c0>)
 800980e:	3808      	subs	r0, #8
 8009810:	4290      	cmp	r0, r2
 8009812:	d04d      	beq.n	80098b0 <_free_r+0x150>
 8009814:	6851      	ldr	r1, [r2, #4]
 8009816:	f021 0103 	bic.w	r1, r1, #3
 800981a:	428b      	cmp	r3, r1
 800981c:	d202      	bcs.n	8009824 <_free_r+0xc4>
 800981e:	6892      	ldr	r2, [r2, #8]
 8009820:	4290      	cmp	r0, r2
 8009822:	d1f7      	bne.n	8009814 <_free_r+0xb4>
 8009824:	68d0      	ldr	r0, [r2, #12]
 8009826:	60e0      	str	r0, [r4, #12]
 8009828:	60a2      	str	r2, [r4, #8]
 800982a:	6084      	str	r4, [r0, #8]
 800982c:	60d4      	str	r4, [r2, #12]
 800982e:	4640      	mov	r0, r8
 8009830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009834:	f7ff bb54 	b.w	8008ee0 <__malloc_unlock>
 8009838:	6895      	ldr	r5, [r2, #8]
 800983a:	4f3a      	ldr	r7, [pc, #232]	; (8009924 <_free_r+0x1c4>)
 800983c:	42bd      	cmp	r5, r7
 800983e:	4403      	add	r3, r0
 8009840:	d03f      	beq.n	80098c2 <_free_r+0x162>
 8009842:	68d0      	ldr	r0, [r2, #12]
 8009844:	60e8      	str	r0, [r5, #12]
 8009846:	f043 0201 	orr.w	r2, r3, #1
 800984a:	6085      	str	r5, [r0, #8]
 800984c:	6062      	str	r2, [r4, #4]
 800984e:	50e3      	str	r3, [r4, r3]
 8009850:	e7b3      	b.n	80097ba <_free_r+0x5a>
 8009852:	07ff      	lsls	r7, r7, #31
 8009854:	4403      	add	r3, r0
 8009856:	d407      	bmi.n	8009868 <_free_r+0x108>
 8009858:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800985c:	1aa4      	subs	r4, r4, r2
 800985e:	4413      	add	r3, r2
 8009860:	68a0      	ldr	r0, [r4, #8]
 8009862:	68e2      	ldr	r2, [r4, #12]
 8009864:	60c2      	str	r2, [r0, #12]
 8009866:	6090      	str	r0, [r2, #8]
 8009868:	4a2f      	ldr	r2, [pc, #188]	; (8009928 <_free_r+0x1c8>)
 800986a:	6812      	ldr	r2, [r2, #0]
 800986c:	f043 0001 	orr.w	r0, r3, #1
 8009870:	4293      	cmp	r3, r2
 8009872:	6060      	str	r0, [r4, #4]
 8009874:	608c      	str	r4, [r1, #8]
 8009876:	d3b6      	bcc.n	80097e6 <_free_r+0x86>
 8009878:	4b2c      	ldr	r3, [pc, #176]	; (800992c <_free_r+0x1cc>)
 800987a:	4640      	mov	r0, r8
 800987c:	6819      	ldr	r1, [r3, #0]
 800987e:	f7ff ff21 	bl	80096c4 <_malloc_trim_r>
 8009882:	e7b0      	b.n	80097e6 <_free_r+0x86>
 8009884:	1811      	adds	r1, r2, r0
 8009886:	6849      	ldr	r1, [r1, #4]
 8009888:	07c9      	lsls	r1, r1, #31
 800988a:	d444      	bmi.n	8009916 <_free_r+0x1b6>
 800988c:	6891      	ldr	r1, [r2, #8]
 800988e:	68d2      	ldr	r2, [r2, #12]
 8009890:	60ca      	str	r2, [r1, #12]
 8009892:	4403      	add	r3, r0
 8009894:	f043 0001 	orr.w	r0, r3, #1
 8009898:	6091      	str	r1, [r2, #8]
 800989a:	6060      	str	r0, [r4, #4]
 800989c:	50e3      	str	r3, [r4, r3]
 800989e:	e7a2      	b.n	80097e6 <_free_r+0x86>
 80098a0:	2a14      	cmp	r2, #20
 80098a2:	d817      	bhi.n	80098d4 <_free_r+0x174>
 80098a4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80098a8:	007f      	lsls	r7, r7, #1
 80098aa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80098ae:	e7a9      	b.n	8009804 <_free_r+0xa4>
 80098b0:	10aa      	asrs	r2, r5, #2
 80098b2:	684b      	ldr	r3, [r1, #4]
 80098b4:	2501      	movs	r5, #1
 80098b6:	fa05 f202 	lsl.w	r2, r5, r2
 80098ba:	4313      	orrs	r3, r2
 80098bc:	604b      	str	r3, [r1, #4]
 80098be:	4602      	mov	r2, r0
 80098c0:	e7b1      	b.n	8009826 <_free_r+0xc6>
 80098c2:	f043 0201 	orr.w	r2, r3, #1
 80098c6:	614c      	str	r4, [r1, #20]
 80098c8:	610c      	str	r4, [r1, #16]
 80098ca:	60e5      	str	r5, [r4, #12]
 80098cc:	60a5      	str	r5, [r4, #8]
 80098ce:	6062      	str	r2, [r4, #4]
 80098d0:	50e3      	str	r3, [r4, r3]
 80098d2:	e788      	b.n	80097e6 <_free_r+0x86>
 80098d4:	2a54      	cmp	r2, #84	; 0x54
 80098d6:	d806      	bhi.n	80098e6 <_free_r+0x186>
 80098d8:	0b1a      	lsrs	r2, r3, #12
 80098da:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 80098de:	007f      	lsls	r7, r7, #1
 80098e0:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 80098e4:	e78e      	b.n	8009804 <_free_r+0xa4>
 80098e6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80098ea:	d806      	bhi.n	80098fa <_free_r+0x19a>
 80098ec:	0bda      	lsrs	r2, r3, #15
 80098ee:	f102 0778 	add.w	r7, r2, #120	; 0x78
 80098f2:	007f      	lsls	r7, r7, #1
 80098f4:	f102 0577 	add.w	r5, r2, #119	; 0x77
 80098f8:	e784      	b.n	8009804 <_free_r+0xa4>
 80098fa:	f240 5054 	movw	r0, #1364	; 0x554
 80098fe:	4282      	cmp	r2, r0
 8009900:	d806      	bhi.n	8009910 <_free_r+0x1b0>
 8009902:	0c9a      	lsrs	r2, r3, #18
 8009904:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8009908:	007f      	lsls	r7, r7, #1
 800990a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800990e:	e779      	b.n	8009804 <_free_r+0xa4>
 8009910:	27fe      	movs	r7, #254	; 0xfe
 8009912:	257e      	movs	r5, #126	; 0x7e
 8009914:	e776      	b.n	8009804 <_free_r+0xa4>
 8009916:	f043 0201 	orr.w	r2, r3, #1
 800991a:	6062      	str	r2, [r4, #4]
 800991c:	50e3      	str	r3, [r4, r3]
 800991e:	e762      	b.n	80097e6 <_free_r+0x86>
 8009920:	20000468 	.word	0x20000468
 8009924:	20000470 	.word	0x20000470
 8009928:	20000870 	.word	0x20000870
 800992c:	20000e58 	.word	0x20000e58

08009930 <memmove>:
 8009930:	4288      	cmp	r0, r1
 8009932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009934:	d90d      	bls.n	8009952 <memmove+0x22>
 8009936:	188b      	adds	r3, r1, r2
 8009938:	4298      	cmp	r0, r3
 800993a:	d20a      	bcs.n	8009952 <memmove+0x22>
 800993c:	1881      	adds	r1, r0, r2
 800993e:	2a00      	cmp	r2, #0
 8009940:	d051      	beq.n	80099e6 <memmove+0xb6>
 8009942:	1a9a      	subs	r2, r3, r2
 8009944:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009948:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800994c:	4293      	cmp	r3, r2
 800994e:	d1f9      	bne.n	8009944 <memmove+0x14>
 8009950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009952:	2a0f      	cmp	r2, #15
 8009954:	d948      	bls.n	80099e8 <memmove+0xb8>
 8009956:	ea41 0300 	orr.w	r3, r1, r0
 800995a:	079b      	lsls	r3, r3, #30
 800995c:	d146      	bne.n	80099ec <memmove+0xbc>
 800995e:	f100 0410 	add.w	r4, r0, #16
 8009962:	f101 0310 	add.w	r3, r1, #16
 8009966:	4615      	mov	r5, r2
 8009968:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800996c:	f844 6c10 	str.w	r6, [r4, #-16]
 8009970:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8009974:	f844 6c0c 	str.w	r6, [r4, #-12]
 8009978:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800997c:	f844 6c08 	str.w	r6, [r4, #-8]
 8009980:	3d10      	subs	r5, #16
 8009982:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8009986:	f844 6c04 	str.w	r6, [r4, #-4]
 800998a:	2d0f      	cmp	r5, #15
 800998c:	f103 0310 	add.w	r3, r3, #16
 8009990:	f104 0410 	add.w	r4, r4, #16
 8009994:	d8e8      	bhi.n	8009968 <memmove+0x38>
 8009996:	f1a2 0310 	sub.w	r3, r2, #16
 800999a:	f023 030f 	bic.w	r3, r3, #15
 800999e:	f002 0e0f 	and.w	lr, r2, #15
 80099a2:	3310      	adds	r3, #16
 80099a4:	f1be 0f03 	cmp.w	lr, #3
 80099a8:	4419      	add	r1, r3
 80099aa:	4403      	add	r3, r0
 80099ac:	d921      	bls.n	80099f2 <memmove+0xc2>
 80099ae:	1f1e      	subs	r6, r3, #4
 80099b0:	460d      	mov	r5, r1
 80099b2:	4674      	mov	r4, lr
 80099b4:	3c04      	subs	r4, #4
 80099b6:	f855 7b04 	ldr.w	r7, [r5], #4
 80099ba:	f846 7f04 	str.w	r7, [r6, #4]!
 80099be:	2c03      	cmp	r4, #3
 80099c0:	d8f8      	bhi.n	80099b4 <memmove+0x84>
 80099c2:	f1ae 0404 	sub.w	r4, lr, #4
 80099c6:	f024 0403 	bic.w	r4, r4, #3
 80099ca:	3404      	adds	r4, #4
 80099cc:	4423      	add	r3, r4
 80099ce:	4421      	add	r1, r4
 80099d0:	f002 0203 	and.w	r2, r2, #3
 80099d4:	b162      	cbz	r2, 80099f0 <memmove+0xc0>
 80099d6:	3b01      	subs	r3, #1
 80099d8:	440a      	add	r2, r1
 80099da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099e2:	428a      	cmp	r2, r1
 80099e4:	d1f9      	bne.n	80099da <memmove+0xaa>
 80099e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e8:	4603      	mov	r3, r0
 80099ea:	e7f3      	b.n	80099d4 <memmove+0xa4>
 80099ec:	4603      	mov	r3, r0
 80099ee:	e7f2      	b.n	80099d6 <memmove+0xa6>
 80099f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099f2:	4672      	mov	r2, lr
 80099f4:	e7ee      	b.n	80099d4 <memmove+0xa4>
 80099f6:	bf00      	nop

080099f8 <_realloc_r>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	4617      	mov	r7, r2
 80099fe:	b083      	sub	sp, #12
 8009a00:	2900      	cmp	r1, #0
 8009a02:	f000 80c1 	beq.w	8009b88 <_realloc_r+0x190>
 8009a06:	460e      	mov	r6, r1
 8009a08:	4681      	mov	r9, r0
 8009a0a:	f107 050b 	add.w	r5, r7, #11
 8009a0e:	f7ff fa65 	bl	8008edc <__malloc_lock>
 8009a12:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8009a16:	2d16      	cmp	r5, #22
 8009a18:	f02e 0403 	bic.w	r4, lr, #3
 8009a1c:	f1a6 0808 	sub.w	r8, r6, #8
 8009a20:	d840      	bhi.n	8009aa4 <_realloc_r+0xac>
 8009a22:	2210      	movs	r2, #16
 8009a24:	4615      	mov	r5, r2
 8009a26:	42af      	cmp	r7, r5
 8009a28:	d841      	bhi.n	8009aae <_realloc_r+0xb6>
 8009a2a:	4294      	cmp	r4, r2
 8009a2c:	da75      	bge.n	8009b1a <_realloc_r+0x122>
 8009a2e:	4bc9      	ldr	r3, [pc, #804]	; (8009d54 <_realloc_r+0x35c>)
 8009a30:	6899      	ldr	r1, [r3, #8]
 8009a32:	eb08 0004 	add.w	r0, r8, r4
 8009a36:	4288      	cmp	r0, r1
 8009a38:	6841      	ldr	r1, [r0, #4]
 8009a3a:	f000 80d9 	beq.w	8009bf0 <_realloc_r+0x1f8>
 8009a3e:	f021 0301 	bic.w	r3, r1, #1
 8009a42:	4403      	add	r3, r0
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	07db      	lsls	r3, r3, #31
 8009a48:	d57d      	bpl.n	8009b46 <_realloc_r+0x14e>
 8009a4a:	f01e 0f01 	tst.w	lr, #1
 8009a4e:	d035      	beq.n	8009abc <_realloc_r+0xc4>
 8009a50:	4639      	mov	r1, r7
 8009a52:	4648      	mov	r0, r9
 8009a54:	f7fe ff8a 	bl	800896c <_malloc_r>
 8009a58:	4607      	mov	r7, r0
 8009a5a:	b1e0      	cbz	r0, 8009a96 <_realloc_r+0x9e>
 8009a5c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a60:	f023 0301 	bic.w	r3, r3, #1
 8009a64:	4443      	add	r3, r8
 8009a66:	f1a0 0208 	sub.w	r2, r0, #8
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	f000 8144 	beq.w	8009cf8 <_realloc_r+0x300>
 8009a70:	1f22      	subs	r2, r4, #4
 8009a72:	2a24      	cmp	r2, #36	; 0x24
 8009a74:	f200 8131 	bhi.w	8009cda <_realloc_r+0x2e2>
 8009a78:	2a13      	cmp	r2, #19
 8009a7a:	f200 8104 	bhi.w	8009c86 <_realloc_r+0x28e>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	4632      	mov	r2, r6
 8009a82:	6811      	ldr	r1, [r2, #0]
 8009a84:	6019      	str	r1, [r3, #0]
 8009a86:	6851      	ldr	r1, [r2, #4]
 8009a88:	6059      	str	r1, [r3, #4]
 8009a8a:	6892      	ldr	r2, [r2, #8]
 8009a8c:	609a      	str	r2, [r3, #8]
 8009a8e:	4631      	mov	r1, r6
 8009a90:	4648      	mov	r0, r9
 8009a92:	f7ff fe65 	bl	8009760 <_free_r>
 8009a96:	4648      	mov	r0, r9
 8009a98:	f7ff fa22 	bl	8008ee0 <__malloc_unlock>
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	b003      	add	sp, #12
 8009aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa4:	f025 0507 	bic.w	r5, r5, #7
 8009aa8:	2d00      	cmp	r5, #0
 8009aaa:	462a      	mov	r2, r5
 8009aac:	dabb      	bge.n	8009a26 <_realloc_r+0x2e>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	f8c9 3000 	str.w	r3, [r9]
 8009ab6:	b003      	add	sp, #12
 8009ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abc:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009ac0:	ebc3 0a08 	rsb	sl, r3, r8
 8009ac4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009ac8:	f023 0c03 	bic.w	ip, r3, #3
 8009acc:	eb04 030c 	add.w	r3, r4, ip
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	dbbd      	blt.n	8009a50 <_realloc_r+0x58>
 8009ad4:	4657      	mov	r7, sl
 8009ad6:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009ada:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009ade:	1f22      	subs	r2, r4, #4
 8009ae0:	2a24      	cmp	r2, #36	; 0x24
 8009ae2:	60c1      	str	r1, [r0, #12]
 8009ae4:	6088      	str	r0, [r1, #8]
 8009ae6:	f200 8117 	bhi.w	8009d18 <_realloc_r+0x320>
 8009aea:	2a13      	cmp	r2, #19
 8009aec:	f240 8112 	bls.w	8009d14 <_realloc_r+0x31c>
 8009af0:	6831      	ldr	r1, [r6, #0]
 8009af2:	f8ca 1008 	str.w	r1, [sl, #8]
 8009af6:	6871      	ldr	r1, [r6, #4]
 8009af8:	f8ca 100c 	str.w	r1, [sl, #12]
 8009afc:	2a1b      	cmp	r2, #27
 8009afe:	f200 812b 	bhi.w	8009d58 <_realloc_r+0x360>
 8009b02:	3608      	adds	r6, #8
 8009b04:	f10a 0210 	add.w	r2, sl, #16
 8009b08:	6831      	ldr	r1, [r6, #0]
 8009b0a:	6011      	str	r1, [r2, #0]
 8009b0c:	6871      	ldr	r1, [r6, #4]
 8009b0e:	6051      	str	r1, [r2, #4]
 8009b10:	68b1      	ldr	r1, [r6, #8]
 8009b12:	6091      	str	r1, [r2, #8]
 8009b14:	463e      	mov	r6, r7
 8009b16:	461c      	mov	r4, r3
 8009b18:	46d0      	mov	r8, sl
 8009b1a:	1b63      	subs	r3, r4, r5
 8009b1c:	2b0f      	cmp	r3, #15
 8009b1e:	d81d      	bhi.n	8009b5c <_realloc_r+0x164>
 8009b20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b24:	f003 0301 	and.w	r3, r3, #1
 8009b28:	4323      	orrs	r3, r4
 8009b2a:	4444      	add	r4, r8
 8009b2c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009b30:	6863      	ldr	r3, [r4, #4]
 8009b32:	f043 0301 	orr.w	r3, r3, #1
 8009b36:	6063      	str	r3, [r4, #4]
 8009b38:	4648      	mov	r0, r9
 8009b3a:	f7ff f9d1 	bl	8008ee0 <__malloc_unlock>
 8009b3e:	4630      	mov	r0, r6
 8009b40:	b003      	add	sp, #12
 8009b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b46:	f021 0103 	bic.w	r1, r1, #3
 8009b4a:	4421      	add	r1, r4
 8009b4c:	4291      	cmp	r1, r2
 8009b4e:	db21      	blt.n	8009b94 <_realloc_r+0x19c>
 8009b50:	68c3      	ldr	r3, [r0, #12]
 8009b52:	6882      	ldr	r2, [r0, #8]
 8009b54:	460c      	mov	r4, r1
 8009b56:	60d3      	str	r3, [r2, #12]
 8009b58:	609a      	str	r2, [r3, #8]
 8009b5a:	e7de      	b.n	8009b1a <_realloc_r+0x122>
 8009b5c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009b60:	eb08 0105 	add.w	r1, r8, r5
 8009b64:	f002 0201 	and.w	r2, r2, #1
 8009b68:	4315      	orrs	r5, r2
 8009b6a:	f043 0201 	orr.w	r2, r3, #1
 8009b6e:	440b      	add	r3, r1
 8009b70:	f8c8 5004 	str.w	r5, [r8, #4]
 8009b74:	604a      	str	r2, [r1, #4]
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	f042 0201 	orr.w	r2, r2, #1
 8009b7c:	3108      	adds	r1, #8
 8009b7e:	605a      	str	r2, [r3, #4]
 8009b80:	4648      	mov	r0, r9
 8009b82:	f7ff fded 	bl	8009760 <_free_r>
 8009b86:	e7d7      	b.n	8009b38 <_realloc_r+0x140>
 8009b88:	4611      	mov	r1, r2
 8009b8a:	b003      	add	sp, #12
 8009b8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	f7fe beec 	b.w	800896c <_malloc_r>
 8009b94:	f01e 0f01 	tst.w	lr, #1
 8009b98:	f47f af5a 	bne.w	8009a50 <_realloc_r+0x58>
 8009b9c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009ba0:	ebc3 0a08 	rsb	sl, r3, r8
 8009ba4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009ba8:	f023 0c03 	bic.w	ip, r3, #3
 8009bac:	eb01 0e0c 	add.w	lr, r1, ip
 8009bb0:	4596      	cmp	lr, r2
 8009bb2:	db8b      	blt.n	8009acc <_realloc_r+0xd4>
 8009bb4:	68c3      	ldr	r3, [r0, #12]
 8009bb6:	6882      	ldr	r2, [r0, #8]
 8009bb8:	4657      	mov	r7, sl
 8009bba:	60d3      	str	r3, [r2, #12]
 8009bbc:	609a      	str	r2, [r3, #8]
 8009bbe:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009bc2:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009bc6:	60cb      	str	r3, [r1, #12]
 8009bc8:	1f22      	subs	r2, r4, #4
 8009bca:	2a24      	cmp	r2, #36	; 0x24
 8009bcc:	6099      	str	r1, [r3, #8]
 8009bce:	f200 8099 	bhi.w	8009d04 <_realloc_r+0x30c>
 8009bd2:	2a13      	cmp	r2, #19
 8009bd4:	d962      	bls.n	8009c9c <_realloc_r+0x2a4>
 8009bd6:	6833      	ldr	r3, [r6, #0]
 8009bd8:	f8ca 3008 	str.w	r3, [sl, #8]
 8009bdc:	6873      	ldr	r3, [r6, #4]
 8009bde:	f8ca 300c 	str.w	r3, [sl, #12]
 8009be2:	2a1b      	cmp	r2, #27
 8009be4:	f200 80a0 	bhi.w	8009d28 <_realloc_r+0x330>
 8009be8:	3608      	adds	r6, #8
 8009bea:	f10a 0310 	add.w	r3, sl, #16
 8009bee:	e056      	b.n	8009c9e <_realloc_r+0x2a6>
 8009bf0:	f021 0b03 	bic.w	fp, r1, #3
 8009bf4:	44a3      	add	fp, r4
 8009bf6:	f105 0010 	add.w	r0, r5, #16
 8009bfa:	4583      	cmp	fp, r0
 8009bfc:	da59      	bge.n	8009cb2 <_realloc_r+0x2ba>
 8009bfe:	f01e 0f01 	tst.w	lr, #1
 8009c02:	f47f af25 	bne.w	8009a50 <_realloc_r+0x58>
 8009c06:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8009c0a:	ebc1 0a08 	rsb	sl, r1, r8
 8009c0e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009c12:	f021 0c03 	bic.w	ip, r1, #3
 8009c16:	44e3      	add	fp, ip
 8009c18:	4558      	cmp	r0, fp
 8009c1a:	f73f af57 	bgt.w	8009acc <_realloc_r+0xd4>
 8009c1e:	4657      	mov	r7, sl
 8009c20:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009c24:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009c28:	1f22      	subs	r2, r4, #4
 8009c2a:	2a24      	cmp	r2, #36	; 0x24
 8009c2c:	60c1      	str	r1, [r0, #12]
 8009c2e:	6088      	str	r0, [r1, #8]
 8009c30:	f200 80b4 	bhi.w	8009d9c <_realloc_r+0x3a4>
 8009c34:	2a13      	cmp	r2, #19
 8009c36:	f240 80a5 	bls.w	8009d84 <_realloc_r+0x38c>
 8009c3a:	6831      	ldr	r1, [r6, #0]
 8009c3c:	f8ca 1008 	str.w	r1, [sl, #8]
 8009c40:	6871      	ldr	r1, [r6, #4]
 8009c42:	f8ca 100c 	str.w	r1, [sl, #12]
 8009c46:	2a1b      	cmp	r2, #27
 8009c48:	f200 80af 	bhi.w	8009daa <_realloc_r+0x3b2>
 8009c4c:	3608      	adds	r6, #8
 8009c4e:	f10a 0210 	add.w	r2, sl, #16
 8009c52:	6831      	ldr	r1, [r6, #0]
 8009c54:	6011      	str	r1, [r2, #0]
 8009c56:	6871      	ldr	r1, [r6, #4]
 8009c58:	6051      	str	r1, [r2, #4]
 8009c5a:	68b1      	ldr	r1, [r6, #8]
 8009c5c:	6091      	str	r1, [r2, #8]
 8009c5e:	eb0a 0105 	add.w	r1, sl, r5
 8009c62:	ebc5 020b 	rsb	r2, r5, fp
 8009c66:	f042 0201 	orr.w	r2, r2, #1
 8009c6a:	6099      	str	r1, [r3, #8]
 8009c6c:	604a      	str	r2, [r1, #4]
 8009c6e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	431d      	orrs	r5, r3
 8009c78:	4648      	mov	r0, r9
 8009c7a:	f8ca 5004 	str.w	r5, [sl, #4]
 8009c7e:	f7ff f92f 	bl	8008ee0 <__malloc_unlock>
 8009c82:	4638      	mov	r0, r7
 8009c84:	e75c      	b.n	8009b40 <_realloc_r+0x148>
 8009c86:	6833      	ldr	r3, [r6, #0]
 8009c88:	6003      	str	r3, [r0, #0]
 8009c8a:	6873      	ldr	r3, [r6, #4]
 8009c8c:	6043      	str	r3, [r0, #4]
 8009c8e:	2a1b      	cmp	r2, #27
 8009c90:	d827      	bhi.n	8009ce2 <_realloc_r+0x2ea>
 8009c92:	f100 0308 	add.w	r3, r0, #8
 8009c96:	f106 0208 	add.w	r2, r6, #8
 8009c9a:	e6f2      	b.n	8009a82 <_realloc_r+0x8a>
 8009c9c:	463b      	mov	r3, r7
 8009c9e:	6832      	ldr	r2, [r6, #0]
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	6872      	ldr	r2, [r6, #4]
 8009ca4:	605a      	str	r2, [r3, #4]
 8009ca6:	68b2      	ldr	r2, [r6, #8]
 8009ca8:	609a      	str	r2, [r3, #8]
 8009caa:	463e      	mov	r6, r7
 8009cac:	4674      	mov	r4, lr
 8009cae:	46d0      	mov	r8, sl
 8009cb0:	e733      	b.n	8009b1a <_realloc_r+0x122>
 8009cb2:	eb08 0105 	add.w	r1, r8, r5
 8009cb6:	ebc5 0b0b 	rsb	fp, r5, fp
 8009cba:	f04b 0201 	orr.w	r2, fp, #1
 8009cbe:	6099      	str	r1, [r3, #8]
 8009cc0:	604a      	str	r2, [r1, #4]
 8009cc2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	431d      	orrs	r5, r3
 8009ccc:	4648      	mov	r0, r9
 8009cce:	f846 5c04 	str.w	r5, [r6, #-4]
 8009cd2:	f7ff f905 	bl	8008ee0 <__malloc_unlock>
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	e732      	b.n	8009b40 <_realloc_r+0x148>
 8009cda:	4631      	mov	r1, r6
 8009cdc:	f7ff fe28 	bl	8009930 <memmove>
 8009ce0:	e6d5      	b.n	8009a8e <_realloc_r+0x96>
 8009ce2:	68b3      	ldr	r3, [r6, #8]
 8009ce4:	6083      	str	r3, [r0, #8]
 8009ce6:	68f3      	ldr	r3, [r6, #12]
 8009ce8:	60c3      	str	r3, [r0, #12]
 8009cea:	2a24      	cmp	r2, #36	; 0x24
 8009cec:	d028      	beq.n	8009d40 <_realloc_r+0x348>
 8009cee:	f100 0310 	add.w	r3, r0, #16
 8009cf2:	f106 0210 	add.w	r2, r6, #16
 8009cf6:	e6c4      	b.n	8009a82 <_realloc_r+0x8a>
 8009cf8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009cfc:	f023 0303 	bic.w	r3, r3, #3
 8009d00:	441c      	add	r4, r3
 8009d02:	e70a      	b.n	8009b1a <_realloc_r+0x122>
 8009d04:	4631      	mov	r1, r6
 8009d06:	4638      	mov	r0, r7
 8009d08:	4674      	mov	r4, lr
 8009d0a:	46d0      	mov	r8, sl
 8009d0c:	f7ff fe10 	bl	8009930 <memmove>
 8009d10:	463e      	mov	r6, r7
 8009d12:	e702      	b.n	8009b1a <_realloc_r+0x122>
 8009d14:	463a      	mov	r2, r7
 8009d16:	e6f7      	b.n	8009b08 <_realloc_r+0x110>
 8009d18:	4631      	mov	r1, r6
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	461c      	mov	r4, r3
 8009d1e:	46d0      	mov	r8, sl
 8009d20:	f7ff fe06 	bl	8009930 <memmove>
 8009d24:	463e      	mov	r6, r7
 8009d26:	e6f8      	b.n	8009b1a <_realloc_r+0x122>
 8009d28:	68b3      	ldr	r3, [r6, #8]
 8009d2a:	f8ca 3010 	str.w	r3, [sl, #16]
 8009d2e:	68f3      	ldr	r3, [r6, #12]
 8009d30:	f8ca 3014 	str.w	r3, [sl, #20]
 8009d34:	2a24      	cmp	r2, #36	; 0x24
 8009d36:	d01b      	beq.n	8009d70 <_realloc_r+0x378>
 8009d38:	3610      	adds	r6, #16
 8009d3a:	f10a 0318 	add.w	r3, sl, #24
 8009d3e:	e7ae      	b.n	8009c9e <_realloc_r+0x2a6>
 8009d40:	6933      	ldr	r3, [r6, #16]
 8009d42:	6103      	str	r3, [r0, #16]
 8009d44:	6973      	ldr	r3, [r6, #20]
 8009d46:	6143      	str	r3, [r0, #20]
 8009d48:	f106 0218 	add.w	r2, r6, #24
 8009d4c:	f100 0318 	add.w	r3, r0, #24
 8009d50:	e697      	b.n	8009a82 <_realloc_r+0x8a>
 8009d52:	bf00      	nop
 8009d54:	20000468 	.word	0x20000468
 8009d58:	68b1      	ldr	r1, [r6, #8]
 8009d5a:	f8ca 1010 	str.w	r1, [sl, #16]
 8009d5e:	68f1      	ldr	r1, [r6, #12]
 8009d60:	f8ca 1014 	str.w	r1, [sl, #20]
 8009d64:	2a24      	cmp	r2, #36	; 0x24
 8009d66:	d00f      	beq.n	8009d88 <_realloc_r+0x390>
 8009d68:	3610      	adds	r6, #16
 8009d6a:	f10a 0218 	add.w	r2, sl, #24
 8009d6e:	e6cb      	b.n	8009b08 <_realloc_r+0x110>
 8009d70:	6933      	ldr	r3, [r6, #16]
 8009d72:	f8ca 3018 	str.w	r3, [sl, #24]
 8009d76:	6973      	ldr	r3, [r6, #20]
 8009d78:	f8ca 301c 	str.w	r3, [sl, #28]
 8009d7c:	3618      	adds	r6, #24
 8009d7e:	f10a 0320 	add.w	r3, sl, #32
 8009d82:	e78c      	b.n	8009c9e <_realloc_r+0x2a6>
 8009d84:	463a      	mov	r2, r7
 8009d86:	e764      	b.n	8009c52 <_realloc_r+0x25a>
 8009d88:	6932      	ldr	r2, [r6, #16]
 8009d8a:	f8ca 2018 	str.w	r2, [sl, #24]
 8009d8e:	6972      	ldr	r2, [r6, #20]
 8009d90:	f8ca 201c 	str.w	r2, [sl, #28]
 8009d94:	3618      	adds	r6, #24
 8009d96:	f10a 0220 	add.w	r2, sl, #32
 8009d9a:	e6b5      	b.n	8009b08 <_realloc_r+0x110>
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4638      	mov	r0, r7
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	f7ff fdc5 	bl	8009930 <memmove>
 8009da6:	9b01      	ldr	r3, [sp, #4]
 8009da8:	e759      	b.n	8009c5e <_realloc_r+0x266>
 8009daa:	68b1      	ldr	r1, [r6, #8]
 8009dac:	f8ca 1010 	str.w	r1, [sl, #16]
 8009db0:	68f1      	ldr	r1, [r6, #12]
 8009db2:	f8ca 1014 	str.w	r1, [sl, #20]
 8009db6:	2a24      	cmp	r2, #36	; 0x24
 8009db8:	d003      	beq.n	8009dc2 <_realloc_r+0x3ca>
 8009dba:	3610      	adds	r6, #16
 8009dbc:	f10a 0218 	add.w	r2, sl, #24
 8009dc0:	e747      	b.n	8009c52 <_realloc_r+0x25a>
 8009dc2:	6932      	ldr	r2, [r6, #16]
 8009dc4:	f8ca 2018 	str.w	r2, [sl, #24]
 8009dc8:	6972      	ldr	r2, [r6, #20]
 8009dca:	f8ca 201c 	str.w	r2, [sl, #28]
 8009dce:	3618      	adds	r6, #24
 8009dd0:	f10a 0220 	add.w	r2, sl, #32
 8009dd4:	e73d      	b.n	8009c52 <_realloc_r+0x25a>
 8009dd6:	bf00      	nop

08009dd8 <_init>:
 8009dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dda:	bf00      	nop
 8009ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dde:	bc08      	pop	{r3}
 8009de0:	469e      	mov	lr, r3
 8009de2:	4770      	bx	lr

08009de4 <_fini>:
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	bf00      	nop
 8009de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dea:	bc08      	pop	{r3}
 8009dec:	469e      	mov	lr, r3
 8009dee:	4770      	bx	lr
