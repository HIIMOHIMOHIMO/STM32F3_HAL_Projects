
Test11_USERBRD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08003c34  08003c34  00013c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000042c  20000000  08003c40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002042c  2**0
                  CONTENTS
  7 .bss          0000015c  2000042c  2000042c  0002042c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000588  20000588  0002042c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000506b  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000b6a9  00000000  00000000  000254c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000017d4  00000000  00000000  00030b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b58  00000000  00000000  00032348  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a80  00000000  00000000  00032ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000063a0  00000000  00000000  00033920  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000033db  00000000  00000000  00039cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000006e  00000000  00000000  0003d09b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002e1c  00000000  00000000  0003d10c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000042f 	.word	0x2000042f
 80001a0:	2000042c 	.word	0x2000042c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	2000042c 	.word	0x2000042c
 80001c4:	2000042c 	.word	0x2000042c
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000042c 	.word	0x2000042c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003bdc 	.word	0x08003bdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000430 	.word	0x20000430
 8000220:	08003bdc 	.word	0x08003bdc
 8000224:	2000042c 	.word	0x2000042c
 8000228:	00000000 	.word	0x00000000

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	4e0f      	ldr	r6, [pc, #60]	; (800026c <__libc_init_array+0x40>)
 8000230:	4d0f      	ldr	r5, [pc, #60]	; (8000270 <__libc_init_array+0x44>)
 8000232:	1b76      	subs	r6, r6, r5
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	bf18      	it	ne
 8000238:	2400      	movne	r4, #0
 800023a:	d005      	beq.n	8000248 <__libc_init_array+0x1c>
 800023c:	3401      	adds	r4, #1
 800023e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000242:	4798      	blx	r3
 8000244:	42a6      	cmp	r6, r4
 8000246:	d1f9      	bne.n	800023c <__libc_init_array+0x10>
 8000248:	4e0a      	ldr	r6, [pc, #40]	; (8000274 <__libc_init_array+0x48>)
 800024a:	4d0b      	ldr	r5, [pc, #44]	; (8000278 <__libc_init_array+0x4c>)
 800024c:	1b76      	subs	r6, r6, r5
 800024e:	f003 fcc5 	bl	8003bdc <_init>
 8000252:	10b6      	asrs	r6, r6, #2
 8000254:	bf18      	it	ne
 8000256:	2400      	movne	r4, #0
 8000258:	d006      	beq.n	8000268 <__libc_init_array+0x3c>
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	08003c34 	.word	0x08003c34
 8000270:	08003c34 	.word	0x08003c34
 8000274:	08003c3c 	.word	0x08003c3c
 8000278:	08003c34 	.word	0x08003c34

0800027c <register_fini>:
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <register_fini+0xc>)
 800027e:	b113      	cbz	r3, 8000286 <register_fini+0xa>
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <register_fini+0x10>)
 8000282:	f000 b805 	b.w	8000290 <atexit>
 8000286:	4770      	bx	lr
 8000288:	00000000 	.word	0x00000000
 800028c:	0800029d 	.word	0x0800029d

08000290 <atexit>:
 8000290:	2300      	movs	r3, #0
 8000292:	4601      	mov	r1, r0
 8000294:	461a      	mov	r2, r3
 8000296:	4618      	mov	r0, r3
 8000298:	f000 b814 	b.w	80002c4 <__register_exitproc>

0800029c <__libc_fini_array>:
 800029c:	b538      	push	{r3, r4, r5, lr}
 800029e:	4d07      	ldr	r5, [pc, #28]	; (80002bc <__libc_fini_array+0x20>)
 80002a0:	4c07      	ldr	r4, [pc, #28]	; (80002c0 <__libc_fini_array+0x24>)
 80002a2:	1b2c      	subs	r4, r5, r4
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	d005      	beq.n	80002b4 <__libc_fini_array+0x18>
 80002a8:	3c01      	subs	r4, #1
 80002aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80002ae:	4798      	blx	r3
 80002b0:	2c00      	cmp	r4, #0
 80002b2:	d1f9      	bne.n	80002a8 <__libc_fini_array+0xc>
 80002b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80002b8:	f003 bc96 	b.w	8003be8 <_fini>
 80002bc:	08003c40 	.word	0x08003c40
 80002c0:	08003c3c 	.word	0x08003c3c

080002c4 <__register_exitproc>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	4c25      	ldr	r4, [pc, #148]	; (8000360 <__register_exitproc+0x9c>)
 80002ca:	6825      	ldr	r5, [r4, #0]
 80002cc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80002d0:	4606      	mov	r6, r0
 80002d2:	4688      	mov	r8, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b3c4      	cbz	r4, 800034c <__register_exitproc+0x88>
 80002da:	6860      	ldr	r0, [r4, #4]
 80002dc:	281f      	cmp	r0, #31
 80002de:	dc17      	bgt.n	8000310 <__register_exitproc+0x4c>
 80002e0:	1c43      	adds	r3, r0, #1
 80002e2:	b176      	cbz	r6, 8000302 <__register_exitproc+0x3e>
 80002e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80002e8:	2201      	movs	r2, #1
 80002ea:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80002ee:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 80002f2:	4082      	lsls	r2, r0
 80002f4:	4311      	orrs	r1, r2
 80002f6:	2e02      	cmp	r6, #2
 80002f8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80002fc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8000300:	d01e      	beq.n	8000340 <__register_exitproc+0x7c>
 8000302:	3002      	adds	r0, #2
 8000304:	6063      	str	r3, [r4, #4]
 8000306:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800030a:	2000      	movs	r0, #0
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <__register_exitproc+0xa0>)
 8000312:	b303      	cbz	r3, 8000356 <__register_exitproc+0x92>
 8000314:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000318:	f3af 8000 	nop.w
 800031c:	4604      	mov	r4, r0
 800031e:	b1d0      	cbz	r0, 8000356 <__register_exitproc+0x92>
 8000320:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000324:	2700      	movs	r7, #0
 8000326:	e880 0088 	stmia.w	r0, {r3, r7}
 800032a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800032e:	4638      	mov	r0, r7
 8000330:	2301      	movs	r3, #1
 8000332:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000336:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e1      	beq.n	8000302 <__register_exitproc+0x3e>
 800033e:	e7d1      	b.n	80002e4 <__register_exitproc+0x20>
 8000340:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000344:	430a      	orrs	r2, r1
 8000346:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800034a:	e7da      	b.n	8000302 <__register_exitproc+0x3e>
 800034c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000350:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000354:	e7c1      	b.n	80002da <__register_exitproc+0x16>
 8000356:	f04f 30ff 	mov.w	r0, #4294967295
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	bf00      	nop
 8000360:	08003bf8 	.word	0x08003bf8
 8000364:	00000000 	.word	0x00000000

08000368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800036c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800036e:	e003      	b.n	8000378 <LoopCopyDataInit>

08000370 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000372:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000374:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000376:	3104      	adds	r1, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800037c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800037e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000380:	d3f6      	bcc.n	8000370 <CopyDataInit>
	ldr	r2, =_sbss
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000384:	e002      	b.n	800038c <LoopFillZerobss>

08000386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000386:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000388:	f842 3b04 	str.w	r3, [r2], #4

0800038c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <LoopForever+0x16>)
	cmp	r2, r3
 800038e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000390:	d3f9      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000392:	f000 fb6f 	bl	8000a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000396:	f7ff ff49 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800039a:	f000 f80f 	bl	80003bc <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a0:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80003a4:	08003c40 	.word	0x08003c40
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003ac:	2000042c 	.word	0x2000042c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80003b0:	2000042c 	.word	0x2000042c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80003b4:	20000588 	.word	0x20000588

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <main>:
void Led1Toggle();
void Led2Toggle();
/* USER CODE END 0 */

int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t Enc1_value=0,Enc2_value=0,Enc3_value=0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	81fb      	strh	r3, [r7, #14]
 80003c6:	2300      	movs	r3, #0
 80003c8:	81bb      	strh	r3, [r7, #12]
 80003ca:	2300      	movs	r3, #0
 80003cc:	817b      	strh	r3, [r7, #10]
	uint16_t Enc1_old = 0,Enc2_old = 0,Enc3_old = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	813b      	strh	r3, [r7, #8]
 80003d2:	2300      	movs	r3, #0
 80003d4:	80fb      	strh	r3, [r7, #6]
 80003d6:	2300      	movs	r3, #0
 80003d8:	80bb      	strh	r3, [r7, #4]
	UartReady = false;
 80003da:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <main+0x88>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e0:	f000 fc82 	bl	8000ce8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80003e4:	f000 f836 	bl	8000454 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e8:	f000 f98e 	bl	8000708 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003ec:	f000 f884 	bl	80004f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003f0:	f000 f8ce 	bl	8000590 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003f4:	f000 f912 	bl	800061c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80003f8:	f000 f956 	bl	80006a8 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &RxData, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	4912      	ldr	r1, [pc, #72]	; (8000448 <main+0x8c>)
 8000400:	4812      	ldr	r0, [pc, #72]	; (800044c <main+0x90>)
 8000402:	f002 fcff 	bl	8002e04 <HAL_UART_Receive_IT>
	Encoder_Read_Strat();
 8000406:	f000 f9eb 	bl	80007e0 <Encoder_Read_Strat>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		stateLED(2);
 800040a:	2002      	movs	r0, #2
 800040c:	f000 facc 	bl	80009a8 <stateLED>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		Enc1_value = getTIM1Enc();
 8000410:	f000 f9fc 	bl	800080c <getTIM1Enc>
 8000414:	4603      	mov	r3, r0
 8000416:	81fb      	strh	r3, [r7, #14]
		Enc2_value = getTIM2Enc();
 8000418:	f000 fa04 	bl	8000824 <getTIM2Enc>
 800041c:	4603      	mov	r3, r0
 800041e:	81bb      	strh	r3, [r7, #12]
		Enc3_value = getTIM3Enc();
 8000420:	f000 fa0a 	bl	8000838 <getTIM3Enc>
 8000424:	4603      	mov	r3, r0
 8000426:	817b      	strh	r3, [r7, #10]
//	if( isChange(&Enc1_old,Enc1_value) != 0) Led2Toggle();
//	if( isChange(&Enc2_old,Enc2_value) != 0) Led0Toggle();	
//	if( isChange(&Enc3_old,Enc3_value) != 0) Led1Toggle();

		/*--- Send Data ---*/
		databuf[0] = Enc1_value;
 8000428:	4a09      	ldr	r2, [pc, #36]	; (8000450 <main+0x94>)
 800042a:	89fb      	ldrh	r3, [r7, #14]
 800042c:	8013      	strh	r3, [r2, #0]
		databuf[1] = Enc2_value;
 800042e:	4a08      	ldr	r2, [pc, #32]	; (8000450 <main+0x94>)
 8000430:	89bb      	ldrh	r3, [r7, #12]
 8000432:	8053      	strh	r3, [r2, #2]
		databuf[2] = Enc3_value;
 8000434:	4a06      	ldr	r2, [pc, #24]	; (8000450 <main+0x94>)
 8000436:	897b      	ldrh	r3, [r7, #10]
 8000438:	8093      	strh	r3, [r2, #4]
		HAL_Delay(100);
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f000 fca0 	bl	8000d80 <HAL_Delay>

  }
 8000440:	e7e3      	b.n	800040a <main+0x4e>
 8000442:	bf00      	nop
 8000444:	20000582 	.word	0x20000582
 8000448:	20000570 	.word	0x20000570
 800044c:	200004fc 	.word	0x200004fc
 8000450:	2000057c 	.word	0x2000057c

08000454 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b096      	sub	sp, #88	; 0x58
 8000458:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800045a:	2302      	movs	r3, #2
 800045c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045e:	2301      	movs	r3, #1
 8000460:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000462:	2310      	movs	r3, #16
 8000464:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000466:	2300      	movs	r3, #0
 8000468:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800046e:	4618      	mov	r0, r3
 8000470:	f000 ff70 	bl	8001354 <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x2a>
  {
    Error_Handler();
 800047a:	f000 fab5 	bl	80009e8 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000492:	f107 031c 	add.w	r3, r7, #28
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f002 f81d 	bl	80024d8 <HAL_RCC_ClockConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80004a4:	f000 faa0 	bl	80009e8 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80004a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4618      	mov	r0, r3
 80004b6:	f002 fac5 	bl	8002a44 <HAL_RCCEx_PeriphCLKConfig>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80004c0:	f000 fa92 	bl	80009e8 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80004c4:	f002 fa6e 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80004c8:	4602      	mov	r2, r0
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <SystemClock_Config+0xa0>)
 80004cc:	fba3 2302 	umull	r2, r3, r3, r2
 80004d0:	099b      	lsrs	r3, r3, #6
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fd68 	bl	8000fa8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80004d8:	2004      	movs	r0, #4
 80004da:	f000 fd71 	bl	8000fc0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	f04f 30ff 	mov.w	r0, #4294967295
 80004e6:	f000 fd35 	bl	8000f54 <HAL_NVIC_SetPriority>
}
 80004ea:	bf00      	nop
 80004ec:	3758      	adds	r7, #88	; 0x58
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	10624dd3 	.word	0x10624dd3

080004f8 <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08c      	sub	sp, #48	; 0x30
 80004fc:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <MX_TIM1_Init+0x90>)
 8000500:	4a22      	ldr	r2, [pc, #136]	; (800058c <MX_TIM1_Init+0x94>)
 8000502:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000504:	4b20      	ldr	r3, [pc, #128]	; (8000588 <MX_TIM1_Init+0x90>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <MX_TIM1_Init+0x90>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <MX_TIM1_Init+0x90>)
 8000512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000516:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_TIM1_Init+0x90>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_TIM1_Init+0x90>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000524:	2303      	movs	r3, #3
 8000526:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000538:	2300      	movs	r3, #0
 800053a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800053c:	2301      	movs	r3, #1
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4619      	mov	r1, r3
 800054e:	480e      	ldr	r0, [pc, #56]	; (8000588 <MX_TIM1_Init+0x90>)
 8000550:	f003 f990 	bl	8003874 <HAL_TIM_Encoder_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800055a:	f000 fa45 	bl	80009e8 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055e:	2300      	movs	r3, #0
 8000560:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800056a:	463b      	mov	r3, r7
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <MX_TIM1_Init+0x90>)
 8000570:	f003 fae6 	bl	8003b40 <HAL_TIMEx_MasterConfigSynchronization>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 800057a:	f000 fa35 	bl	80009e8 <Error_Handler>
  }

}
 800057e:	bf00      	nop
 8000580:	3730      	adds	r7, #48	; 0x30
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000448 	.word	0x20000448
 800058c:	40012c00 	.word	0x40012c00

08000590 <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8000596:	4b20      	ldr	r3, [pc, #128]	; (8000618 <MX_TIM2_Init+0x88>)
 8000598:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800059c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <MX_TIM2_Init+0x88>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a4:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MX_TIM2_Init+0x88>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <MX_TIM2_Init+0x88>)
 80005ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MX_TIM2_Init+0x88>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005b8:	2303      	movs	r3, #3
 80005ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005d0:	2301      	movs	r3, #1
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	480d      	ldr	r0, [pc, #52]	; (8000618 <MX_TIM2_Init+0x88>)
 80005e4:	f003 f946 	bl	8003874 <HAL_TIM_Encoder_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80005ee:	f000 f9fb 	bl	80009e8 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <MX_TIM2_Init+0x88>)
 8000600:	f003 fa9e 	bl	8003b40 <HAL_TIMEx_MasterConfigSynchronization>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800060a:	f000 f9ed 	bl	80009e8 <Error_Handler>
  }

}
 800060e:	bf00      	nop
 8000610:	3730      	adds	r7, #48	; 0x30
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000484 	.word	0x20000484

0800061c <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08c      	sub	sp, #48	; 0x30
 8000620:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_TIM3_Init+0x84>)
 8000624:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <MX_TIM3_Init+0x88>)
 8000626:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_TIM3_Init+0x84>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_TIM3_Init+0x84>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_TIM3_Init+0x84>)
 8000636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800063a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_TIM3_Init+0x84>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000642:	2303      	movs	r3, #3
 8000644:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800064a:	2301      	movs	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000656:	2300      	movs	r3, #0
 8000658:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800065a:	2301      	movs	r3, #1
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	4619      	mov	r1, r3
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <MX_TIM3_Init+0x84>)
 800066e:	f003 f901 	bl	8003874 <HAL_TIM_Encoder_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000678:	f000 f9b6 	bl	80009e8 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_TIM3_Init+0x84>)
 800068a:	f003 fa59 	bl	8003b40 <HAL_TIMEx_MasterConfigSynchronization>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000694:	f000 f9a8 	bl	80009e8 <Error_Handler>
  }

}
 8000698:	bf00      	nop
 800069a:	3730      	adds	r7, #48	; 0x30
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200004c0 	.word	0x200004c0
 80006a4:	40000400 	.word	0x40000400

080006a8 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_USART2_UART_Init+0x5c>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ec:	f002 faf0 	bl	8002cd0 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 f977 	bl	80009e8 <Error_Handler>
  }

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200004fc 	.word	0x200004fc
 8000704:	40004400 	.word	0x40004400

08000708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070e:	4a31      	ldr	r2, [pc, #196]	; (80007d4 <MX_GPIO_Init+0xcc>)
 8000710:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <MX_GPIO_Init+0xcc>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <MX_GPIO_Init+0xcc>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4a2b      	ldr	r2, [pc, #172]	; (80007d4 <MX_GPIO_Init+0xcc>)
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <MX_GPIO_Init+0xcc>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_GPIO_Init+0xcc>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4a25      	ldr	r2, [pc, #148]	; (80007d4 <MX_GPIO_Init+0xcc>)
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <MX_GPIO_Init+0xcc>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_GPIO_Init+0xcc>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StateLED_GPIO_Port, StateLED_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2101      	movs	r1, #1
 800075a:	481f      	ldr	r0, [pc, #124]	; (80007d8 <MX_GPIO_Init+0xd0>)
 800075c:	f000 fdd0 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, REDE_Pin|LED0_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2130      	movs	r1, #48	; 0x30
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f000 fdca 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2103      	movs	r1, #3
 8000770:	481a      	ldr	r0, [pc, #104]	; (80007dc <MX_GPIO_Init+0xd4>)
 8000772:	f000 fdc5 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : StateLED_Pin */
  GPIO_InitStruct.Pin = StateLED_Pin;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(StateLED_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	4812      	ldr	r0, [pc, #72]	; (80007d8 <MX_GPIO_Init+0xd0>)
 800078e:	f000 fc41 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : REDE_Pin LED0_Pin */
  GPIO_InitStruct.Pin = REDE_Pin|LED0_Pin;
 8000792:	2330      	movs	r3, #48	; 0x30
 8000794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f000 fc32 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007b0:	2303      	movs	r3, #3
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_GPIO_Init+0xd4>)
 80007c8:	f000 fc24 	bl	8001014 <HAL_GPIO_Init>

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48001400 	.word	0x48001400
 80007dc:	48000400 	.word	0x48000400

080007e0 <Encoder_Read_Strat>:

/* USER CODE BEGIN 4 */
/*--- Encoder ---*/
void Encoder_Read_Strat(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80007e4:	213c      	movs	r1, #60	; 0x3c
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <Encoder_Read_Strat+0x20>)
 80007e8:	f003 f8dc 	bl	80039a4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80007ec:	213c      	movs	r1, #60	; 0x3c
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <Encoder_Read_Strat+0x24>)
 80007f0:	f003 f8d8 	bl	80039a4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80007f4:	213c      	movs	r1, #60	; 0x3c
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <Encoder_Read_Strat+0x28>)
 80007f8:	f003 f8d4 	bl	80039a4 <HAL_TIM_Encoder_Start>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000448 	.word	0x20000448
 8000804:	20000484 	.word	0x20000484
 8000808:	200004c0 	.word	0x200004c0

0800080c <getTIM1Enc>:
void Encoder_Read_Stop(){
	HAL_TIM_Encoder_Stop(&htim1,TIM_CHANNEL_ALL);
	HAL_TIM_Encoder_Stop(&htim2,TIM_CHANNEL_ALL);
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
}
int getTIM1Enc(){
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	return TIM1->CNT;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <getTIM1Enc+0x14>)
 8000812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40012c00 	.word	0x40012c00

08000824 <getTIM2Enc>:
int getTIM2Enc(){
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 8000828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800082c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <getTIM3Enc>:
int getTIM3Enc(){
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
	return TIM3->CNT;
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <getTIM3Enc+0x14>)
 800083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40000400 	.word	0x40000400

08000850 <sendData>:
		*old = new;
		return false;
	}
}
/*--- UART ---*/
void sendData(int *Data){
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	int i;
	uint8_t TxData[10];
	uint8_t CheckSum = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	74fb      	strb	r3, [r7, #19]
	TxData[0] = '#';
 800085c:	2323      	movs	r3, #35	; 0x23
 800085e:	723b      	strb	r3, [r7, #8]
	TxData[1] = 0xEE;
 8000860:	23ee      	movs	r3, #238	; 0xee
 8000862:	727b      	strb	r3, [r7, #9]
	TxData[2] = 0x06;
 8000864:	2306      	movs	r3, #6
 8000866:	72bb      	strb	r3, [r7, #10]
	TxData[3] = Data[0] << 0;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	72fb      	strb	r3, [r7, #11]
	TxData[4] = Data[0] << 8;
 8000870:	2300      	movs	r3, #0
 8000872:	733b      	strb	r3, [r7, #12]
	TxData[5] = Data[1] << 0;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3304      	adds	r3, #4
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	737b      	strb	r3, [r7, #13]
	TxData[6] = Data[1] << 8;
 800087e:	2300      	movs	r3, #0
 8000880:	73bb      	strb	r3, [r7, #14]
	TxData[7] = Data[2] << 0;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3308      	adds	r3, #8
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	73fb      	strb	r3, [r7, #15]
	TxData[8] = Data[2] << 8;
 800088c:	2300      	movs	r3, #0
 800088e:	743b      	strb	r3, [r7, #16]
	for(i=0; i<9; i++){
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e00a      	b.n	80008ac <sendData+0x5c>
		CheckSum = CheckSum^TxData[i];
 8000896:	f107 0208 	add.w	r2, r7, #8
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	4413      	add	r3, r2
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	7cfb      	ldrb	r3, [r7, #19]
 80008a2:	4053      	eors	r3, r2
 80008a4:	74fb      	strb	r3, [r7, #19]
	TxData[4] = Data[0] << 8;
	TxData[5] = Data[1] << 0;
	TxData[6] = Data[1] << 8;
	TxData[7] = Data[2] << 0;
	TxData[8] = Data[2] << 8;
	for(i=0; i<9; i++){
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	3301      	adds	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	2b08      	cmp	r3, #8
 80008b0:	ddf1      	ble.n	8000896 <sendData+0x46>
		CheckSum = CheckSum^TxData[i];
	}
	TxData[9] = CheckSum;
 80008b2:	7cfb      	ldrb	r3, [r7, #19]
 80008b4:	747b      	strb	r3, [r7, #17]
	REDEOn();
 80008b6:	f000 f813 	bl	80008e0 <REDEOn>
	HAL_UART_Transmit_IT(&huart2,TxData,10);
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	220a      	movs	r2, #10
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <sendData+0x8c>)
 80008c4:	f002 fa56 	bl	8002d74 <HAL_UART_Transmit_IT>
	HAL_Delay(1);
 80008c8:	2001      	movs	r0, #1
 80008ca:	f000 fa59 	bl	8000d80 <HAL_Delay>
	REDEOff();
 80008ce:	f000 f811 	bl	80008f4 <REDEOff>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200004fc 	.word	0x200004fc

080008e0 <REDEOn>:
void REDEOn(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDE_GPIO_Port,REDE_Pin,GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2110      	movs	r1, #16
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f000 fd08 	bl	8001300 <HAL_GPIO_WritePin>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <REDEOff>:
void REDEOff(){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDE_GPIO_Port,REDE_Pin,GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2110      	movs	r1, #16
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 fcfe 	bl	8001300 <HAL_GPIO_WritePin>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <HAL_UART_TxCpltCallback>:
/*--- Interrupt ---*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){}
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, &RxData, 1);
 8000924:	2201      	movs	r2, #1
 8000926:	491b      	ldr	r1, [pc, #108]	; (8000994 <HAL_UART_RxCpltCallback+0x78>)
 8000928:	481b      	ldr	r0, [pc, #108]	; (8000998 <HAL_UART_RxCpltCallback+0x7c>)
 800092a:	f002 fa6b 	bl	8002e04 <HAL_UART_Receive_IT>
	uint8_t Data = RxData;
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <HAL_UART_RxCpltCallback+0x78>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	73fb      	strb	r3, [r7, #15]
	if(_index != 0){
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_UART_RxCpltCallback+0x80>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d021      	beq.n	8000980 <HAL_UART_RxCpltCallback+0x64>
		RxBuff[_index-1] = Data;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_UART_RxCpltCallback+0x80>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3b01      	subs	r3, #1
 8000942:	4917      	ldr	r1, [pc, #92]	; (80009a0 <HAL_UART_RxCpltCallback+0x84>)
 8000944:	7bfa      	ldrb	r2, [r7, #15]
 8000946:	54ca      	strb	r2, [r1, r3]
		_index++;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_UART_RxCpltCallback+0x80>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a13      	ldr	r2, [pc, #76]	; (800099c <HAL_UART_RxCpltCallback+0x80>)
 8000950:	6013      	str	r3, [r2, #0]
		if(_index == 5){
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_UART_RxCpltCallback+0x80>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b05      	cmp	r3, #5
 8000958:	d118      	bne.n	800098c <HAL_UART_RxCpltCallback+0x70>
			_index = 0;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_UART_RxCpltCallback+0x80>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
			if(RxBuff[0]==0xEE && RxBuff[1]==0x01){
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_UART_RxCpltCallback+0x84>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2bee      	cmp	r3, #238	; 0xee
 8000966:	d111      	bne.n	800098c <HAL_UART_RxCpltCallback+0x70>
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_UART_RxCpltCallback+0x84>)
 800096a:	785b      	ldrb	r3, [r3, #1]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d10d      	bne.n	800098c <HAL_UART_RxCpltCallback+0x70>
				REDEOn();
 8000970:	f7ff ffb6 	bl	80008e0 <REDEOn>
				sendData(databuf);
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <HAL_UART_RxCpltCallback+0x88>)
 8000976:	f7ff ff6b 	bl	8000850 <sendData>
				REDEOff();
 800097a:	f7ff ffbb 	bl	80008f4 <REDEOff>
		}
	}else
	if(Data == 0x23){
		_index = 1;
	}
}
 800097e:	e005      	b.n	800098c <HAL_UART_RxCpltCallback+0x70>
				sendData(databuf);
				REDEOff();
			}
		}
	}else
	if(Data == 0x23){
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	2b23      	cmp	r3, #35	; 0x23
 8000984:	d102      	bne.n	800098c <HAL_UART_RxCpltCallback+0x70>
		_index = 1;
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_UART_RxCpltCallback+0x80>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]
	}
}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000570 	.word	0x20000570
 8000998:	200004fc 	.word	0x200004fc
 800099c:	2000056c 	.word	0x2000056c
 80009a0:	20000574 	.word	0x20000574
 80009a4:	2000057c 	.word	0x2000057c

080009a8 <stateLED>:
	while(1){
		if(RxBuff[0] == 0xEE && RxBuff[1]==0x01)break;
	}
}
/*--- LED ---*/
void stateLED(int State){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	if(State == 1){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d105      	bne.n	80009c2 <stateLED+0x1a>
		HAL_GPIO_WritePin(StateLED_GPIO_Port,StateLED_Pin,GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2101      	movs	r1, #1
 80009ba:	480a      	ldr	r0, [pc, #40]	; (80009e4 <stateLED+0x3c>)
 80009bc:	f000 fca0 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(StateLED_GPIO_Port,StateLED_Pin,GPIO_PIN_RESET);
	}else
	{
		HAL_GPIO_TogglePin(StateLED_GPIO_Port,StateLED_Pin);
	}
}
 80009c0:	e00c      	b.n	80009dc <stateLED+0x34>
/*--- LED ---*/
void stateLED(int State){
	if(State == 1){
		HAL_GPIO_WritePin(StateLED_GPIO_Port,StateLED_Pin,GPIO_PIN_SET);
	}else
	if(State == 0){
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d105      	bne.n	80009d4 <stateLED+0x2c>
		HAL_GPIO_WritePin(StateLED_GPIO_Port,StateLED_Pin,GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2101      	movs	r1, #1
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <stateLED+0x3c>)
 80009ce:	f000 fc97 	bl	8001300 <HAL_GPIO_WritePin>
	}else
	{
		HAL_GPIO_TogglePin(StateLED_GPIO_Port,StateLED_Pin);
	}
}
 80009d2:	e003      	b.n	80009dc <stateLED+0x34>
	}else
	if(State == 0){
		HAL_GPIO_WritePin(StateLED_GPIO_Port,StateLED_Pin,GPIO_PIN_RESET);
	}else
	{
		HAL_GPIO_TogglePin(StateLED_GPIO_Port,StateLED_Pin);
 80009d4:	2101      	movs	r1, #1
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <stateLED+0x3c>)
 80009d8:	f000 fcaa 	bl	8001330 <HAL_GPIO_TogglePin>
	}
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	48001400 	.word	0x48001400

080009e8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x4>
 80009ee:	bf00      	nop

080009f0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8000a04:	e7fe      	b.n	8000a04 <HardFault_Handler+0x4>
 8000a06:	bf00      	nop

08000a08 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>
 8000a0e:	bf00      	nop

08000a10 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8000a14:	e7fe      	b.n	8000a14 <BusFault_Handler+0x4>
 8000a16:	bf00      	nop

08000a18 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>
 8000a1e:	bf00      	nop

08000a20 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f97a 	bl	8000d4c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000a58:	f000 face 	bl	8000ff8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
*/
void USART2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <USART2_IRQHandler+0x10>)
 8000a66:	f002 fa5d 	bl	8002f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200004fc 	.word	0x200004fc

08000a74 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <SystemInit+0x84>)
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <SystemInit+0x84>)
 8000a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a88:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <SystemInit+0x88>)
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <SystemInit+0x88>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000a94:	4919      	ldr	r1, [pc, #100]	; (8000afc <SystemInit+0x88>)
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <SystemInit+0x88>)
 8000a98:	685a      	ldr	r2, [r3, #4]
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <SystemInit+0x8c>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000aa0:	4a16      	ldr	r2, [pc, #88]	; (8000afc <SystemInit+0x88>)
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <SystemInit+0x88>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <SystemInit+0x88>)
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <SystemInit+0x88>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000abc:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <SystemInit+0x88>)
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <SystemInit+0x88>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ac6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <SystemInit+0x88>)
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <SystemInit+0x88>)
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	f023 030f 	bic.w	r3, r3, #15
 8000ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000ad4:	4909      	ldr	r1, [pc, #36]	; (8000afc <SystemInit+0x88>)
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <SystemInit+0x88>)
 8000ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <SystemInit+0x90>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x88>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SystemInit+0x84>)
 8000ae8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aec:	609a      	str	r2, [r3, #8]
#endif
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00
 8000afc:	40021000 	.word	0x40021000
 8000b00:	f87fc00c 	.word	0xf87fc00c
 8000b04:	ff00fccc 	.word	0xff00fccc

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <HAL_MspInit+0x80>)
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_MspInit+0x80>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_MspInit+0x80>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 fa08 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f06f 000b 	mvn.w	r0, #11
 8000b34:	f000 fa0e 	bl	8000f54 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f06f 000a 	mvn.w	r0, #10
 8000b40:	f000 fa08 	bl	8000f54 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	f06f 0009 	mvn.w	r0, #9
 8000b4c:	f000 fa02 	bl	8000f54 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	f06f 0004 	mvn.w	r0, #4
 8000b58:	f000 f9fc 	bl	8000f54 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f06f 0003 	mvn.w	r0, #3
 8000b64:	f000 f9f6 	bl	8000f54 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f06f 0001 	mvn.w	r0, #1
 8000b70:	f000 f9f0 	bl	8000f54 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 f9ea 	bl	8000f54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a35      	ldr	r2, [pc, #212]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d11e      	bne.n	8000bdc <HAL_TIM_Encoder_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b9e:	4a35      	ldr	r2, [pc, #212]	; (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000ba0:	4b34      	ldr	r3, [pc, #208]	; (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f000 fa1d 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bda:	e044      	b.n	8000c66 <HAL_TIM_Encoder_MspInit+0xda>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be4:	d11d      	bne.n	8000c22 <HAL_TIM_Encoder_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be6:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bea:	69db      	ldr	r3, [r3, #28]
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f000 f9fa 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c20:	e021      	b.n	8000c66 <HAL_TIM_Encoder_MspInit+0xda>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM3)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <HAL_TIM_Encoder_MspInit+0xec>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d11c      	bne.n	8000c66 <HAL_TIM_Encoder_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c2c:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	61d3      	str	r3, [r2, #28]
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c44:	23c0      	movs	r3, #192	; 0xc0
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c54:	2302      	movs	r3, #2
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f000 f9d7 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40012c00 	.word	0x40012c00
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40000400 	.word	0x40000400

08000c7c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x64>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d124      	bne.n	8000cd8 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8e:	4a15      	ldr	r2, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x68>)
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0x68>)
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	61d3      	str	r3, [r2, #28]
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_UART_MspInit+0x68>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc4:	f000 f9a6 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2101      	movs	r1, #1
 8000ccc:	2026      	movs	r0, #38	; 0x26
 8000cce:	f000 f941 	bl	8000f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cd2:	2026      	movs	r0, #38	; 0x26
 8000cd4:	f000 f95a 	bl	8000f8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3720      	adds	r7, #32
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_Init+0x28>)
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_Init+0x28>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f91f 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff ff00 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40022000 	.word	0x40022000

08000d14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_InitTick+0x30>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <HAL_InitTick+0x34>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	099b      	lsrs	r3, r3, #6
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f93d 	bl	8000fa8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	f04f 30ff 	mov.w	r0, #4294967295
 8000d36:	f000 f90d 	bl	8000f54 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000428 	.word	0x20000428
 8000d48:	10624dd3 	.word	0x10624dd3

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick++;
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <HAL_IncTick+0x18>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <HAL_IncTick+0x18>)
 8000d58:	6013      	str	r3, [r2, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	20000584 	.word	0x20000584

08000d68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000584 	.word	0x20000584

08000d80 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff ffee 	bl	8000d68 <HAL_GetTick>
 8000d8c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffea 	bl	8000d68 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	1ad2      	subs	r2, r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d3f7      	bcc.n	8000d90 <HAL_Delay+0x10>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000dfc:	0a1b      	lsrs	r3, r3, #8
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e16:	4909      	ldr	r1, [pc, #36]	; (8000e3c <NVIC_EnableIRQ+0x30>)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	095b      	lsrs	r3, r3, #5
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	f002 021f 	and.w	r2, r2, #31
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da0b      	bge.n	8000e6c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	490d      	ldr	r1, [pc, #52]	; (8000e8c <NVIC_SetPriority+0x4c>)
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 030f 	and.w	r3, r3, #15
 8000e5c:	3b04      	subs	r3, #4
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6a:	e009      	b.n	8000e80 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	4908      	ldr	r1, [pc, #32]	; (8000e90 <NVIC_SetPriority+0x50>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eda:	2101      	movs	r1, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	1e59      	subs	r1, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000ee8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff90 	bl	8000e40 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff2f 	bl	8000da8 <NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop

08000f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f66:	f7ff ff43 	bl	8000df0 <NVIC_GetPriorityGrouping>
 8000f6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	6978      	ldr	r0, [r7, #20]
 8000f72:	f7ff ff8f 	bl	8000e94 <NVIC_EncodePriority>
 8000f76:	4602      	mov	r2, r0
 8000f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff5e 	bl	8000e40 <NVIC_SetPriority>
}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff36 	bl	8000e0c <NVIC_EnableIRQ>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ffa1 	bl	8000ef8 <SysTick_Config>
 8000fb6:	4603      	mov	r3, r0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d106      	bne.n	8000fdc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000fda:	e005      	b.n	8000fe8 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f023 0304 	bic.w	r3, r3, #4
 8000fe6:	6013      	str	r3, [r2, #0]
  }
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ffc:	f000 f802 	bl	8001004 <HAL_SYSTICK_Callback>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800102a:	e14e      	b.n	80012ca <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2101      	movs	r1, #1
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 8140 	beq.w	80012c4 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x40>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b12      	cmp	r3, #18
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	6939      	ldr	r1, [r7, #16]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d00b      	beq.n	80010f0 <HAL_GPIO_Init+0xdc>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d007      	beq.n	80010f0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e4:	2b11      	cmp	r3, #17
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b12      	cmp	r3, #18
 80010ee:	d130      	bne.n	8001152 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001126:	2201      	movs	r2, #1
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	f003 0201 	and.w	r2, r3, #1
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 809a 	beq.w	80012c4 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001190:	4a55      	ldr	r2, [pc, #340]	; (80012e8 <HAL_GPIO_Init+0x2d4>)
 8001192:	4b55      	ldr	r3, [pc, #340]	; (80012e8 <HAL_GPIO_Init+0x2d4>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b52      	ldr	r3, [pc, #328]	; (80012e8 <HAL_GPIO_Init+0x2d4>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80011a8:	4a50      	ldr	r2, [pc, #320]	; (80012ec <HAL_GPIO_Init+0x2d8>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011d2:	d013      	beq.n	80011fc <HAL_GPIO_Init+0x1e8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a46      	ldr	r2, [pc, #280]	; (80012f0 <HAL_GPIO_Init+0x2dc>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00d      	beq.n	80011f8 <HAL_GPIO_Init+0x1e4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a45      	ldr	r2, [pc, #276]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d007      	beq.n	80011f4 <HAL_GPIO_Init+0x1e0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a44      	ldr	r2, [pc, #272]	; (80012f8 <HAL_GPIO_Init+0x2e4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d101      	bne.n	80011f0 <HAL_GPIO_Init+0x1dc>
 80011ec:	2303      	movs	r3, #3
 80011ee:	e006      	b.n	80011fe <HAL_GPIO_Init+0x1ea>
 80011f0:	2305      	movs	r3, #5
 80011f2:	e004      	b.n	80011fe <HAL_GPIO_Init+0x1ea>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e002      	b.n	80011fe <HAL_GPIO_Init+0x1ea>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <HAL_GPIO_Init+0x1ea>
 80011fc:	2300      	movs	r3, #0
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	f002 0203 	and.w	r2, r2, #3
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	4093      	lsls	r3, r2
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800120e:	4937      	ldr	r1, [pc, #220]	; (80012ec <HAL_GPIO_Init+0x2d8>)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121c:	4b37      	ldr	r3, [pc, #220]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001240:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800126a:	4a24      	ldr	r2, [pc, #144]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001294:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3301      	adds	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f47f aea9 	bne.w	800102c <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 80012da:	bf00      	nop
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000
 80012f0:	48000400 	.word	0x48000400
 80012f4:	48000800 	.word	0x48000800
 80012f8:	48000c00 	.word	0x48000c00
 80012fc:	40010400 	.word	0x40010400

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800131c:	e002      	b.n	8001324 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695a      	ldr	r2, [r3, #20]
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	405a      	eors	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	615a      	str	r2, [r3, #20]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800135a:	af00      	add	r7, sp, #0
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 81e8 	beq.w	8001746 <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001376:	4bb8      	ldr	r3, [pc, #736]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b04      	cmp	r3, #4
 8001380:	d00c      	beq.n	800139c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001382:	4bb5      	ldr	r3, [pc, #724]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b08      	cmp	r3, #8
 800138c:	f040 8082 	bne.w	8001494 <HAL_RCC_OscConfig+0x140>
 8001390:	4bb1      	ldr	r3, [pc, #708]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d07b      	beq.n	8001494 <HAL_RCC_OscConfig+0x140>
 800139c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80013a8:	fa93 f2a3 	rbit	r2, r3
 80013ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013b0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013b6:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f043 0320 	orr.w	r3, r3, #32
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d102      	bne.n	80013d4 <HAL_RCC_OscConfig+0x80>
 80013ce:	4ba2      	ldr	r3, [pc, #648]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	e039      	b.n	8001448 <HAL_RCC_OscConfig+0xf4>
 80013d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80013e0:	fa93 f2a3 	rbit	r2, r3
 80013e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013e8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013ea:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d102      	bne.n	800140c <HAL_RCC_OscConfig+0xb8>
 8001406:	4b94      	ldr	r3, [pc, #592]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	e01d      	b.n	8001448 <HAL_RCC_OscConfig+0xf4>
 800140c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001410:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001418:	fa93 f2a3 	rbit	r2, r3
 800141c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001420:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001422:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f043 0320 	orr.w	r3, r3, #32
 8001432:	b2db      	uxtb	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b04      	cmp	r3, #4
 800143c:	d102      	bne.n	8001444 <HAL_RCC_OscConfig+0xf0>
 800143e:	4b86      	ldr	r3, [pc, #536]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	e001      	b.n	8001448 <HAL_RCC_OscConfig+0xf4>
 8001444:	4b84      	ldr	r3, [pc, #528]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800144c:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8001454:	fa92 f1a2 	rbit	r1, r2
 8001458:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800145c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800145e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	fab2 f282 	clz	r2, r2
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	f042 0220 	orr.w	r2, r2, #32
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f002 021f 	and.w	r2, r2, #31
 8001476:	40d3      	lsrs	r3, r2
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 8161 	beq.w	8001744 <HAL_RCC_OscConfig+0x3f0>
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f040 815b 	bne.w	8001744 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	f001 b81a 	b.w	80024c8 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149e:	d106      	bne.n	80014ae <HAL_RCC_OscConfig+0x15a>
 80014a0:	4a6d      	ldr	r2, [pc, #436]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014a2:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	e030      	b.n	8001510 <HAL_RCC_OscConfig+0x1bc>
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x17e>
 80014b8:	4a67      	ldr	r2, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014ba:	4b67      	ldr	r3, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4a64      	ldr	r2, [pc, #400]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014c6:	4b64      	ldr	r3, [pc, #400]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	e01e      	b.n	8001510 <HAL_RCC_OscConfig+0x1bc>
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x1a4>
 80014de:	4a5e      	ldr	r2, [pc, #376]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014e0:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4a5b      	ldr	r2, [pc, #364]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014ec:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0x1bc>
 80014f8:	4a57      	ldr	r2, [pc, #348]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014fa:	4b57      	ldr	r3, [pc, #348]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4a54      	ldr	r2, [pc, #336]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 8001506:	4b54      	ldr	r3, [pc, #336]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001510:	4951      	ldr	r1, [pc, #324]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 8001512:	4b51      	ldr	r3, [pc, #324]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	f023 020f 	bic.w	r2, r3, #15
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4313      	orrs	r3, r2
 8001522:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 8083 	beq.w	8001636 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fc1a 	bl	8000d68 <HAL_GetTick>
 8001534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153a:	f7ff fc15 	bl	8000d68 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d902      	bls.n	8001550 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	f000 bfbc 	b.w	80024c8 <HAL_RCC_OscConfig+0x1174>
 8001550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001554:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800155c:	fa93 f2a3 	rbit	r2, r3
 8001560:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001564:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001566:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800156a:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f043 0320 	orr.w	r3, r3, #32
 8001576:	b2db      	uxtb	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d102      	bne.n	8001588 <HAL_RCC_OscConfig+0x234>
 8001582:	4b35      	ldr	r3, [pc, #212]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	e039      	b.n	80015fc <HAL_RCC_OscConfig+0x2a8>
 8001588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800158c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001594:	fa93 f2a3 	rbit	r2, r3
 8001598:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800159c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800159e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0320 	orr.w	r3, r3, #32
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d102      	bne.n	80015c0 <HAL_RCC_OscConfig+0x26c>
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	e01d      	b.n	80015fc <HAL_RCC_OscConfig+0x2a8>
 80015c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80015cc:	fa93 f2a3 	rbit	r2, r3
 80015d0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015d4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fab3 f383 	clz	r3, r3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f043 0320 	orr.w	r3, r3, #32
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d102      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2a4>
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	e001      	b.n	80015fc <HAL_RCC_OscConfig+0x2a8>
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_RCC_OscConfig+0x304>)
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001600:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001608:	fa92 f1a2 	rbit	r1, r2
 800160c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001610:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001612:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	fab2 f282 	clz	r2, r2
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	f042 0220 	orr.w	r2, r2, #32
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	f002 021f 	and.w	r2, r2, #31
 800162a:	40d3      	lsrs	r3, r2
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d082      	beq.n	800153a <HAL_RCC_OscConfig+0x1e6>
 8001634:	e087      	b.n	8001746 <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff fb97 	bl	8000d68 <HAL_GetTick>
 800163a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	e00d      	b.n	800165c <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fb92 	bl	8000d68 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b64      	cmp	r3, #100	; 0x64
 800164e:	d905      	bls.n	800165c <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	f000 bf39 	b.w	80024c8 <HAL_RCC_OscConfig+0x1174>
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001660:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001668:	fa93 f2a3 	rbit	r2, r3
 800166c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001670:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001672:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001676:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f043 0320 	orr.w	r3, r3, #32
 8001682:	b2db      	uxtb	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d102      	bne.n	8001694 <HAL_RCC_OscConfig+0x340>
 800168e:	4bb6      	ldr	r3, [pc, #728]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	e039      	b.n	8001708 <HAL_RCC_OscConfig+0x3b4>
 8001694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001698:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80016a0:	fa93 f2a3 	rbit	r2, r3
 80016a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016a8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f043 0320 	orr.w	r3, r3, #32
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0x378>
 80016c6:	4ba8      	ldr	r3, [pc, #672]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	e01d      	b.n	8001708 <HAL_RCC_OscConfig+0x3b4>
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80016d8:	fa93 f2a3 	rbit	r2, r3
 80016dc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016e0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f043 0320 	orr.w	r3, r3, #32
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d102      	bne.n	8001704 <HAL_RCC_OscConfig+0x3b0>
 80016fe:	4b9a      	ldr	r3, [pc, #616]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	e001      	b.n	8001708 <HAL_RCC_OscConfig+0x3b4>
 8001704:	4b98      	ldr	r3, [pc, #608]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800170c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001714:	fa92 f1a2 	rbit	r1, r2
 8001718:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800171c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800171e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	fab2 f282 	clz	r2, r2
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	f042 0220 	orr.w	r2, r2, #32
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	f002 021f 	and.w	r2, r2, #31
 8001736:	40d3      	lsrs	r3, r2
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	f47f af7f 	bne.w	8001640 <HAL_RCC_OscConfig+0x2ec>
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 81f4 	beq.w	8001b3e <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001756:	4b84      	ldr	r3, [pc, #528]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001762:	4b81      	ldr	r3, [pc, #516]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b08      	cmp	r3, #8
 800176c:	f040 8099 	bne.w	80018a2 <HAL_RCC_OscConfig+0x54e>
 8001770:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001778:	2b00      	cmp	r3, #0
 800177a:	f040 8092 	bne.w	80018a2 <HAL_RCC_OscConfig+0x54e>
 800177e:	2302      	movs	r3, #2
 8001780:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001788:	fa93 f2a3 	rbit	r2, r3
 800178c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001790:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001792:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001796:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f043 0320 	orr.w	r3, r3, #32
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d102      	bne.n	80017b4 <HAL_RCC_OscConfig+0x460>
 80017ae:	4b6e      	ldr	r3, [pc, #440]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	e037      	b.n	8001824 <HAL_RCC_OscConfig+0x4d0>
 80017b4:	2302      	movs	r3, #2
 80017b6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80017be:	fa93 f2a3 	rbit	r2, r3
 80017c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017c6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f043 0320 	orr.w	r3, r3, #32
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	095b      	lsrs	r3, r3, #5
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d102      	bne.n	80017ea <HAL_RCC_OscConfig+0x496>
 80017e4:	4b60      	ldr	r3, [pc, #384]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	e01c      	b.n	8001824 <HAL_RCC_OscConfig+0x4d0>
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017fc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f043 0320 	orr.w	r3, r3, #32
 800180e:	b2db      	uxtb	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b04      	cmp	r3, #4
 8001818:	d102      	bne.n	8001820 <HAL_RCC_OscConfig+0x4cc>
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	e001      	b.n	8001824 <HAL_RCC_OscConfig+0x4d0>
 8001820:	4b51      	ldr	r3, [pc, #324]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	2202      	movs	r2, #2
 8001826:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800182e:	fa92 f1a2 	rbit	r1, r2
 8001832:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001836:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001838:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	fab2 f282 	clz	r2, r2
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	f042 0220 	orr.w	r2, r2, #32
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	f002 021f 	and.w	r2, r2, #31
 8001850:	40d3      	lsrs	r3, r2
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_RCC_OscConfig+0x516>
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d002      	beq.n	800186a <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	f000 be2f 	b.w	80024c8 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4c3f      	ldr	r4, [pc, #252]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 800186c:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6959      	ldr	r1, [r3, #20]
 800187a:	23f8      	movs	r3, #248	; 0xf8
 800187c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001884:	fa93 f0a3 	rbit	r0, r3
 8001888:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800188c:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800188e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a0:	e14d      	b.n	8001b3e <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80b3 	beq.w	8001a14 <HAL_RCC_OscConfig+0x6c0>
 80018ae:	2301      	movs	r3, #1
 80018b0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018c0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018c2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018c6:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80018d2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80018d6:	461a      	mov	r2, r3
 80018d8:	2301      	movs	r3, #1
 80018da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fa44 	bl	8000d68 <HAL_GetTick>
 80018e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fa3f 	bl	8000d68 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d902      	bls.n	80018fc <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	f000 bde6 	b.w	80024c8 <HAL_RCC_OscConfig+0x1174>
 80018fc:	2302      	movs	r3, #2
 80018fe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001906:	fa93 f2a3 	rbit	r2, r3
 800190a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800190e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001910:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001914:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f043 0320 	orr.w	r3, r3, #32
 8001920:	b2db      	uxtb	r3, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	095b      	lsrs	r3, r3, #5
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b01      	cmp	r3, #1
 800192a:	d102      	bne.n	8001932 <HAL_RCC_OscConfig+0x5de>
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	e039      	b.n	80019a6 <HAL_RCC_OscConfig+0x652>
 8001932:	2302      	movs	r3, #2
 8001934:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001944:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001946:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f043 0320 	orr.w	r3, r3, #32
 8001956:	b2db      	uxtb	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d104      	bne.n	800196c <HAL_RCC_OscConfig+0x618>
 8001962:	4b01      	ldr	r3, [pc, #4]	; (8001968 <HAL_RCC_OscConfig+0x614>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	e01e      	b.n	80019a6 <HAL_RCC_OscConfig+0x652>
 8001968:	40021000 	.word	0x40021000
 800196c:	2302      	movs	r3, #2
 800196e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800197e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001980:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f043 0320 	orr.w	r3, r3, #32
 8001990:	b2db      	uxtb	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	095b      	lsrs	r3, r3, #5
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b04      	cmp	r3, #4
 800199a:	d102      	bne.n	80019a2 <HAL_RCC_OscConfig+0x64e>
 800199c:	4bb9      	ldr	r3, [pc, #740]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	e001      	b.n	80019a6 <HAL_RCC_OscConfig+0x652>
 80019a2:	4bb8      	ldr	r3, [pc, #736]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	2202      	movs	r2, #2
 80019a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019b0:	fa92 f1a2 	rbit	r1, r2
 80019b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019b8:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019ba:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	fab2 f282 	clz	r2, r2
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	f042 0220 	orr.w	r2, r2, #32
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f002 021f 	and.w	r2, r2, #31
 80019d2:	40d3      	lsrs	r3, r2
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d084      	beq.n	80018e6 <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4ca9      	ldr	r4, [pc, #676]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 80019de:	4ba9      	ldr	r3, [pc, #676]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6959      	ldr	r1, [r3, #20]
 80019ec:	23f8      	movs	r3, #248	; 0xf8
 80019ee:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80019f6:	fa93 f0a3 	rbit	r0, r3
 80019fa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019fe:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a00:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	6023      	str	r3, [r4, #0]
 8001a12:	e094      	b.n	8001b3e <HAL_RCC_OscConfig+0x7ea>
 8001a14:	2301      	movs	r3, #1
 8001a16:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a1e:	fa93 f2a3 	rbit	r2, r3
 8001a22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a26:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a2c:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001a38:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2300      	movs	r3, #0
 8001a40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff f991 	bl	8000d68 <HAL_GetTick>
 8001a46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4c:	f7ff f98c 	bl	8000d68 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d902      	bls.n	8001a62 <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	f000 bd33 	b.w	80024c8 <HAL_RCC_OscConfig+0x1174>
 8001a62:	2302      	movs	r3, #2
 8001a64:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a74:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a7a:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f043 0320 	orr.w	r3, r3, #32
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d102      	bne.n	8001a98 <HAL_RCC_OscConfig+0x744>
 8001a92:	4b7c      	ldr	r3, [pc, #496]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	e037      	b.n	8001b08 <HAL_RCC_OscConfig+0x7b4>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aaa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001aac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	095b      	lsrs	r3, r3, #5
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d102      	bne.n	8001ace <HAL_RCC_OscConfig+0x77a>
 8001ac8:	4b6e      	ldr	r3, [pc, #440]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	e01c      	b.n	8001b08 <HAL_RCC_OscConfig+0x7b4>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ad8:	fa93 f2a3 	rbit	r2, r3
 8001adc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ae0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ae2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f043 0320 	orr.w	r3, r3, #32
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d102      	bne.n	8001b04 <HAL_RCC_OscConfig+0x7b0>
 8001afe:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	e001      	b.n	8001b08 <HAL_RCC_OscConfig+0x7b4>
 8001b04:	4b5f      	ldr	r3, [pc, #380]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8001b12:	fa92 f1a2 	rbit	r1, r2
 8001b16:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001b1a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b1c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	fab2 f282 	clz	r2, r2
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f042 0220 	orr.w	r2, r2, #32
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f002 021f 	and.w	r2, r2, #31
 8001b34:	40d3      	lsrs	r3, r2
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d186      	bne.n	8001a4c <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8132 	beq.w	8001db2 <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8099 	beq.w	8001c8c <HAL_RCC_OscConfig+0x938>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b6c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b72:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <HAL_RCC_OscConfig+0x934>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	461a      	mov	r2, r3
 8001b82:	2301      	movs	r3, #1
 8001b84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7ff f8ef 	bl	8000d68 <HAL_GetTick>
 8001b8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff f8ea 	bl	8000d68 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d902      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	f000 bc91 	b.w	80024c8 <HAL_RCC_OscConfig+0x1174>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001bb8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001bbe:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d102      	bne.n	8001bdc <HAL_RCC_OscConfig+0x888>
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	e037      	b.n	8001c4c <HAL_RCC_OscConfig+0x8f8>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001bee:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bf0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d102      	bne.n	8001c12 <HAL_RCC_OscConfig+0x8be>
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	e01c      	b.n	8001c4c <HAL_RCC_OscConfig+0x8f8>
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001c1c:	fa93 f2a3 	rbit	r2, r3
 8001c20:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c24:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c26:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d102      	bne.n	8001c48 <HAL_RCC_OscConfig+0x8f4>
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	e001      	b.n	8001c4c <HAL_RCC_OscConfig+0x8f8>
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_RCC_OscConfig+0x930>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c56:	fa92 f1a2 	rbit	r1, r2
 8001c5a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001c5e:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c60:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	fab2 f282 	clz	r2, r2
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f002 021f 	and.w	r2, r2, #31
 8001c78:	40d3      	lsrs	r3, r2
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d086      	beq.n	8001b90 <HAL_RCC_OscConfig+0x83c>
 8001c82:	e096      	b.n	8001db2 <HAL_RCC_OscConfig+0xa5e>
 8001c84:	40021000 	.word	0x40021000
 8001c88:	42420480 	.word	0x42420480
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c9e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ca0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ca4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4bb5      	ldr	r3, [pc, #724]	; (8001f84 <HAL_RCC_OscConfig+0xc30>)
 8001cb0:	4413      	add	r3, r2
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f856 	bl	8000d68 <HAL_GetTick>
 8001cbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	e009      	b.n	8001cd6 <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc2:	f7ff f851 	bl	8000d68 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e3f8      	b.n	80024c8 <HAL_RCC_OscConfig+0x1174>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ce8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cee:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_OscConfig+0x9b8>
 8001d06:	4ba0      	ldr	r3, [pc, #640]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	e037      	b.n	8001d7c <HAL_RCC_OscConfig+0xa28>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001d16:	fa93 f2a3 	rbit	r2, r3
 8001d1a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d1e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	095b      	lsrs	r3, r3, #5
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_OscConfig+0x9ee>
 8001d3c:	4b92      	ldr	r3, [pc, #584]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	e01c      	b.n	8001d7c <HAL_RCC_OscConfig+0xa28>
 8001d42:	2302      	movs	r3, #2
 8001d44:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d4c:	fa93 f2a3 	rbit	r2, r3
 8001d50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d54:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d102      	bne.n	8001d78 <HAL_RCC_OscConfig+0xa24>
 8001d72:	4b85      	ldr	r3, [pc, #532]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	e001      	b.n	8001d7c <HAL_RCC_OscConfig+0xa28>
 8001d78:	4b83      	ldr	r3, [pc, #524]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001d86:	fa92 f1a2 	rbit	r1, r2
 8001d8a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001d8e:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d90:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	fab2 f282 	clz	r2, r2
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f002 021f 	and.w	r2, r2, #31
 8001da8:	40d3      	lsrs	r3, r2
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d187      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 818f 	beq.w	80020e0 <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc8:	4b6f      	ldr	r3, [pc, #444]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d112      	bne.n	8001dfa <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4a6c      	ldr	r2, [pc, #432]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001dd6:	4b6c      	ldr	r3, [pc, #432]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dde:	61d3      	str	r3, [r2, #28]
 8001de0:	4b69      	ldr	r3, [pc, #420]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b64      	ldr	r3, [pc, #400]	; (8001f8c <HAL_RCC_OscConfig+0xc38>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d11a      	bne.n	8001e3c <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4a61      	ldr	r2, [pc, #388]	; (8001f8c <HAL_RCC_OscConfig+0xc38>)
 8001e08:	4b60      	ldr	r3, [pc, #384]	; (8001f8c <HAL_RCC_OscConfig+0xc38>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7fe ffa9 	bl	8000d68 <HAL_GetTick>
 8001e16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	e009      	b.n	8001e30 <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1c:	f7fe ffa4 	bl	8000d68 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e34b      	b.n	80024c8 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b56      	ldr	r3, [pc, #344]	; (8001f8c <HAL_RCC_OscConfig+0xc38>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ef      	beq.n	8001e1c <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d106      	bne.n	8001e54 <HAL_RCC_OscConfig+0xb00>
 8001e46:	4a50      	ldr	r2, [pc, #320]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001e48:	4b4f      	ldr	r3, [pc, #316]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	e02f      	b.n	8001eb4 <HAL_RCC_OscConfig+0xb60>
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0xb24>
 8001e5e:	4a4a      	ldr	r2, [pc, #296]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001e60:	4b49      	ldr	r3, [pc, #292]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	4a47      	ldr	r2, [pc, #284]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001e6c:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6213      	str	r3, [r2, #32]
 8001e76:	e01d      	b.n	8001eb4 <HAL_RCC_OscConfig+0xb60>
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0xb48>
 8001e82:	4a41      	ldr	r2, [pc, #260]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001e84:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	4a3e      	ldr	r2, [pc, #248]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001e90:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_OscConfig+0xb60>
 8001e9c:	4a3a      	ldr	r2, [pc, #232]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	4a37      	ldr	r2, [pc, #220]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	f023 0304 	bic.w	r3, r3, #4
 8001eb2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8087 	beq.w	8001fce <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7fe ff52 	bl	8000d68 <HAL_GetTick>
 8001ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7fe ff4d 	bl	8000d68 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e2f2      	b.n	80024c8 <HAL_RCC_OscConfig+0x1174>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001eec:	fa93 f2a3 	rbit	r2, r3
 8001ef0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ef4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ef6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001efa:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_RCC_OscConfig+0xbc4>
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e03d      	b.n	8001f94 <HAL_RCC_OscConfig+0xc40>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f22:	fa93 f2a3 	rbit	r2, r3
 8001f26:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f2a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_OscConfig+0xbfa>
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	e022      	b.n	8001f94 <HAL_RCC_OscConfig+0xc40>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f58:	fa93 f2a3 	rbit	r2, r3
 8001f5c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f60:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f62:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d108      	bne.n	8001f90 <HAL_RCC_OscConfig+0xc3c>
 8001f7e:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <HAL_RCC_OscConfig+0xc34>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	e007      	b.n	8001f94 <HAL_RCC_OscConfig+0xc40>
 8001f84:	42420480 	.word	0x42420480
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40007000 	.word	0x40007000
 8001f90:	4bbf      	ldr	r3, [pc, #764]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	2202      	movs	r2, #2
 8001f96:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001f9e:	fa92 f1a2 	rbit	r1, r2
 8001fa2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fa6:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fa8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	fab2 f282 	clz	r2, r2
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f002 021f 	and.w	r2, r2, #31
 8001fc0:	40d3      	lsrs	r3, r2
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f43f af7f 	beq.w	8001eca <HAL_RCC_OscConfig+0xb76>
 8001fcc:	e07e      	b.n	80020cc <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7fe fecb 	bl	8000d68 <HAL_GetTick>
 8001fd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd6:	e00b      	b.n	8001ff0 <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd8:	f7fe fec6 	bl	8000d68 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e26b      	b.n	80024c8 <HAL_RCC_OscConfig+0x1174>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ffa:	fa93 f2a3 	rbit	r2, r3
 8001ffe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002002:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002004:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002008:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002014:	b2db      	uxtb	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d102      	bne.n	8002026 <HAL_RCC_OscConfig+0xcd2>
 8002020:	4b9b      	ldr	r3, [pc, #620]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	e037      	b.n	8002096 <HAL_RCC_OscConfig+0xd42>
 8002026:	2302      	movs	r3, #2
 8002028:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002038:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800203a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800204a:	b2db      	uxtb	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d102      	bne.n	800205c <HAL_RCC_OscConfig+0xd08>
 8002056:	4b8e      	ldr	r3, [pc, #568]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	e01c      	b.n	8002096 <HAL_RCC_OscConfig+0xd42>
 800205c:	2302      	movs	r3, #2
 800205e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800206e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002070:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002080:	b2db      	uxtb	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	095b      	lsrs	r3, r3, #5
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b04      	cmp	r3, #4
 800208a:	d102      	bne.n	8002092 <HAL_RCC_OscConfig+0xd3e>
 800208c:	4b80      	ldr	r3, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	e001      	b.n	8002096 <HAL_RCC_OscConfig+0xd42>
 8002092:	4b7f      	ldr	r3, [pc, #508]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	2202      	movs	r2, #2
 8002098:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80020a0:	fa92 f1a2 	rbit	r1, r2
 80020a4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80020a8:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020aa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	fab2 f282 	clz	r2, r2
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f002 021f 	and.w	r2, r2, #31
 80020c2:	40d3      	lsrs	r3, r2
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d185      	bne.n	8001fd8 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	4a6e      	ldr	r2, [pc, #440]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 80020d6:	4b6e      	ldr	r3, [pc, #440]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 81ed 	beq.w	80024c6 <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ec:	4b68      	ldr	r3, [pc, #416]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	f000 81e4 	beq.w	80024c2 <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	2b02      	cmp	r3, #2
 8002102:	f040 8144 	bne.w	800238e <HAL_RCC_OscConfig+0x103a>
 8002106:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800210a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002112:	fa93 f2a3 	rbit	r2, r3
 8002116:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800211a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800211c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002120:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800212c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002130:	461a      	mov	r2, r3
 8002132:	2300      	movs	r3, #0
 8002134:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7fe fe17 	bl	8000d68 <HAL_GetTick>
 800213a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213e:	e009      	b.n	8002154 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe fe12 	bl	8000d68 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e1b9      	b.n	80024c8 <HAL_RCC_OscConfig+0x1174>
 8002154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002158:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002160:	fa93 f2a3 	rbit	r2, r3
 8002164:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002168:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800216a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800216e:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f043 0320 	orr.w	r3, r3, #32
 800217a:	b2db      	uxtb	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_RCC_OscConfig+0xe38>
 8002186:	4b42      	ldr	r3, [pc, #264]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	e039      	b.n	8002200 <HAL_RCC_OscConfig+0xeac>
 800218c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002190:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002198:	fa93 f2a3 	rbit	r2, r3
 800219c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021a0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f043 0320 	orr.w	r3, r3, #32
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_OscConfig+0xe70>
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xeac>
 80021c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80021d0:	fa93 f2a3 	rbit	r2, r3
 80021d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021d8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f043 0320 	orr.w	r3, r3, #32
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d102      	bne.n	80021fc <HAL_RCC_OscConfig+0xea8>
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	e001      	b.n	8002200 <HAL_RCC_OscConfig+0xeac>
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002204:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800220c:	fa92 f1a2 	rbit	r1, r2
 8002210:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002214:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002216:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	fab2 f282 	clz	r2, r2
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	f042 0220 	orr.w	r2, r2, #32
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	f002 021f 	and.w	r2, r2, #31
 800222e:	40d3      	lsrs	r3, r2
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d183      	bne.n	8002140 <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002238:	4815      	ldr	r0, [pc, #84]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_RCC_OscConfig+0xf3c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	430b      	orrs	r3, r1
 8002250:	4313      	orrs	r3, r2
 8002252:	6043      	str	r3, [r0, #4]
 8002254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002258:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002260:	fa93 f2a3 	rbit	r2, r3
 8002264:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002268:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800226a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800226e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800227a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800227e:	461a      	mov	r2, r3
 8002280:	2301      	movs	r3, #1
 8002282:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7fe fd70 	bl	8000d68 <HAL_GetTick>
 8002288:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800228c:	e00c      	b.n	80022a8 <HAL_RCC_OscConfig+0xf54>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fd68 	bl	8000d68 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e10f      	b.n	80024c8 <HAL_RCC_OscConfig+0x1174>
 80022a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022b4:	fa93 f2a3 	rbit	r2, r3
 80022b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022bc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022c2:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f043 0320 	orr.w	r3, r3, #32
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d102      	bne.n	80022e0 <HAL_RCC_OscConfig+0xf8c>
 80022da:	4b7e      	ldr	r3, [pc, #504]	; (80024d4 <HAL_RCC_OscConfig+0x1180>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	e039      	b.n	8002354 <HAL_RCC_OscConfig+0x1000>
 80022e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f043 0320 	orr.w	r3, r3, #32
 8002306:	b2db      	uxtb	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d102      	bne.n	8002318 <HAL_RCC_OscConfig+0xfc4>
 8002312:	4b70      	ldr	r3, [pc, #448]	; (80024d4 <HAL_RCC_OscConfig+0x1180>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0x1000>
 8002318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800231c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800232e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f043 0320 	orr.w	r3, r3, #32
 800233e:	b2db      	uxtb	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b04      	cmp	r3, #4
 8002348:	d102      	bne.n	8002350 <HAL_RCC_OscConfig+0xffc>
 800234a:	4b62      	ldr	r3, [pc, #392]	; (80024d4 <HAL_RCC_OscConfig+0x1180>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	e001      	b.n	8002354 <HAL_RCC_OscConfig+0x1000>
 8002350:	4b60      	ldr	r3, [pc, #384]	; (80024d4 <HAL_RCC_OscConfig+0x1180>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002358:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002360:	fa92 f1a2 	rbit	r1, r2
 8002364:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002368:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800236a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	fab2 f282 	clz	r2, r2
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	f042 0220 	orr.w	r2, r2, #32
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	f002 021f 	and.w	r2, r2, #31
 8002382:	40d3      	lsrs	r3, r2
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d083      	beq.n	8002294 <HAL_RCC_OscConfig+0xf40>
 800238c:	e09b      	b.n	80024c6 <HAL_RCC_OscConfig+0x1172>
 800238e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002392:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f107 0320 	add.w	r3, r7, #32
 80023a2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023a4:	f107 0320 	add.w	r3, r7, #32
 80023a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80023b4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80023b8:	461a      	mov	r2, r3
 80023ba:	2300      	movs	r3, #0
 80023bc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe fcd3 	bl	8000d68 <HAL_GetTick>
 80023c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c6:	e009      	b.n	80023dc <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fcce 	bl	8000d68 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e075      	b.n	80024c8 <HAL_RCC_OscConfig+0x1174>
 80023dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023f2:	f107 031c 	add.w	r3, r7, #28
 80023f6:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f043 0320 	orr.w	r3, r3, #32
 8002402:	b2db      	uxtb	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d102      	bne.n	8002414 <HAL_RCC_OscConfig+0x10c0>
 800240e:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HAL_RCC_OscConfig+0x1180>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	e039      	b.n	8002488 <HAL_RCC_OscConfig+0x1134>
 8002414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002418:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f107 0318 	add.w	r3, r7, #24
 8002428:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800242a:	f107 0318 	add.w	r3, r7, #24
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f043 0320 	orr.w	r3, r3, #32
 800243a:	b2db      	uxtb	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d102      	bne.n	800244c <HAL_RCC_OscConfig+0x10f8>
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <HAL_RCC_OscConfig+0x1180>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0x1134>
 800244c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002450:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002458:	fa93 f2a3 	rbit	r2, r3
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f043 0320 	orr.w	r3, r3, #32
 8002472:	b2db      	uxtb	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b04      	cmp	r3, #4
 800247c:	d102      	bne.n	8002484 <HAL_RCC_OscConfig+0x1130>
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_RCC_OscConfig+0x1180>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	e001      	b.n	8002488 <HAL_RCC_OscConfig+0x1134>
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_RCC_OscConfig+0x1180>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002494:	fa92 f1a2 	rbit	r1, r2
 8002498:	f107 0210 	add.w	r2, r7, #16
 800249c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800249e:	f107 0210 	add.w	r2, r7, #16
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	fab2 f282 	clz	r2, r2
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f042 0220 	orr.w	r2, r2, #32
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	f002 021f 	and.w	r2, r2, #31
 80024b6:	40d3      	lsrs	r3, r2
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d183      	bne.n	80023c8 <HAL_RCC_OscConfig+0x1074>
 80024c0:	e001      	b.n	80024c6 <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000

080024d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b09e      	sub	sp, #120	; 0x78
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80024e6:	4ba3      	ldr	r3, [pc, #652]	; (8002774 <HAL_RCC_ClockConfig+0x29c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0207 	and.w	r2, r3, #7
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d210      	bcs.n	8002516 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f4:	499f      	ldr	r1, [pc, #636]	; (8002774 <HAL_RCC_ClockConfig+0x29c>)
 80024f6:	4b9f      	ldr	r3, [pc, #636]	; (8002774 <HAL_RCC_ClockConfig+0x29c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 0207 	bic.w	r2, r3, #7
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002504:	4b9b      	ldr	r3, [pc, #620]	; (8002774 <HAL_RCC_ClockConfig+0x29c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0207 	and.w	r2, r3, #7
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e1d0      	b.n	80028b8 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002522:	4995      	ldr	r1, [pc, #596]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 8002524:	4b94      	ldr	r3, [pc, #592]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8168 	beq.w	8002812 <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d15c      	bne.n	8002604 <HAL_RCC_ClockConfig+0x12c>
 800254a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800254e:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f043 0320 	orr.w	r3, r3, #32
 8002564:	b2db      	uxtb	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d102      	bne.n	8002576 <HAL_RCC_ClockConfig+0x9e>
 8002570:	4b81      	ldr	r3, [pc, #516]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	e02d      	b.n	80025d2 <HAL_RCC_ClockConfig+0xfa>
 8002576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257a:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f043 0320 	orr.w	r3, r3, #32
 8002590:	b2db      	uxtb	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d102      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xca>
 800259c:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	e017      	b.n	80025d2 <HAL_RCC_ClockConfig+0xfa>
 80025a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a6:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f043 0320 	orr.w	r3, r3, #32
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d102      	bne.n	80025ce <HAL_RCC_ClockConfig+0xf6>
 80025c8:	4b6b      	ldr	r3, [pc, #428]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	e001      	b.n	80025d2 <HAL_RCC_ClockConfig+0xfa>
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d6:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025da:	fa92 f2a2 	rbit	r2, r2
 80025de:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e2:	fab2 f282 	clz	r2, r2
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f042 0220 	orr.w	r2, r2, #32
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f002 021f 	and.w	r2, r2, #31
 80025f4:	40d3      	lsrs	r3, r2
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 80be 	bne.w	800277c <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e159      	b.n	80028b8 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d15b      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x1ec>
 800260c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002610:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f043 0320 	orr.w	r3, r3, #32
 8002626:	b2db      	uxtb	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d102      	bne.n	8002638 <HAL_RCC_ClockConfig+0x160>
 8002632:	4b51      	ldr	r3, [pc, #324]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	e02d      	b.n	8002694 <HAL_RCC_ClockConfig+0x1bc>
 8002638:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800263c:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f043 0320 	orr.w	r3, r3, #32
 8002652:	b2db      	uxtb	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d102      	bne.n	8002664 <HAL_RCC_ClockConfig+0x18c>
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	e017      	b.n	8002694 <HAL_RCC_ClockConfig+0x1bc>
 8002664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002668:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f043 0320 	orr.w	r3, r3, #32
 800267e:	b2db      	uxtb	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b04      	cmp	r3, #4
 8002688:	d102      	bne.n	8002690 <HAL_RCC_ClockConfig+0x1b8>
 800268a:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	e001      	b.n	8002694 <HAL_RCC_ClockConfig+0x1bc>
 8002690:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002698:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800269c:	fa92 f2a2 	rbit	r2, r2
 80026a0:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026a2:	6a3a      	ldr	r2, [r7, #32]
 80026a4:	fab2 f282 	clz	r2, r2
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f042 0220 	orr.w	r2, r2, #32
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f002 021f 	and.w	r2, r2, #31
 80026b6:	40d3      	lsrs	r3, r2
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d15d      	bne.n	800277c <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0f9      	b.n	80028b8 <HAL_RCC_ClockConfig+0x3e0>
 80026c4:	2302      	movs	r3, #2
 80026c6:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026d0:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f043 0320 	orr.w	r3, r3, #32
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_ClockConfig+0x216>
 80026e8:	4b23      	ldr	r3, [pc, #140]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e02b      	b.n	8002746 <HAL_RCC_ClockConfig+0x26e>
 80026ee:	2302      	movs	r3, #2
 80026f0:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f043 0320 	orr.w	r3, r3, #32
 8002706:	b2db      	uxtb	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d102      	bne.n	8002718 <HAL_RCC_ClockConfig+0x240>
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	e016      	b.n	8002746 <HAL_RCC_ClockConfig+0x26e>
 8002718:	2302      	movs	r3, #2
 800271a:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0320 	orr.w	r3, r3, #32
 8002730:	b2db      	uxtb	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b04      	cmp	r3, #4
 800273a:	d102      	bne.n	8002742 <HAL_RCC_ClockConfig+0x26a>
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	e001      	b.n	8002746 <HAL_RCC_ClockConfig+0x26e>
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <HAL_RCC_ClockConfig+0x2a0>)
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2202      	movs	r2, #2
 8002748:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800274c:	fa92 f2a2 	rbit	r2, r2
 8002750:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	fab2 f282 	clz	r2, r2
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f042 0220 	orr.w	r2, r2, #32
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f002 021f 	and.w	r2, r2, #31
 8002766:	40d3      	lsrs	r3, r2
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0a1      	b.n	80028b8 <HAL_RCC_ClockConfig+0x3e0>
 8002774:	40022000 	.word	0x40022000
 8002778:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277c:	4950      	ldr	r1, [pc, #320]	; (80028c0 <HAL_RCC_ClockConfig+0x3e8>)
 800277e:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_ClockConfig+0x3e8>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f023 0203 	bic.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800278e:	f7fe faeb 	bl	8000d68 <HAL_GetTick>
 8002792:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d112      	bne.n	80027c2 <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279e:	f7fe fae3 	bl	8000d68 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e081      	b.n	80028b8 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b4:	4b42      	ldr	r3, [pc, #264]	; (80028c0 <HAL_RCC_ClockConfig+0x3e8>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d1ee      	bne.n	800279e <HAL_RCC_ClockConfig+0x2c6>
 80027c0:	e027      	b.n	8002812 <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d11d      	bne.n	8002806 <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe facc 	bl	8000d68 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e06a      	b.n	80028b8 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <HAL_RCC_ClockConfig+0x3e8>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d1ee      	bne.n	80027cc <HAL_RCC_ClockConfig+0x2f4>
 80027ee:	e010      	b.n	8002812 <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe faba 	bl	8000d68 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e058      	b.n	80028b8 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002806:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <HAL_RCC_ClockConfig+0x3e8>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ee      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_RCC_ClockConfig+0x3ec>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0207 	and.w	r2, r3, #7
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d910      	bls.n	8002842 <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002820:	4928      	ldr	r1, [pc, #160]	; (80028c4 <HAL_RCC_ClockConfig+0x3ec>)
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_RCC_ClockConfig+0x3ec>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_ClockConfig+0x3ec>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0207 	and.w	r2, r3, #7
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d001      	beq.n	8002842 <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e03a      	b.n	80028b8 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284e:	491c      	ldr	r1, [pc, #112]	; (80028c0 <HAL_RCC_ClockConfig+0x3e8>)
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_ClockConfig+0x3e8>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d009      	beq.n	8002880 <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800286c:	4914      	ldr	r1, [pc, #80]	; (80028c0 <HAL_RCC_ClockConfig+0x3e8>)
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_RCC_ClockConfig+0x3e8>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002880:	f000 f826 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 8002884:	4601      	mov	r1, r0
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_RCC_ClockConfig+0x3e8>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800288e:	23f0      	movs	r3, #240	; 0xf0
 8002890:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <HAL_RCC_ClockConfig+0x3f0>)
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	fa21 f303 	lsr.w	r3, r1, r3
 80028ac:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_RCC_ClockConfig+0x3f4>)
 80028ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7fe fa2f 	bl	8000d14 <HAL_InitTick>
  
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3778      	adds	r7, #120	; 0x78
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40022000 	.word	0x40022000
 80028c8:	08003bfc 	.word	0x08003bfc
 80028cc:	20000428 	.word	0x20000428

080028d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b08b      	sub	sp, #44	; 0x2c
 80028d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028ea:	4b29      	ldr	r3, [pc, #164]	; (8002990 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d002      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x30>
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0x36>
 80028fe:	e03c      	b.n	800297a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002902:	623b      	str	r3, [r7, #32]
      break;
 8002904:	e03c      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800290c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002910:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCC_GetSysClockFreq+0xc0>)
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	f003 020f 	and.w	r2, r3, #15
 8002932:	230f      	movs	r3, #15
 8002934:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <HAL_RCC_GetSysClockFreq+0xcc>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002958:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc4>)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	fb02 f303 	mul.w	r3, r2, r3
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	e004      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	623b      	str	r3, [r7, #32]
      break;
 8002978:	e002      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc4>)
 800297c:	623b      	str	r3, [r7, #32]
      break;
 800297e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002980:	6a3b      	ldr	r3, [r7, #32]
}
 8002982:	4618      	mov	r0, r3
 8002984:	372c      	adds	r7, #44	; 0x2c
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	007a1200 	.word	0x007a1200
 8002998:	08003c14 	.word	0x08003c14
 800299c:	08003c24 	.word	0x08003c24
 80029a0:	003d0900 	.word	0x003d0900

080029a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000428 	.word	0x20000428

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029c2:	f7ff ffef 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c6:	4601      	mov	r1, r0
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029d0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80029d4:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80029ea:	5cd3      	ldrb	r3, [r2, r3]
 80029ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	08003c0c 	.word	0x08003c0c

08002a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a06:	f7ff ffcd 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 8002a0a:	4601      	mov	r1, r0
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002a14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a18:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a2e:	5cd3      	ldrb	r3, [r2, r3]
 8002a30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	08003c0c 	.word	0x08003c0c

08002a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b092      	sub	sp, #72	; 0x48
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80ef 	beq.w	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a68:	4b96      	ldr	r3, [pc, #600]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10e      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4a93      	ldr	r2, [pc, #588]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a76:	4b93      	ldr	r3, [pc, #588]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	61d3      	str	r3, [r2, #28]
 8002a80:	4b90      	ldr	r3, [pc, #576]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	4b8d      	ldr	r3, [pc, #564]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d118      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9e:	4a8a      	ldr	r2, [pc, #552]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002aa0:	4b89      	ldr	r3, [pc, #548]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe f95d 	bl	8000d68 <HAL_GetTick>
 8002aae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7fe f959 	bl	8000d68 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b64      	cmp	r3, #100	; 0x64
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e0fa      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x276>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	4b80      	ldr	r3, [pc, #512]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad0:	4b7c      	ldr	r3, [pc, #496]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 809c 	beq.w	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f000 8094 	beq.w	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af2:	4b74      	ldr	r3, [pc, #464]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b0a:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b6d      	ldr	r3, [pc, #436]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002b16:	4413      	add	r3, r2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b65      	ldr	r3, [pc, #404]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002b38:	4413      	add	r3, r2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b40:	4a60      	ldr	r2, [pc, #384]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b44:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d064      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fe f90a 	bl	8000d68 <HAL_GetTick>
 8002b54:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe f906 	bl	8000d68 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e0a5      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x276>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002b7a:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d102      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b92:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	e02b      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d102      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8002bbc:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	e016      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	fab3 f383 	clz	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d102      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002be6:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	e001      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8002bec:	4b35      	ldr	r3, [pc, #212]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf6:	fa92 f2a2 	rbit	r2, r2
 8002bfa:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	fab2 f282 	clz	r2, r2
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f002 021f 	and.w	r2, r2, #31
 8002c10:	40d3      	lsrs	r3, r2
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d09e      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c1a:	492a      	ldr	r1, [pc, #168]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c1c:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c34:	4a23      	ldr	r2, [pc, #140]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c36:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c4c:	491d      	ldr	r1, [pc, #116]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f023 0203 	bic.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c6a:	4916      	ldr	r1, [pc, #88]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c6c:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f023 0210 	bic.w	r2, r3, #16
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c88:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ca6:	4907      	ldr	r1, [pc, #28]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3748      	adds	r7, #72	; 0x48
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	42420400 	.word	0x42420400

08002cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e043      	b.n	8002d6a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fd ffc0 	bl	8000c7c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2224      	movs	r2, #36	; 0x24
 8002d00:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f9d7 	bl	80030c8 <UART_SetConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e022      	b.n	8002d6a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fb31 	bl	8003394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	6852      	ldr	r2, [r2, #4]
 8002d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d40:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	6892      	ldr	r2, [r2, #8]
 8002d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d50:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fbb8 	bl	80034d8 <UART_CheckIdleState>
 8002d68:	4603      	mov	r3, r0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop

08002d74 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d132      	bne.n	8002df4 <HAL_UART_Transmit_IT+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_UART_Transmit_IT+0x26>
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e02b      	b.n	8002df6 <HAL_UART_Transmit_IT+0x82>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_UART_Transmit_IT+0x38>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e024      	b.n	8002df6 <HAL_UART_Transmit_IT+0x82>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pTxBuffPtr = pData;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	88fa      	ldrh	r2, [r7, #6]
 8002dc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2221      	movs	r2, #33	; 0x21
 8002dd4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Transmit_IT+0x82>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop

08002e04 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d17a      	bne.n	8002f14 <HAL_UART_Receive_IT+0x110>
  {
    if((pData == NULL ) || (Size == 0))
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_UART_Receive_IT+0x26>
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e073      	b.n	8002f16 <HAL_UART_Receive_IT+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_UART_Receive_IT+0x38>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e06c      	b.n	8002f16 <HAL_UART_Receive_IT+0x112>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pRxBuffPtr = pData;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	88fa      	ldrh	r2, [r7, #6]
 8002e4e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	88fa      	ldrh	r2, [r7, #6]
 8002e56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e62:	d10e      	bne.n	8002e82 <HAL_UART_Receive_IT+0x7e>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <HAL_UART_Receive_IT+0x74>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002e72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e76:	e028      	b.n	8002eca <HAL_UART_Receive_IT+0xc6>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	22ff      	movs	r2, #255	; 0xff
 8002e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e80:	e023      	b.n	8002eca <HAL_UART_Receive_IT+0xc6>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <HAL_UART_Receive_IT+0xa2>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <HAL_UART_Receive_IT+0x98>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	22ff      	movs	r2, #255	; 0xff
 8002e96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e9a:	e016      	b.n	8002eca <HAL_UART_Receive_IT+0xc6>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	227f      	movs	r2, #127	; 0x7f
 8002ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ea4:	e011      	b.n	8002eca <HAL_UART_Receive_IT+0xc6>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eae:	d10c      	bne.n	8002eca <HAL_UART_Receive_IT+0xc6>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d104      	bne.n	8002ec2 <HAL_UART_Receive_IT+0xbe>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	227f      	movs	r2, #127	; 0x7f
 8002ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ec0:	e003      	b.n	8002eca <HAL_UART_Receive_IT+0xc6>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	223f      	movs	r2, #63	; 0x3f
 8002ec6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2222      	movs	r2, #34	; 0x22
 8002ed4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	6892      	ldr	r2, [r2, #8]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	f042 0220 	orr.w	r2, r2, #32
 8002f0e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_UART_Receive_IT+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop

08002f24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* UART parity error interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <HAL_UART_IRQHandler+0x38>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_UART_IRQHandler+0x38>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART frame error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <HAL_UART_IRQHandler+0x68>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d009      	beq.n	8002f8c <HAL_UART_IRQHandler+0x68>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f84:	f043 0204 	orr.w	r2, r3, #4
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART noise error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d010      	beq.n	8002fbc <HAL_UART_IRQHandler+0x98>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d009      	beq.n	8002fbc <HAL_UART_IRQHandler+0x98>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2204      	movs	r2, #4
 8002fae:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb4:	f043 0202 	orr.w	r2, r3, #2
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART Over-Run interrupt occurred -----------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d010      	beq.n	8002fec <HAL_UART_IRQHandler+0xc8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d009      	beq.n	8002fec <HAL_UART_IRQHandler+0xc8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2208      	movs	r2, #8
 8002fde:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe4:	f043 0208 	orr.w	r2, r3, #8
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* UART wakeup from Stop mode interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_UART_IRQHandler+0x104>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00f      	beq.n	8003028 <HAL_UART_IRQHandler+0x104>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003010:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    HAL_UARTEx_WakeupCallback(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fc1c 	bl	8003860 <HAL_UARTEx_WakeupCallback>
  }

  /* UART in mode Receiver ---------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_UART_IRQHandler+0x126>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_UART_IRQHandler+0x126>
  {
    UART_Receive_IT(huart);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fb95 	bl	8003774 <UART_Receive_IT>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_UART_IRQHandler+0x148>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_UART_IRQHandler+0x148>
  {
    UART_Transmit_IT(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fb16 	bl	8003698 <UART_Transmit_IT>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_UART_IRQHandler+0x16a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_UART_IRQHandler+0x16a>
  {
    UART_EndTransmit_IT(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fb5b 	bl	8003744 <UART_EndTransmit_IT>
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_UART_IRQHandler+0x188>
  {
    /* Set the UART state ready to be able to start again the Tx/Rx process */
    huart->gState = HAL_UART_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    HAL_UART_ErrorCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f804 	bl	80030b4 <HAL_UART_ErrorCallback>
  }  
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80030d4:	2310      	movs	r3, #16
 80030d6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000;
 80030d8:	2300      	movs	r3, #0
 80030da:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000;
 80030dc:	2300      	movs	r3, #0
 80030de:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6819      	ldr	r1, [r3, #0]
 8003106:	4b9e      	ldr	r3, [pc, #632]	; (8003380 <UART_SetConfig+0x2b8>)
 8003108:	400b      	ands	r3, r1
 800310a:	68f9      	ldr	r1, [r7, #12]
 800310c:	430b      	orrs	r3, r1
 800310e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	6852      	ldr	r2, [r2, #4]
 800311a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68d2      	ldr	r2, [r2, #12]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	6892      	ldr	r2, [r2, #8]
 800313c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	430a      	orrs	r2, r1
 8003144:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a8e      	ldr	r2, [pc, #568]	; (8003384 <UART_SetConfig+0x2bc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d121      	bne.n	8003194 <UART_SetConfig+0xcc>
 8003150:	4b8d      	ldr	r3, [pc, #564]	; (8003388 <UART_SetConfig+0x2c0>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b03      	cmp	r3, #3
 800315a:	d817      	bhi.n	800318c <UART_SetConfig+0xc4>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <UART_SetConfig+0x9c>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003175 	.word	0x08003175
 8003168:	08003181 	.word	0x08003181
 800316c:	08003187 	.word	0x08003187
 8003170:	0800317b 	.word	0x0800317b
 8003174:	2300      	movs	r3, #0
 8003176:	75fb      	strb	r3, [r7, #23]
 8003178:	e01e      	b.n	80031b8 <UART_SetConfig+0xf0>
 800317a:	2302      	movs	r3, #2
 800317c:	75fb      	strb	r3, [r7, #23]
 800317e:	e01b      	b.n	80031b8 <UART_SetConfig+0xf0>
 8003180:	2304      	movs	r3, #4
 8003182:	75fb      	strb	r3, [r7, #23]
 8003184:	e018      	b.n	80031b8 <UART_SetConfig+0xf0>
 8003186:	2308      	movs	r3, #8
 8003188:	75fb      	strb	r3, [r7, #23]
 800318a:	e015      	b.n	80031b8 <UART_SetConfig+0xf0>
 800318c:	2310      	movs	r3, #16
 800318e:	75fb      	strb	r3, [r7, #23]
 8003190:	bf00      	nop
 8003192:	e011      	b.n	80031b8 <UART_SetConfig+0xf0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7c      	ldr	r2, [pc, #496]	; (800338c <UART_SetConfig+0x2c4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d102      	bne.n	80031a4 <UART_SetConfig+0xdc>
 800319e:	2300      	movs	r3, #0
 80031a0:	75fb      	strb	r3, [r7, #23]
 80031a2:	e009      	b.n	80031b8 <UART_SetConfig+0xf0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a79      	ldr	r2, [pc, #484]	; (8003390 <UART_SetConfig+0x2c8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d102      	bne.n	80031b4 <UART_SetConfig+0xec>
 80031ae:	2300      	movs	r3, #0
 80031b0:	75fb      	strb	r3, [r7, #23]
 80031b2:	e001      	b.n	80031b8 <UART_SetConfig+0xf0>
 80031b4:	2310      	movs	r3, #16
 80031b6:	75fb      	strb	r3, [r7, #23]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c0:	d170      	bne.n	80032a4 <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d857      	bhi.n	8003278 <UART_SetConfig+0x1b0>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0x108>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	08003211 	.word	0x08003211
 80031d8:	0800322d 	.word	0x0800322d
 80031dc:	08003279 	.word	0x08003279
 80031e0:	08003247 	.word	0x08003247
 80031e4:	08003279 	.word	0x08003279
 80031e8:	08003279 	.word	0x08003279
 80031ec:	08003279 	.word	0x08003279
 80031f0:	08003263 	.word	0x08003263
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80031f4:	f7ff fbe2 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 80031f8:	4603      	mov	r3, r0
 80031fa:	005a      	lsls	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	441a      	add	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	82bb      	strh	r3, [r7, #20]
        break;
 800320e:	e036      	b.n	800327e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003210:	f7ff fbf6 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 8003214:	4603      	mov	r3, r0
 8003216:	005a      	lsls	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	441a      	add	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	82bb      	strh	r3, [r7, #20]
        break;
 800322a:	e028      	b.n	800327e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	085b      	lsrs	r3, r3, #1
 8003232:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003236:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6852      	ldr	r2, [r2, #4]
 800323e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003242:	82bb      	strh	r3, [r7, #20]
        break;
 8003244:	e01b      	b.n	800327e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003246:	f7ff fb43 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800324a:	4603      	mov	r3, r0
 800324c:	005a      	lsls	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	82bb      	strh	r3, [r7, #20]
        break;
 8003260:	e00d      	b.n	800327e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	82bb      	strh	r3, [r7, #20]
        break;
 8003276:	e002      	b.n	800327e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	74fb      	strb	r3, [r7, #19]
        break;
 800327c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 800327e:	8abb      	ldrh	r3, [r7, #20]
 8003280:	f023 030f 	bic.w	r3, r3, #15
 8003284:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8003286:	8abb      	ldrh	r3, [r7, #20]
 8003288:	105b      	asrs	r3, r3, #1
 800328a:	b29b      	uxth	r3, r3
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	b29a      	uxth	r2, r3
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	4313      	orrs	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	897a      	ldrh	r2, [r7, #10]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	e068      	b.n	8003376 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d862      	bhi.n	8003370 <UART_SetConfig+0x2a8>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <UART_SetConfig+0x1e8>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032f5 	.word	0x080032f5
 80032b8:	08003315 	.word	0x08003315
 80032bc:	08003371 	.word	0x08003371
 80032c0:	08003335 	.word	0x08003335
 80032c4:	08003371 	.word	0x08003371
 80032c8:	08003371 	.word	0x08003371
 80032cc:	08003371 	.word	0x08003371
 80032d0:	08003355 	.word	0x08003355
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681c      	ldr	r4, [r3, #0]
 80032d8:	f7ff fb70 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 80032dc:	4602      	mov	r2, r0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	441a      	add	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	60e3      	str	r3, [r4, #12]
        break;
 80032f2:	e040      	b.n	8003376 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681c      	ldr	r4, [r3, #0]
 80032f8:	f7ff fb82 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	b29b      	uxth	r3, r3
 8003310:	60e3      	str	r3, [r4, #12]
        break;
 8003312:	e030      	b.n	8003376 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003322:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	6849      	ldr	r1, [r1, #4]
 800332a:	fbb3 f3f1 	udiv	r3, r3, r1
 800332e:	b29b      	uxth	r3, r3
 8003330:	60d3      	str	r3, [r2, #12]
        break;
 8003332:	e020      	b.n	8003376 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681c      	ldr	r4, [r3, #0]
 8003338:	f7ff faca 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	441a      	add	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	b29b      	uxth	r3, r3
 8003350:	60e3      	str	r3, [r4, #12]
        break;
 8003352:	e010      	b.n	8003376 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6852      	ldr	r2, [r2, #4]
 800335c:	0852      	lsrs	r2, r2, #1
 800335e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6852      	ldr	r2, [r2, #4]
 8003366:	fbb1 f2f2 	udiv	r2, r1, r2
 800336a:	b292      	uxth	r2, r2
 800336c:	60da      	str	r2, [r3, #12]
        break;
 800336e:	e002      	b.n	8003376 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	74fb      	strb	r3, [r7, #19]
        break;
 8003374:	bf00      	nop
    }
  }

  return ret;
 8003376:	7cfb      	ldrb	r3, [r7, #19]

}
 8003378:	4618      	mov	r0, r3
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	bd90      	pop	{r4, r7, pc}
 8003380:	efff69f3 	.word	0xefff69f3
 8003384:	40013800 	.word	0x40013800
 8003388:	40021000 	.word	0x40021000
 800338c:	40004400 	.word	0x40004400
 8003390:	40004800 	.word	0x40004800

08003394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	6852      	ldr	r2, [r2, #4]
 80033b2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	6852      	ldr	r2, [r2, #4]
 80033d4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	6852      	ldr	r2, [r2, #4]
 80033f6:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	6852      	ldr	r2, [r2, #4]
 8003418:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	6892      	ldr	r2, [r2, #8]
 800343a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003442:	430a      	orrs	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	6892      	ldr	r2, [r2, #8]
 800345c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003464:	430a      	orrs	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01a      	beq.n	80034aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	6852      	ldr	r2, [r2, #4]
 800347e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003492:	d10a      	bne.n	80034aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	6852      	ldr	r2, [r2, #4]
 800349e:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	6852      	ldr	r2, [r2, #4]
 80034c0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  }
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00c      	beq.n	800350e <UART_CheckIdleState+0x36>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80034f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f8:	2200      	movs	r2, #0
 80034fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f82a 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <UART_CheckIdleState+0x36>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e020      	b.n	8003550 <UART_CheckIdleState+0x78>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00c      	beq.n	8003536 <UART_CheckIdleState+0x5e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800351c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003520:	2200      	movs	r2, #0
 8003522:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f816 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <UART_CheckIdleState+0x5e>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e00c      	b.n	8003550 <UART_CheckIdleState+0x78>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7fd fbfe 	bl	8000d68 <HAL_GetTick>
 800356c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f040 8084 	bne.w	800367e <UART_WaitOnFlagUntilTimeout+0x126>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8003576:	e03c      	b.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x9a>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d038      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x9a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0x3e>
 8003586:	f7fd fbef 	bl	8000d68 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	1ad2      	subs	r2, r2, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d92d      	bls.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x9a>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a4:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	f022 0220 	bic.w	r2, r2, #32
 80035b4:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c4:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	6892      	ldr	r2, [r2, #8]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e04e      	b.n	8003690 <UART_WaitOnFlagUntilTimeout+0x138>
  uint32_t tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	401a      	ands	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d1ba      	bne.n	8003578 <UART_WaitOnFlagUntilTimeout+0x20>
 8003602:	e044      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0x136>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d038      	beq.n	800367e <UART_WaitOnFlagUntilTimeout+0x126>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0xca>
 8003612:	f7fd fba9 	bl	8000d68 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	1ad2      	subs	r2, r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d92d      	bls.n	800367e <UART_WaitOnFlagUntilTimeout+0x126>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003630:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	f022 0220 	bic.w	r2, r2, #32
 8003640:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003650:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	6892      	ldr	r2, [r2, #8]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e008      	b.n	8003690 <UART_WaitOnFlagUntilTimeout+0x138>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	401a      	ands	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	429a      	cmp	r2, r3
 800368c:	d0ba      	beq.n	8003604 <UART_WaitOnFlagUntilTimeout+0xac>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b21      	cmp	r3, #33	; 0x21
 80036aa:	d144      	bne.n	8003736 <UART_Transmit_IT+0x9e>
  {

    if(huart->TxXferCount == 0)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d111      	bne.n	80036da <UART_Transmit_IT+0x42>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d4:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e02e      	b.n	8003738 <UART_Transmit_IT+0xa0>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e2:	d114      	bne.n	800370e <UART_Transmit_IT+0x76>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d110      	bne.n	800370e <UART_Transmit_IT+0x76>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f0:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	8812      	ldrh	r2, [r2, #0]
 80036fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036fe:	b292      	uxth	r2, r2
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	1c9a      	adds	r2, r3, #2
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	64da      	str	r2, [r3, #76]	; 0x4c
 800370c:	e009      	b.n	8003722 <UART_Transmit_IT+0x8a>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	1c58      	adds	r0, r3, #1
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	64c8      	str	r0, [r1, #76]	; 0x4c
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	e000      	b.n	8003738 <UART_Transmit_IT+0xa0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003736:	2302      	movs	r3, #2
  }
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800375a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7fd f8cf 	bl	8000908 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003782:	81fb      	strh	r3, [r7, #14]

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b22      	cmp	r3, #34	; 0x22
 800378e:	d159      	bne.n	8003844 <UART_Receive_IT+0xd0>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003798:	d115      	bne.n	80037c6 <UART_Receive_IT+0x52>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d111      	bne.n	80037c6 <UART_Receive_IT+0x52>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	89fb      	ldrh	r3, [r7, #14]
 80037b2:	4013      	ands	r3, r2
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	1c9a      	adds	r2, r3, #2
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54
 80037c4:	e00e      	b.n	80037e4 <UART_Receive_IT+0x70>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	1c59      	adds	r1, r3, #1
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6551      	str	r1, [r2, #84]	; 0x54
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80037d6:	b292      	uxth	r2, r2
 80037d8:	b2d1      	uxtb	r1, r2
 80037da:	89fa      	ldrh	r2, [r7, #14]
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	400a      	ands	r2, r1
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d120      	bne.n	8003840 <UART_Receive_IT+0xcc>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	f022 0220 	bic.w	r2, r2, #32
 800380c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800381c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	6892      	ldr	r2, [r2, #8]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd f870 	bl	800091c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	e00a      	b.n	8003856 <UART_Receive_IT+0xe2>
    }

    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e008      	b.n	8003856 <UART_Receive_IT+0xe2>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	6992      	ldr	r2, [r2, #24]
 800384e:	f042 0208 	orr.w	r2, r2, #8
 8003852:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop

08003860 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback
  * @param  huart: UART handle
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_TIM_Encoder_Init>:
  * @param  htim: TIM Encoder Interface handle
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e083      	b.n	800399c <HAL_TIM_Encoder_Init+0x128>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fd f96f 	bl	8000b8c <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c4:	f023 0307 	bic.w	r3, r3, #7
 80038c8:	6093      	str	r3, [r2, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3304      	adds	r3, #4
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f000 f89d 	bl	8003a14 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	4313      	orrs	r3, r2
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
  
  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003920:	f023 030c 	bic.w	r3, r3, #12
 8003924:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800392c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	4313      	orrs	r3, r2
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	011a      	lsls	r2, r3, #4
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	031b      	lsls	r3, r3, #12
 8003950:	4313      	orrs	r3, r2
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003966:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	4313      	orrs	r3, r2
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <HAL_TIM_Encoder_Start+0x16>
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d008      	beq.n	80039ca <HAL_TIM_Encoder_Start+0x26>
 80039b8:	e00f      	b.n	80039da <HAL_TIM_Encoder_Start+0x36>
  {
  case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2201      	movs	r2, #1
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f898 	bl	8003af8 <TIM_CCxChannelCmd>
      break; 
 80039c8:	e016      	b.n	80039f8 <HAL_TIM_Encoder_Start+0x54>
    }  
  case TIM_CHANNEL_2:
    {  
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2201      	movs	r2, #1
 80039d0:	2104      	movs	r1, #4
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f890 	bl	8003af8 <TIM_CCxChannelCmd>
      break;
 80039d8:	e00e      	b.n	80039f8 <HAL_TIM_Encoder_Start+0x54>
    }  
  default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2201      	movs	r2, #1
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f888 	bl	8003af8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2201      	movs	r2, #1
 80039ee:	2104      	movs	r1, #4
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f881 	bl	8003af8 <TIM_CCxChannelCmd>
      break; 
 80039f6:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop

08003a14 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a2e      	ldr	r2, [pc, #184]	; (8003ae4 <TIM_Base_SetConfig+0xd0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d007      	beq.n	8003a40 <TIM_Base_SetConfig+0x2c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a36:	d003      	beq.n	8003a40 <TIM_Base_SetConfig+0x2c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <TIM_Base_SetConfig+0xd4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d108      	bne.n	8003a52 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a23      	ldr	r2, [pc, #140]	; (8003ae4 <TIM_Base_SetConfig+0xd0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <TIM_Base_SetConfig+0x6e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a60:	d00f      	beq.n	8003a82 <TIM_Base_SetConfig+0x6e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a20      	ldr	r2, [pc, #128]	; (8003ae8 <TIM_Base_SetConfig+0xd4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00b      	beq.n	8003a82 <TIM_Base_SetConfig+0x6e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <TIM_Base_SetConfig+0xd8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <TIM_Base_SetConfig+0x6e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <TIM_Base_SetConfig+0xdc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d003      	beq.n	8003a82 <TIM_Base_SetConfig+0x6e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <TIM_Base_SetConfig+0xe0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d108      	bne.n	8003a94 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a0d      	ldr	r2, [pc, #52]	; (8003ae4 <TIM_Base_SetConfig+0xd0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_Base_SetConfig+0xb6>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <TIM_Base_SetConfig+0xd8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <TIM_Base_SetConfig+0xb6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a0c      	ldr	r2, [pc, #48]	; (8003af0 <TIM_Base_SetConfig+0xdc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_Base_SetConfig+0xb6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <TIM_Base_SetConfig+0xe0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d103      	bne.n	8003ad2 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	615a      	str	r2, [r3, #20]
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40014400 	.word	0x40014400
 8003af4:	40014800 	.word	0x40014800

08003af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003b08:	2201      	movs	r2, #1
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1a      	ldr	r2, [r3, #32]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop

08003b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e038      	b.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d108      	bne.n	8003b8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
} 
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00

08003bdc <_init>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	bf00      	nop
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr

08003be8 <_fini>:
 8003be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bea:	bf00      	nop
 8003bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bee:	bc08      	pop	{r3}
 8003bf0:	469e      	mov	lr, r3
 8003bf2:	4770      	bx	lr
