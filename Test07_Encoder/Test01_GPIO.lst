
Test01_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000260c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080027cc  080027cc  000127cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000042c  20000000  080027d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002042c  2**0
                  CONTENTS
  7 .bss          0000005c  2000042c  2000042c  0002042c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000488  20000488  0002042c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00003c1d  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000084b3  00000000  00000000  00024079  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000010de  00000000  00000000  0002c52c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000888  00000000  00000000  0002d610  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007e0  00000000  00000000  0002de98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004b56  00000000  00000000  0002e678  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002881  00000000  00000000  000331ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000006e  00000000  00000000  00035a4f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000022a0  00000000  00000000  00035ac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000042f 	.word	0x2000042f
 80001a0:	2000042c 	.word	0x2000042c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	2000042c 	.word	0x2000042c
 80001c4:	2000042c 	.word	0x2000042c
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000042c 	.word	0x2000042c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800277c 	.word	0x0800277c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000430 	.word	0x20000430
 8000220:	0800277c 	.word	0x0800277c
 8000224:	2000042c 	.word	0x2000042c
 8000228:	00000000 	.word	0x00000000

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	4e0f      	ldr	r6, [pc, #60]	; (800026c <__libc_init_array+0x40>)
 8000230:	4d0f      	ldr	r5, [pc, #60]	; (8000270 <__libc_init_array+0x44>)
 8000232:	1b76      	subs	r6, r6, r5
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	bf18      	it	ne
 8000238:	2400      	movne	r4, #0
 800023a:	d005      	beq.n	8000248 <__libc_init_array+0x1c>
 800023c:	3401      	adds	r4, #1
 800023e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000242:	4798      	blx	r3
 8000244:	42a6      	cmp	r6, r4
 8000246:	d1f9      	bne.n	800023c <__libc_init_array+0x10>
 8000248:	4e0a      	ldr	r6, [pc, #40]	; (8000274 <__libc_init_array+0x48>)
 800024a:	4d0b      	ldr	r5, [pc, #44]	; (8000278 <__libc_init_array+0x4c>)
 800024c:	1b76      	subs	r6, r6, r5
 800024e:	f002 fa95 	bl	800277c <_init>
 8000252:	10b6      	asrs	r6, r6, #2
 8000254:	bf18      	it	ne
 8000256:	2400      	movne	r4, #0
 8000258:	d006      	beq.n	8000268 <__libc_init_array+0x3c>
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	080027cc 	.word	0x080027cc
 8000270:	080027cc 	.word	0x080027cc
 8000274:	080027d4 	.word	0x080027d4
 8000278:	080027cc 	.word	0x080027cc

0800027c <register_fini>:
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <register_fini+0xc>)
 800027e:	b113      	cbz	r3, 8000286 <register_fini+0xa>
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <register_fini+0x10>)
 8000282:	f000 b805 	b.w	8000290 <atexit>
 8000286:	4770      	bx	lr
 8000288:	00000000 	.word	0x00000000
 800028c:	0800029d 	.word	0x0800029d

08000290 <atexit>:
 8000290:	2300      	movs	r3, #0
 8000292:	4601      	mov	r1, r0
 8000294:	461a      	mov	r2, r3
 8000296:	4618      	mov	r0, r3
 8000298:	f000 b814 	b.w	80002c4 <__register_exitproc>

0800029c <__libc_fini_array>:
 800029c:	b538      	push	{r3, r4, r5, lr}
 800029e:	4d07      	ldr	r5, [pc, #28]	; (80002bc <__libc_fini_array+0x20>)
 80002a0:	4c07      	ldr	r4, [pc, #28]	; (80002c0 <__libc_fini_array+0x24>)
 80002a2:	1b2c      	subs	r4, r5, r4
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	d005      	beq.n	80002b4 <__libc_fini_array+0x18>
 80002a8:	3c01      	subs	r4, #1
 80002aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80002ae:	4798      	blx	r3
 80002b0:	2c00      	cmp	r4, #0
 80002b2:	d1f9      	bne.n	80002a8 <__libc_fini_array+0xc>
 80002b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80002b8:	f002 ba66 	b.w	8002788 <_fini>
 80002bc:	080027d8 	.word	0x080027d8
 80002c0:	080027d4 	.word	0x080027d4

080002c4 <__register_exitproc>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	4c25      	ldr	r4, [pc, #148]	; (8000360 <__register_exitproc+0x9c>)
 80002ca:	6825      	ldr	r5, [r4, #0]
 80002cc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80002d0:	4606      	mov	r6, r0
 80002d2:	4688      	mov	r8, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b3c4      	cbz	r4, 800034c <__register_exitproc+0x88>
 80002da:	6860      	ldr	r0, [r4, #4]
 80002dc:	281f      	cmp	r0, #31
 80002de:	dc17      	bgt.n	8000310 <__register_exitproc+0x4c>
 80002e0:	1c43      	adds	r3, r0, #1
 80002e2:	b176      	cbz	r6, 8000302 <__register_exitproc+0x3e>
 80002e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80002e8:	2201      	movs	r2, #1
 80002ea:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80002ee:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 80002f2:	4082      	lsls	r2, r0
 80002f4:	4311      	orrs	r1, r2
 80002f6:	2e02      	cmp	r6, #2
 80002f8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80002fc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8000300:	d01e      	beq.n	8000340 <__register_exitproc+0x7c>
 8000302:	3002      	adds	r0, #2
 8000304:	6063      	str	r3, [r4, #4]
 8000306:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800030a:	2000      	movs	r0, #0
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <__register_exitproc+0xa0>)
 8000312:	b303      	cbz	r3, 8000356 <__register_exitproc+0x92>
 8000314:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000318:	f3af 8000 	nop.w
 800031c:	4604      	mov	r4, r0
 800031e:	b1d0      	cbz	r0, 8000356 <__register_exitproc+0x92>
 8000320:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000324:	2700      	movs	r7, #0
 8000326:	e880 0088 	stmia.w	r0, {r3, r7}
 800032a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800032e:	4638      	mov	r0, r7
 8000330:	2301      	movs	r3, #1
 8000332:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000336:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e1      	beq.n	8000302 <__register_exitproc+0x3e>
 800033e:	e7d1      	b.n	80002e4 <__register_exitproc+0x20>
 8000340:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000344:	430a      	orrs	r2, r1
 8000346:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800034a:	e7da      	b.n	8000302 <__register_exitproc+0x3e>
 800034c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000350:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000354:	e7c1      	b.n	80002da <__register_exitproc+0x16>
 8000356:	f04f 30ff 	mov.w	r0, #4294967295
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	bf00      	nop
 8000360:	08002798 	.word	0x08002798
 8000364:	00000000 	.word	0x00000000

08000368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800036c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800036e:	e003      	b.n	8000378 <LoopCopyDataInit>

08000370 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000372:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000374:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000376:	3104      	adds	r1, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800037c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800037e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000380:	d3f6      	bcc.n	8000370 <CopyDataInit>
	ldr	r2, =_sbss
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000384:	e002      	b.n	800038c <LoopFillZerobss>

08000386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000386:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000388:	f842 3b04 	str.w	r3, [r2], #4

0800038c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <LoopForever+0x16>)
	cmp	r2, r3
 800038e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000390:	d3f9      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000392:	f000 f953 	bl	800063c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000396:	f7ff ff49 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800039a:	f000 f80f 	bl	80003bc <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a0:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80003a4:	080027d8 	.word	0x080027d8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003ac:	2000042c 	.word	0x2000042c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80003b0:	2000042c 	.word	0x2000042c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80003b4:	20000488 	.word	0x20000488

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t i=0,j=0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	71bb      	strb	r3, [r7, #6]
 80003c6:	2300      	movs	r3, #0
 80003c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ca:	f000 f9f3 	bl	80007b4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80003ce:	f000 f835 	bl	800043c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d2:	f000 f8bb 	bl	800054c <MX_GPIO_Init>
  MX_TIM3_Init();
 80003d6:	f000 f873 	bl	80004c0 <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80003da:	213c      	movs	r1, #60	; 0x3c
 80003dc:	4814      	ldr	r0, [pc, #80]	; (8000430 <main+0x74>)
 80003de:	f002 f8b1 	bl	8002544 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
		
		i = TIM3->CNT;
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <main+0x78>)
 80003e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e6:	71bb      	strb	r3, [r7, #6]
		
		if( (i-j) > 0 ){
 80003e8:	79ba      	ldrb	r2, [r7, #6]
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	1ad3      	subs	r3, r2, r3
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dd05      	ble.n	80003fe <main+0x42>
			HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2108      	movs	r1, #8
 80003f6:	4810      	ldr	r0, [pc, #64]	; (8000438 <main+0x7c>)
 80003f8:	f000 fcc0 	bl	8000d7c <HAL_GPIO_WritePin>
 80003fc:	e004      	b.n	8000408 <main+0x4c>
		}else{
			HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2108      	movs	r1, #8
 8000402:	480d      	ldr	r0, [pc, #52]	; (8000438 <main+0x7c>)
 8000404:	f000 fcba 	bl	8000d7c <HAL_GPIO_WritePin>
		}
		if( (i-j) < 0 ){
 8000408:	79ba      	ldrb	r2, [r7, #6]
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	2b00      	cmp	r3, #0
 8000410:	da05      	bge.n	800041e <main+0x62>
			HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2108      	movs	r1, #8
 8000416:	4808      	ldr	r0, [pc, #32]	; (8000438 <main+0x7c>)
 8000418:	f000 fcb0 	bl	8000d7c <HAL_GPIO_WritePin>
 800041c:	e004      	b.n	8000428 <main+0x6c>
		}else{
			HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2108      	movs	r1, #8
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <main+0x7c>)
 8000424:	f000 fcaa 	bl	8000d7c <HAL_GPIO_WritePin>
		}
		
		j = i;
 8000428:	79bb      	ldrb	r3, [r7, #6]
 800042a:	71fb      	strb	r3, [r7, #7]
		
  /* USER CODE BEGIN 3 */

  }
 800042c:	e7d9      	b.n	80003e2 <main+0x26>
 800042e:	bf00      	nop
 8000430:	20000448 	.word	0x20000448
 8000434:	40000400 	.word	0x40000400
 8000438:	48000400 	.word	0x48000400

0800043c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b090      	sub	sp, #64	; 0x40
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000442:	2302      	movs	r3, #2
 8000444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000446:	2301      	movs	r3, #1
 8000448:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800044a:	2310      	movs	r3, #16
 800044c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800044e:	2300      	movs	r3, #0
 8000450:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 0318 	add.w	r3, r7, #24
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fca8 	bl	8000dac <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x2a>
  {
    Error_Handler();
 8000462:	f000 f89d 	bl	80005a0 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800046a:	2300      	movs	r3, #0
 800046c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f001 fd56 	bl	8001f30 <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x52>
  {
    Error_Handler();
 800048a:	f000 f889 	bl	80005a0 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800048e:	f001 ffb5 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8000492:	4602      	mov	r2, r0
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <SystemClock_Config+0x80>)
 8000496:	fba3 2302 	umull	r2, r3, r3, r2
 800049a:	099b      	lsrs	r3, r3, #6
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fac1 	bl	8000a24 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80004a2:	2004      	movs	r0, #4
 80004a4:	f000 faca 	bl	8000a3c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	f04f 30ff 	mov.w	r0, #4294967295
 80004b0:	f000 fa9c 	bl	80009ec <HAL_NVIC_SetPriority>
}
 80004b4:	bf00      	nop
 80004b6:	3740      	adds	r7, #64	; 0x40
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	10624dd3 	.word	0x10624dd3

080004c0 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 80004c6:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <MX_TIM3_Init+0x84>)
 80004c8:	4a1f      	ldr	r2, [pc, #124]	; (8000548 <MX_TIM3_Init+0x88>)
 80004ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004cc:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <MX_TIM3_Init+0x84>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d2:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <MX_TIM3_Init+0x84>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <MX_TIM3_Init+0x84>)
 80004da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_TIM3_Init+0x84>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004e6:	2303      	movs	r3, #3
 80004e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004ee:	2301      	movs	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004fa:	2300      	movs	r3, #0
 80004fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004fe:	2301      	movs	r3, #1
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	4619      	mov	r1, r3
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <MX_TIM3_Init+0x84>)
 8000512:	f001 ff7f 	bl	8002414 <HAL_TIM_Encoder_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800051c:	f000 f840 	bl	80005a0 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000520:	2300      	movs	r3, #0
 8000522:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000528:	463b      	mov	r3, r7
 800052a:	4619      	mov	r1, r3
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_TIM3_Init+0x84>)
 800052e:	f002 f8d7 	bl	80026e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000538:	f000 f832 	bl	80005a0 <Error_Handler>
  }

}
 800053c:	bf00      	nop
 800053e:	3730      	adds	r7, #48	; 0x30
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000448 	.word	0x20000448
 8000548:	40000400 	.word	0x40000400

0800054c <MX_GPIO_Init>:

/** Pinout Configuration
*/
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4a11      	ldr	r2, [pc, #68]	; (8000598 <MX_GPIO_Init+0x4c>)
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_GPIO_Init+0x4c>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_GPIO_Init+0x4c>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2108      	movs	r1, #8
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <MX_GPIO_Init+0x50>)
 8000570:	f000 fc04 	bl	8000d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000574:	2308      	movs	r3, #8
 8000576:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4619      	mov	r1, r3
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_GPIO_Init+0x50>)
 800058a:	f000 fa81 	bl	8000a90 <HAL_GPIO_Init>
}
 800058e:	bf00      	nop
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000
 800059c:	48000400 	.word	0x48000400

080005a0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2108      	movs	r1, #8
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <Error_Handler+0x28>)
 80005aa:	f000 fbe7 	bl	8000d7c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80005ae:	20c8      	movs	r0, #200	; 0xc8
 80005b0:	f000 f94c 	bl	800084c <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <Error_Handler+0x28>)
 80005ba:	f000 fbdf 	bl	8000d7c <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80005be:	2032      	movs	r0, #50	; 0x32
 80005c0:	f000 f944 	bl	800084c <HAL_Delay>
  }
 80005c4:	e7ee      	b.n	80005a4 <Error_Handler+0x4>
 80005c6:	bf00      	nop
 80005c8:	48000400 	.word	0x48000400

080005cc <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 80005e0:	e7fe      	b.n	80005e0 <HardFault_Handler+0x4>
 80005e2:	bf00      	nop

080005e4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 80005e8:	e7fe      	b.n	80005e8 <MemManage_Handler+0x4>
 80005ea:	bf00      	nop

080005ec <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 80005f0:	e7fe      	b.n	80005f0 <BusFault_Handler+0x4>
 80005f2:	bf00      	nop

080005f4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 80005f8:	e7fe      	b.n	80005f8 <UsageFault_Handler+0x4>
 80005fa:	bf00      	nop

080005fc <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000630:	f000 f8f2 	bl	8000818 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000634:	f000 fa1e 	bl	8000a74 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000640:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <SystemInit+0x84>)
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemInit+0x84>)
 8000644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800064c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000650:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <SystemInit+0x88>)
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <SystemInit+0x88>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800065c:	4919      	ldr	r1, [pc, #100]	; (80006c4 <SystemInit+0x88>)
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <SystemInit+0x88>)
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <SystemInit+0x8c>)
 8000664:	4013      	ands	r3, r2
 8000666:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000668:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <SystemInit+0x88>)
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <SystemInit+0x88>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000676:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <SystemInit+0x88>)
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <SystemInit+0x88>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000682:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000684:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <SystemInit+0x88>)
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <SystemInit+0x88>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800068e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <SystemInit+0x88>)
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <SystemInit+0x88>)
 8000694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000696:	f023 030f 	bic.w	r3, r3, #15
 800069a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800069c:	4909      	ldr	r1, [pc, #36]	; (80006c4 <SystemInit+0x88>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <SystemInit+0x88>)
 80006a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <SystemInit+0x90>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <SystemInit+0x88>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <SystemInit+0x84>)
 80006b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006b4:	609a      	str	r2, [r3, #8]
#endif
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	40021000 	.word	0x40021000
 80006c8:	f87fc00c 	.word	0xf87fc00c
 80006cc:	ff00fccc 	.word	0xff00fccc

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <HAL_MspInit+0x80>)
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <HAL_MspInit+0x80>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <HAL_MspInit+0x80>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ee:	2003      	movs	r0, #3
 80006f0:	f000 f970 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	f06f 000b 	mvn.w	r0, #11
 80006fc:	f000 f976 	bl	80009ec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	f06f 000a 	mvn.w	r0, #10
 8000708:	f000 f970 	bl	80009ec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	f06f 0009 	mvn.w	r0, #9
 8000714:	f000 f96a 	bl	80009ec <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	f06f 0004 	mvn.w	r0, #4
 8000720:	f000 f964 	bl	80009ec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	f06f 0003 	mvn.w	r0, #3
 800072c:	f000 f95e 	bl	80009ec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	f06f 0001 	mvn.w	r0, #1
 8000738:	f000 f958 	bl	80009ec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f000 f952 	bl	80009ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM3)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <HAL_TIM_Encoder_MspInit+0x54>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d11b      	bne.n	800079e <HAL_TIM_Encoder_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_TIM_Encoder_MspInit+0x58>)
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_TIM_Encoder_MspInit+0x58>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_TIM_Encoder_MspInit+0x58>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800077e:	2330      	movs	r3, #48	; 0x30
 8000780:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <HAL_TIM_Encoder_MspInit+0x5c>)
 800079a:	f000 f979 	bl	8000a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40000400 	.word	0x40000400
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000400 	.word	0x48000400

080007b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_Init+0x28>)
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_Init+0x28>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f905 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 f808 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff ff7e 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40022000 	.word	0x40022000

080007e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_InitTick+0x30>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_InitTick+0x34>)
 80007ee:	fba2 2303 	umull	r2, r3, r2, r3
 80007f2:	099b      	lsrs	r3, r3, #6
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f915 	bl	8000a24 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000802:	f000 f8f3 	bl	80009ec <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000428 	.word	0x20000428
 8000814:	10624dd3 	.word	0x10624dd3

08000818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  uwTick++;
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <HAL_IncTick+0x18>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a03      	ldr	r2, [pc, #12]	; (8000830 <HAL_IncTick+0x18>)
 8000824:	6013      	str	r3, [r2, #0]
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	20000484 	.word	0x20000484

08000834 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;  
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_GetTick+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000484 	.word	0x20000484

0800084c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff ffee 	bl	8000834 <HAL_GetTick>
 8000858:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800085a:	bf00      	nop
 800085c:	f7ff ffea 	bl	8000834 <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	1ad2      	subs	r2, r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	429a      	cmp	r2, r3
 800086a:	d3f7      	bcc.n	800085c <HAL_Delay+0x10>
  {
  }
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <NVIC_SetPriorityGrouping+0x44>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800089c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a4:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <NVIC_SetPriorityGrouping+0x44>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	60d3      	str	r3, [r2, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80008c8:	0a1b      	lsrs	r3, r3, #8
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	da0b      	bge.n	8000904 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	490d      	ldr	r1, [pc, #52]	; (8000924 <NVIC_SetPriority+0x4c>)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 030f 	and.w	r3, r3, #15
 80008f4:	3b04      	subs	r3, #4
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	0112      	lsls	r2, r2, #4
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	440b      	add	r3, r1
 8000900:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000902:	e009      	b.n	8000918 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000904:	4908      	ldr	r1, [pc, #32]	; (8000928 <NVIC_SetPriority+0x50>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	440b      	add	r3, r1
 8000914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00
 8000928:	e000e100 	.word	0xe000e100

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	2201      	movs	r2, #1
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	401a      	ands	r2, r3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000972:	2101      	movs	r1, #1
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	1e59      	subs	r1, r3, #1
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000980:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f7ff ff90 	bl	80008d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff49 	bl	8000874 <NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop

080009ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009fe:	f7ff ff5d 	bl	80008bc <NVIC_GetPriorityGrouping>
 8000a02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	68b9      	ldr	r1, [r7, #8]
 8000a08:	6978      	ldr	r0, [r7, #20]
 8000a0a:	f7ff ff8f 	bl	800092c <NVIC_EncodePriority>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff5e 	bl	80008d8 <NVIC_SetPriority>
}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ffaf 	bl	8000990 <SysTick_Config>
 8000a32:	4603      	mov	r3, r0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	d106      	bne.n	8000a58 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000a56:	e005      	b.n	8000a64 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a58:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f023 0304 	bic.w	r3, r3, #4
 8000a62:	6013      	str	r3, [r2, #0]
  }
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a78:	f000 f802 	bl	8000a80 <HAL_SYSTICK_Callback>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000aa6:	e14e      	b.n	8000d46 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	2101      	movs	r1, #1
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 8140 	beq.w	8000d40 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x40>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b12      	cmp	r3, #18
 8000ace:	d123      	bne.n	8000b18 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	08da      	lsrs	r2, r3, #3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3208      	adds	r2, #8
 8000ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	691a      	ldr	r2, [r3, #16]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	08da      	lsrs	r2, r3, #3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3208      	adds	r2, #8
 8000b12:	6939      	ldr	r1, [r7, #16]
 8000b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2203      	movs	r2, #3
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0203 	and.w	r2, r3, #3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d00b      	beq.n	8000b6c <HAL_GPIO_Init+0xdc>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b60:	2b11      	cmp	r3, #17
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b12      	cmp	r3, #18
 8000b6a:	d130      	bne.n	8000bce <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	2203      	movs	r2, #3
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	091b      	lsrs	r3, r3, #4
 8000bb8:	f003 0201 	and.w	r2, r3, #1
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	2203      	movs	r2, #3
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 809a 	beq.w	8000d40 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0c:	4a55      	ldr	r2, [pc, #340]	; (8000d64 <HAL_GPIO_Init+0x2d4>)
 8000c0e:	4b55      	ldr	r3, [pc, #340]	; (8000d64 <HAL_GPIO_Init+0x2d4>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b52      	ldr	r3, [pc, #328]	; (8000d64 <HAL_GPIO_Init+0x2d4>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c24:	4a50      	ldr	r2, [pc, #320]	; (8000d68 <HAL_GPIO_Init+0x2d8>)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	220f      	movs	r2, #15
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c4e:	d013      	beq.n	8000c78 <HAL_GPIO_Init+0x1e8>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a46      	ldr	r2, [pc, #280]	; (8000d6c <HAL_GPIO_Init+0x2dc>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d00d      	beq.n	8000c74 <HAL_GPIO_Init+0x1e4>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a45      	ldr	r2, [pc, #276]	; (8000d70 <HAL_GPIO_Init+0x2e0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d007      	beq.n	8000c70 <HAL_GPIO_Init+0x1e0>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a44      	ldr	r2, [pc, #272]	; (8000d74 <HAL_GPIO_Init+0x2e4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d101      	bne.n	8000c6c <HAL_GPIO_Init+0x1dc>
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e006      	b.n	8000c7a <HAL_GPIO_Init+0x1ea>
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	e004      	b.n	8000c7a <HAL_GPIO_Init+0x1ea>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e002      	b.n	8000c7a <HAL_GPIO_Init+0x1ea>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <HAL_GPIO_Init+0x1ea>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	f002 0203 	and.w	r2, r2, #3
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	4093      	lsls	r3, r2
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c8a:	4937      	ldr	r1, [pc, #220]	; (8000d68 <HAL_GPIO_Init+0x2d8>)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	3302      	adds	r3, #2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cbc:	4a2e      	ldr	r2, [pc, #184]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ce6:	4a24      	ldr	r2, [pc, #144]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	3301      	adds	r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f47f aea9 	bne.w	8000aa8 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 8000d56:	bf00      	nop
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	48000400 	.word	0x48000400
 8000d70:	48000800 	.word	0x48000800
 8000d74:	48000c00 	.word	0x48000c00
 8000d78:	40010400 	.word	0x40010400

08000d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d8c:	787b      	ldrb	r3, [r7, #1]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d98:	e002      	b.n	8000da0 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d9a:	887a      	ldrh	r2, [r7, #2]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 81e8 	beq.w	800119e <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dce:	4bb8      	ldr	r3, [pc, #736]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d00c      	beq.n	8000df4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dda:	4bb5      	ldr	r3, [pc, #724]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	f040 8082 	bne.w	8000eec <HAL_RCC_OscConfig+0x140>
 8000de8:	4bb1      	ldr	r3, [pc, #708]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d07b      	beq.n	8000eec <HAL_RCC_OscConfig+0x140>
 8000df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e00:	fa93 f2a3 	rbit	r2, r3
 8000e04:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e08:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e0a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e0e:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e10:	fab3 f383 	clz	r3, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d102      	bne.n	8000e2c <HAL_RCC_OscConfig+0x80>
 8000e26:	4ba2      	ldr	r3, [pc, #648]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	e039      	b.n	8000ea0 <HAL_RCC_OscConfig+0xf4>
 8000e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e30:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e34:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e38:	fa93 f2a3 	rbit	r2, r3
 8000e3c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e40:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e42:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	fab3 f383 	clz	r3, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f043 0320 	orr.w	r3, r3, #32
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d102      	bne.n	8000e64 <HAL_RCC_OscConfig+0xb8>
 8000e5e:	4b94      	ldr	r3, [pc, #592]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	e01d      	b.n	8000ea0 <HAL_RCC_OscConfig+0xf4>
 8000e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e68:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e70:	fa93 f2a3 	rbit	r2, r3
 8000e74:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e78:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	fab3 f383 	clz	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f043 0320 	orr.w	r3, r3, #32
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d102      	bne.n	8000e9c <HAL_RCC_OscConfig+0xf0>
 8000e96:	4b86      	ldr	r3, [pc, #536]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	e001      	b.n	8000ea0 <HAL_RCC_OscConfig+0xf4>
 8000e9c:	4b84      	ldr	r3, [pc, #528]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ea4:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8000eac:	fa92 f1a2 	rbit	r1, r2
 8000eb0:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8000eb4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000eb6:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	fab2 f282 	clz	r2, r2
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	f042 0220 	orr.w	r2, r2, #32
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	f002 021f 	and.w	r2, r2, #31
 8000ece:	40d3      	lsrs	r3, r2
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 8161 	beq.w	800119c <HAL_RCC_OscConfig+0x3f0>
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f040 815b 	bne.w	800119c <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f001 b81a 	b.w	8001f20 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef6:	d106      	bne.n	8000f06 <HAL_RCC_OscConfig+0x15a>
 8000ef8:	4a6d      	ldr	r2, [pc, #436]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000efa:	4b6d      	ldr	r3, [pc, #436]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	e030      	b.n	8000f68 <HAL_RCC_OscConfig+0x1bc>
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10c      	bne.n	8000f2a <HAL_RCC_OscConfig+0x17e>
 8000f10:	4a67      	ldr	r2, [pc, #412]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f12:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4a64      	ldr	r2, [pc, #400]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f1e:	4b64      	ldr	r3, [pc, #400]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	e01e      	b.n	8000f68 <HAL_RCC_OscConfig+0x1bc>
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f34:	d10c      	bne.n	8000f50 <HAL_RCC_OscConfig+0x1a4>
 8000f36:	4a5e      	ldr	r2, [pc, #376]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f38:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4a5b      	ldr	r2, [pc, #364]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f44:	4b5a      	ldr	r3, [pc, #360]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e00b      	b.n	8000f68 <HAL_RCC_OscConfig+0x1bc>
 8000f50:	4a57      	ldr	r2, [pc, #348]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f52:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4a54      	ldr	r2, [pc, #336]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f5e:	4b54      	ldr	r3, [pc, #336]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f66:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f68:	4951      	ldr	r1, [pc, #324]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f6a:	4b51      	ldr	r3, [pc, #324]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6e:	f023 020f 	bic.w	r2, r3, #15
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8083 	beq.w	800108e <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fc54 	bl	8000834 <HAL_GetTick>
 8000f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f90:	e00a      	b.n	8000fa8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f92:	f7ff fc4f 	bl	8000834 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d902      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f000 bfbc 	b.w	8001f20 <HAL_RCC_OscConfig+0x1174>
 8000fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fb4:	fa93 f2a3 	rbit	r2, r3
 8000fb8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fbc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fbe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fc2:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc4:	fab3 f383 	clz	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d102      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x234>
 8000fda:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	e039      	b.n	8001054 <HAL_RCC_OscConfig+0x2a8>
 8000fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000fec:	fa93 f2a3 	rbit	r2, r3
 8000ff0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ff4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ff6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	fab3 f383 	clz	r3, r3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	b2db      	uxtb	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d102      	bne.n	8001018 <HAL_RCC_OscConfig+0x26c>
 8001012:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	e01d      	b.n	8001054 <HAL_RCC_OscConfig+0x2a8>
 8001018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001024:	fa93 f2a3 	rbit	r2, r3
 8001028:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800102c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800102e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	fab3 f383 	clz	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f043 0320 	orr.w	r3, r3, #32
 800103e:	b2db      	uxtb	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b04      	cmp	r3, #4
 8001048:	d102      	bne.n	8001050 <HAL_RCC_OscConfig+0x2a4>
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	e001      	b.n	8001054 <HAL_RCC_OscConfig+0x2a8>
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_RCC_OscConfig+0x304>)
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001058:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001060:	fa92 f1a2 	rbit	r1, r2
 8001064:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001068:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800106a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	fab2 f282 	clz	r2, r2
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	f042 0220 	orr.w	r2, r2, #32
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	f002 021f 	and.w	r2, r2, #31
 8001082:	40d3      	lsrs	r3, r2
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d082      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1e6>
 800108c:	e087      	b.n	800119e <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fbd1 	bl	8000834 <HAL_GetTick>
 8001092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	e00d      	b.n	80010b4 <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fbcc 	bl	8000834 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	; 0x64
 80010a6:	d905      	bls.n	80010b4 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	f000 bf39 	b.w	8001f20 <HAL_RCC_OscConfig+0x1174>
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80010c0:	fa93 f2a3 	rbit	r2, r3
 80010c4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80010c8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80010ce:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d0:	fab3 f383 	clz	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f043 0320 	orr.w	r3, r3, #32
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d102      	bne.n	80010ec <HAL_RCC_OscConfig+0x340>
 80010e6:	4bb6      	ldr	r3, [pc, #728]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	e039      	b.n	8001160 <HAL_RCC_OscConfig+0x3b4>
 80010ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010f8:	fa93 f2a3 	rbit	r2, r3
 80010fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001100:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001102:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f043 0320 	orr.w	r3, r3, #32
 8001112:	b2db      	uxtb	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d102      	bne.n	8001124 <HAL_RCC_OscConfig+0x378>
 800111e:	4ba8      	ldr	r3, [pc, #672]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	e01d      	b.n	8001160 <HAL_RCC_OscConfig+0x3b4>
 8001124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001128:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001130:	fa93 f2a3 	rbit	r2, r3
 8001134:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001138:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800113a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	fab3 f383 	clz	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f043 0320 	orr.w	r3, r3, #32
 800114a:	b2db      	uxtb	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b04      	cmp	r3, #4
 8001154:	d102      	bne.n	800115c <HAL_RCC_OscConfig+0x3b0>
 8001156:	4b9a      	ldr	r3, [pc, #616]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	e001      	b.n	8001160 <HAL_RCC_OscConfig+0x3b4>
 800115c:	4b98      	ldr	r3, [pc, #608]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001164:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800116c:	fa92 f1a2 	rbit	r1, r2
 8001170:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001174:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001176:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	fab2 f282 	clz	r2, r2
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	f042 0220 	orr.w	r2, r2, #32
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	f002 021f 	and.w	r2, r2, #31
 800118e:	40d3      	lsrs	r3, r2
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	f47f af7f 	bne.w	8001098 <HAL_RCC_OscConfig+0x2ec>
 800119a:	e000      	b.n	800119e <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 81f4 	beq.w	8001596 <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011ae:	4b84      	ldr	r3, [pc, #528]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00d      	beq.n	80011d6 <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011ba:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	f040 8099 	bne.w	80012fa <HAL_RCC_OscConfig+0x54e>
 80011c8:	4b7d      	ldr	r3, [pc, #500]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f040 8092 	bne.w	80012fa <HAL_RCC_OscConfig+0x54e>
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80011e0:	fa93 f2a3 	rbit	r2, r3
 80011e4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011e8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011ee:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f043 0320 	orr.w	r3, r3, #32
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b01      	cmp	r3, #1
 8001204:	d102      	bne.n	800120c <HAL_RCC_OscConfig+0x460>
 8001206:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	e037      	b.n	800127c <HAL_RCC_OscConfig+0x4d0>
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001216:	fa93 f2a3 	rbit	r2, r3
 800121a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800121e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001220:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	b2db      	uxtb	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	095b      	lsrs	r3, r3, #5
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d102      	bne.n	8001242 <HAL_RCC_OscConfig+0x496>
 800123c:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	e01c      	b.n	800127c <HAL_RCC_OscConfig+0x4d0>
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800124c:	fa93 f2a3 	rbit	r2, r3
 8001250:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001254:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001256:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	fab3 f383 	clz	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f043 0320 	orr.w	r3, r3, #32
 8001266:	b2db      	uxtb	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b04      	cmp	r3, #4
 8001270:	d102      	bne.n	8001278 <HAL_RCC_OscConfig+0x4cc>
 8001272:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	e001      	b.n	800127c <HAL_RCC_OscConfig+0x4d0>
 8001278:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	2202      	movs	r2, #2
 800127e:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8001286:	fa92 f1a2 	rbit	r1, r2
 800128a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800128e:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001290:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	fab2 f282 	clz	r2, r2
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	f042 0220 	orr.w	r2, r2, #32
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	f002 021f 	and.w	r2, r2, #31
 80012a8:	40d3      	lsrs	r3, r2
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <HAL_RCC_OscConfig+0x516>
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d002      	beq.n	80012c2 <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	f000 be2f 	b.w	8001f20 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4c3f      	ldr	r4, [pc, #252]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 80012c4:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6959      	ldr	r1, [r3, #20]
 80012d2:	23f8      	movs	r3, #248	; 0xf8
 80012d4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80012dc:	fa93 f0a3 	rbit	r0, r3
 80012e0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80012e4:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	fab3 f383 	clz	r3, r3
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f8:	e14d      	b.n	8001596 <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80b3 	beq.w	800146c <HAL_RCC_OscConfig+0x6c0>
 8001306:	2301      	movs	r3, #1
 8001308:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001310:	fa93 f2a3 	rbit	r2, r3
 8001314:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001318:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800131a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800131e:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001320:	fab3 f383 	clz	r3, r3
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800132a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800132e:	461a      	mov	r2, r3
 8001330:	2301      	movs	r3, #1
 8001332:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fa7e 	bl	8000834 <HAL_GetTick>
 8001338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	e00a      	b.n	8001354 <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fa79 	bl	8000834 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d902      	bls.n	8001354 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	f000 bde6 	b.w	8001f20 <HAL_RCC_OscConfig+0x1174>
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800135e:	fa93 f2a3 	rbit	r2, r3
 8001362:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001366:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001368:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800136c:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	b2db      	uxtb	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	095b      	lsrs	r3, r3, #5
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d102      	bne.n	800138a <HAL_RCC_OscConfig+0x5de>
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	e039      	b.n	80013fe <HAL_RCC_OscConfig+0x652>
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001394:	fa93 f2a3 	rbit	r2, r3
 8001398:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800139c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800139e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f043 0320 	orr.w	r3, r3, #32
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d104      	bne.n	80013c4 <HAL_RCC_OscConfig+0x618>
 80013ba:	4b01      	ldr	r3, [pc, #4]	; (80013c0 <HAL_RCC_OscConfig+0x614>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	e01e      	b.n	80013fe <HAL_RCC_OscConfig+0x652>
 80013c0:	40021000 	.word	0x40021000
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80013ce:	fa93 f2a3 	rbit	r2, r3
 80013d2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013d6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	fab3 f383 	clz	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f043 0320 	orr.w	r3, r3, #32
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	095b      	lsrs	r3, r3, #5
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d102      	bne.n	80013fa <HAL_RCC_OscConfig+0x64e>
 80013f4:	4bb9      	ldr	r3, [pc, #740]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	e001      	b.n	80013fe <HAL_RCC_OscConfig+0x652>
 80013fa:	4bb8      	ldr	r3, [pc, #736]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	2202      	movs	r2, #2
 8001400:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001404:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001408:	fa92 f1a2 	rbit	r1, r2
 800140c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001410:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001412:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	fab2 f282 	clz	r2, r2
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	f042 0220 	orr.w	r2, r2, #32
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	f002 021f 	and.w	r2, r2, #31
 800142a:	40d3      	lsrs	r3, r2
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d084      	beq.n	800133e <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4ca9      	ldr	r4, [pc, #676]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 8001436:	4ba9      	ldr	r3, [pc, #676]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6959      	ldr	r1, [r3, #20]
 8001444:	23f8      	movs	r3, #248	; 0xf8
 8001446:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800144e:	fa93 f0a3 	rbit	r0, r3
 8001452:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001456:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001458:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	e094      	b.n	8001596 <HAL_RCC_OscConfig+0x7ea>
 800146c:	2301      	movs	r3, #1
 800146e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001476:	fa93 f2a3 	rbit	r2, r3
 800147a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800147e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001480:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001484:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001486:	fab3 f383 	clz	r3, r3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001490:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001494:	461a      	mov	r2, r3
 8001496:	2300      	movs	r3, #0
 8001498:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff f9cb 	bl	8000834 <HAL_GetTick>
 800149e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a4:	f7ff f9c6 	bl	8000834 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d902      	bls.n	80014ba <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	f000 bd33 	b.w	8001f20 <HAL_RCC_OscConfig+0x1174>
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80014c4:	fa93 f2a3 	rbit	r2, r3
 80014c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014cc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014d2:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d4:	fab3 f383 	clz	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f043 0320 	orr.w	r3, r3, #32
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d102      	bne.n	80014f0 <HAL_RCC_OscConfig+0x744>
 80014ea:	4b7c      	ldr	r3, [pc, #496]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	e037      	b.n	8001560 <HAL_RCC_OscConfig+0x7b4>
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80014fa:	fa93 f2a3 	rbit	r2, r3
 80014fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001502:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001504:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fab3 f383 	clz	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	b2db      	uxtb	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	095b      	lsrs	r3, r3, #5
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d102      	bne.n	8001526 <HAL_RCC_OscConfig+0x77a>
 8001520:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	e01c      	b.n	8001560 <HAL_RCC_OscConfig+0x7b4>
 8001526:	2302      	movs	r3, #2
 8001528:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001530:	fa93 f2a3 	rbit	r2, r3
 8001534:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001538:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800153a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f043 0320 	orr.w	r3, r3, #32
 800154a:	b2db      	uxtb	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b04      	cmp	r3, #4
 8001554:	d102      	bne.n	800155c <HAL_RCC_OscConfig+0x7b0>
 8001556:	4b61      	ldr	r3, [pc, #388]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	e001      	b.n	8001560 <HAL_RCC_OscConfig+0x7b4>
 800155c:	4b5f      	ldr	r3, [pc, #380]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	2202      	movs	r2, #2
 8001562:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800156a:	fa92 f1a2 	rbit	r1, r2
 800156e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001572:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001574:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	fab2 f282 	clz	r2, r2
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	f042 0220 	orr.w	r2, r2, #32
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	f002 021f 	and.w	r2, r2, #31
 800158c:	40d3      	lsrs	r3, r2
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d186      	bne.n	80014a4 <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8132 	beq.w	800180a <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8099 	beq.w	80016e4 <HAL_RCC_OscConfig+0x938>
 80015b2:	2301      	movs	r3, #1
 80015b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015c4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015ca:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b42      	ldr	r3, [pc, #264]	; (80016e0 <HAL_RCC_OscConfig+0x934>)
 80015d6:	4413      	add	r3, r2
 80015d8:	461a      	mov	r2, r3
 80015da:	2301      	movs	r3, #1
 80015dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff f929 	bl	8000834 <HAL_GetTick>
 80015e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff f924 	bl	8000834 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d902      	bls.n	80015fe <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	f000 bc91 	b.w	8001f20 <HAL_RCC_OscConfig+0x1174>
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001608:	fa93 f2a3 	rbit	r2, r3
 800160c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001610:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001612:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001616:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001622:	b2db      	uxtb	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d102      	bne.n	8001634 <HAL_RCC_OscConfig+0x888>
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	e037      	b.n	80016a4 <HAL_RCC_OscConfig+0x8f8>
 8001634:	2302      	movs	r3, #2
 8001636:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800163e:	fa93 f2a3 	rbit	r2, r3
 8001642:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001646:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001648:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	fab3 f383 	clz	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001658:	b2db      	uxtb	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	095b      	lsrs	r3, r3, #5
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d102      	bne.n	800166a <HAL_RCC_OscConfig+0x8be>
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	e01c      	b.n	80016a4 <HAL_RCC_OscConfig+0x8f8>
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001674:	fa93 f2a3 	rbit	r2, r3
 8001678:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800167c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800167e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800168e:	b2db      	uxtb	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b04      	cmp	r3, #4
 8001698:	d102      	bne.n	80016a0 <HAL_RCC_OscConfig+0x8f4>
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	e001      	b.n	80016a4 <HAL_RCC_OscConfig+0x8f8>
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_RCC_OscConfig+0x930>)
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	2202      	movs	r2, #2
 80016a6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016ae:	fa92 f1a2 	rbit	r1, r2
 80016b2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80016b6:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016b8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	fab2 f282 	clz	r2, r2
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	f002 021f 	and.w	r2, r2, #31
 80016d0:	40d3      	lsrs	r3, r2
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d086      	beq.n	80015e8 <HAL_RCC_OscConfig+0x83c>
 80016da:	e096      	b.n	800180a <HAL_RCC_OscConfig+0xa5e>
 80016dc:	40021000 	.word	0x40021000
 80016e0:	42420480 	.word	0x42420480
 80016e4:	2301      	movs	r3, #1
 80016e6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80016ee:	fa93 f2a3 	rbit	r2, r3
 80016f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016f6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016fc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	461a      	mov	r2, r3
 8001706:	4bb5      	ldr	r3, [pc, #724]	; (80019dc <HAL_RCC_OscConfig+0xc30>)
 8001708:	4413      	add	r3, r2
 800170a:	461a      	mov	r2, r3
 800170c:	2300      	movs	r3, #0
 800170e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001710:	f7ff f890 	bl	8000834 <HAL_GetTick>
 8001714:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	e009      	b.n	800172e <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171a:	f7ff f88b 	bl	8000834 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e3f8      	b.n	8001f20 <HAL_RCC_OscConfig+0x1174>
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001738:	fa93 f2a3 	rbit	r2, r3
 800173c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001740:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001742:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001746:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	fab3 f383 	clz	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001752:	b2db      	uxtb	r3, r3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d102      	bne.n	8001764 <HAL_RCC_OscConfig+0x9b8>
 800175e:	4ba0      	ldr	r3, [pc, #640]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	e037      	b.n	80017d4 <HAL_RCC_OscConfig+0xa28>
 8001764:	2302      	movs	r3, #2
 8001766:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001776:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001778:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001788:	b2db      	uxtb	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	095b      	lsrs	r3, r3, #5
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d102      	bne.n	800179a <HAL_RCC_OscConfig+0x9ee>
 8001794:	4b92      	ldr	r3, [pc, #584]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	e01c      	b.n	80017d4 <HAL_RCC_OscConfig+0xa28>
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80017a4:	fa93 f2a3 	rbit	r2, r3
 80017a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017ac:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d102      	bne.n	80017d0 <HAL_RCC_OscConfig+0xa24>
 80017ca:	4b85      	ldr	r3, [pc, #532]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	e001      	b.n	80017d4 <HAL_RCC_OscConfig+0xa28>
 80017d0:	4b83      	ldr	r3, [pc, #524]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	2202      	movs	r2, #2
 80017d6:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80017de:	fa92 f1a2 	rbit	r1, r2
 80017e2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80017e6:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017e8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	fab2 f282 	clz	r2, r2
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	40d3      	lsrs	r3, r2
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d187      	bne.n	800171a <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 818f 	beq.w	8001b38 <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001820:	4b6f      	ldr	r3, [pc, #444]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d112      	bne.n	8001852 <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	4a6c      	ldr	r2, [pc, #432]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 800182e:	4b6c      	ldr	r3, [pc, #432]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001836:	61d3      	str	r3, [r2, #28]
 8001838:	4b69      	ldr	r3, [pc, #420]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800184c:	2301      	movs	r3, #1
 800184e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001852:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <HAL_RCC_OscConfig+0xc38>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d11a      	bne.n	8001894 <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185e:	4a61      	ldr	r2, [pc, #388]	; (80019e4 <HAL_RCC_OscConfig+0xc38>)
 8001860:	4b60      	ldr	r3, [pc, #384]	; (80019e4 <HAL_RCC_OscConfig+0xc38>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7fe ffe3 	bl	8000834 <HAL_GetTick>
 800186e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	e009      	b.n	8001888 <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001874:	f7fe ffde 	bl	8000834 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e34b      	b.n	8001f20 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <HAL_RCC_OscConfig+0xc38>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ef      	beq.n	8001874 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0xb00>
 800189e:	4a50      	ldr	r2, [pc, #320]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018a0:	4b4f      	ldr	r3, [pc, #316]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6213      	str	r3, [r2, #32]
 80018aa:	e02f      	b.n	800190c <HAL_RCC_OscConfig+0xb60>
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0xb24>
 80018b6:	4a4a      	ldr	r2, [pc, #296]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018b8:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	4a47      	ldr	r2, [pc, #284]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018c4:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	e01d      	b.n	800190c <HAL_RCC_OscConfig+0xb60>
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0xb48>
 80018da:	4a41      	ldr	r2, [pc, #260]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018dc:	4b40      	ldr	r3, [pc, #256]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6213      	str	r3, [r2, #32]
 80018e6:	4a3e      	ldr	r2, [pc, #248]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018e8:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	e00b      	b.n	800190c <HAL_RCC_OscConfig+0xb60>
 80018f4:	4a3a      	ldr	r2, [pc, #232]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	6213      	str	r3, [r2, #32]
 8001900:	4a37      	ldr	r2, [pc, #220]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	f023 0304 	bic.w	r3, r3, #4
 800190a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8087 	beq.w	8001a26 <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7fe ff8c 	bl	8000834 <HAL_GetTick>
 800191c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001920:	e00b      	b.n	800193a <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7fe ff87 	bl	8000834 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e2f2      	b.n	8001f20 <HAL_RCC_OscConfig+0x1174>
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800194c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800194e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001952:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800195e:	b2db      	uxtb	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d102      	bne.n	8001970 <HAL_RCC_OscConfig+0xbc4>
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	e03d      	b.n	80019ec <HAL_RCC_OscConfig+0xc40>
 8001970:	2302      	movs	r3, #2
 8001972:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800197a:	fa93 f2a3 	rbit	r2, r3
 800197e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001982:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001984:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001994:	b2db      	uxtb	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	095b      	lsrs	r3, r3, #5
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d102      	bne.n	80019a6 <HAL_RCC_OscConfig+0xbfa>
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	e022      	b.n	80019ec <HAL_RCC_OscConfig+0xc40>
 80019a6:	2302      	movs	r3, #2
 80019a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019b8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d108      	bne.n	80019e8 <HAL_RCC_OscConfig+0xc3c>
 80019d6:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <HAL_RCC_OscConfig+0xc34>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	e007      	b.n	80019ec <HAL_RCC_OscConfig+0xc40>
 80019dc:	42420480 	.word	0x42420480
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40007000 	.word	0x40007000
 80019e8:	4bbf      	ldr	r3, [pc, #764]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	2202      	movs	r2, #2
 80019ee:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80019f6:	fa92 f1a2 	rbit	r1, r2
 80019fa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80019fe:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a00:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	fab2 f282 	clz	r2, r2
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	f002 021f 	and.w	r2, r2, #31
 8001a18:	40d3      	lsrs	r3, r2
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f43f af7f 	beq.w	8001922 <HAL_RCC_OscConfig+0xb76>
 8001a24:	e07e      	b.n	8001b24 <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7fe ff05 	bl	8000834 <HAL_GetTick>
 8001a2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7fe ff00 	bl	8000834 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e26b      	b.n	8001f20 <HAL_RCC_OscConfig+0x1174>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a52:	fa93 f2a3 	rbit	r2, r3
 8001a56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a5a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a60:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d102      	bne.n	8001a7e <HAL_RCC_OscConfig+0xcd2>
 8001a78:	4b9b      	ldr	r3, [pc, #620]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	e037      	b.n	8001aee <HAL_RCC_OscConfig+0xd42>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a88:	fa93 f2a3 	rbit	r2, r3
 8001a8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a90:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d102      	bne.n	8001ab4 <HAL_RCC_OscConfig+0xd08>
 8001aae:	4b8e      	ldr	r3, [pc, #568]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	e01c      	b.n	8001aee <HAL_RCC_OscConfig+0xd42>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001abe:	fa93 f2a3 	rbit	r2, r3
 8001ac2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ac6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ac8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d102      	bne.n	8001aea <HAL_RCC_OscConfig+0xd3e>
 8001ae4:	4b80      	ldr	r3, [pc, #512]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	e001      	b.n	8001aee <HAL_RCC_OscConfig+0xd42>
 8001aea:	4b7f      	ldr	r3, [pc, #508]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	2202      	movs	r2, #2
 8001af0:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001af8:	fa92 f1a2 	rbit	r1, r2
 8001afc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001b00:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b02:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	fab2 f282 	clz	r2, r2
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	f002 021f 	and.w	r2, r2, #31
 8001b1a:	40d3      	lsrs	r3, r2
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d185      	bne.n	8001a30 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4a6e      	ldr	r2, [pc, #440]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001b2e:	4b6e      	ldr	r3, [pc, #440]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 81ed 	beq.w	8001f1e <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b44:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	f000 81e4 	beq.w	8001f1a <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	f040 8144 	bne.w	8001de6 <HAL_RCC_OscConfig+0x103a>
 8001b5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b62:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001b6a:	fa93 f2a3 	rbit	r2, r3
 8001b6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b72:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001b84:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7fe fe51 	bl	8000834 <HAL_GetTick>
 8001b92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	e009      	b.n	8001bac <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b98:	f7fe fe4c 	bl	8000834 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e1b9      	b.n	8001f20 <HAL_RCC_OscConfig+0x1174>
 8001bac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bc0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bc2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bc6:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f043 0320 	orr.w	r3, r3, #32
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d102      	bne.n	8001be4 <HAL_RCC_OscConfig+0xe38>
 8001bde:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	e039      	b.n	8001c58 <HAL_RCC_OscConfig+0xeac>
 8001be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001bf0:	fa93 f2a3 	rbit	r2, r3
 8001bf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bf8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f043 0320 	orr.w	r3, r3, #32
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_OscConfig+0xe70>
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	e01d      	b.n	8001c58 <HAL_RCC_OscConfig+0xeac>
 8001c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c20:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c30:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f043 0320 	orr.w	r3, r3, #32
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d102      	bne.n	8001c54 <HAL_RCC_OscConfig+0xea8>
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	e001      	b.n	8001c58 <HAL_RCC_OscConfig+0xeac>
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5c:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001c64:	fa92 f1a2 	rbit	r1, r2
 8001c68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c6c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	fab2 f282 	clz	r2, r2
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	f042 0220 	orr.w	r2, r2, #32
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f002 021f 	and.w	r2, r2, #31
 8001c86:	40d3      	lsrs	r3, r2
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d183      	bne.n	8001b98 <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c90:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0xf3c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	6043      	str	r3, [r0, #4]
 8001cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cc0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cc6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001cd2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2301      	movs	r3, #1
 8001cda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe fdaa 	bl	8000834 <HAL_GetTick>
 8001ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce4:	e00c      	b.n	8001d00 <HAL_RCC_OscConfig+0xf54>
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe fda2 	bl	8000834 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e10f      	b.n	8001f20 <HAL_RCC_OscConfig+0x1174>
 8001d00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d14:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d1a:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	f043 0320 	orr.w	r3, r3, #32
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0xf8c>
 8001d32:	4b7e      	ldr	r3, [pc, #504]	; (8001f2c <HAL_RCC_OscConfig+0x1180>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	e039      	b.n	8001dac <HAL_RCC_OscConfig+0x1000>
 8001d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f043 0320 	orr.w	r3, r3, #32
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d102      	bne.n	8001d70 <HAL_RCC_OscConfig+0xfc4>
 8001d6a:	4b70      	ldr	r3, [pc, #448]	; (8001f2c <HAL_RCC_OscConfig+0x1180>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	e01d      	b.n	8001dac <HAL_RCC_OscConfig+0x1000>
 8001d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d84:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f043 0320 	orr.w	r3, r3, #32
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_OscConfig+0xffc>
 8001da2:	4b62      	ldr	r3, [pc, #392]	; (8001f2c <HAL_RCC_OscConfig+0x1180>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	e001      	b.n	8001dac <HAL_RCC_OscConfig+0x1000>
 8001da8:	4b60      	ldr	r3, [pc, #384]	; (8001f2c <HAL_RCC_OscConfig+0x1180>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001db8:	fa92 f1a2 	rbit	r1, r2
 8001dbc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001dc0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001dc2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f042 0220 	orr.w	r2, r2, #32
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f002 021f 	and.w	r2, r2, #31
 8001dda:	40d3      	lsrs	r3, r2
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d083      	beq.n	8001cec <HAL_RCC_OscConfig+0xf40>
 8001de4:	e09b      	b.n	8001f1e <HAL_RCC_OscConfig+0x1172>
 8001de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f107 0320 	add.w	r3, r7, #32
 8001dfa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001dfc:	f107 0320 	add.w	r3, r7, #32
 8001e00:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001e0c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001e10:	461a      	mov	r2, r3
 8001e12:	2300      	movs	r3, #0
 8001e14:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7fe fd0d 	bl	8000834 <HAL_GetTick>
 8001e1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e009      	b.n	8001e34 <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe fd08 	bl	8000834 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e075      	b.n	8001f20 <HAL_RCC_OscConfig+0x1174>
 8001e34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e40:	fa93 f2a3 	rbit	r2, r3
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f043 0320 	orr.w	r3, r3, #32
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <HAL_RCC_OscConfig+0x10c0>
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_RCC_OscConfig+0x1180>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	e039      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1134>
 8001e6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e78:	fa93 f2a3 	rbit	r2, r3
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e82:	f107 0318 	add.w	r3, r7, #24
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f043 0320 	orr.w	r3, r3, #32
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x10f8>
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_RCC_OscConfig+0x1180>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	e01d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1134>
 8001ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001eb0:	fa93 f2a3 	rbit	r2, r3
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0320 	orr.w	r3, r3, #32
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d102      	bne.n	8001edc <HAL_RCC_OscConfig+0x1130>
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_RCC_OscConfig+0x1180>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	e001      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1134>
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <HAL_RCC_OscConfig+0x1180>)
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee4:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001eec:	fa92 f1a2 	rbit	r1, r2
 8001ef0:	f107 0210 	add.w	r2, r7, #16
 8001ef4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ef6:	f107 0210 	add.w	r2, r7, #16
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	fab2 f282 	clz	r2, r2
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	f042 0220 	orr.w	r2, r2, #32
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	f002 021f 	and.w	r2, r2, #31
 8001f0e:	40d3      	lsrs	r3, r2
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d183      	bne.n	8001e20 <HAL_RCC_OscConfig+0x1074>
 8001f18:	e001      	b.n	8001f1e <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000

08001f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b09e      	sub	sp, #120	; 0x78
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f3e:	4ba3      	ldr	r3, [pc, #652]	; (80021cc <HAL_RCC_ClockConfig+0x29c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0207 	and.w	r2, r3, #7
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d210      	bcs.n	8001f6e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4c:	499f      	ldr	r1, [pc, #636]	; (80021cc <HAL_RCC_ClockConfig+0x29c>)
 8001f4e:	4b9f      	ldr	r3, [pc, #636]	; (80021cc <HAL_RCC_ClockConfig+0x29c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 0207 	bic.w	r2, r3, #7
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f5c:	4b9b      	ldr	r3, [pc, #620]	; (80021cc <HAL_RCC_ClockConfig+0x29c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0207 	and.w	r2, r3, #7
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1d0      	b.n	8002310 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7a:	4995      	ldr	r1, [pc, #596]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 8001f7c:	4b94      	ldr	r3, [pc, #592]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8168 	beq.w	800226a <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d15c      	bne.n	800205c <HAL_RCC_ClockConfig+0x12c>
 8001fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa6:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f043 0320 	orr.w	r3, r3, #32
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_ClockConfig+0x9e>
 8001fc8:	4b81      	ldr	r3, [pc, #516]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	e02d      	b.n	800202a <HAL_RCC_ClockConfig+0xfa>
 8001fce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd2:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xca>
 8001ff4:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	e017      	b.n	800202a <HAL_RCC_ClockConfig+0xfa>
 8001ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f043 0320 	orr.w	r3, r3, #32
 8002014:	b2db      	uxtb	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b04      	cmp	r3, #4
 800201e:	d102      	bne.n	8002026 <HAL_RCC_ClockConfig+0xf6>
 8002020:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	e001      	b.n	800202a <HAL_RCC_ClockConfig+0xfa>
 8002026:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800202e:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002032:	fa92 f2a2 	rbit	r2, r2
 8002036:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800203a:	fab2 f282 	clz	r2, r2
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	f042 0220 	orr.w	r2, r2, #32
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f002 021f 	and.w	r2, r2, #31
 800204c:	40d3      	lsrs	r3, r2
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 80be 	bne.w	80021d4 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e159      	b.n	8002310 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d15b      	bne.n	800211c <HAL_RCC_ClockConfig+0x1ec>
 8002064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002068:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f043 0320 	orr.w	r3, r3, #32
 800207e:	b2db      	uxtb	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d102      	bne.n	8002090 <HAL_RCC_ClockConfig+0x160>
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	e02d      	b.n	80020ec <HAL_RCC_ClockConfig+0x1bc>
 8002090:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002094:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f043 0320 	orr.w	r3, r3, #32
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d102      	bne.n	80020bc <HAL_RCC_ClockConfig+0x18c>
 80020b6:	4b46      	ldr	r3, [pc, #280]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	e017      	b.n	80020ec <HAL_RCC_ClockConfig+0x1bc>
 80020bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c0:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f043 0320 	orr.w	r3, r3, #32
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x1b8>
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	e001      	b.n	80020ec <HAL_RCC_ClockConfig+0x1bc>
 80020e8:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f0:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020f4:	fa92 f2a2 	rbit	r2, r2
 80020f8:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020fa:	6a3a      	ldr	r2, [r7, #32]
 80020fc:	fab2 f282 	clz	r2, r2
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	f042 0220 	orr.w	r2, r2, #32
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	40d3      	lsrs	r3, r2
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d15d      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0f9      	b.n	8002310 <HAL_RCC_ClockConfig+0x3e0>
 800211c:	2302      	movs	r3, #2
 800211e:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002128:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	b2db      	uxtb	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d102      	bne.n	8002146 <HAL_RCC_ClockConfig+0x216>
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	e02b      	b.n	800219e <HAL_RCC_ClockConfig+0x26e>
 8002146:	2302      	movs	r3, #2
 8002148:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f043 0320 	orr.w	r3, r3, #32
 800215e:	b2db      	uxtb	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d102      	bne.n	8002170 <HAL_RCC_ClockConfig+0x240>
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	e016      	b.n	800219e <HAL_RCC_ClockConfig+0x26e>
 8002170:	2302      	movs	r3, #2
 8002172:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f043 0320 	orr.w	r3, r3, #32
 8002188:	b2db      	uxtb	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b04      	cmp	r3, #4
 8002192:	d102      	bne.n	800219a <HAL_RCC_ClockConfig+0x26a>
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	e001      	b.n	800219e <HAL_RCC_ClockConfig+0x26e>
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCC_ClockConfig+0x2a0>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	2202      	movs	r2, #2
 80021a0:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021a4:	fa92 f2a2 	rbit	r2, r2
 80021a8:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	f042 0220 	orr.w	r2, r2, #32
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f002 021f 	and.w	r2, r2, #31
 80021be:	40d3      	lsrs	r3, r2
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0a1      	b.n	8002310 <HAL_RCC_ClockConfig+0x3e0>
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d4:	4950      	ldr	r1, [pc, #320]	; (8002318 <HAL_RCC_ClockConfig+0x3e8>)
 80021d6:	4b50      	ldr	r3, [pc, #320]	; (8002318 <HAL_RCC_ClockConfig+0x3e8>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e6:	f7fe fb25 	bl	8000834 <HAL_GetTick>
 80021ea:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d112      	bne.n	800221a <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f6:	f7fe fb1d 	bl	8000834 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e081      	b.n	8002310 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800220c:	4b42      	ldr	r3, [pc, #264]	; (8002318 <HAL_RCC_ClockConfig+0x3e8>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b04      	cmp	r3, #4
 8002216:	d1ee      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x2c6>
 8002218:	e027      	b.n	800226a <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d11d      	bne.n	800225e <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe fb06 	bl	8000834 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e06a      	b.n	8002310 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223a:	4b37      	ldr	r3, [pc, #220]	; (8002318 <HAL_RCC_ClockConfig+0x3e8>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d1ee      	bne.n	8002224 <HAL_RCC_ClockConfig+0x2f4>
 8002246:	e010      	b.n	800226a <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7fe faf4 	bl	8000834 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e058      	b.n	8002310 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800225e:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <HAL_RCC_ClockConfig+0x3e8>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1ee      	bne.n	8002248 <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800226a:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_RCC_ClockConfig+0x3ec>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0207 	and.w	r2, r3, #7
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d910      	bls.n	800229a <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002278:	4928      	ldr	r1, [pc, #160]	; (800231c <HAL_RCC_ClockConfig+0x3ec>)
 800227a:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_RCC_ClockConfig+0x3ec>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_ClockConfig+0x3ec>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0207 	and.w	r2, r3, #7
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e03a      	b.n	8002310 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a6:	491c      	ldr	r1, [pc, #112]	; (8002318 <HAL_RCC_ClockConfig+0x3e8>)
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCC_ClockConfig+0x3e8>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c4:	4914      	ldr	r1, [pc, #80]	; (8002318 <HAL_RCC_ClockConfig+0x3e8>)
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_RCC_ClockConfig+0x3e8>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022d8:	f000 f826 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022dc:	4601      	mov	r1, r0
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_RCC_ClockConfig+0x3e8>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022e6:	23f0      	movs	r3, #240	; 0xf0
 80022e8:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_RCC_ClockConfig+0x3f0>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	fa21 f303 	lsr.w	r3, r1, r3
 8002304:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_RCC_ClockConfig+0x3f4>)
 8002306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002308:	2000      	movs	r0, #0
 800230a:	f7fe fa69 	bl	80007e0 <HAL_InitTick>
  
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3778      	adds	r7, #120	; 0x78
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	40022000 	.word	0x40022000
 8002320:	0800279c 	.word	0x0800279c
 8002324:	20000428 	.word	0x20000428

08002328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b08b      	sub	sp, #44	; 0x2c
 800232c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d002      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x30>
 8002352:	2b08      	cmp	r3, #8
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x36>
 8002356:	e03c      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800235a:	623b      	str	r3, [r7, #32]
      break;
 800235c:	e03c      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002364:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002368:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f003 020f 	and.w	r2, r3, #15
 800238a:	230f      	movs	r3, #15
 800238c:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80023b0:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
 80023c0:	e004      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	623b      	str	r3, [r7, #32]
      break;
 80023d0:	e002      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80023d4:	623b      	str	r3, [r7, #32]
      break;
 80023d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d8:	6a3b      	ldr	r3, [r7, #32]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	372c      	adds	r7, #44	; 0x2c
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	007a1200 	.word	0x007a1200
 80023f0:	080027ac 	.word	0x080027ac
 80023f4:	080027bc 	.word	0x080027bc
 80023f8:	003d0900 	.word	0x003d0900

080023fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_RCC_GetHCLKFreq+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000428 	.word	0x20000428

08002414 <HAL_TIM_Encoder_Init>:
  * @param  htim: TIM Encoder Interface handle
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e083      	b.n	800253c <HAL_TIM_Encoder_Init+0x128>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d106      	bne.n	800244e <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7fe f983 	bl	8000754 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2202      	movs	r2, #2
 8002452:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002464:	f023 0307 	bic.w	r3, r3, #7
 8002468:	6093      	str	r3, [r2, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3304      	adds	r3, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f000 f89d 	bl	80025b4 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a2:	f023 0303 	bic.w	r3, r3, #3
 80024a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	4313      	orrs	r3, r2
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
  
  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80024c0:	f023 030c 	bic.w	r3, r3, #12
 80024c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	4313      	orrs	r3, r2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	011a      	lsls	r2, r3, #4
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	031b      	lsls	r3, r3, #12
 80024f0:	4313      	orrs	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80024fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002506:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	4313      	orrs	r3, r2
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_TIM_Encoder_Start+0x16>
 8002554:	2b04      	cmp	r3, #4
 8002556:	d008      	beq.n	800256a <HAL_TIM_Encoder_Start+0x26>
 8002558:	e00f      	b.n	800257a <HAL_TIM_Encoder_Start+0x36>
  {
  case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2201      	movs	r2, #1
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f898 	bl	8002698 <TIM_CCxChannelCmd>
      break; 
 8002568:	e016      	b.n	8002598 <HAL_TIM_Encoder_Start+0x54>
    }  
  case TIM_CHANNEL_2:
    {  
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2201      	movs	r2, #1
 8002570:	2104      	movs	r1, #4
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f890 	bl	8002698 <TIM_CCxChannelCmd>
      break;
 8002578:	e00e      	b.n	8002598 <HAL_TIM_Encoder_Start+0x54>
    }  
  default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2201      	movs	r2, #1
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f888 	bl	8002698 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	2104      	movs	r1, #4
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f881 	bl	8002698 <TIM_CCxChannelCmd>
      break; 
 8002596:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop

080025b4 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a2e      	ldr	r2, [pc, #184]	; (8002684 <TIM_Base_SetConfig+0xd0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d007      	beq.n	80025e0 <TIM_Base_SetConfig+0x2c>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d6:	d003      	beq.n	80025e0 <TIM_Base_SetConfig+0x2c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a2b      	ldr	r2, [pc, #172]	; (8002688 <TIM_Base_SetConfig+0xd4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d108      	bne.n	80025f2 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a23      	ldr	r2, [pc, #140]	; (8002684 <TIM_Base_SetConfig+0xd0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <TIM_Base_SetConfig+0x6e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002600:	d00f      	beq.n	8002622 <TIM_Base_SetConfig+0x6e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a20      	ldr	r2, [pc, #128]	; (8002688 <TIM_Base_SetConfig+0xd4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00b      	beq.n	8002622 <TIM_Base_SetConfig+0x6e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1f      	ldr	r2, [pc, #124]	; (800268c <TIM_Base_SetConfig+0xd8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <TIM_Base_SetConfig+0x6e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <TIM_Base_SetConfig+0xdc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d003      	beq.n	8002622 <TIM_Base_SetConfig+0x6e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <TIM_Base_SetConfig+0xe0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d108      	bne.n	8002634 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <TIM_Base_SetConfig+0xd0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00b      	beq.n	800266a <TIM_Base_SetConfig+0xb6>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a0d      	ldr	r2, [pc, #52]	; (800268c <TIM_Base_SetConfig+0xd8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0xb6>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <TIM_Base_SetConfig+0xdc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0xb6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <TIM_Base_SetConfig+0xe0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d103      	bne.n	8002672 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	615a      	str	r2, [r3, #20]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40000400 	.word	0x40000400
 800268c:	40014000 	.word	0x40014000
 8002690:	40014400 	.word	0x40014400
 8002694:	40014800 	.word	0x40014800

08002698 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80026a8:	2201      	movs	r2, #1
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	401a      	ands	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a1a      	ldr	r2, [r3, #32]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	431a      	orrs	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	621a      	str	r2, [r3, #32]
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e038      	b.n	800276a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a18      	ldr	r2, [pc, #96]	; (8002778 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002720:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002744:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	4313      	orrs	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
} 
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40012c00 	.word	0x40012c00

0800277c <_init>:
 800277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277e:	bf00      	nop
 8002780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002782:	bc08      	pop	{r3}
 8002784:	469e      	mov	lr, r3
 8002786:	4770      	bx	lr

08002788 <_fini>:
 8002788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278a:	bf00      	nop
 800278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278e:	bc08      	pop	{r3}
 8002790:	469e      	mov	lr, r3
 8002792:	4770      	bx	lr
