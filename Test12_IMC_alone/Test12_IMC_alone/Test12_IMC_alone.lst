
Test12_IMC_alone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003980  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000042c  20000000  08003b54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002042c  2**0
                  CONTENTS
  7 .bss          000000cc  2000042c  2000042c  0002042c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004f8  200004f8  0002042c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00004a56  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000a571  00000000  00000000  00024eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000014e8  00000000  00000000  0002f423  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a58  00000000  00000000  00030910  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000990  00000000  00000000  00031368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00005c96  00000000  00000000  00031cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003198  00000000  00000000  0003798e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000006e  00000000  00000000  0003ab26  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a70  00000000  00000000  0003ab94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000042f 	.word	0x2000042f
 80001a0:	2000042c 	.word	0x2000042c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	2000042c 	.word	0x2000042c
 80001c4:	2000042c 	.word	0x2000042c
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000042c 	.word	0x2000042c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003af0 	.word	0x08003af0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000430 	.word	0x20000430
 8000220:	08003af0 	.word	0x08003af0
 8000224:	2000042c 	.word	0x2000042c
 8000228:	00000000 	.word	0x00000000

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	4e0f      	ldr	r6, [pc, #60]	; (800026c <__libc_init_array+0x40>)
 8000230:	4d0f      	ldr	r5, [pc, #60]	; (8000270 <__libc_init_array+0x44>)
 8000232:	1b76      	subs	r6, r6, r5
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	bf18      	it	ne
 8000238:	2400      	movne	r4, #0
 800023a:	d005      	beq.n	8000248 <__libc_init_array+0x1c>
 800023c:	3401      	adds	r4, #1
 800023e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000242:	4798      	blx	r3
 8000244:	42a6      	cmp	r6, r4
 8000246:	d1f9      	bne.n	800023c <__libc_init_array+0x10>
 8000248:	4e0a      	ldr	r6, [pc, #40]	; (8000274 <__libc_init_array+0x48>)
 800024a:	4d0b      	ldr	r5, [pc, #44]	; (8000278 <__libc_init_array+0x4c>)
 800024c:	1b76      	subs	r6, r6, r5
 800024e:	f003 fc4f 	bl	8003af0 <_init>
 8000252:	10b6      	asrs	r6, r6, #2
 8000254:	bf18      	it	ne
 8000256:	2400      	movne	r4, #0
 8000258:	d006      	beq.n	8000268 <__libc_init_array+0x3c>
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	08003b48 	.word	0x08003b48
 8000270:	08003b48 	.word	0x08003b48
 8000274:	08003b50 	.word	0x08003b50
 8000278:	08003b48 	.word	0x08003b48

0800027c <register_fini>:
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <register_fini+0xc>)
 800027e:	b113      	cbz	r3, 8000286 <register_fini+0xa>
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <register_fini+0x10>)
 8000282:	f000 b805 	b.w	8000290 <atexit>
 8000286:	4770      	bx	lr
 8000288:	00000000 	.word	0x00000000
 800028c:	0800029d 	.word	0x0800029d

08000290 <atexit>:
 8000290:	2300      	movs	r3, #0
 8000292:	4601      	mov	r1, r0
 8000294:	461a      	mov	r2, r3
 8000296:	4618      	mov	r0, r3
 8000298:	f000 b814 	b.w	80002c4 <__register_exitproc>

0800029c <__libc_fini_array>:
 800029c:	b538      	push	{r3, r4, r5, lr}
 800029e:	4d07      	ldr	r5, [pc, #28]	; (80002bc <__libc_fini_array+0x20>)
 80002a0:	4c07      	ldr	r4, [pc, #28]	; (80002c0 <__libc_fini_array+0x24>)
 80002a2:	1b2c      	subs	r4, r5, r4
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	d005      	beq.n	80002b4 <__libc_fini_array+0x18>
 80002a8:	3c01      	subs	r4, #1
 80002aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80002ae:	4798      	blx	r3
 80002b0:	2c00      	cmp	r4, #0
 80002b2:	d1f9      	bne.n	80002a8 <__libc_fini_array+0xc>
 80002b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80002b8:	f003 bc20 	b.w	8003afc <_fini>
 80002bc:	08003b54 	.word	0x08003b54
 80002c0:	08003b50 	.word	0x08003b50

080002c4 <__register_exitproc>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	4c25      	ldr	r4, [pc, #148]	; (8000360 <__register_exitproc+0x9c>)
 80002ca:	6825      	ldr	r5, [r4, #0]
 80002cc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80002d0:	4606      	mov	r6, r0
 80002d2:	4688      	mov	r8, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b3c4      	cbz	r4, 800034c <__register_exitproc+0x88>
 80002da:	6860      	ldr	r0, [r4, #4]
 80002dc:	281f      	cmp	r0, #31
 80002de:	dc17      	bgt.n	8000310 <__register_exitproc+0x4c>
 80002e0:	1c43      	adds	r3, r0, #1
 80002e2:	b176      	cbz	r6, 8000302 <__register_exitproc+0x3e>
 80002e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80002e8:	2201      	movs	r2, #1
 80002ea:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80002ee:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 80002f2:	4082      	lsls	r2, r0
 80002f4:	4311      	orrs	r1, r2
 80002f6:	2e02      	cmp	r6, #2
 80002f8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80002fc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8000300:	d01e      	beq.n	8000340 <__register_exitproc+0x7c>
 8000302:	3002      	adds	r0, #2
 8000304:	6063      	str	r3, [r4, #4]
 8000306:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800030a:	2000      	movs	r0, #0
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <__register_exitproc+0xa0>)
 8000312:	b303      	cbz	r3, 8000356 <__register_exitproc+0x92>
 8000314:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000318:	f3af 8000 	nop.w
 800031c:	4604      	mov	r4, r0
 800031e:	b1d0      	cbz	r0, 8000356 <__register_exitproc+0x92>
 8000320:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000324:	2700      	movs	r7, #0
 8000326:	e880 0088 	stmia.w	r0, {r3, r7}
 800032a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800032e:	4638      	mov	r0, r7
 8000330:	2301      	movs	r3, #1
 8000332:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000336:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e1      	beq.n	8000302 <__register_exitproc+0x3e>
 800033e:	e7d1      	b.n	80002e4 <__register_exitproc+0x20>
 8000340:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000344:	430a      	orrs	r2, r1
 8000346:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800034a:	e7da      	b.n	8000302 <__register_exitproc+0x3e>
 800034c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000350:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000354:	e7c1      	b.n	80002da <__register_exitproc+0x16>
 8000356:	f04f 30ff 	mov.w	r0, #4294967295
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	bf00      	nop
 8000360:	08003b0c 	.word	0x08003b0c
 8000364:	00000000 	.word	0x00000000

08000368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800036c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800036e:	e003      	b.n	8000378 <LoopCopyDataInit>

08000370 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000372:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000374:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000376:	3104      	adds	r1, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800037c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800037e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000380:	d3f6      	bcc.n	8000370 <CopyDataInit>
	ldr	r2, =_sbss
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000384:	e002      	b.n	800038c <LoopFillZerobss>

08000386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000386:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000388:	f842 3b04 	str.w	r3, [r2], #4

0800038c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <LoopForever+0x16>)
	cmp	r2, r3
 800038e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000390:	d3f9      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000392:	f000 f9e1 	bl	8000758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000396:	f7ff ff49 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800039a:	f000 f80f 	bl	80003bc <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a0:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80003a4:	08003b54 	.word	0x08003b54
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003ac:	2000042c 	.word	0x2000042c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80003b0:	2000042c 	.word	0x2000042c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80003b4:	200004f8 	.word	0x200004f8

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  float data =0.0f;
 80003c2:	f04f 0300 	mov.w	r3, #0
 80003c6:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c8:	f000 fac4 	bl	8000954 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80003cc:	f000 f81c 	bl	8000408 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d0:	f000 f914 	bl	80005fc <MX_GPIO_Init>
  MX_TIM1_Init();
 80003d4:	f000 f86c 	bl	80004b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80003d8:	f000 f8e0 	bl	800059c <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
  /* USER CODE BEGIN 3 */
  	data = data+0.01f;
 80003dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80003e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000400 <main+0x44>
 80003e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003e8:	edc7 7a01 	vstr	s15, [r7, #4]
  	user_tim1_pwm_setvalue(data);
 80003ec:	ed97 0a01 	vldr	s0, [r7, #4]
 80003f0:	f000 f93a 	bl	8000668 <user_tim1_pwm_setvalue>
  	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80003f4:	2108      	movs	r1, #8
 80003f6:	4803      	ldr	r0, [pc, #12]	; (8000404 <main+0x48>)
 80003f8:	f000 fda8 	bl	8000f4c <HAL_GPIO_TogglePin>
  }
 80003fc:	e7ee      	b.n	80003dc <main+0x20>
 80003fe:	bf00      	nop
 8000400:	3c23d70a 	.word	0x3c23d70a
 8000404:	48000400 	.word	0x48000400

08000408 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b096      	sub	sp, #88	; 0x58
 800040c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040e:	2302      	movs	r3, #2
 8000410:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000412:	2301      	movs	r3, #1
 8000414:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000416:	2310      	movs	r3, #16
 8000418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800041a:	2300      	movs	r3, #0
 800041c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fda4 	bl	8000f70 <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x2a>
  {
    Error_Handler();
 800042e:	f000 f945 	bl	80006bc <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	230f      	movs	r3, #15
 8000434:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000436:	2300      	movs	r3, #0
 8000438:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	2100      	movs	r1, #0
 800044c:	4618      	mov	r0, r3
 800044e:	f001 fe51 	bl	80020f4 <HAL_RCC_ClockConfig>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000458:	f000 f930 	bl	80006bc <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 800045c:	f241 0301 	movw	r3, #4097	; 0x1001
 8000460:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4618      	mov	r0, r3
 800046e:	f002 f8f7 	bl	8002660 <HAL_RCCEx_PeriphCLKConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000478:	f000 f920 	bl	80006bc <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800047c:	f002 f8a0 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8000480:	4602      	mov	r2, r0
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <SystemClock_Config+0xa4>)
 8000484:	fba3 2302 	umull	r2, r3, r3, r2
 8000488:	099b      	lsrs	r3, r3, #6
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fb9a 	bl	8000bc4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000490:	2004      	movs	r0, #4
 8000492:	f000 fba3 	bl	8000bdc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2100      	movs	r1, #0
 800049a:	f04f 30ff 	mov.w	r0, #4294967295
 800049e:	f000 fb75 	bl	8000b8c <HAL_NVIC_SetPriority>
}
 80004a2:	bf00      	nop
 80004a4:	3758      	adds	r7, #88	; 0x58
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	10624dd3 	.word	0x10624dd3

080004b0 <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b096      	sub	sp, #88	; 0x58
 80004b4:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 80004b6:	4b37      	ldr	r3, [pc, #220]	; (8000594 <MX_TIM1_Init+0xe4>)
 80004b8:	4a37      	ldr	r2, [pc, #220]	; (8000598 <MX_TIM1_Init+0xe8>)
 80004ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004bc:	4b35      	ldr	r3, [pc, #212]	; (8000594 <MX_TIM1_Init+0xe4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c2:	4b34      	ldr	r3, [pc, #208]	; (8000594 <MX_TIM1_Init+0xe4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 80004c8:	4b32      	ldr	r3, [pc, #200]	; (8000594 <MX_TIM1_Init+0xe4>)
 80004ca:	f240 128f 	movw	r2, #399	; 0x18f
 80004ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d0:	4b30      	ldr	r3, [pc, #192]	; (8000594 <MX_TIM1_Init+0xe4>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d6:	4b2f      	ldr	r3, [pc, #188]	; (8000594 <MX_TIM1_Init+0xe4>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004dc:	482d      	ldr	r0, [pc, #180]	; (8000594 <MX_TIM1_Init+0xe4>)
 80004de:	f002 fd3f 	bl	8002f60 <HAL_TIM_PWM_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0x3c>
  {
    Error_Handler();
 80004e8:	f000 f8e8 	bl	80006bc <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ec:	2300      	movs	r3, #0
 80004ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004f0:	2300      	movs	r3, #0
 80004f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004fc:	4619      	mov	r1, r3
 80004fe:	4825      	ldr	r0, [pc, #148]	; (8000594 <MX_TIM1_Init+0xe4>)
 8000500:	f003 f94a 	bl	8003798 <HAL_TIMEx_MasterConfigSynchronization>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800050a:	f000 f8d7 	bl	80006bc <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800050e:	2360      	movs	r3, #96	; 0x60
 8000510:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000516:	2300      	movs	r3, #0
 8000518:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800051a:	2300      	movs	r3, #0
 800051c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800051e:	2300      	movs	r3, #0
 8000520:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000522:	2300      	movs	r3, #0
 8000524:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000526:	2300      	movs	r3, #0
 8000528:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800052a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	4818      	ldr	r0, [pc, #96]	; (8000594 <MX_TIM1_Init+0xe4>)
 8000534:	f003 f818 	bl	8003568 <HAL_TIM_PWM_ConfigChannel>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800053e:	f000 f8bd 	bl	80006bc <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800056e:	2300      	movs	r3, #0
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	4619      	mov	r1, r3
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <MX_TIM1_Init+0xe4>)
 8000578:	f003 f95c 	bl	8003834 <HAL_TIMEx_ConfigBreakDeadTime>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000582:	f000 f89b 	bl	80006bc <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <MX_TIM1_Init+0xe4>)
 8000588:	f000 f992 	bl	80008b0 <HAL_TIM_MspPostInit>

}
 800058c:	bf00      	nop
 800058e:	3758      	adds	r7, #88	; 0x58
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000448 	.word	0x20000448
 8000598:	40012c00 	.word	0x40012c00

0800059c <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <MX_USART1_UART_Init+0x5c>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005c4:	220c      	movs	r2, #12
 80005c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005e2:	f002 f983 	bl	80028ec <HAL_UART_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80005ec:	f000 f866 	bl	80006bc <Error_Handler>
  }

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000484 	.word	0x20000484
 80005f8:	40013800 	.word	0x40013800

080005fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4a17      	ldr	r2, [pc, #92]	; (8000660 <MX_GPIO_Init+0x64>)
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_GPIO_Init+0x64>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_GPIO_Init+0x64>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4a11      	ldr	r2, [pc, #68]	; (8000660 <MX_GPIO_Init+0x64>)
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_GPIO_Init+0x64>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_GPIO_Init+0x64>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2108      	movs	r1, #8
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <MX_GPIO_Init+0x68>)
 8000638:	f000 fc70 	bl	8000f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800063c:	2308      	movs	r3, #8
 800063e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_GPIO_Init+0x68>)
 8000654:	f000 faec 	bl	8000c30 <HAL_GPIO_Init>

}
 8000658:	bf00      	nop
 800065a:	3720      	adds	r7, #32
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	48000400 	.word	0x48000400

08000668 <user_tim1_pwm_setvalue>:

/* USER CODE BEGIN 4 */
void user_tim1_pwm_setvalue(float value)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	ed87 0a01 	vstr	s0, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC;
  
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000672:	2360      	movs	r3, #96	; 0x60
 8000674:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = (uint32_t)((400)*value);
 8000676:	edd7 7a01 	vldr	s15, [r7, #4]
 800067a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80006b4 <user_tim1_pwm_setvalue+0x4c>
 800067e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000686:	ee17 3a90 	vmov	r3, s15
 800068a:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	4619      	mov	r1, r3
 800069c:	4806      	ldr	r0, [pc, #24]	; (80006b8 <user_tim1_pwm_setvalue+0x50>)
 800069e:	f002 ff63 	bl	8003568 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  
 80006a2:	2100      	movs	r1, #0
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <user_tim1_pwm_setvalue+0x50>)
 80006a6:	f002 fc87 	bl	8002fb8 <HAL_TIM_PWM_Start>
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	43c80000 	.word	0x43c80000
 80006b8:	20000448 	.word	0x20000448

080006bc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2108      	movs	r1, #8
 80006c4:	4807      	ldr	r0, [pc, #28]	; (80006e4 <Error_Handler+0x28>)
 80006c6:	f000 fc29 	bl	8000f1c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80006ca:	20c8      	movs	r0, #200	; 0xc8
 80006cc:	f000 f98e 	bl	80009ec <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2108      	movs	r1, #8
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <Error_Handler+0x28>)
 80006d6:	f000 fc21 	bl	8000f1c <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80006da:	2032      	movs	r0, #50	; 0x32
 80006dc:	f000 f986 	bl	80009ec <HAL_Delay>
  }
 80006e0:	e7ee      	b.n	80006c0 <Error_Handler+0x4>
 80006e2:	bf00      	nop
 80006e4:	48000400 	.word	0x48000400

080006e8 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop

080006f8 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 80006fc:	e7fe      	b.n	80006fc <HardFault_Handler+0x4>
 80006fe:	bf00      	nop

08000700 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>
 8000706:	bf00      	nop

08000708 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 800070c:	e7fe      	b.n	800070c <BusFault_Handler+0x4>
 800070e:	bf00      	nop

08000710 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>
 8000716:	bf00      	nop

08000718 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f934 	bl	80009b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000750:	f000 fa60 	bl	8000c14 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800075c:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <SystemInit+0x84>)
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <SystemInit+0x84>)
 8000760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800076c:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <SystemInit+0x88>)
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <SystemInit+0x88>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000778:	4919      	ldr	r1, [pc, #100]	; (80007e0 <SystemInit+0x88>)
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <SystemInit+0x88>)
 800077c:	685a      	ldr	r2, [r3, #4]
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <SystemInit+0x8c>)
 8000780:	4013      	ands	r3, r2
 8000782:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000784:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <SystemInit+0x88>)
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <SystemInit+0x88>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800078e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000792:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000794:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <SystemInit+0x88>)
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <SystemInit+0x88>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800079e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <SystemInit+0x88>)
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <SystemInit+0x88>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007aa:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <SystemInit+0x88>)
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <SystemInit+0x88>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b2:	f023 030f 	bic.w	r3, r3, #15
 80007b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80007b8:	4909      	ldr	r1, [pc, #36]	; (80007e0 <SystemInit+0x88>)
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <SystemInit+0x88>)
 80007bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <SystemInit+0x90>)
 80007c0:	4013      	ands	r3, r2
 80007c2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <SystemInit+0x88>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <SystemInit+0x84>)
 80007cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007d0:	609a      	str	r2, [r3, #8]
#endif
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00
 80007e0:	40021000 	.word	0x40021000
 80007e4:	f87fc00c 	.word	0xf87fc00c
 80007e8:	ff00fccc 	.word	0xff00fccc

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4a1e      	ldr	r2, [pc, #120]	; (800086c <HAL_MspInit+0x80>)
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <HAL_MspInit+0x80>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_MspInit+0x80>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080a:	2003      	movs	r0, #3
 800080c:	f000 f9b2 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	f06f 000b 	mvn.w	r0, #11
 8000818:	f000 f9b8 	bl	8000b8c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	f06f 000a 	mvn.w	r0, #10
 8000824:	f000 f9b2 	bl	8000b8c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	f06f 0009 	mvn.w	r0, #9
 8000830:	f000 f9ac 	bl	8000b8c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	f06f 0004 	mvn.w	r0, #4
 800083c:	f000 f9a6 	bl	8000b8c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	f06f 0003 	mvn.w	r0, #3
 8000848:	f000 f9a0 	bl	8000b8c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	f06f 0001 	mvn.w	r0, #1
 8000854:	f000 f99a 	bl	8000b8c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f000 f994 	bl	8000b8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_TIM_PWM_MspInit+0x38>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d10b      	bne.n	800089a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_TIM_PWM_MspInit+0x3c>)
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_TIM_PWM_MspInit+0x3c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <HAL_TIM_PWM_MspInit+0x3c>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40012c00 	.word	0x40012c00
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <HAL_TIM_MspPostInit+0x40>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d111      	bne.n	80008e6 <HAL_TIM_MspPostInit+0x36>
  
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80008c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80008d4:	2306      	movs	r3, #6
 80008d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f000 f9a5 	bl	8000c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40012c00 	.word	0x40012c00

080008f4 <HAL_UART_MspInit>:
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <HAL_UART_MspInit+0x58>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d11d      	bne.n	8000942 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <HAL_UART_MspInit+0x5c>)
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_UART_MspInit+0x5c>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_UART_MspInit+0x5c>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800091e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000922:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000928:	2301      	movs	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000930:	2307      	movs	r3, #7
 8000932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093e:	f000 f977 	bl	8000c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3720      	adds	r7, #32
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40013800 	.word	0x40013800
 8000950:	40021000 	.word	0x40021000

08000954 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000958:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_Init+0x28>)
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_Init+0x28>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 f905 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096a:	2000      	movs	r0, #0
 800096c:	f000 f808 	bl	8000980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000970:	f7ff ff3c 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40022000 	.word	0x40022000

08000980 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_InitTick+0x30>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <HAL_InitTick+0x34>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	099b      	lsrs	r3, r3, #6
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f915 	bl	8000bc4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800099a:	2200      	movs	r2, #0
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	f04f 30ff 	mov.w	r0, #4294967295
 80009a2:	f000 f8f3 	bl	8000b8c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000428 	.word	0x20000428
 80009b4:	10624dd3 	.word	0x10624dd3

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick++;
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <HAL_IncTick+0x18>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <HAL_IncTick+0x18>)
 80009c4:	6013      	str	r3, [r2, #0]
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	200004f4 	.word	0x200004f4

080009d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <HAL_GetTick+0x14>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	200004f4 	.word	0x200004f4

080009ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f4:	f7ff ffee 	bl	80009d4 <HAL_GetTick>
 80009f8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffea 	bl	80009d4 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	1ad2      	subs	r2, r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d3f7      	bcc.n	80009fc <HAL_Delay+0x10>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a68:	0a1b      	lsrs	r3, r3, #8
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	da0b      	bge.n	8000aa4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	490d      	ldr	r1, [pc, #52]	; (8000ac4 <NVIC_SetPriority+0x4c>)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 030f 	and.w	r3, r3, #15
 8000a94:	3b04      	subs	r3, #4
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa2:	e009      	b.n	8000ab8 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	4908      	ldr	r1, [pc, #32]	; (8000ac8 <NVIC_SetPriority+0x50>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	2201      	movs	r2, #1
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	1e5a      	subs	r2, r3, #1
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b12:	2101      	movs	r1, #1
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	1e59      	subs	r1, r3, #1
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000b20:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff90 	bl	8000a78 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff49 	bl	8000a14 <NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop

08000b8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9e:	f7ff ff5d 	bl	8000a5c <NVIC_GetPriorityGrouping>
 8000ba2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	68b9      	ldr	r1, [r7, #8]
 8000ba8:	6978      	ldr	r0, [r7, #20]
 8000baa:	f7ff ff8f 	bl	8000acc <NVIC_EncodePriority>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff5e 	bl	8000a78 <NVIC_SetPriority>
}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ffaf 	bl	8000b30 <SysTick_Config>
 8000bd2:	4603      	mov	r3, r0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d106      	bne.n	8000bf8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000bf6:	e005      	b.n	8000c04 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bf8:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f023 0304 	bic.w	r3, r3, #4
 8000c02:	6013      	str	r3, [r2, #0]
  }
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c18:	f000 f802 	bl	8000c20 <HAL_SYSTICK_Callback>
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c46:	e14e      	b.n	8000ee6 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8140 	beq.w	8000ee0 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x40>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b12      	cmp	r3, #18
 8000c6e:	d123      	bne.n	8000cb8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	08da      	lsrs	r2, r3, #3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3208      	adds	r2, #8
 8000c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f003 0307 	and.w	r3, r3, #7
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	220f      	movs	r2, #15
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	691a      	ldr	r2, [r3, #16]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	08da      	lsrs	r2, r3, #3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3208      	adds	r2, #8
 8000cb2:	6939      	ldr	r1, [r7, #16]
 8000cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0203 	and.w	r2, r3, #3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d00b      	beq.n	8000d0c <HAL_GPIO_Init+0xdc>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d007      	beq.n	8000d0c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d00:	2b11      	cmp	r3, #17
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b12      	cmp	r3, #18
 8000d0a:	d130      	bne.n	8000d6e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d42:	2201      	movs	r2, #1
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	f003 0201 	and.w	r2, r3, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 809a 	beq.w	8000ee0 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	4a55      	ldr	r2, [pc, #340]	; (8000f04 <HAL_GPIO_Init+0x2d4>)
 8000dae:	4b55      	ldr	r3, [pc, #340]	; (8000f04 <HAL_GPIO_Init+0x2d4>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b52      	ldr	r3, [pc, #328]	; (8000f04 <HAL_GPIO_Init+0x2d4>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000dc4:	4a50      	ldr	r2, [pc, #320]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x1e8>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a46      	ldr	r2, [pc, #280]	; (8000f0c <HAL_GPIO_Init+0x2dc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1e4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a45      	ldr	r2, [pc, #276]	; (8000f10 <HAL_GPIO_Init+0x2e0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1e0>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a44      	ldr	r2, [pc, #272]	; (8000f14 <HAL_GPIO_Init+0x2e4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1dc>
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x1ea>
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	e004      	b.n	8000e1a <HAL_GPIO_Init+0x1ea>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0x1ea>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <HAL_GPIO_Init+0x1ea>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	f002 0203 	and.w	r2, r2, #3
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	4093      	lsls	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e2a:	4937      	ldr	r1, [pc, #220]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e38:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e5c:	4a2e      	ldr	r2, [pc, #184]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e62:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e86:	4a24      	ldr	r2, [pc, #144]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb0:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eda:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f47f aea9 	bne.w	8000c48 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000800 	.word	0x48000800
 8000f14:	48000c00 	.word	0x48000c00
 8000f18:	40010400 	.word	0x40010400

08000f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695a      	ldr	r2, [r3, #20]
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	405a      	eors	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	615a      	str	r2, [r3, #20]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 81e8 	beq.w	8001362 <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f92:	4bb8      	ldr	r3, [pc, #736]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d00c      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f9e:	4bb5      	ldr	r3, [pc, #724]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	f040 8082 	bne.w	80010b0 <HAL_RCC_OscConfig+0x140>
 8000fac:	4bb1      	ldr	r3, [pc, #708]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d07b      	beq.n	80010b0 <HAL_RCC_OscConfig+0x140>
 8000fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000fc4:	fa93 f2a3 	rbit	r2, r3
 8000fc8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000fcc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000fd2:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	fab3 f383 	clz	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f043 0320 	orr.w	r3, r3, #32
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d102      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x80>
 8000fea:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	e039      	b.n	8001064 <HAL_RCC_OscConfig+0xf4>
 8000ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ffc:	fa93 f2a3 	rbit	r2, r3
 8001000:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001004:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001006:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	fab3 f383 	clz	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f043 0320 	orr.w	r3, r3, #32
 8001016:	b2db      	uxtb	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d102      	bne.n	8001028 <HAL_RCC_OscConfig+0xb8>
 8001022:	4b94      	ldr	r3, [pc, #592]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	e01d      	b.n	8001064 <HAL_RCC_OscConfig+0xf4>
 8001028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001030:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001034:	fa93 f2a3 	rbit	r2, r3
 8001038:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800103c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800103e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	fab3 f383 	clz	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f043 0320 	orr.w	r3, r3, #32
 800104e:	b2db      	uxtb	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b04      	cmp	r3, #4
 8001058:	d102      	bne.n	8001060 <HAL_RCC_OscConfig+0xf0>
 800105a:	4b86      	ldr	r3, [pc, #536]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	e001      	b.n	8001064 <HAL_RCC_OscConfig+0xf4>
 8001060:	4b84      	ldr	r3, [pc, #528]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001068:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8001070:	fa92 f1a2 	rbit	r1, r2
 8001074:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001078:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800107a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	fab2 f282 	clz	r2, r2
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	f042 0220 	orr.w	r2, r2, #32
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	f002 021f 	and.w	r2, r2, #31
 8001092:	40d3      	lsrs	r3, r2
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 8161 	beq.w	8001360 <HAL_RCC_OscConfig+0x3f0>
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f040 815b 	bne.w	8001360 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f001 b81a 	b.w	80020e4 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ba:	d106      	bne.n	80010ca <HAL_RCC_OscConfig+0x15a>
 80010bc:	4a6d      	ldr	r2, [pc, #436]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 80010be:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	e030      	b.n	800112c <HAL_RCC_OscConfig+0x1bc>
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10c      	bne.n	80010ee <HAL_RCC_OscConfig+0x17e>
 80010d4:	4a67      	ldr	r2, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4a64      	ldr	r2, [pc, #400]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	e01e      	b.n	800112c <HAL_RCC_OscConfig+0x1bc>
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x1a4>
 80010fa:	4a5e      	ldr	r2, [pc, #376]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 80010fc:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4a5b      	ldr	r2, [pc, #364]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8001108:	4b5a      	ldr	r3, [pc, #360]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0x1bc>
 8001114:	4a57      	ldr	r2, [pc, #348]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8001116:	4b57      	ldr	r3, [pc, #348]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4a54      	ldr	r2, [pc, #336]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8001122:	4b54      	ldr	r3, [pc, #336]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800112c:	4951      	ldr	r1, [pc, #324]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 800112e:	4b51      	ldr	r3, [pc, #324]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	f023 020f 	bic.w	r2, r3, #15
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4313      	orrs	r3, r2
 800113e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8083 	beq.w	8001252 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fc42 	bl	80009d4 <HAL_GetTick>
 8001150:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001156:	f7ff fc3d 	bl	80009d4 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d902      	bls.n	800116c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	f000 bfbc 	b.w	80020e4 <HAL_RCC_OscConfig+0x1174>
 800116c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001170:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001178:	fa93 f2a3 	rbit	r2, r3
 800117c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001180:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001182:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001186:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	b2db      	uxtb	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d102      	bne.n	80011a4 <HAL_RCC_OscConfig+0x234>
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	e039      	b.n	8001218 <HAL_RCC_OscConfig+0x2a8>
 80011a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80011b0:	fa93 f2a3 	rbit	r2, r3
 80011b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011b8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	fab3 f383 	clz	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f043 0320 	orr.w	r3, r3, #32
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d102      	bne.n	80011dc <HAL_RCC_OscConfig+0x26c>
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	e01d      	b.n	8001218 <HAL_RCC_OscConfig+0x2a8>
 80011dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011e8:	fa93 f2a3 	rbit	r2, r3
 80011ec:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011f0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011f2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	fab3 f383 	clz	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f043 0320 	orr.w	r3, r3, #32
 8001202:	b2db      	uxtb	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b04      	cmp	r3, #4
 800120c:	d102      	bne.n	8001214 <HAL_RCC_OscConfig+0x2a4>
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	e001      	b.n	8001218 <HAL_RCC_OscConfig+0x2a8>
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_RCC_OscConfig+0x304>)
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800121c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001224:	fa92 f1a2 	rbit	r1, r2
 8001228:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800122c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800122e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	fab2 f282 	clz	r2, r2
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	f042 0220 	orr.w	r2, r2, #32
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	f002 021f 	and.w	r2, r2, #31
 8001246:	40d3      	lsrs	r3, r2
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d082      	beq.n	8001156 <HAL_RCC_OscConfig+0x1e6>
 8001250:	e087      	b.n	8001362 <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff fbbf 	bl	80009d4 <HAL_GetTick>
 8001256:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	e00d      	b.n	8001278 <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fbba 	bl	80009d4 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b64      	cmp	r3, #100	; 0x64
 800126a:	d905      	bls.n	8001278 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	f000 bf39 	b.w	80020e4 <HAL_RCC_OscConfig+0x1174>
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001280:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001284:	fa93 f2a3 	rbit	r2, r3
 8001288:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800128c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800128e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001292:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f043 0320 	orr.w	r3, r3, #32
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d102      	bne.n	80012b0 <HAL_RCC_OscConfig+0x340>
 80012aa:	4bb6      	ldr	r3, [pc, #728]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	e039      	b.n	8001324 <HAL_RCC_OscConfig+0x3b4>
 80012b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80012bc:	fa93 f2a3 	rbit	r2, r3
 80012c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012c4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f043 0320 	orr.w	r3, r3, #32
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d102      	bne.n	80012e8 <HAL_RCC_OscConfig+0x378>
 80012e2:	4ba8      	ldr	r3, [pc, #672]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0x3b4>
 80012e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80012f4:	fa93 f2a3 	rbit	r2, r3
 80012f8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012fc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	fab3 f383 	clz	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f043 0320 	orr.w	r3, r3, #32
 800130e:	b2db      	uxtb	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b04      	cmp	r3, #4
 8001318:	d102      	bne.n	8001320 <HAL_RCC_OscConfig+0x3b0>
 800131a:	4b9a      	ldr	r3, [pc, #616]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	e001      	b.n	8001324 <HAL_RCC_OscConfig+0x3b4>
 8001320:	4b98      	ldr	r3, [pc, #608]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001328:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001330:	fa92 f1a2 	rbit	r1, r2
 8001334:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001338:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800133a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	fab2 f282 	clz	r2, r2
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	f042 0220 	orr.w	r2, r2, #32
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	f002 021f 	and.w	r2, r2, #31
 8001352:	40d3      	lsrs	r3, r2
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	f47f af7f 	bne.w	800125c <HAL_RCC_OscConfig+0x2ec>
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 81f4 	beq.w	800175a <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001372:	4b84      	ldr	r3, [pc, #528]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00d      	beq.n	800139a <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800137e:	4b81      	ldr	r3, [pc, #516]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b08      	cmp	r3, #8
 8001388:	f040 8099 	bne.w	80014be <HAL_RCC_OscConfig+0x54e>
 800138c:	4b7d      	ldr	r3, [pc, #500]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 8092 	bne.w	80014be <HAL_RCC_OscConfig+0x54e>
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80013a4:	fa93 f2a3 	rbit	r2, r3
 80013a8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013ac:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013b2:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f043 0320 	orr.w	r3, r3, #32
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d102      	bne.n	80013d0 <HAL_RCC_OscConfig+0x460>
 80013ca:	4b6e      	ldr	r3, [pc, #440]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	e037      	b.n	8001440 <HAL_RCC_OscConfig+0x4d0>
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80013da:	fa93 f2a3 	rbit	r2, r3
 80013de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	fab3 f383 	clz	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	095b      	lsrs	r3, r3, #5
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d102      	bne.n	8001406 <HAL_RCC_OscConfig+0x496>
 8001400:	4b60      	ldr	r3, [pc, #384]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	e01c      	b.n	8001440 <HAL_RCC_OscConfig+0x4d0>
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001410:	fa93 f2a3 	rbit	r2, r3
 8001414:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001418:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800141a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	fab3 f383 	clz	r3, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	b2db      	uxtb	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b04      	cmp	r3, #4
 8001434:	d102      	bne.n	800143c <HAL_RCC_OscConfig+0x4cc>
 8001436:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	e001      	b.n	8001440 <HAL_RCC_OscConfig+0x4d0>
 800143c:	4b51      	ldr	r3, [pc, #324]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	2202      	movs	r2, #2
 8001442:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800144a:	fa92 f1a2 	rbit	r1, r2
 800144e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001452:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001454:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	fab2 f282 	clz	r2, r2
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	f042 0220 	orr.w	r2, r2, #32
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	f002 021f 	and.w	r2, r2, #31
 800146c:	40d3      	lsrs	r3, r2
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_RCC_OscConfig+0x516>
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d002      	beq.n	8001486 <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f000 be2f 	b.w	80020e4 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4c3f      	ldr	r4, [pc, #252]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 8001488:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6959      	ldr	r1, [r3, #20]
 8001496:	23f8      	movs	r3, #248	; 0xf8
 8001498:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014a0:	fa93 f0a3 	rbit	r0, r3
 80014a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014a8:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	fab3 f383 	clz	r3, r3
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014bc:	e14d      	b.n	800175a <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80b3 	beq.w	8001630 <HAL_RCC_OscConfig+0x6c0>
 80014ca:	2301      	movs	r3, #1
 80014cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80014d4:	fa93 f2a3 	rbit	r2, r3
 80014d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014dc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014de:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014e2:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80014ee:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80014f2:	461a      	mov	r2, r3
 80014f4:	2301      	movs	r3, #1
 80014f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fa6c 	bl	80009d4 <HAL_GetTick>
 80014fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	e00a      	b.n	8001518 <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fa67 	bl	80009d4 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d902      	bls.n	8001518 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	f000 bde6 	b.w	80020e4 <HAL_RCC_OscConfig+0x1174>
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001522:	fa93 f2a3 	rbit	r2, r3
 8001526:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800152a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800152c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001530:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001532:	fab3 f383 	clz	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f043 0320 	orr.w	r3, r3, #32
 800153c:	b2db      	uxtb	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	095b      	lsrs	r3, r3, #5
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d102      	bne.n	800154e <HAL_RCC_OscConfig+0x5de>
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	e039      	b.n	80015c2 <HAL_RCC_OscConfig+0x652>
 800154e:	2302      	movs	r3, #2
 8001550:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001558:	fa93 f2a3 	rbit	r2, r3
 800155c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001560:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001562:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	fab3 f383 	clz	r3, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f043 0320 	orr.w	r3, r3, #32
 8001572:	b2db      	uxtb	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d104      	bne.n	8001588 <HAL_RCC_OscConfig+0x618>
 800157e:	4b01      	ldr	r3, [pc, #4]	; (8001584 <HAL_RCC_OscConfig+0x614>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	e01e      	b.n	80015c2 <HAL_RCC_OscConfig+0x652>
 8001584:	40021000 	.word	0x40021000
 8001588:	2302      	movs	r3, #2
 800158a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001592:	fa93 f2a3 	rbit	r2, r3
 8001596:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800159a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800159c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	fab3 f383 	clz	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f043 0320 	orr.w	r3, r3, #32
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	095b      	lsrs	r3, r3, #5
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d102      	bne.n	80015be <HAL_RCC_OscConfig+0x64e>
 80015b8:	4bb9      	ldr	r3, [pc, #740]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	e001      	b.n	80015c2 <HAL_RCC_OscConfig+0x652>
 80015be:	4bb8      	ldr	r3, [pc, #736]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	2202      	movs	r2, #2
 80015c4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015cc:	fa92 f1a2 	rbit	r1, r2
 80015d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80015d4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015d6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	fab2 f282 	clz	r2, r2
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	f042 0220 	orr.w	r2, r2, #32
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f002 021f 	and.w	r2, r2, #31
 80015ee:	40d3      	lsrs	r3, r2
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d084      	beq.n	8001502 <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4ca9      	ldr	r4, [pc, #676]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 80015fa:	4ba9      	ldr	r3, [pc, #676]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6959      	ldr	r1, [r3, #20]
 8001608:	23f8      	movs	r3, #248	; 0xf8
 800160a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001612:	fa93 f0a3 	rbit	r0, r3
 8001616:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800161a:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800161c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	4313      	orrs	r3, r2
 800162c:	6023      	str	r3, [r4, #0]
 800162e:	e094      	b.n	800175a <HAL_RCC_OscConfig+0x7ea>
 8001630:	2301      	movs	r3, #1
 8001632:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001642:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001644:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001648:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001654:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001658:	461a      	mov	r2, r3
 800165a:	2300      	movs	r3, #0
 800165c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff f9b9 	bl	80009d4 <HAL_GetTick>
 8001662:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	e00a      	b.n	800167e <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001668:	f7ff f9b4 	bl	80009d4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d902      	bls.n	800167e <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	f000 bd33 	b.w	80020e4 <HAL_RCC_OscConfig+0x1174>
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001688:	fa93 f2a3 	rbit	r2, r3
 800168c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001690:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001692:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001696:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001698:	fab3 f383 	clz	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d102      	bne.n	80016b4 <HAL_RCC_OscConfig+0x744>
 80016ae:	4b7c      	ldr	r3, [pc, #496]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	e037      	b.n	8001724 <HAL_RCC_OscConfig+0x7b4>
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80016be:	fa93 f2a3 	rbit	r2, r3
 80016c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016c6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	fab3 f383 	clz	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f043 0320 	orr.w	r3, r3, #32
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	095b      	lsrs	r3, r3, #5
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_OscConfig+0x77a>
 80016e4:	4b6e      	ldr	r3, [pc, #440]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	e01c      	b.n	8001724 <HAL_RCC_OscConfig+0x7b4>
 80016ea:	2302      	movs	r3, #2
 80016ec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016f4:	fa93 f2a3 	rbit	r2, r3
 80016f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016fc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f043 0320 	orr.w	r3, r3, #32
 800170e:	b2db      	uxtb	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b04      	cmp	r3, #4
 8001718:	d102      	bne.n	8001720 <HAL_RCC_OscConfig+0x7b0>
 800171a:	4b61      	ldr	r3, [pc, #388]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	e001      	b.n	8001724 <HAL_RCC_OscConfig+0x7b4>
 8001720:	4b5f      	ldr	r3, [pc, #380]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	2202      	movs	r2, #2
 8001726:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800172e:	fa92 f1a2 	rbit	r1, r2
 8001732:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001736:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001738:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	fab2 f282 	clz	r2, r2
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f042 0220 	orr.w	r2, r2, #32
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	40d3      	lsrs	r3, r2
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d186      	bne.n	8001668 <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 8132 	beq.w	80019ce <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 8099 	beq.w	80018a8 <HAL_RCC_OscConfig+0x938>
 8001776:	2301      	movs	r3, #1
 8001778:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001780:	fa93 f2a3 	rbit	r2, r3
 8001784:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001788:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800178a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800178e:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	461a      	mov	r2, r3
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x934>)
 800179a:	4413      	add	r3, r2
 800179c:	461a      	mov	r2, r3
 800179e:	2301      	movs	r3, #1
 80017a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff f917 	bl	80009d4 <HAL_GetTick>
 80017a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff f912 	bl	80009d4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d902      	bls.n	80017c2 <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	f000 bc91 	b.w	80020e4 <HAL_RCC_OscConfig+0x1174>
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017cc:	fa93 f2a3 	rbit	r2, r3
 80017d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017d4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017da:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_RCC_OscConfig+0x888>
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	e037      	b.n	8001868 <HAL_RCC_OscConfig+0x8f8>
 80017f8:	2302      	movs	r3, #2
 80017fa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800180a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800180c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800181c:	b2db      	uxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d102      	bne.n	800182e <HAL_RCC_OscConfig+0x8be>
 8001828:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	e01c      	b.n	8001868 <HAL_RCC_OscConfig+0x8f8>
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001838:	fa93 f2a3 	rbit	r2, r3
 800183c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001840:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001842:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001852:	b2db      	uxtb	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b04      	cmp	r3, #4
 800185c:	d102      	bne.n	8001864 <HAL_RCC_OscConfig+0x8f4>
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	e001      	b.n	8001868 <HAL_RCC_OscConfig+0x8f8>
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_RCC_OscConfig+0x930>)
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	2202      	movs	r2, #2
 800186a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001872:	fa92 f1a2 	rbit	r1, r2
 8001876:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800187a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800187c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	fab2 f282 	clz	r2, r2
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	f002 021f 	and.w	r2, r2, #31
 8001894:	40d3      	lsrs	r3, r2
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d086      	beq.n	80017ac <HAL_RCC_OscConfig+0x83c>
 800189e:	e096      	b.n	80019ce <HAL_RCC_OscConfig+0xa5e>
 80018a0:	40021000 	.word	0x40021000
 80018a4:	42420480 	.word	0x42420480
 80018a8:	2301      	movs	r3, #1
 80018aa:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80018b2:	fa93 f2a3 	rbit	r2, r3
 80018b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018ba:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4bb5      	ldr	r3, [pc, #724]	; (8001ba0 <HAL_RCC_OscConfig+0xc30>)
 80018cc:	4413      	add	r3, r2
 80018ce:	461a      	mov	r2, r3
 80018d0:	2300      	movs	r3, #0
 80018d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff f87e 	bl	80009d4 <HAL_GetTick>
 80018d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	e009      	b.n	80018f2 <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018de:	f7ff f879 	bl	80009d4 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e3f8      	b.n	80020e4 <HAL_RCC_OscConfig+0x1174>
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001904:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001906:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800190a:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001916:	b2db      	uxtb	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d102      	bne.n	8001928 <HAL_RCC_OscConfig+0x9b8>
 8001922:	4ba0      	ldr	r3, [pc, #640]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	e037      	b.n	8001998 <HAL_RCC_OscConfig+0xa28>
 8001928:	2302      	movs	r3, #2
 800192a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001932:	fa93 f2a3 	rbit	r2, r3
 8001936:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800193a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800193c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800194c:	b2db      	uxtb	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d102      	bne.n	800195e <HAL_RCC_OscConfig+0x9ee>
 8001958:	4b92      	ldr	r3, [pc, #584]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	e01c      	b.n	8001998 <HAL_RCC_OscConfig+0xa28>
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001970:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001972:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001982:	b2db      	uxtb	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b04      	cmp	r3, #4
 800198c:	d102      	bne.n	8001994 <HAL_RCC_OscConfig+0xa24>
 800198e:	4b85      	ldr	r3, [pc, #532]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	e001      	b.n	8001998 <HAL_RCC_OscConfig+0xa28>
 8001994:	4b83      	ldr	r3, [pc, #524]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	2202      	movs	r2, #2
 800199a:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80019a2:	fa92 f1a2 	rbit	r1, r2
 80019a6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80019aa:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019ac:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	fab2 f282 	clz	r2, r2
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	f002 021f 	and.w	r2, r2, #31
 80019c4:	40d3      	lsrs	r3, r2
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d187      	bne.n	80018de <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 818f 	beq.w	8001cfc <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d112      	bne.n	8001a16 <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4a6c      	ldr	r2, [pc, #432]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 80019f2:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	61d3      	str	r3, [r2, #28]
 80019fc:	4b69      	ldr	r3, [pc, #420]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a10:	2301      	movs	r3, #1
 8001a12:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	4b64      	ldr	r3, [pc, #400]	; (8001ba8 <HAL_RCC_OscConfig+0xc38>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d11a      	bne.n	8001a58 <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a22:	4a61      	ldr	r2, [pc, #388]	; (8001ba8 <HAL_RCC_OscConfig+0xc38>)
 8001a24:	4b60      	ldr	r3, [pc, #384]	; (8001ba8 <HAL_RCC_OscConfig+0xc38>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2e:	f7fe ffd1 	bl	80009d4 <HAL_GetTick>
 8001a32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	e009      	b.n	8001a4c <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a38:	f7fe ffcc 	bl	80009d4 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b64      	cmp	r3, #100	; 0x64
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e34b      	b.n	80020e4 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <HAL_RCC_OscConfig+0xc38>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ef      	beq.n	8001a38 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d106      	bne.n	8001a70 <HAL_RCC_OscConfig+0xb00>
 8001a62:	4a50      	ldr	r2, [pc, #320]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001a64:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6213      	str	r3, [r2, #32]
 8001a6e:	e02f      	b.n	8001ad0 <HAL_RCC_OscConfig+0xb60>
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0xb24>
 8001a7a:	4a4a      	ldr	r2, [pc, #296]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001a7c:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6213      	str	r3, [r2, #32]
 8001a86:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001a88:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0xb60>
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xb48>
 8001a9e:	4a41      	ldr	r2, [pc, #260]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001aa0:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	4a3e      	ldr	r2, [pc, #248]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001aac:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xb60>
 8001ab8:	4a3a      	ldr	r2, [pc, #232]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001aba:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6213      	str	r3, [r2, #32]
 8001ac4:	4a37      	ldr	r2, [pc, #220]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8087 	beq.w	8001bea <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7fe ff7a 	bl	80009d4 <HAL_GetTick>
 8001ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	e00b      	b.n	8001afe <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7fe ff75 	bl	80009d4 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e2f2      	b.n	80020e4 <HAL_RCC_OscConfig+0x1174>
 8001afe:	2302      	movs	r3, #2
 8001b00:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b08:	fa93 f2a3 	rbit	r2, r3
 8001b0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b10:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b12:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b16:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <HAL_RCC_OscConfig+0xbc4>
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	e03d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xc40>
 8001b34:	2302      	movs	r3, #2
 8001b36:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b46:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	095b      	lsrs	r3, r3, #5
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d102      	bne.n	8001b6a <HAL_RCC_OscConfig+0xbfa>
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	e022      	b.n	8001bb0 <HAL_RCC_OscConfig+0xc40>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b74:	fa93 f2a3 	rbit	r2, r3
 8001b78:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b7c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_OscConfig+0xc3c>
 8001b9a:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <HAL_RCC_OscConfig+0xc34>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	e007      	b.n	8001bb0 <HAL_RCC_OscConfig+0xc40>
 8001ba0:	42420480 	.word	0x42420480
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	4bbf      	ldr	r3, [pc, #764]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001bba:	fa92 f1a2 	rbit	r1, r2
 8001bbe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001bc2:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bc4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	fab2 f282 	clz	r2, r2
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	f002 021f 	and.w	r2, r2, #31
 8001bdc:	40d3      	lsrs	r3, r2
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f43f af7f 	beq.w	8001ae6 <HAL_RCC_OscConfig+0xb76>
 8001be8:	e07e      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bea:	f7fe fef3 	bl	80009d4 <HAL_GetTick>
 8001bee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7fe feee 	bl	80009d4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e26b      	b.n	80020e4 <HAL_RCC_OscConfig+0x1174>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c1e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c24:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d102      	bne.n	8001c42 <HAL_RCC_OscConfig+0xcd2>
 8001c3c:	4b9b      	ldr	r3, [pc, #620]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	e037      	b.n	8001cb2 <HAL_RCC_OscConfig+0xd42>
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c4c:	fa93 f2a3 	rbit	r2, r3
 8001c50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c54:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d102      	bne.n	8001c78 <HAL_RCC_OscConfig+0xd08>
 8001c72:	4b8e      	ldr	r3, [pc, #568]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	e01c      	b.n	8001cb2 <HAL_RCC_OscConfig+0xd42>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c8a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	095b      	lsrs	r3, r3, #5
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d102      	bne.n	8001cae <HAL_RCC_OscConfig+0xd3e>
 8001ca8:	4b80      	ldr	r3, [pc, #512]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	e001      	b.n	8001cb2 <HAL_RCC_OscConfig+0xd42>
 8001cae:	4b7f      	ldr	r3, [pc, #508]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001cbc:	fa92 f1a2 	rbit	r1, r2
 8001cc0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001cc4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cc6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	fab2 f282 	clz	r2, r2
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f002 021f 	and.w	r2, r2, #31
 8001cde:	40d3      	lsrs	r3, r2
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d185      	bne.n	8001bf4 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ce8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf0:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001cf2:	4b6e      	ldr	r3, [pc, #440]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 81ed 	beq.w	80020e2 <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d08:	4b68      	ldr	r3, [pc, #416]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	f000 81e4 	beq.w	80020de <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	f040 8144 	bne.w	8001faa <HAL_RCC_OscConfig+0x103a>
 8001d22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d26:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001d2e:	fa93 f2a3 	rbit	r2, r3
 8001d32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d36:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d3c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001d48:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2300      	movs	r3, #0
 8001d50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7fe fe3f 	bl	80009d4 <HAL_GetTick>
 8001d56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5a:	e009      	b.n	8001d70 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe fe3a 	bl	80009d4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e1b9      	b.n	80020e4 <HAL_RCC_OscConfig+0x1174>
 8001d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d74:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d84:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d8a:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f043 0320 	orr.w	r3, r3, #32
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_OscConfig+0xe38>
 8001da2:	4b42      	ldr	r3, [pc, #264]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	e039      	b.n	8001e1c <HAL_RCC_OscConfig+0xeac>
 8001da8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001db4:	fa93 f2a3 	rbit	r2, r3
 8001db8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dbc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001dbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f043 0320 	orr.w	r3, r3, #32
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_OscConfig+0xe70>
 8001dda:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	e01d      	b.n	8001e1c <HAL_RCC_OscConfig+0xeac>
 8001de0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001dec:	fa93 f2a3 	rbit	r2, r3
 8001df0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001df4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001df6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d102      	bne.n	8001e18 <HAL_RCC_OscConfig+0xea8>
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	e001      	b.n	8001e1c <HAL_RCC_OscConfig+0xeac>
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e20:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001e28:	fa92 f1a2 	rbit	r1, r2
 8001e2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e30:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e32:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	fab2 f282 	clz	r2, r2
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f002 021f 	and.w	r2, r2, #31
 8001e4a:	40d3      	lsrs	r3, r2
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d183      	bne.n	8001d5c <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e54:	4815      	ldr	r0, [pc, #84]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_RCC_OscConfig+0xf3c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	6043      	str	r3, [r0, #4]
 8001e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e84:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e8a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001e96:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fd98 	bl	80009d4 <HAL_GetTick>
 8001ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea8:	e00c      	b.n	8001ec4 <HAL_RCC_OscConfig+0xf54>
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7fe fd90 	bl	80009d4 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e10f      	b.n	80020e4 <HAL_RCC_OscConfig+0x1174>
 8001ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ed8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001eda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ede:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f043 0320 	orr.w	r3, r3, #32
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <HAL_RCC_OscConfig+0xf8c>
 8001ef6:	4b7e      	ldr	r3, [pc, #504]	; (80020f0 <HAL_RCC_OscConfig+0x1180>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x1000>
 8001efc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f08:	fa93 f2a3 	rbit	r2, r3
 8001f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f10:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f043 0320 	orr.w	r3, r3, #32
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d102      	bne.n	8001f34 <HAL_RCC_OscConfig+0xfc4>
 8001f2e:	4b70      	ldr	r3, [pc, #448]	; (80020f0 <HAL_RCC_OscConfig+0x1180>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	e01d      	b.n	8001f70 <HAL_RCC_OscConfig+0x1000>
 8001f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f48:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f043 0320 	orr.w	r3, r3, #32
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_OscConfig+0xffc>
 8001f66:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <HAL_RCC_OscConfig+0x1180>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	e001      	b.n	8001f70 <HAL_RCC_OscConfig+0x1000>
 8001f6c:	4b60      	ldr	r3, [pc, #384]	; (80020f0 <HAL_RCC_OscConfig+0x1180>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f74:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f7c:	fa92 f1a2 	rbit	r1, r2
 8001f80:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f84:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	fab2 f282 	clz	r2, r2
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f042 0220 	orr.w	r2, r2, #32
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	f002 021f 	and.w	r2, r2, #31
 8001f9e:	40d3      	lsrs	r3, r2
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d083      	beq.n	8001eb0 <HAL_RCC_OscConfig+0xf40>
 8001fa8:	e09b      	b.n	80020e2 <HAL_RCC_OscConfig+0x1172>
 8001faa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001fb6:	fa93 f2a3 	rbit	r2, r3
 8001fba:	f107 0320 	add.w	r3, r7, #32
 8001fbe:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fc0:	f107 0320 	add.w	r3, r7, #32
 8001fc4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001fd0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7fe fcfb 	bl	80009d4 <HAL_GetTick>
 8001fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe2:	e009      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7fe fcf6 	bl	80009d4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e075      	b.n	80020e4 <HAL_RCC_OscConfig+0x1174>
 8001ff8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002004:	fa93 f2a3 	rbit	r2, r3
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800200e:	f107 031c 	add.w	r3, r7, #28
 8002012:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f043 0320 	orr.w	r3, r3, #32
 800201e:	b2db      	uxtb	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d102      	bne.n	8002030 <HAL_RCC_OscConfig+0x10c0>
 800202a:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_RCC_OscConfig+0x1180>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	e039      	b.n	80020a4 <HAL_RCC_OscConfig+0x1134>
 8002030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002034:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f107 0318 	add.w	r3, r7, #24
 8002044:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002046:	f107 0318 	add.w	r3, r7, #24
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f043 0320 	orr.w	r3, r3, #32
 8002056:	b2db      	uxtb	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d102      	bne.n	8002068 <HAL_RCC_OscConfig+0x10f8>
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_RCC_OscConfig+0x1180>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	e01d      	b.n	80020a4 <HAL_RCC_OscConfig+0x1134>
 8002068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f043 0320 	orr.w	r3, r3, #32
 800208e:	b2db      	uxtb	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b04      	cmp	r3, #4
 8002098:	d102      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1130>
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_RCC_OscConfig+0x1180>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	e001      	b.n	80020a4 <HAL_RCC_OscConfig+0x1134>
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_RCC_OscConfig+0x1180>)
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a8:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80020b0:	fa92 f1a2 	rbit	r1, r2
 80020b4:	f107 0210 	add.w	r2, r7, #16
 80020b8:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020ba:	f107 0210 	add.w	r2, r7, #16
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	fab2 f282 	clz	r2, r2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	f042 0220 	orr.w	r2, r2, #32
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	f002 021f 	and.w	r2, r2, #31
 80020d2:	40d3      	lsrs	r3, r2
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d183      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x1074>
 80020dc:	e001      	b.n	80020e2 <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000

080020f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b09e      	sub	sp, #120	; 0x78
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002102:	4ba3      	ldr	r3, [pc, #652]	; (8002390 <HAL_RCC_ClockConfig+0x29c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0207 	and.w	r2, r3, #7
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d210      	bcs.n	8002132 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002110:	499f      	ldr	r1, [pc, #636]	; (8002390 <HAL_RCC_ClockConfig+0x29c>)
 8002112:	4b9f      	ldr	r3, [pc, #636]	; (8002390 <HAL_RCC_ClockConfig+0x29c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 0207 	bic.w	r2, r3, #7
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002120:	4b9b      	ldr	r3, [pc, #620]	; (8002390 <HAL_RCC_ClockConfig+0x29c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0207 	and.w	r2, r3, #7
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e1d0      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213e:	4995      	ldr	r1, [pc, #596]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 8002140:	4b94      	ldr	r3, [pc, #592]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8168 	beq.w	800242e <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d15c      	bne.n	8002220 <HAL_RCC_ClockConfig+0x12c>
 8002166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216a:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0320 	orr.w	r3, r3, #32
 8002180:	b2db      	uxtb	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d102      	bne.n	8002192 <HAL_RCC_ClockConfig+0x9e>
 800218c:	4b81      	ldr	r3, [pc, #516]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	e02d      	b.n	80021ee <HAL_RCC_ClockConfig+0xfa>
 8002192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002196:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f043 0320 	orr.w	r3, r3, #32
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d102      	bne.n	80021be <HAL_RCC_ClockConfig+0xca>
 80021b8:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	e017      	b.n	80021ee <HAL_RCC_ClockConfig+0xfa>
 80021be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c2:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f043 0320 	orr.w	r3, r3, #32
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_ClockConfig+0xf6>
 80021e4:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	e001      	b.n	80021ee <HAL_RCC_ClockConfig+0xfa>
 80021ea:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021f2:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80021f6:	fa92 f2a2 	rbit	r2, r2
 80021fa:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021fe:	fab2 f282 	clz	r2, r2
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	f042 0220 	orr.w	r2, r2, #32
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f002 021f 	and.w	r2, r2, #31
 8002210:	40d3      	lsrs	r3, r2
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 80be 	bne.w	8002398 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e159      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d15b      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x1ec>
 8002228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222c:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f043 0320 	orr.w	r3, r3, #32
 8002242:	b2db      	uxtb	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d102      	bne.n	8002254 <HAL_RCC_ClockConfig+0x160>
 800224e:	4b51      	ldr	r3, [pc, #324]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	e02d      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1bc>
 8002254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002258:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f043 0320 	orr.w	r3, r3, #32
 800226e:	b2db      	uxtb	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d102      	bne.n	8002280 <HAL_RCC_ClockConfig+0x18c>
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	e017      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1bc>
 8002280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002284:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f043 0320 	orr.w	r3, r3, #32
 800229a:	b2db      	uxtb	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d102      	bne.n	80022ac <HAL_RCC_ClockConfig+0x1b8>
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	e001      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1bc>
 80022ac:	4b39      	ldr	r3, [pc, #228]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b4:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022b8:	fa92 f2a2 	rbit	r2, r2
 80022bc:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022be:	6a3a      	ldr	r2, [r7, #32]
 80022c0:	fab2 f282 	clz	r2, r2
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	f042 0220 	orr.w	r2, r2, #32
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	f002 021f 	and.w	r2, r2, #31
 80022d2:	40d3      	lsrs	r3, r2
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d15d      	bne.n	8002398 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0f9      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3e0>
 80022e0:	2302      	movs	r3, #2
 80022e2:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022ec:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f043 0320 	orr.w	r3, r3, #32
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d102      	bne.n	800230a <HAL_RCC_ClockConfig+0x216>
 8002304:	4b23      	ldr	r3, [pc, #140]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	e02b      	b.n	8002362 <HAL_RCC_ClockConfig+0x26e>
 800230a:	2302      	movs	r3, #2
 800230c:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f043 0320 	orr.w	r3, r3, #32
 8002322:	b2db      	uxtb	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d102      	bne.n	8002334 <HAL_RCC_ClockConfig+0x240>
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	e016      	b.n	8002362 <HAL_RCC_ClockConfig+0x26e>
 8002334:	2302      	movs	r3, #2
 8002336:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f043 0320 	orr.w	r3, r3, #32
 800234c:	b2db      	uxtb	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b04      	cmp	r3, #4
 8002356:	d102      	bne.n	800235e <HAL_RCC_ClockConfig+0x26a>
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	e001      	b.n	8002362 <HAL_RCC_ClockConfig+0x26e>
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_RCC_ClockConfig+0x2a0>)
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2202      	movs	r2, #2
 8002364:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002368:	fa92 f2a2 	rbit	r2, r2
 800236c:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	fab2 f282 	clz	r2, r2
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	f042 0220 	orr.w	r2, r2, #32
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	f002 021f 	and.w	r2, r2, #31
 8002382:	40d3      	lsrs	r3, r2
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0a1      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3e0>
 8002390:	40022000 	.word	0x40022000
 8002394:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002398:	4950      	ldr	r1, [pc, #320]	; (80024dc <HAL_RCC_ClockConfig+0x3e8>)
 800239a:	4b50      	ldr	r3, [pc, #320]	; (80024dc <HAL_RCC_ClockConfig+0x3e8>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023aa:	f7fe fb13 	bl	80009d4 <HAL_GetTick>
 80023ae:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d112      	bne.n	80023de <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ba:	f7fe fb0b 	bl	80009d4 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e081      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d0:	4b42      	ldr	r3, [pc, #264]	; (80024dc <HAL_RCC_ClockConfig+0x3e8>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d1ee      	bne.n	80023ba <HAL_RCC_ClockConfig+0x2c6>
 80023dc:	e027      	b.n	800242e <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d11d      	bne.n	8002422 <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7fe faf4 	bl	80009d4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e06a      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fe:	4b37      	ldr	r3, [pc, #220]	; (80024dc <HAL_RCC_ClockConfig+0x3e8>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b08      	cmp	r3, #8
 8002408:	d1ee      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x2f4>
 800240a:	e010      	b.n	800242e <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7fe fae2 	bl	80009d4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e058      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002422:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <HAL_RCC_ClockConfig+0x3e8>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ee      	bne.n	800240c <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800242e:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <HAL_RCC_ClockConfig+0x3ec>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0207 	and.w	r2, r3, #7
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d910      	bls.n	800245e <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243c:	4928      	ldr	r1, [pc, #160]	; (80024e0 <HAL_RCC_ClockConfig+0x3ec>)
 800243e:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <HAL_RCC_ClockConfig+0x3ec>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 0207 	bic.w	r2, r3, #7
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_ClockConfig+0x3ec>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0207 	and.w	r2, r3, #7
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d001      	beq.n	800245e <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e03a      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246a:	491c      	ldr	r1, [pc, #112]	; (80024dc <HAL_RCC_ClockConfig+0x3e8>)
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_RCC_ClockConfig+0x3e8>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002488:	4914      	ldr	r1, [pc, #80]	; (80024dc <HAL_RCC_ClockConfig+0x3e8>)
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_RCC_ClockConfig+0x3e8>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800249c:	f000 f826 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80024a0:	4601      	mov	r1, r0
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_RCC_ClockConfig+0x3e8>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024aa:	23f0      	movs	r3, #240	; 0xf0
 80024ac:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HAL_RCC_ClockConfig+0x3f0>)
 80024c2:	5cd3      	ldrb	r3, [r2, r3]
 80024c4:	fa21 f303 	lsr.w	r3, r1, r3
 80024c8:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <HAL_RCC_ClockConfig+0x3f4>)
 80024ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe fa57 	bl	8000980 <HAL_InitTick>
  
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3778      	adds	r7, #120	; 0x78
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40022000 	.word	0x40022000
 80024e4:	08003b10 	.word	0x08003b10
 80024e8:	20000428 	.word	0x20000428

080024ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b08b      	sub	sp, #44	; 0x2c
 80024f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b04      	cmp	r3, #4
 8002514:	d002      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x30>
 8002516:	2b08      	cmp	r3, #8
 8002518:	d003      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x36>
 800251a:	e03c      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800251e:	623b      	str	r3, [r7, #32]
      break;
 8002520:	e03c      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002528:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800252c:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
 8002540:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
 8002544:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f003 020f 	and.w	r2, r3, #15
 800254e:	230f      	movs	r3, #15
 8002550:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002574:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	e004      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	623b      	str	r3, [r7, #32]
      break;
 8002594:	e002      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002598:	623b      	str	r3, [r7, #32]
      break;
 800259a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259c:	6a3b      	ldr	r3, [r7, #32]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	372c      	adds	r7, #44	; 0x2c
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	007a1200 	.word	0x007a1200
 80025b4:	08003b28 	.word	0x08003b28
 80025b8:	08003b38 	.word	0x08003b38
 80025bc:	003d0900 	.word	0x003d0900

080025c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000428 	.word	0x20000428

080025d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025de:	f7ff ffef 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80025e2:	4601      	mov	r1, r0
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80025f0:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	08003b20 	.word	0x08003b20

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002622:	f7ff ffcd 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8002626:	4601      	mov	r1, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002630:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002634:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_RCC_GetPCLK2Freq+0x40>)
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	08003b20 	.word	0x08003b20

08002660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b092      	sub	sp, #72	; 0x48
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80ef 	beq.w	800285c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002684:	4b96      	ldr	r3, [pc, #600]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10e      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	4a93      	ldr	r2, [pc, #588]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002692:	4b93      	ldr	r3, [pc, #588]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	61d3      	str	r3, [r2, #28]
 800269c:	4b90      	ldr	r3, [pc, #576]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b8d      	ldr	r3, [pc, #564]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d118      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ba:	4a8a      	ldr	r2, [pc, #552]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80026bc:	4b89      	ldr	r3, [pc, #548]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7fe f985 	bl	80009d4 <HAL_GetTick>
 80026ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fe f981 	bl	80009d4 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	; 0x64
 80026da:	d901      	bls.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0fa      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	4b80      	ldr	r3, [pc, #512]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ec:	4b7c      	ldr	r3, [pc, #496]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 809c 	beq.w	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002708:	429a      	cmp	r2, r3
 800270a:	f000 8094 	beq.w	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800270e:	4b74      	ldr	r3, [pc, #464]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002726:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	461a      	mov	r2, r3
 8002730:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002732:	4413      	add	r3, r2
 8002734:	461a      	mov	r2, r3
 8002736:	2301      	movs	r3, #1
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002748:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	461a      	mov	r2, r3
 8002752:	4b65      	ldr	r3, [pc, #404]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002754:	4413      	add	r3, r2
 8002756:	461a      	mov	r2, r3
 8002758:	2300      	movs	r3, #0
 800275a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800275c:	4a60      	ldr	r2, [pc, #384]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800275e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002760:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d064      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe f932 	bl	80009d4 <HAL_GetTick>
 8002770:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7fe f92e 	bl	80009d4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0a5      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800278a:	2302      	movs	r3, #2
 800278c:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002796:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027ae:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	e02b      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80027b4:	2302      	movs	r3, #2
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d102      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80027d8:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	e016      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80027de:	2302      	movs	r3, #2
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d102      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002802:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	e001      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8002808:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	2202      	movs	r2, #2
 800280e:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002812:	fa92 f2a2 	rbit	r2, r2
 8002816:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	fab2 f282 	clz	r2, r2
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f002 021f 	and.w	r2, r2, #31
 800282c:	40d3      	lsrs	r3, r2
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d09e      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002836:	492a      	ldr	r1, [pc, #168]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002838:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4313      	orrs	r3, r2
 8002846:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002848:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002868:	491d      	ldr	r1, [pc, #116]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	4313      	orrs	r3, r2
 8002878:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002886:	4916      	ldr	r1, [pc, #88]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	f023 0210 	bic.w	r2, r3, #16
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028a4:	490e      	ldr	r1, [pc, #56]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028c2:	4907      	ldr	r1, [pc, #28]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3748      	adds	r7, #72	; 0x48
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40007000 	.word	0x40007000
 80028e8:	42420400 	.word	0x42420400

080028ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e043      	b.n	8002986 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fd ffee 	bl	80008f4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2224      	movs	r2, #36	; 0x24
 800291c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f82d 	bl	8002990 <UART_SetConfig>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e022      	b.n	8002986 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f987 	bl	8002c5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	6852      	ldr	r2, [r2, #4]
 8002958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800295c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	6892      	ldr	r2, [r2, #8]
 8002968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800296c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa0e 	bl	8002da0 <UART_CheckIdleState>
 8002984:	4603      	mov	r3, r0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop

08002990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800299c:	2310      	movs	r3, #16
 800299e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000;
 80029a0:	2300      	movs	r3, #0
 80029a2:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000;
 80029a4:	2300      	movs	r3, #0
 80029a6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	4b9e      	ldr	r3, [pc, #632]	; (8002c48 <UART_SetConfig+0x2b8>)
 80029d0:	400b      	ands	r3, r1
 80029d2:	68f9      	ldr	r1, [r7, #12]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	6852      	ldr	r2, [r2, #4]
 80029e2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68d2      	ldr	r2, [r2, #12]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	6892      	ldr	r2, [r2, #8]
 8002a04:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a8e      	ldr	r2, [pc, #568]	; (8002c4c <UART_SetConfig+0x2bc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d121      	bne.n	8002a5c <UART_SetConfig+0xcc>
 8002a18:	4b8d      	ldr	r3, [pc, #564]	; (8002c50 <UART_SetConfig+0x2c0>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d817      	bhi.n	8002a54 <UART_SetConfig+0xc4>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <UART_SetConfig+0x9c>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a3d 	.word	0x08002a3d
 8002a30:	08002a49 	.word	0x08002a49
 8002a34:	08002a4f 	.word	0x08002a4f
 8002a38:	08002a43 	.word	0x08002a43
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	75fb      	strb	r3, [r7, #23]
 8002a40:	e01e      	b.n	8002a80 <UART_SetConfig+0xf0>
 8002a42:	2302      	movs	r3, #2
 8002a44:	75fb      	strb	r3, [r7, #23]
 8002a46:	e01b      	b.n	8002a80 <UART_SetConfig+0xf0>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	75fb      	strb	r3, [r7, #23]
 8002a4c:	e018      	b.n	8002a80 <UART_SetConfig+0xf0>
 8002a4e:	2308      	movs	r3, #8
 8002a50:	75fb      	strb	r3, [r7, #23]
 8002a52:	e015      	b.n	8002a80 <UART_SetConfig+0xf0>
 8002a54:	2310      	movs	r3, #16
 8002a56:	75fb      	strb	r3, [r7, #23]
 8002a58:	bf00      	nop
 8002a5a:	e011      	b.n	8002a80 <UART_SetConfig+0xf0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a7c      	ldr	r2, [pc, #496]	; (8002c54 <UART_SetConfig+0x2c4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d102      	bne.n	8002a6c <UART_SetConfig+0xdc>
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]
 8002a6a:	e009      	b.n	8002a80 <UART_SetConfig+0xf0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a79      	ldr	r2, [pc, #484]	; (8002c58 <UART_SetConfig+0x2c8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d102      	bne.n	8002a7c <UART_SetConfig+0xec>
 8002a76:	2300      	movs	r3, #0
 8002a78:	75fb      	strb	r3, [r7, #23]
 8002a7a:	e001      	b.n	8002a80 <UART_SetConfig+0xf0>
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	75fb      	strb	r3, [r7, #23]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a88:	d170      	bne.n	8002b6c <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d857      	bhi.n	8002b40 <UART_SetConfig+0x1b0>
 8002a90:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <UART_SetConfig+0x108>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002abd 	.word	0x08002abd
 8002a9c:	08002ad9 	.word	0x08002ad9
 8002aa0:	08002af5 	.word	0x08002af5
 8002aa4:	08002b41 	.word	0x08002b41
 8002aa8:	08002b0f 	.word	0x08002b0f
 8002aac:	08002b41 	.word	0x08002b41
 8002ab0:	08002b41 	.word	0x08002b41
 8002ab4:	08002b41 	.word	0x08002b41
 8002ab8:	08002b2b 	.word	0x08002b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002abc:	f7ff fd8c 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	005a      	lsls	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	441a      	add	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	82bb      	strh	r3, [r7, #20]
        break;
 8002ad6:	e036      	b.n	8002b46 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ad8:	f7ff fda0 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8002adc:	4603      	mov	r3, r0
 8002ade:	005a      	lsls	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	441a      	add	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	82bb      	strh	r3, [r7, #20]
        break;
 8002af2:	e028      	b.n	8002b46 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002afe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6852      	ldr	r2, [r2, #4]
 8002b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b0a:	82bb      	strh	r3, [r7, #20]
        break;
 8002b0c:	e01b      	b.n	8002b46 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b0e:	f7ff fced 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 8002b12:	4603      	mov	r3, r0
 8002b14:	005a      	lsls	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	441a      	add	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	82bb      	strh	r3, [r7, #20]
        break;
 8002b28:	e00d      	b.n	8002b46 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	82bb      	strh	r3, [r7, #20]
        break;
 8002b3e:	e002      	b.n	8002b46 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	74fb      	strb	r3, [r7, #19]
        break;
 8002b44:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 8002b46:	8abb      	ldrh	r3, [r7, #20]
 8002b48:	f023 030f 	bic.w	r3, r3, #15
 8002b4c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002b4e:	8abb      	ldrh	r3, [r7, #20]
 8002b50:	105b      	asrs	r3, r3, #1
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	897a      	ldrh	r2, [r7, #10]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	e068      	b.n	8002c3e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d862      	bhi.n	8002c38 <UART_SetConfig+0x2a8>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <UART_SetConfig+0x1e8>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b9d 	.word	0x08002b9d
 8002b7c:	08002bbd 	.word	0x08002bbd
 8002b80:	08002bdd 	.word	0x08002bdd
 8002b84:	08002c39 	.word	0x08002c39
 8002b88:	08002bfd 	.word	0x08002bfd
 8002b8c:	08002c39 	.word	0x08002c39
 8002b90:	08002c39 	.word	0x08002c39
 8002b94:	08002c39 	.word	0x08002c39
 8002b98:	08002c1d 	.word	0x08002c1d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681c      	ldr	r4, [r3, #0]
 8002ba0:	f7ff fd1a 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	441a      	add	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	60e3      	str	r3, [r4, #12]
        break;
 8002bba:	e040      	b.n	8002c3e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681c      	ldr	r4, [r3, #0]
 8002bc0:	f7ff fd2c 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	441a      	add	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	60e3      	str	r3, [r4, #12]
        break;
 8002bda:	e030      	b.n	8002c3e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002bea:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	6849      	ldr	r1, [r1, #4]
 8002bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	60d3      	str	r3, [r2, #12]
        break;
 8002bfa:	e020      	b.n	8002c3e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681c      	ldr	r4, [r3, #0]
 8002c00:	f7ff fc74 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	441a      	add	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	60e3      	str	r3, [r4, #12]
        break;
 8002c1a:	e010      	b.n	8002c3e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6852      	ldr	r2, [r2, #4]
 8002c24:	0852      	lsrs	r2, r2, #1
 8002c26:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6852      	ldr	r2, [r2, #4]
 8002c2e:	fbb1 f2f2 	udiv	r2, r1, r2
 8002c32:	b292      	uxth	r2, r2
 8002c34:	60da      	str	r2, [r3, #12]
        break;
 8002c36:	e002      	b.n	8002c3e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	74fb      	strb	r3, [r7, #19]
        break;
 8002c3c:	bf00      	nop
    }
  }

  return ret;
 8002c3e:	7cfb      	ldrb	r3, [r7, #19]

}
 8002c40:	4618      	mov	r0, r3
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd90      	pop	{r4, r7, pc}
 8002c48:	efff69f3 	.word	0xefff69f3
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40004400 	.word	0x40004400
 8002c58:	40004800 	.word	0x40004800

08002c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	6852      	ldr	r2, [r2, #4]
 8002c7a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	6852      	ldr	r2, [r2, #4]
 8002c9c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	6852      	ldr	r2, [r2, #4]
 8002cbe:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	6852      	ldr	r2, [r2, #4]
 8002ce0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	6892      	ldr	r2, [r2, #8]
 8002d02:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	6892      	ldr	r2, [r2, #8]
 8002d24:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01a      	beq.n	8002d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	6852      	ldr	r2, [r2, #4]
 8002d46:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5a:	d10a      	bne.n	8002d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	6852      	ldr	r2, [r2, #4]
 8002d66:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	6852      	ldr	r2, [r2, #4]
 8002d88:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d90:	430a      	orrs	r2, r1
 8002d92:	605a      	str	r2, [r3, #4]
  }
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00c      	beq.n	8002dd6 <UART_CheckIdleState+0x36>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f82a 	bl	8002e20 <UART_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <UART_CheckIdleState+0x36>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e020      	b.n	8002e18 <UART_CheckIdleState+0x78>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00c      	beq.n	8002dfe <UART_CheckIdleState+0x5e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de8:	2200      	movs	r2, #0
 8002dea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f816 	bl	8002e20 <UART_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <UART_CheckIdleState+0x5e>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e00c      	b.n	8002e18 <UART_CheckIdleState+0x78>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7fd fdd0 	bl	80009d4 <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f040 8084 	bne.w	8002f46 <UART_WaitOnFlagUntilTimeout+0x126>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002e3e:	e03c      	b.n	8002eba <UART_WaitOnFlagUntilTimeout+0x9a>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e46:	d038      	beq.n	8002eba <UART_WaitOnFlagUntilTimeout+0x9a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x3e>
 8002e4e:	f7fd fdc1 	bl	80009d4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	1ad2      	subs	r2, r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d92d      	bls.n	8002eba <UART_WaitOnFlagUntilTimeout+0x9a>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e6c:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	f022 0220 	bic.w	r2, r2, #32
 8002e7c:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e8c:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	6892      	ldr	r2, [r2, #8]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e04e      	b.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x138>
  uint32_t tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d1ba      	bne.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x20>
 8002eca:	e044      	b.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x136>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d038      	beq.n	8002f46 <UART_WaitOnFlagUntilTimeout+0x126>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0xca>
 8002eda:	f7fd fd7b 	bl	80009d4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	1ad2      	subs	r2, r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d92d      	bls.n	8002f46 <UART_WaitOnFlagUntilTimeout+0x126>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef8:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	f022 0220 	bic.w	r2, r2, #32
 8002f08:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f18:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	6892      	ldr	r2, [r2, #8]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e008      	b.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x138>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69da      	ldr	r2, [r3, #28]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	401a      	ands	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d0ba      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0xac>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e01d      	b.n	8002fae <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd fc72 	bl	8000870 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f000 f84c 	bl	800303c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop

08002fb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	6839      	ldr	r1, [r7, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 faa8 	bl	8003520 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a15      	ldr	r2, [pc, #84]	; (800302c <HAL_TIM_PWM_Start+0x74>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_TIM_PWM_Start+0x40>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a14      	ldr	r2, [pc, #80]	; (8003030 <HAL_TIM_PWM_Start+0x78>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIM_PWM_Start+0x40>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a12      	ldr	r2, [pc, #72]	; (8003034 <HAL_TIM_PWM_Start+0x7c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_PWM_Start+0x40>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a11      	ldr	r2, [pc, #68]	; (8003038 <HAL_TIM_PWM_Start+0x80>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIM_PWM_Start+0x44>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_TIM_PWM_Start+0x46>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800300c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
} 
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40014000 	.word	0x40014000
 8003034:	40014400 	.word	0x40014400
 8003038:	40014800 	.word	0x40014800

0800303c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a2e      	ldr	r2, [pc, #184]	; (800310c <TIM_Base_SetConfig+0xd0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <TIM_Base_SetConfig+0x2c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305e:	d003      	beq.n	8003068 <TIM_Base_SetConfig+0x2c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <TIM_Base_SetConfig+0xd4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d108      	bne.n	800307a <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a23      	ldr	r2, [pc, #140]	; (800310c <TIM_Base_SetConfig+0xd0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <TIM_Base_SetConfig+0x6e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d00f      	beq.n	80030aa <TIM_Base_SetConfig+0x6e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a20      	ldr	r2, [pc, #128]	; (8003110 <TIM_Base_SetConfig+0xd4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00b      	beq.n	80030aa <TIM_Base_SetConfig+0x6e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1f      	ldr	r2, [pc, #124]	; (8003114 <TIM_Base_SetConfig+0xd8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <TIM_Base_SetConfig+0x6e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1e      	ldr	r2, [pc, #120]	; (8003118 <TIM_Base_SetConfig+0xdc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_Base_SetConfig+0x6e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1d      	ldr	r2, [pc, #116]	; (800311c <TIM_Base_SetConfig+0xe0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d108      	bne.n	80030bc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a0d      	ldr	r2, [pc, #52]	; (800310c <TIM_Base_SetConfig+0xd0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <TIM_Base_SetConfig+0xb6>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a0d      	ldr	r2, [pc, #52]	; (8003114 <TIM_Base_SetConfig+0xd8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <TIM_Base_SetConfig+0xb6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <TIM_Base_SetConfig+0xdc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d003      	beq.n	80030f2 <TIM_Base_SetConfig+0xb6>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a0b      	ldr	r2, [pc, #44]	; (800311c <TIM_Base_SetConfig+0xe0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d103      	bne.n	80030fa <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	615a      	str	r2, [r3, #20]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40000400 	.word	0x40000400
 8003114:	40014000 	.word	0x40014000
 8003118:	40014400 	.word	0x40014400
 800311c:	40014800 	.word	0x40014800

08003120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f023 0201 	bic.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0303 	bic.w	r3, r3, #3
 8003166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f023 0302 	bic.w	r3, r3, #2
 8003178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a28      	ldr	r2, [pc, #160]	; (8003228 <TIM_OC1_SetConfig+0x108>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00b      	beq.n	80031a4 <TIM_OC1_SetConfig+0x84>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a27      	ldr	r2, [pc, #156]	; (800322c <TIM_OC1_SetConfig+0x10c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d007      	beq.n	80031a4 <TIM_OC1_SetConfig+0x84>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a26      	ldr	r2, [pc, #152]	; (8003230 <TIM_OC1_SetConfig+0x110>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d003      	beq.n	80031a4 <TIM_OC1_SetConfig+0x84>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a25      	ldr	r2, [pc, #148]	; (8003234 <TIM_OC1_SetConfig+0x114>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10c      	bne.n	80031be <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f023 0308 	bic.w	r3, r3, #8
 80031aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f023 0304 	bic.w	r3, r3, #4
 80031bc:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a19      	ldr	r2, [pc, #100]	; (8003228 <TIM_OC1_SetConfig+0x108>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00b      	beq.n	80031de <TIM_OC1_SetConfig+0xbe>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a18      	ldr	r2, [pc, #96]	; (800322c <TIM_OC1_SetConfig+0x10c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <TIM_OC1_SetConfig+0xbe>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a17      	ldr	r2, [pc, #92]	; (8003230 <TIM_OC1_SetConfig+0x110>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d003      	beq.n	80031de <TIM_OC1_SetConfig+0xbe>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a16      	ldr	r2, [pc, #88]	; (8003234 <TIM_OC1_SetConfig+0x114>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d111      	bne.n	8003202 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	621a      	str	r2, [r3, #32]
} 
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40014000 	.word	0x40014000
 8003230:	40014400 	.word	0x40014400
 8003234:	40014800 	.word	0x40014800

08003238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	f023 0210 	bic.w	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f023 0320 	bic.w	r3, r3, #32
 8003292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a24      	ldr	r2, [pc, #144]	; (8003334 <TIM_OC2_SetConfig+0xfc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d10d      	bne.n	80032c4 <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c2:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <TIM_OC2_SetConfig+0xfc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <TIM_OC2_SetConfig+0xac>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a1a      	ldr	r2, [pc, #104]	; (8003338 <TIM_OC2_SetConfig+0x100>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <TIM_OC2_SetConfig+0xac>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a19      	ldr	r2, [pc, #100]	; (800333c <TIM_OC2_SetConfig+0x104>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_OC2_SetConfig+0xac>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a18      	ldr	r2, [pc, #96]	; (8003340 <TIM_OC2_SetConfig+0x108>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d113      	bne.n	800330c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	621a      	str	r2, [r3, #32]
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800

08003344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800339c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a23      	ldr	r2, [pc, #140]	; (800343c <TIM_OC3_SetConfig+0xf8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d10d      	bne.n	80033ce <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033cc:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1a      	ldr	r2, [pc, #104]	; (800343c <TIM_OC3_SetConfig+0xf8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00b      	beq.n	80033ee <TIM_OC3_SetConfig+0xaa>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <TIM_OC3_SetConfig+0xfc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <TIM_OC3_SetConfig+0xaa>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a18      	ldr	r2, [pc, #96]	; (8003444 <TIM_OC3_SetConfig+0x100>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d003      	beq.n	80033ee <TIM_OC3_SetConfig+0xaa>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a17      	ldr	r2, [pc, #92]	; (8003448 <TIM_OC3_SetConfig+0x104>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d113      	bne.n	8003416 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	621a      	str	r2, [r3, #32]
}
 8003430:	bf00      	nop
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40014000 	.word	0x40014000
 8003444:	40014400 	.word	0x40014400
 8003448:	40014800 	.word	0x40014800

0800344c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003492:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	031b      	lsls	r3, r3, #12
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a16      	ldr	r2, [pc, #88]	; (8003510 <TIM_OC4_SetConfig+0xc4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00b      	beq.n	80034d4 <TIM_OC4_SetConfig+0x88>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a15      	ldr	r2, [pc, #84]	; (8003514 <TIM_OC4_SetConfig+0xc8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <TIM_OC4_SetConfig+0x88>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a14      	ldr	r2, [pc, #80]	; (8003518 <TIM_OC4_SetConfig+0xcc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_OC4_SetConfig+0x88>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a13      	ldr	r2, [pc, #76]	; (800351c <TIM_OC4_SetConfig+0xd0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d109      	bne.n	80034e8 <TIM_OC4_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	019b      	lsls	r3, r3, #6
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40014000 	.word	0x40014000
 8003518:	40014400 	.word	0x40014400
 800351c:	40014800 	.word	0x40014800

08003520 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003530:	2201      	movs	r2, #1
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a1a      	ldr	r2, [r3, #32]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	43db      	mvns	r3, r3
 8003542:	401a      	ands	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1a      	ldr	r2, [r3, #32]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	431a      	orrs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop

08003568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800357e:	2302      	movs	r3, #2
 8003580:	e105      	b.n	800378e <HAL_TIM_PWM_ConfigChannel+0x226>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b14      	cmp	r3, #20
 8003596:	f200 80f0 	bhi.w	800377a <HAL_TIM_PWM_ConfigChannel+0x212>
 800359a:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	080035f5 	.word	0x080035f5
 80035a4:	0800377b 	.word	0x0800377b
 80035a8:	0800377b 	.word	0x0800377b
 80035ac:	0800377b 	.word	0x0800377b
 80035b0:	08003635 	.word	0x08003635
 80035b4:	0800377b 	.word	0x0800377b
 80035b8:	0800377b 	.word	0x0800377b
 80035bc:	0800377b 	.word	0x0800377b
 80035c0:	08003677 	.word	0x08003677
 80035c4:	0800377b 	.word	0x0800377b
 80035c8:	0800377b 	.word	0x0800377b
 80035cc:	0800377b 	.word	0x0800377b
 80035d0:	080036b7 	.word	0x080036b7
 80035d4:	0800377b 	.word	0x0800377b
 80035d8:	0800377b 	.word	0x0800377b
 80035dc:	0800377b 	.word	0x0800377b
 80035e0:	080036f9 	.word	0x080036f9
 80035e4:	0800377b 	.word	0x0800377b
 80035e8:	0800377b 	.word	0x0800377b
 80035ec:	0800377b 	.word	0x0800377b
 80035f0:	08003739 	.word	0x08003739
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fd90 	bl	8003120 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	6992      	ldr	r2, [r2, #24]
 800360a:	f042 0208 	orr.w	r2, r2, #8
 800360e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	6992      	ldr	r2, [r2, #24]
 800361a:	f022 0204 	bic.w	r2, r2, #4
 800361e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	6991      	ldr	r1, [r2, #24]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	6912      	ldr	r2, [r2, #16]
 800362e:	430a      	orrs	r2, r1
 8003630:	619a      	str	r2, [r3, #24]
    }
    break;
 8003632:	e0a3      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fdfc 	bl	8003238 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	6992      	ldr	r2, [r2, #24]
 800364a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800364e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	6992      	ldr	r2, [r2, #24]
 800365a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	6991      	ldr	r1, [r2, #24]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	6912      	ldr	r2, [r2, #16]
 800366e:	0212      	lsls	r2, r2, #8
 8003670:	430a      	orrs	r2, r1
 8003672:	619a      	str	r2, [r3, #24]
    }
    break;
 8003674:	e082      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fe61 	bl	8003344 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	69d2      	ldr	r2, [r2, #28]
 800368c:	f042 0208 	orr.w	r2, r2, #8
 8003690:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	69d2      	ldr	r2, [r2, #28]
 800369c:	f022 0204 	bic.w	r2, r2, #4
 80036a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	69d1      	ldr	r1, [r2, #28]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	6912      	ldr	r2, [r2, #16]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	61da      	str	r2, [r3, #28]
    }
    break;
 80036b4:	e062      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fec5 	bl	800344c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	69d2      	ldr	r2, [r2, #28]
 80036cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	69d2      	ldr	r2, [r2, #28]
 80036dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	69d1      	ldr	r1, [r2, #28]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	6912      	ldr	r2, [r2, #16]
 80036f0:	0212      	lsls	r2, r2, #8
 80036f2:	430a      	orrs	r2, r1
 80036f4:	61da      	str	r2, [r3, #28]
    }
    break;
 80036f6:	e041      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f92c 	bl	800395c <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800370e:	f042 0208 	orr.w	r2, r2, #8
 8003712:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800371e:	f022 0204 	bic.w	r2, r2, #4
 8003722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	6912      	ldr	r2, [r2, #16]
 8003732:	430a      	orrs	r2, r1
 8003734:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8003736:	e021      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f970 	bl	8003a24 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800374e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003752:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800375e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	6912      	ldr	r2, [r2, #16]
 8003772:	0212      	lsls	r2, r2, #8
 8003774:	430a      	orrs	r2, r1
 8003776:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8003778:	e000      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 800377a:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop

08003798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e038      	b.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d108      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	4313      	orrs	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
} 
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40012c00 	.word	0x40012c00

08003834 <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800384c:	2302      	movs	r3, #2
 800384e:	e07c      	b.n	800394a <HAL_TIMEx_ConfigBreakDeadTime+0x116>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a3e      	ldr	r2, [pc, #248]	; (8003958 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d13d      	bne.n	80038de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8003868:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF |
                 TIM_BDTR_BK2F | TIM_BDTR_BK2E | TIM_BDTR_BK2P);

    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	051b      	lsls	r3, r3, #20
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2State;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e02c      	b.n	8003938 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
  }
  else
  {
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	0d1b      	lsrs	r3, r3, #20
 80038e2:	051b      	lsls	r3, r3, #20
 80038e4:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF);
    
    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40012c00 	.word	0x40012c00

0800395c <TIM_OC5_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039ac:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <TIM_OC5_SetConfig+0xb8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00b      	beq.n	80039da <TIM_OC5_SetConfig+0x7e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <TIM_OC5_SetConfig+0xbc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d007      	beq.n	80039da <TIM_OC5_SetConfig+0x7e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <TIM_OC5_SetConfig+0xc0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_OC5_SetConfig+0x7e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <TIM_OC5_SetConfig+0xc4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d109      	bne.n	80039ee <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800

08003a24 <TIM_OC6_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a62:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	051b      	lsls	r3, r3, #20
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a16      	ldr	r2, [pc, #88]	; (8003ae0 <TIM_OC6_SetConfig+0xbc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <TIM_OC6_SetConfig+0x80>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <TIM_OC6_SetConfig+0xc0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <TIM_OC6_SetConfig+0x80>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <TIM_OC6_SetConfig+0xc4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_OC6_SetConfig+0x80>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a13      	ldr	r2, [pc, #76]	; (8003aec <TIM_OC6_SetConfig+0xc8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d109      	bne.n	8003ab8 <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	029b      	lsls	r3, r3, #10
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	621a      	str	r2, [r3, #32]
} 
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	40014400 	.word	0x40014400
 8003aec:	40014800 	.word	0x40014800

08003af0 <_init>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	bf00      	nop
 8003af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af6:	bc08      	pop	{r3}
 8003af8:	469e      	mov	lr, r3
 8003afa:	4770      	bx	lr

08003afc <_fini>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	bf00      	nop
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr
