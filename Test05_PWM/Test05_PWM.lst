
Test05_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003520  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080036e8  080036e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000042c  20000000  080036ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002042c  2**0
                  CONTENTS
  7 .bss          0000009c  2000042c  2000042c  0002042c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004c8  200004c8  0002042c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00003cdd  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000086c3  00000000  00000000  00024139  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001155  00000000  00000000  0002c7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008b8  00000000  00000000  0002d958  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000810  00000000  00000000  0002e210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004d68  00000000  00000000  0002ea20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002900  00000000  00000000  00033788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000006e  00000000  00000000  00036088  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002388  00000000  00000000  000360f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000042f 	.word	0x2000042f
 80001a0:	2000042c 	.word	0x2000042c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	2000042c 	.word	0x2000042c
 80001c4:	2000042c 	.word	0x2000042c
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000042c 	.word	0x2000042c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003690 	.word	0x08003690

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000430 	.word	0x20000430
 8000220:	08003690 	.word	0x08003690
 8000224:	2000042c 	.word	0x2000042c
 8000228:	00000000 	.word	0x00000000

0800022c <__aeabi_drsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000230:	e002      	b.n	8000238 <__adddf3>
 8000232:	bf00      	nop

08000234 <__aeabi_dsub>:
 8000234:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000238 <__adddf3>:
 8000238:	b530      	push	{r4, r5, lr}
 800023a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000242:	ea94 0f05 	teq	r4, r5
 8000246:	bf08      	it	eq
 8000248:	ea90 0f02 	teqeq	r0, r2
 800024c:	bf1f      	itttt	ne
 800024e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000252:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000256:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025e:	f000 80e2 	beq.w	8000426 <__adddf3+0x1ee>
 8000262:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000266:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026a:	bfb8      	it	lt
 800026c:	426d      	neglt	r5, r5
 800026e:	dd0c      	ble.n	800028a <__adddf3+0x52>
 8000270:	442c      	add	r4, r5
 8000272:	ea80 0202 	eor.w	r2, r0, r2
 8000276:	ea81 0303 	eor.w	r3, r1, r3
 800027a:	ea82 0000 	eor.w	r0, r2, r0
 800027e:	ea83 0101 	eor.w	r1, r3, r1
 8000282:	ea80 0202 	eor.w	r2, r0, r2
 8000286:	ea81 0303 	eor.w	r3, r1, r3
 800028a:	2d36      	cmp	r5, #54	; 0x36
 800028c:	bf88      	it	hi
 800028e:	bd30      	pophi	{r4, r5, pc}
 8000290:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000294:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000298:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800029c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x70>
 80002a2:	4240      	negs	r0, r0
 80002a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x84>
 80002b6:	4252      	negs	r2, r2
 80002b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002bc:	ea94 0f05 	teq	r4, r5
 80002c0:	f000 80a7 	beq.w	8000412 <__adddf3+0x1da>
 80002c4:	f1a4 0401 	sub.w	r4, r4, #1
 80002c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002cc:	db0d      	blt.n	80002ea <__adddf3+0xb2>
 80002ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d2:	fa22 f205 	lsr.w	r2, r2, r5
 80002d6:	1880      	adds	r0, r0, r2
 80002d8:	f141 0100 	adc.w	r1, r1, #0
 80002dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e0:	1880      	adds	r0, r0, r2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	4159      	adcs	r1, r3
 80002e8:	e00e      	b.n	8000308 <__adddf3+0xd0>
 80002ea:	f1a5 0520 	sub.w	r5, r5, #32
 80002ee:	f10e 0e20 	add.w	lr, lr, #32
 80002f2:	2a01      	cmp	r2, #1
 80002f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f8:	bf28      	it	cs
 80002fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	18c0      	adds	r0, r0, r3
 8000304:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800030c:	d507      	bpl.n	800031e <__adddf3+0xe6>
 800030e:	f04f 0e00 	mov.w	lr, #0
 8000312:	f1dc 0c00 	rsbs	ip, ip, #0
 8000316:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031a:	eb6e 0101 	sbc.w	r1, lr, r1
 800031e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000322:	d31b      	bcc.n	800035c <__adddf3+0x124>
 8000324:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000328:	d30c      	bcc.n	8000344 <__adddf3+0x10c>
 800032a:	0849      	lsrs	r1, r1, #1
 800032c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000330:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000334:	f104 0401 	add.w	r4, r4, #1
 8000338:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800033c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000340:	f080 809a 	bcs.w	8000478 <__adddf3+0x240>
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	bf08      	it	eq
 800034a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034e:	f150 0000 	adcs.w	r0, r0, #0
 8000352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000356:	ea41 0105 	orr.w	r1, r1, r5
 800035a:	bd30      	pop	{r4, r5, pc}
 800035c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000360:	4140      	adcs	r0, r0
 8000362:	eb41 0101 	adc.w	r1, r1, r1
 8000366:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036a:	f1a4 0401 	sub.w	r4, r4, #1
 800036e:	d1e9      	bne.n	8000344 <__adddf3+0x10c>
 8000370:	f091 0f00 	teq	r1, #0
 8000374:	bf04      	itt	eq
 8000376:	4601      	moveq	r1, r0
 8000378:	2000      	moveq	r0, #0
 800037a:	fab1 f381 	clz	r3, r1
 800037e:	bf08      	it	eq
 8000380:	3320      	addeq	r3, #32
 8000382:	f1a3 030b 	sub.w	r3, r3, #11
 8000386:	f1b3 0220 	subs.w	r2, r3, #32
 800038a:	da0c      	bge.n	80003a6 <__adddf3+0x16e>
 800038c:	320c      	adds	r2, #12
 800038e:	dd08      	ble.n	80003a2 <__adddf3+0x16a>
 8000390:	f102 0c14 	add.w	ip, r2, #20
 8000394:	f1c2 020c 	rsb	r2, r2, #12
 8000398:	fa01 f00c 	lsl.w	r0, r1, ip
 800039c:	fa21 f102 	lsr.w	r1, r1, r2
 80003a0:	e00c      	b.n	80003bc <__adddf3+0x184>
 80003a2:	f102 0214 	add.w	r2, r2, #20
 80003a6:	bfd8      	it	le
 80003a8:	f1c2 0c20 	rsble	ip, r2, #32
 80003ac:	fa01 f102 	lsl.w	r1, r1, r2
 80003b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b4:	bfdc      	itt	le
 80003b6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ba:	4090      	lslle	r0, r2
 80003bc:	1ae4      	subs	r4, r4, r3
 80003be:	bfa2      	ittt	ge
 80003c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c4:	4329      	orrge	r1, r5
 80003c6:	bd30      	popge	{r4, r5, pc}
 80003c8:	ea6f 0404 	mvn.w	r4, r4
 80003cc:	3c1f      	subs	r4, #31
 80003ce:	da1c      	bge.n	800040a <__adddf3+0x1d2>
 80003d0:	340c      	adds	r4, #12
 80003d2:	dc0e      	bgt.n	80003f2 <__adddf3+0x1ba>
 80003d4:	f104 0414 	add.w	r4, r4, #20
 80003d8:	f1c4 0220 	rsb	r2, r4, #32
 80003dc:	fa20 f004 	lsr.w	r0, r0, r4
 80003e0:	fa01 f302 	lsl.w	r3, r1, r2
 80003e4:	ea40 0003 	orr.w	r0, r0, r3
 80003e8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ec:	ea45 0103 	orr.w	r1, r5, r3
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	f1c4 040c 	rsb	r4, r4, #12
 80003f6:	f1c4 0220 	rsb	r2, r4, #32
 80003fa:	fa20 f002 	lsr.w	r0, r0, r2
 80003fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000402:	ea40 0003 	orr.w	r0, r0, r3
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	fa21 f004 	lsr.w	r0, r1, r4
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f094 0f00 	teq	r4, #0
 8000416:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041a:	bf06      	itte	eq
 800041c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000420:	3401      	addeq	r4, #1
 8000422:	3d01      	subne	r5, #1
 8000424:	e74e      	b.n	80002c4 <__adddf3+0x8c>
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf18      	it	ne
 800042c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000430:	d029      	beq.n	8000486 <__adddf3+0x24e>
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	d005      	beq.n	800044a <__adddf3+0x212>
 800043e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000442:	bf04      	itt	eq
 8000444:	4619      	moveq	r1, r3
 8000446:	4610      	moveq	r0, r2
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea91 0f03 	teq	r1, r3
 800044e:	bf1e      	ittt	ne
 8000450:	2100      	movne	r1, #0
 8000452:	2000      	movne	r0, #0
 8000454:	bd30      	popne	{r4, r5, pc}
 8000456:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045a:	d105      	bne.n	8000468 <__adddf3+0x230>
 800045c:	0040      	lsls	r0, r0, #1
 800045e:	4149      	adcs	r1, r1
 8000460:	bf28      	it	cs
 8000462:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000466:	bd30      	pop	{r4, r5, pc}
 8000468:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800046c:	bf3c      	itt	cc
 800046e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000472:	bd30      	popcc	{r4, r5, pc}
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800047c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048a:	bf1a      	itte	ne
 800048c:	4619      	movne	r1, r3
 800048e:	4610      	movne	r0, r2
 8000490:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000494:	bf1c      	itt	ne
 8000496:	460b      	movne	r3, r1
 8000498:	4602      	movne	r2, r0
 800049a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049e:	bf06      	itte	eq
 80004a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a4:	ea91 0f03 	teqeq	r1, r3
 80004a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	bf00      	nop

080004b0 <__aeabi_ui2d>:
 80004b0:	f090 0f00 	teq	r0, #0
 80004b4:	bf04      	itt	eq
 80004b6:	2100      	moveq	r1, #0
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c4:	f04f 0500 	mov.w	r5, #0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e750      	b.n	8000370 <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_i2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e8:	bf48      	it	mi
 80004ea:	4240      	negmi	r0, r0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e73e      	b.n	8000370 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_f2d>:
 80004f4:	0042      	lsls	r2, r0, #1
 80004f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000502:	bf1f      	itttt	ne
 8000504:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000508:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800050c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000510:	4770      	bxne	lr
 8000512:	f092 0f00 	teq	r2, #0
 8000516:	bf14      	ite	ne
 8000518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e720      	b.n	8000370 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aedc 	beq.w	800031e <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6c1      	b.n	800031e <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_d2f>:
 800059c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005a4:	bf24      	itt	cs
 80005a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ae:	d90d      	bls.n	80005cc <__aeabi_d2f+0x30>
 80005b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005c4:	bf08      	it	eq
 80005c6:	f020 0001 	biceq.w	r0, r0, #1
 80005ca:	4770      	bx	lr
 80005cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005d0:	d121      	bne.n	8000616 <__aeabi_d2f+0x7a>
 80005d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005d6:	bfbc      	itt	lt
 80005d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005dc:	4770      	bxlt	lr
 80005de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005e6:	f1c2 0218 	rsb	r2, r2, #24
 80005ea:	f1c2 0c20 	rsb	ip, r2, #32
 80005ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	bf18      	it	ne
 80005f8:	f040 0001 	orrne.w	r0, r0, #1
 80005fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000600:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000604:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000608:	ea40 000c 	orr.w	r0, r0, ip
 800060c:	fa23 f302 	lsr.w	r3, r3, r2
 8000610:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000614:	e7cc      	b.n	80005b0 <__aeabi_d2f+0x14>
 8000616:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800061a:	d107      	bne.n	800062c <__aeabi_d2f+0x90>
 800061c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000620:	bf1e      	ittt	ne
 8000622:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000626:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800062a:	4770      	bxne	lr
 800062c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000630:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <__libc_init_array>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	4e0f      	ldr	r6, [pc, #60]	; (800067c <__libc_init_array+0x40>)
 8000640:	4d0f      	ldr	r5, [pc, #60]	; (8000680 <__libc_init_array+0x44>)
 8000642:	1b76      	subs	r6, r6, r5
 8000644:	10b6      	asrs	r6, r6, #2
 8000646:	bf18      	it	ne
 8000648:	2400      	movne	r4, #0
 800064a:	d005      	beq.n	8000658 <__libc_init_array+0x1c>
 800064c:	3401      	adds	r4, #1
 800064e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000652:	4798      	blx	r3
 8000654:	42a6      	cmp	r6, r4
 8000656:	d1f9      	bne.n	800064c <__libc_init_array+0x10>
 8000658:	4e0a      	ldr	r6, [pc, #40]	; (8000684 <__libc_init_array+0x48>)
 800065a:	4d0b      	ldr	r5, [pc, #44]	; (8000688 <__libc_init_array+0x4c>)
 800065c:	1b76      	subs	r6, r6, r5
 800065e:	f003 f817 	bl	8003690 <_init>
 8000662:	10b6      	asrs	r6, r6, #2
 8000664:	bf18      	it	ne
 8000666:	2400      	movne	r4, #0
 8000668:	d006      	beq.n	8000678 <__libc_init_array+0x3c>
 800066a:	3401      	adds	r4, #1
 800066c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000670:	4798      	blx	r3
 8000672:	42a6      	cmp	r6, r4
 8000674:	d1f9      	bne.n	800066a <__libc_init_array+0x2e>
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	bd70      	pop	{r4, r5, r6, pc}
 800067a:	bf00      	nop
 800067c:	080036e0 	.word	0x080036e0
 8000680:	080036e0 	.word	0x080036e0
 8000684:	080036e8 	.word	0x080036e8
 8000688:	080036e0 	.word	0x080036e0

0800068c <register_fini>:
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <register_fini+0xc>)
 800068e:	b113      	cbz	r3, 8000696 <register_fini+0xa>
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <register_fini+0x10>)
 8000692:	f000 b805 	b.w	80006a0 <atexit>
 8000696:	4770      	bx	lr
 8000698:	00000000 	.word	0x00000000
 800069c:	080006ad 	.word	0x080006ad

080006a0 <atexit>:
 80006a0:	2300      	movs	r3, #0
 80006a2:	4601      	mov	r1, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 b814 	b.w	80006d4 <__register_exitproc>

080006ac <__libc_fini_array>:
 80006ac:	b538      	push	{r3, r4, r5, lr}
 80006ae:	4d07      	ldr	r5, [pc, #28]	; (80006cc <__libc_fini_array+0x20>)
 80006b0:	4c07      	ldr	r4, [pc, #28]	; (80006d0 <__libc_fini_array+0x24>)
 80006b2:	1b2c      	subs	r4, r5, r4
 80006b4:	10a4      	asrs	r4, r4, #2
 80006b6:	d005      	beq.n	80006c4 <__libc_fini_array+0x18>
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80006be:	4798      	blx	r3
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	d1f9      	bne.n	80006b8 <__libc_fini_array+0xc>
 80006c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80006c8:	f002 bfe8 	b.w	800369c <_fini>
 80006cc:	080036ec 	.word	0x080036ec
 80006d0:	080036e8 	.word	0x080036e8

080006d4 <__register_exitproc>:
 80006d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006d8:	4c25      	ldr	r4, [pc, #148]	; (8000770 <__register_exitproc+0x9c>)
 80006da:	6825      	ldr	r5, [r4, #0]
 80006dc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80006e0:	4606      	mov	r6, r0
 80006e2:	4688      	mov	r8, r1
 80006e4:	4692      	mov	sl, r2
 80006e6:	4699      	mov	r9, r3
 80006e8:	b3c4      	cbz	r4, 800075c <__register_exitproc+0x88>
 80006ea:	6860      	ldr	r0, [r4, #4]
 80006ec:	281f      	cmp	r0, #31
 80006ee:	dc17      	bgt.n	8000720 <__register_exitproc+0x4c>
 80006f0:	1c43      	adds	r3, r0, #1
 80006f2:	b176      	cbz	r6, 8000712 <__register_exitproc+0x3e>
 80006f4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80006f8:	2201      	movs	r2, #1
 80006fa:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80006fe:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 8000702:	4082      	lsls	r2, r0
 8000704:	4311      	orrs	r1, r2
 8000706:	2e02      	cmp	r6, #2
 8000708:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 800070c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8000710:	d01e      	beq.n	8000750 <__register_exitproc+0x7c>
 8000712:	3002      	adds	r0, #2
 8000714:	6063      	str	r3, [r4, #4]
 8000716:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800071a:	2000      	movs	r0, #0
 800071c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <__register_exitproc+0xa0>)
 8000722:	b303      	cbz	r3, 8000766 <__register_exitproc+0x92>
 8000724:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000728:	f3af 8000 	nop.w
 800072c:	4604      	mov	r4, r0
 800072e:	b1d0      	cbz	r0, 8000766 <__register_exitproc+0x92>
 8000730:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000734:	2700      	movs	r7, #0
 8000736:	e880 0088 	stmia.w	r0, {r3, r7}
 800073a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800073e:	4638      	mov	r0, r7
 8000740:	2301      	movs	r3, #1
 8000742:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000746:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800074a:	2e00      	cmp	r6, #0
 800074c:	d0e1      	beq.n	8000712 <__register_exitproc+0x3e>
 800074e:	e7d1      	b.n	80006f4 <__register_exitproc+0x20>
 8000750:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000754:	430a      	orrs	r2, r1
 8000756:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800075a:	e7da      	b.n	8000712 <__register_exitproc+0x3e>
 800075c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000760:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000764:	e7c1      	b.n	80006ea <__register_exitproc+0x16>
 8000766:	f04f 30ff 	mov.w	r0, #4294967295
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	bf00      	nop
 8000770:	080036ac 	.word	0x080036ac
 8000774:	00000000 	.word	0x00000000

08000778 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800077c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800077e:	e003      	b.n	8000788 <LoopCopyDataInit>

08000780 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000782:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000784:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000786:	3104      	adds	r1, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <LoopForever+0xe>)
	adds	r2, r0, r1
 800078c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800078e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000790:	d3f6      	bcc.n	8000780 <CopyDataInit>
	ldr	r2, =_sbss
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000794:	e002      	b.n	800079c <LoopFillZerobss>

08000796 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000796:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000798:	f842 3b04 	str.w	r3, [r2], #4

0800079c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <LoopForever+0x16>)
	cmp	r2, r3
 800079e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007a0:	d3f9      	bcc.n	8000796 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007a2:	f000 fa3d 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a6:	f7ff ff49 	bl	800063c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007aa:	f000 f811 	bl	80007d0 <main>

080007ae <LoopForever>:

LoopForever:
    b LoopForever
 80007ae:	e7fe      	b.n	80007ae <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b0:	20003000 	.word	0x20003000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80007b4:	080036ec 	.word	0x080036ec
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007bc:	2000042c 	.word	0x2000042c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80007c0:	2000042c 	.word	0x2000042c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80007c4:	200004c8 	.word	0x200004c8

080007c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC1_2_IRQHandler>
 80007ca:	0000      	movs	r0, r0
 80007cc:	0000      	movs	r0, r0
	...

080007d0 <main>:
#define  PERIOD_VALUE	500-1

/* USER CODE END 0 */

int main(void)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	float pwm_val=0.0;
 80007d6:	f04f 0300 	mov.w	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  uhPrescalerValue = (uint32_t)(SystemCoreClock / 1000000) - 1;
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <main+0x98>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a22      	ldr	r2, [pc, #136]	; (800086c <main+0x9c>)
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	0c9b      	lsrs	r3, r3, #18
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4a21      	ldr	r2, [pc, #132]	; (8000870 <main+0xa0>)
 80007ec:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fb19 	bl	8000e24 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f841 	bl	8000878 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f6:	f000 f935 	bl	8000a64 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007fa:	f000 f87f 	bl	80008fc <MX_TIM2_Init>
  MX_TIM16_Init();
 80007fe:	f000 f8c7 	bl	8000990 <MX_TIM16_Init>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	HAL_Delay(10);
 8000802:	200a      	movs	r0, #10
 8000804:	f000 fb5a 	bl	8000ebc <HAL_Delay>
	pwm_val = pwm_val + 0.01;
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff fe73 	bl	80004f4 <__aeabi_f2d>
 800080e:	a314      	add	r3, pc, #80	; (adr r3, 8000860 <main+0x90>)
 8000810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000814:	f7ff fd10 	bl	8000238 <__adddf3>
 8000818:	4603      	mov	r3, r0
 800081a:	460c      	mov	r4, r1
 800081c:	4618      	mov	r0, r3
 800081e:	4621      	mov	r1, r4
 8000820:	f7ff febc 	bl	800059c <__aeabi_d2f>
 8000824:	4603      	mov	r3, r0
 8000826:	607b      	str	r3, [r7, #4]
	if(pwm_val > 1.0)pwm_val=0.0;	
 8000828:	edd7 7a01 	vldr	s15, [r7, #4]
 800082c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000838:	dd02      	ble.n	8000840 <main+0x70>
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
	user_tim2_1_setvalue(pwm_val);
 8000840:	ed97 0a01 	vldr	s0, [r7, #4]
 8000844:	f000 f944 	bl	8000ad0 <user_tim2_1_setvalue>
	user_tim16_1_setvalue(pwm_val);
 8000848:	ed97 0a01 	vldr	s0, [r7, #4]
 800084c:	f000 f96a 	bl	8000b24 <user_tim16_1_setvalue>
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000850:	2108      	movs	r1, #8
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <main+0xa4>)
 8000854:	f000 fde2 	bl	800141c <HAL_GPIO_TogglePin>
	}
 8000858:	e7d3      	b.n	8000802 <main+0x32>
 800085a:	bf00      	nop
 800085c:	f3af 8000 	nop.w
 8000860:	47ae147b 	.word	0x47ae147b
 8000864:	3f847ae1 	.word	0x3f847ae1
 8000868:	20000428 	.word	0x20000428
 800086c:	431bde83 	.word	0x431bde83
 8000870:	200004c0 	.word	0x200004c0
 8000874:	48000400 	.word	0x48000400

08000878 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b090      	sub	sp, #64	; 0x40
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000882:	2301      	movs	r3, #1
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000886:	2310      	movs	r3, #16
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800088a:	2300      	movs	r3, #0
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fdd4 	bl	8001440 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x2a>
  {
    Error_Handler();
 800089e:	f000 f971 	bl	8000b84 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 fe82 	bl	80025c4 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x52>
  {
    Error_Handler();
 80008c6:	f000 f95d 	bl	8000b84 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80008ca:	f002 f8e1 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 80008ce:	4602      	mov	r2, r0
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <SystemClock_Config+0x80>)
 80008d2:	fba3 2302 	umull	r2, r3, r3, r2
 80008d6:	099b      	lsrs	r3, r3, #6
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fbdb 	bl	8001094 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80008de:	2004      	movs	r0, #4
 80008e0:	f000 fbe4 	bl	80010ac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f000 fbb6 	bl	800105c <HAL_NVIC_SetPriority>
}
 80008f0:	bf00      	nop
 80008f2:	3740      	adds	r7, #64	; 0x40
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	10624dd3 	.word	0x10624dd3

080008fc <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_TIM2_Init+0x8c>)
 8000904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000908:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = uhPrescalerValue;
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_TIM2_Init+0x90>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <MX_TIM2_Init+0x8c>)
 8000910:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_TIM2_Init+0x8c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PERIOD_VALUE;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_TIM2_Init+0x8c>)
 800091a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800091e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_TIM2_Init+0x8c>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000926:	4818      	ldr	r0, [pc, #96]	; (8000988 <MX_TIM2_Init+0x8c>)
 8000928:	f002 f8ea 	bl	8002b00 <HAL_TIM_PWM_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0x3a>
  {
    Error_Handler();
 8000932:	f000 f927 	bl	8000b84 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4810      	ldr	r0, [pc, #64]	; (8000988 <MX_TIM2_Init+0x8c>)
 8000946:	f002 fcf7 	bl	8003338 <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 f918 	bl	8000b84 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000954:	2360      	movs	r3, #96	; 0x60
 8000956:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	4807      	ldr	r0, [pc, #28]	; (8000988 <MX_TIM2_Init+0x8c>)
 800096c:	f002 fbcc 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000976:	f000 f905 	bl	8000b84 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 800097a:	4803      	ldr	r0, [pc, #12]	; (8000988 <MX_TIM2_Init+0x8c>)
 800097c:	f000 fa1a 	bl	8000db4 <HAL_TIM_MspPostInit>

}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	; 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000448 	.word	0x20000448
 800098c:	200004c0 	.word	0x200004c0

08000990 <MX_TIM16_Init>:

/* TIM16 init function */
static void MX_TIM16_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b092      	sub	sp, #72	; 0x48
 8000994:	af00      	add	r7, sp, #0

  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim16.Instance = TIM16;
 8000996:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <MX_TIM16_Init+0xc8>)
 8000998:	4a30      	ldr	r2, [pc, #192]	; (8000a5c <MX_TIM16_Init+0xcc>)
 800099a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = uhPrescalerValue;
 800099c:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <MX_TIM16_Init+0xd0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a2d      	ldr	r2, [pc, #180]	; (8000a58 <MX_TIM16_Init+0xc8>)
 80009a2:	6053      	str	r3, [r2, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_TIM16_Init+0xc8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = PERIOD_VALUE;
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <MX_TIM16_Init+0xc8>)
 80009ac:	f240 12f3 	movw	r2, #499	; 0x1f3
 80009b0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <MX_TIM16_Init+0xc8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <MX_TIM16_Init+0xc8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009be:	4826      	ldr	r0, [pc, #152]	; (8000a58 <MX_TIM16_Init+0xc8>)
 80009c0:	f002 f872 	bl	8002aa8 <HAL_TIM_Base_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80009ca:	f000 f8db 	bl	8000b84 <Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80009ce:	4822      	ldr	r0, [pc, #136]	; (8000a58 <MX_TIM16_Init+0xc8>)
 80009d0:	f002 f896 	bl	8002b00 <HAL_TIM_PWM_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 80009da:	f000 f8d3 	bl	8000b84 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009de:	2360      	movs	r3, #96	; 0x60
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e6:	2300      	movs	r3, #0
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	4815      	ldr	r0, [pc, #84]	; (8000a58 <MX_TIM16_Init+0xc8>)
 8000a04:	f002 fb80 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM16_Init+0x82>
  {
    Error_Handler();
 8000a0e:	f000 f8b9 	bl	8000b84 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <MX_TIM16_Init+0xc8>)
 8000a3a:	f002 fccb 	bl	80033d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM16_Init+0xb8>
  {
    Error_Handler();
 8000a44:	f000 f89e 	bl	8000b84 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim16);
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <MX_TIM16_Init+0xc8>)
 8000a4a:	f000 f9b3 	bl	8000db4 <HAL_TIM_MspPostInit>

}
 8000a4e:	bf00      	nop
 8000a50:	3748      	adds	r7, #72	; 0x48
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000484 	.word	0x20000484
 8000a5c:	40014400 	.word	0x40014400
 8000a60:	200004c0 	.word	0x200004c0

08000a64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <MX_GPIO_Init+0x64>)
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_GPIO_Init+0x64>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_GPIO_Init+0x64>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4a11      	ldr	r2, [pc, #68]	; (8000ac8 <MX_GPIO_Init+0x64>)
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_GPIO_Init+0x64>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_GPIO_Init+0x64>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <MX_GPIO_Init+0x68>)
 8000aa0:	f000 fca4 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_GPIO_Init+0x68>)
 8000abc:	f000 fb20 	bl	8001100 <HAL_GPIO_Init>

}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000400 	.word	0x48000400

08000ad0 <user_tim2_1_setvalue>:

/* USER CODE BEGIN 4 */
void user_tim2_1_setvalue(float value)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	ed87 0a01 	vstr	s0, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC;
  
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ada:	2360      	movs	r3, #96	; 0x60
 8000adc:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = (uint32_t)((PERIOD_VALUE)*value);
 8000ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ae2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000b1c <user_tim2_1_setvalue+0x4c>
 8000ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aee:	ee17 3a90 	vmov	r3, s15
 8000af2:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <user_tim2_1_setvalue+0x50>)
 8000b06:	f002 faff 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <user_tim2_1_setvalue+0x50>)
 8000b0e:	f002 f823 	bl	8002b58 <HAL_TIM_PWM_Start>
}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	43f98000 	.word	0x43f98000
 8000b20:	20000448 	.word	0x20000448

08000b24 <user_tim16_1_setvalue>:
void user_tim16_1_setvalue(float value)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	ed87 0a01 	vstr	s0, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC;
  
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b2e:	2360      	movs	r3, #96	; 0x60
 8000b30:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = (uint32_t)((PERIOD_VALUE)*value);
 8000b32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b36:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000b7c <user_tim16_1_setvalue+0x58>
 8000b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b42:	ee17 3a90 	vmov	r3, s15
 8000b46:	613b      	str	r3, [r7, #16]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1);
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <user_tim16_1_setvalue+0x5c>)
 8000b66:	f002 facf 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);  
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <user_tim16_1_setvalue+0x5c>)
 8000b6e:	f001 fff3 	bl	8002b58 <HAL_TIM_PWM_Start>
}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	; 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	43f98000 	.word	0x43f98000
 8000b80:	20000484 	.word	0x20000484

08000b84 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <Error_Handler+0x28>)
 8000b8e:	f000 fc2d 	bl	80013ec <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000b92:	2032      	movs	r0, #50	; 0x32
 8000b94:	f000 f992 	bl	8000ebc <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <Error_Handler+0x28>)
 8000b9e:	f000 fc25 	bl	80013ec <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000ba2:	2032      	movs	r0, #50	; 0x32
 8000ba4:	f000 f98a 	bl	8000ebc <HAL_Delay>
  }
 8000ba8:	e7ee      	b.n	8000b88 <Error_Handler+0x4>
 8000baa:	bf00      	nop
 8000bac:	48000400 	.word	0x48000400

08000bb0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8000bc4:	e7fe      	b.n	8000bc4 <HardFault_Handler+0x4>
 8000bc6:	bf00      	nop

08000bc8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>
 8000bce:	bf00      	nop

08000bd0 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8000bd4:	e7fe      	b.n	8000bd4 <BusFault_Handler+0x4>
 8000bd6:	bf00      	nop

08000bd8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>
 8000bde:	bf00      	nop

08000be0 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f938 	bl	8000e88 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000c18:	f000 fa64 	bl	80010e4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <SystemInit+0x84>)
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemInit+0x84>)
 8000c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <SystemInit+0x88>)
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <SystemInit+0x88>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000c40:	4919      	ldr	r1, [pc, #100]	; (8000ca8 <SystemInit+0x88>)
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <SystemInit+0x88>)
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <SystemInit+0x8c>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c4c:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <SystemInit+0x88>)
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <SystemInit+0x88>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <SystemInit+0x88>)
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <SystemInit+0x88>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c66:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <SystemInit+0x88>)
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <SystemInit+0x88>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c72:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000c74:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <SystemInit+0x88>)
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <SystemInit+0x88>)
 8000c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7a:	f023 030f 	bic.w	r3, r3, #15
 8000c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000c80:	4909      	ldr	r1, [pc, #36]	; (8000ca8 <SystemInit+0x88>)
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <SystemInit+0x88>)
 8000c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <SystemInit+0x90>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x88>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SystemInit+0x84>)
 8000c94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c98:	609a      	str	r2, [r3, #8]
#endif
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	f87fc00c 	.word	0xf87fc00c
 8000cb0:	ff00fccc 	.word	0xff00fccc

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <HAL_MspInit+0x80>)
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_MspInit+0x80>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_MspInit+0x80>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	f000 f9b6 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f06f 000b 	mvn.w	r0, #11
 8000ce0:	f000 f9bc 	bl	800105c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	f06f 000a 	mvn.w	r0, #10
 8000cec:	f000 f9b6 	bl	800105c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f06f 0009 	mvn.w	r0, #9
 8000cf8:	f000 f9b0 	bl	800105c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f06f 0004 	mvn.w	r0, #4
 8000d04:	f000 f9aa 	bl	800105c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	f06f 0003 	mvn.w	r0, #3
 8000d10:	f000 f9a4 	bl	800105c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	f06f 0001 	mvn.w	r0, #1
 8000d1c:	f000 f99e 	bl	800105c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f000 f998 	bl	800105c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d48:	d10b      	bne.n	8000d62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4a:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <HAL_TIM_PWM_MspInit+0x38>)
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_TIM_PWM_MspInit+0x38>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_TIM_PWM_MspInit+0x38>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000

08000d74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM16)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_TIM_Base_MspInit+0x38>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d10b      	bne.n	8000d9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_TIM_Base_MspInit+0x3c>)
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_TIM_Base_MspInit+0x3c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <HAL_TIM_Base_MspInit+0x3c>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40014400 	.word	0x40014400
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc4:	d111      	bne.n	8000dea <HAL_TIM_MspPostInit+0x36>

  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dc6:	2320      	movs	r3, #32
 8000dc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f000 f98c 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000de8:	e015      	b.n	8000e16 <HAL_TIM_MspPostInit+0x62>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM16)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <HAL_TIM_MspPostInit+0x6c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d110      	bne.n	8000e16 <HAL_TIM_MspPostInit+0x62>
  /* USER CODE END TIM16_MspPostInit 0 */
  
    /**TIM16 GPIO Configuration    
    PA6     ------> TIM16_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df4:	2340      	movs	r3, #64	; 0x40
 8000df6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f000 f975 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40014400 	.word	0x40014400

08000e24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_Init+0x28>)
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x28>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f905 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff ff38 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_InitTick+0x30>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <HAL_InitTick+0x34>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	099b      	lsrs	r3, r3, #6
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f915 	bl	8001094 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e72:	f000 f8f3 	bl	800105c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000428 	.word	0x20000428
 8000e84:	10624dd3 	.word	0x10624dd3

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick++;
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <HAL_IncTick+0x18>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <HAL_IncTick+0x18>)
 8000e94:	6013      	str	r3, [r2, #0]
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	200004c4 	.word	0x200004c4

08000ea4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200004c4 	.word	0x200004c4

08000ebc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffea 	bl	8000ea4 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1ad2      	subs	r2, r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d3f7      	bcc.n	8000ecc <HAL_Delay+0x10>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f38:	0a1b      	lsrs	r3, r3, #8
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da0b      	bge.n	8000f74 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	490d      	ldr	r1, [pc, #52]	; (8000f94 <NVIC_SetPriority+0x4c>)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 030f 	and.w	r3, r3, #15
 8000f64:	3b04      	subs	r3, #4
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f72:	e009      	b.n	8000f88 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	4908      	ldr	r1, [pc, #32]	; (8000f98 <NVIC_SetPriority+0x50>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	1e5a      	subs	r2, r3, #1
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	401a      	ands	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	1e59      	subs	r1, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000ff0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f7ff ff90 	bl	8000f48 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff49 	bl	8000ee4 <NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop

0800105c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106e:	f7ff ff5d 	bl	8000f2c <NVIC_GetPriorityGrouping>
 8001072:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68b9      	ldr	r1, [r7, #8]
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ff8f 	bl	8000f9c <NVIC_EncodePriority>
 800107e:	4602      	mov	r2, r0
 8001080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff5e 	bl	8000f48 <NVIC_SetPriority>
}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ffaf 	bl	8001000 <SysTick_Config>
 80010a2:	4603      	mov	r3, r0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d106      	bne.n	80010c8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80010c6:	e005      	b.n	80010d4 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 0304 	bic.w	r3, r3, #4
 80010d2:	6013      	str	r3, [r2, #0]
  }
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80010e8:	f000 f802 	bl	80010f0 <HAL_SYSTICK_Callback>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001116:	e14e      	b.n	80013b6 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	4013      	ands	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8140 	beq.w	80013b0 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x40>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b12      	cmp	r3, #18
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d00b      	beq.n	80011dc <HAL_GPIO_Init+0xdc>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d0:	2b11      	cmp	r3, #17
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b12      	cmp	r3, #18
 80011da:	d130      	bne.n	800123e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001212:	2201      	movs	r2, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f003 0201 	and.w	r2, r3, #1
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 809a 	beq.w	80013b0 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127c:	4a55      	ldr	r2, [pc, #340]	; (80013d4 <HAL_GPIO_Init+0x2d4>)
 800127e:	4b55      	ldr	r3, [pc, #340]	; (80013d4 <HAL_GPIO_Init+0x2d4>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b52      	ldr	r3, [pc, #328]	; (80013d4 <HAL_GPIO_Init+0x2d4>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001294:	4a50      	ldr	r2, [pc, #320]	; (80013d8 <HAL_GPIO_Init+0x2d8>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012be:	d013      	beq.n	80012e8 <HAL_GPIO_Init+0x1e8>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a46      	ldr	r2, [pc, #280]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00d      	beq.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a45      	ldr	r2, [pc, #276]	; (80013e0 <HAL_GPIO_Init+0x2e0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d007      	beq.n	80012e0 <HAL_GPIO_Init+0x1e0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a44      	ldr	r2, [pc, #272]	; (80013e4 <HAL_GPIO_Init+0x2e4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d101      	bne.n	80012dc <HAL_GPIO_Init+0x1dc>
 80012d8:	2303      	movs	r3, #3
 80012da:	e006      	b.n	80012ea <HAL_GPIO_Init+0x1ea>
 80012dc:	2305      	movs	r3, #5
 80012de:	e004      	b.n	80012ea <HAL_GPIO_Init+0x1ea>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e002      	b.n	80012ea <HAL_GPIO_Init+0x1ea>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <HAL_GPIO_Init+0x1ea>
 80012e8:	2300      	movs	r3, #0
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	f002 0203 	and.w	r2, r2, #3
 80012f0:	0092      	lsls	r2, r2, #2
 80012f2:	4093      	lsls	r3, r2
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012fa:	4937      	ldr	r1, [pc, #220]	; (80013d8 <HAL_GPIO_Init+0x2d8>)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001308:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800132c:	4a2e      	ldr	r2, [pc, #184]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001356:	4a24      	ldr	r2, [pc, #144]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001380:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f47f aea9 	bne.w	8001118 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 80013c6:	bf00      	nop
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000
 80013dc:	48000400 	.word	0x48000400
 80013e0:	48000800 	.word	0x48000800
 80013e4:	48000c00 	.word	0x48000c00
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001408:	e002      	b.n	8001410 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	405a      	eors	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	615a      	str	r2, [r3, #20]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8001446:	af00      	add	r7, sp, #0
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 81e8 	beq.w	8001832 <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001462:	4bb8      	ldr	r3, [pc, #736]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b04      	cmp	r3, #4
 800146c:	d00c      	beq.n	8001488 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800146e:	4bb5      	ldr	r3, [pc, #724]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b08      	cmp	r3, #8
 8001478:	f040 8082 	bne.w	8001580 <HAL_RCC_OscConfig+0x140>
 800147c:	4bb1      	ldr	r3, [pc, #708]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d07b      	beq.n	8001580 <HAL_RCC_OscConfig+0x140>
 8001488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800148c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001494:	fa93 f2a3 	rbit	r2, r3
 8001498:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800149c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800149e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014a2:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f043 0320 	orr.w	r3, r3, #32
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <HAL_RCC_OscConfig+0x80>
 80014ba:	4ba2      	ldr	r3, [pc, #648]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	e039      	b.n	8001534 <HAL_RCC_OscConfig+0xf4>
 80014c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80014cc:	fa93 f2a3 	rbit	r2, r3
 80014d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014d4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014d6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fab3 f383 	clz	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f043 0320 	orr.w	r3, r3, #32
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d102      	bne.n	80014f8 <HAL_RCC_OscConfig+0xb8>
 80014f2:	4b94      	ldr	r3, [pc, #592]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	e01d      	b.n	8001534 <HAL_RCC_OscConfig+0xf4>
 80014f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001504:	fa93 f2a3 	rbit	r2, r3
 8001508:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800150c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800150e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fab3 f383 	clz	r3, r3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f043 0320 	orr.w	r3, r3, #32
 800151e:	b2db      	uxtb	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b04      	cmp	r3, #4
 8001528:	d102      	bne.n	8001530 <HAL_RCC_OscConfig+0xf0>
 800152a:	4b86      	ldr	r3, [pc, #536]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	e001      	b.n	8001534 <HAL_RCC_OscConfig+0xf4>
 8001530:	4b84      	ldr	r3, [pc, #528]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001538:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8001540:	fa92 f1a2 	rbit	r1, r2
 8001544:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001548:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800154a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	fab2 f282 	clz	r2, r2
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	f042 0220 	orr.w	r2, r2, #32
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	f002 021f 	and.w	r2, r2, #31
 8001562:	40d3      	lsrs	r3, r2
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 8161 	beq.w	8001830 <HAL_RCC_OscConfig+0x3f0>
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	f040 815b 	bne.w	8001830 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f001 b81a 	b.w	80025b4 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158a:	d106      	bne.n	800159a <HAL_RCC_OscConfig+0x15a>
 800158c:	4a6d      	ldr	r2, [pc, #436]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 800158e:	4b6d      	ldr	r3, [pc, #436]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e030      	b.n	80015fc <HAL_RCC_OscConfig+0x1bc>
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10c      	bne.n	80015be <HAL_RCC_OscConfig+0x17e>
 80015a4:	4a67      	ldr	r2, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4a64      	ldr	r2, [pc, #400]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015b2:	4b64      	ldr	r3, [pc, #400]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	e01e      	b.n	80015fc <HAL_RCC_OscConfig+0x1bc>
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1a4>
 80015ca:	4a5e      	ldr	r2, [pc, #376]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015cc:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015d8:	4b5a      	ldr	r3, [pc, #360]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0x1bc>
 80015e4:	4a57      	ldr	r2, [pc, #348]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015e6:	4b57      	ldr	r3, [pc, #348]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4a54      	ldr	r2, [pc, #336]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015f2:	4b54      	ldr	r3, [pc, #336]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015fc:	4951      	ldr	r1, [pc, #324]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80015fe:	4b51      	ldr	r3, [pc, #324]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	f023 020f 	bic.w	r2, r3, #15
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4313      	orrs	r3, r2
 800160e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8083 	beq.w	8001722 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fc42 	bl	8000ea4 <HAL_GetTick>
 8001620:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001626:	f7ff fc3d 	bl	8000ea4 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d902      	bls.n	800163c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	f000 bfbc 	b.w	80025b4 <HAL_RCC_OscConfig+0x1174>
 800163c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001640:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001648:	fa93 f2a3 	rbit	r2, r3
 800164c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001650:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001652:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001656:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001658:	fab3 f383 	clz	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d102      	bne.n	8001674 <HAL_RCC_OscConfig+0x234>
 800166e:	4b35      	ldr	r3, [pc, #212]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	e039      	b.n	80016e8 <HAL_RCC_OscConfig+0x2a8>
 8001674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001678:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001680:	fa93 f2a3 	rbit	r2, r3
 8001684:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001688:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800168a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f043 0320 	orr.w	r3, r3, #32
 800169a:	b2db      	uxtb	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d102      	bne.n	80016ac <HAL_RCC_OscConfig+0x26c>
 80016a6:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	e01d      	b.n	80016e8 <HAL_RCC_OscConfig+0x2a8>
 80016ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80016b8:	fa93 f2a3 	rbit	r2, r3
 80016bc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80016c0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f043 0320 	orr.w	r3, r3, #32
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d102      	bne.n	80016e4 <HAL_RCC_OscConfig+0x2a4>
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	e001      	b.n	80016e8 <HAL_RCC_OscConfig+0x2a8>
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_RCC_OscConfig+0x304>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ec:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80016f4:	fa92 f1a2 	rbit	r1, r2
 80016f8:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80016fc:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016fe:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	fab2 f282 	clz	r2, r2
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	f042 0220 	orr.w	r2, r2, #32
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f002 021f 	and.w	r2, r2, #31
 8001716:	40d3      	lsrs	r3, r2
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d082      	beq.n	8001626 <HAL_RCC_OscConfig+0x1e6>
 8001720:	e087      	b.n	8001832 <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fbbf 	bl	8000ea4 <HAL_GetTick>
 8001726:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	e00d      	b.n	8001748 <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fbba 	bl	8000ea4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b64      	cmp	r3, #100	; 0x64
 800173a:	d905      	bls.n	8001748 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	f000 bf39 	b.w	80025b4 <HAL_RCC_OscConfig+0x1174>
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001754:	fa93 f2a3 	rbit	r2, r3
 8001758:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800175c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800175e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001762:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f043 0320 	orr.w	r3, r3, #32
 800176e:	b2db      	uxtb	r3, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d102      	bne.n	8001780 <HAL_RCC_OscConfig+0x340>
 800177a:	4bb6      	ldr	r3, [pc, #728]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	e039      	b.n	80017f4 <HAL_RCC_OscConfig+0x3b4>
 8001780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001784:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001794:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001796:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f043 0320 	orr.w	r3, r3, #32
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d102      	bne.n	80017b8 <HAL_RCC_OscConfig+0x378>
 80017b2:	4ba8      	ldr	r3, [pc, #672]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	e01d      	b.n	80017f4 <HAL_RCC_OscConfig+0x3b4>
 80017b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017bc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80017c4:	fa93 f2a3 	rbit	r2, r3
 80017c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017cc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f043 0320 	orr.w	r3, r3, #32
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d102      	bne.n	80017f0 <HAL_RCC_OscConfig+0x3b0>
 80017ea:	4b9a      	ldr	r3, [pc, #616]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	e001      	b.n	80017f4 <HAL_RCC_OscConfig+0x3b4>
 80017f0:	4b98      	ldr	r3, [pc, #608]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001800:	fa92 f1a2 	rbit	r1, r2
 8001804:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001808:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800180a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	fab2 f282 	clz	r2, r2
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	f042 0220 	orr.w	r2, r2, #32
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	f002 021f 	and.w	r2, r2, #31
 8001822:	40d3      	lsrs	r3, r2
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f47f af7f 	bne.w	800172c <HAL_RCC_OscConfig+0x2ec>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x3f2>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 81f4 	beq.w	8001c2a <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001842:	4b84      	ldr	r3, [pc, #528]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00d      	beq.n	800186a <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800184e:	4b81      	ldr	r3, [pc, #516]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	f040 8099 	bne.w	800198e <HAL_RCC_OscConfig+0x54e>
 800185c:	4b7d      	ldr	r3, [pc, #500]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001864:	2b00      	cmp	r3, #0
 8001866:	f040 8092 	bne.w	800198e <HAL_RCC_OscConfig+0x54e>
 800186a:	2302      	movs	r3, #2
 800186c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001874:	fa93 f2a3 	rbit	r2, r3
 8001878:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800187c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800187e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001882:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f043 0320 	orr.w	r3, r3, #32
 800188e:	b2db      	uxtb	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d102      	bne.n	80018a0 <HAL_RCC_OscConfig+0x460>
 800189a:	4b6e      	ldr	r3, [pc, #440]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	e037      	b.n	8001910 <HAL_RCC_OscConfig+0x4d0>
 80018a0:	2302      	movs	r3, #2
 80018a2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f043 0320 	orr.w	r3, r3, #32
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	095b      	lsrs	r3, r3, #5
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0x496>
 80018d0:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	e01c      	b.n	8001910 <HAL_RCC_OscConfig+0x4d0>
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80018e0:	fa93 f2a3 	rbit	r2, r3
 80018e4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018e8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0320 	orr.w	r3, r3, #32
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b04      	cmp	r3, #4
 8001904:	d102      	bne.n	800190c <HAL_RCC_OscConfig+0x4cc>
 8001906:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	e001      	b.n	8001910 <HAL_RCC_OscConfig+0x4d0>
 800190c:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	2202      	movs	r2, #2
 8001912:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800191a:	fa92 f1a2 	rbit	r1, r2
 800191e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001922:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001924:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	fab2 f282 	clz	r2, r2
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	f042 0220 	orr.w	r2, r2, #32
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f002 021f 	and.w	r2, r2, #31
 800193c:	40d3      	lsrs	r3, r2
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <HAL_RCC_OscConfig+0x516>
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d002      	beq.n	8001956 <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	f000 be2f 	b.w	80025b4 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001956:	4c3f      	ldr	r4, [pc, #252]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 8001958:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6959      	ldr	r1, [r3, #20]
 8001966:	23f8      	movs	r3, #248	; 0xf8
 8001968:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001970:	fa93 f0a3 	rbit	r0, r3
 8001974:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001978:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800197a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	4313      	orrs	r3, r2
 800198a:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198c:	e14d      	b.n	8001c2a <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80b3 	beq.w	8001b00 <HAL_RCC_OscConfig+0x6c0>
 800199a:	2301      	movs	r3, #1
 800199c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019a4:	fa93 f2a3 	rbit	r2, r3
 80019a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019ac:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019b2:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80019be:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80019c2:	461a      	mov	r2, r3
 80019c4:	2301      	movs	r3, #1
 80019c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fa6c 	bl	8000ea4 <HAL_GetTick>
 80019cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fa67 	bl	8000ea4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d902      	bls.n	80019e8 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	f000 bde6 	b.w	80025b4 <HAL_RCC_OscConfig+0x1174>
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80019f2:	fa93 f2a3 	rbit	r2, r3
 80019f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019fa:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019fc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a00:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f043 0320 	orr.w	r3, r3, #32
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d102      	bne.n	8001a1e <HAL_RCC_OscConfig+0x5de>
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	e039      	b.n	8001a92 <HAL_RCC_OscConfig+0x652>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a30:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a32:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f043 0320 	orr.w	r3, r3, #32
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d104      	bne.n	8001a58 <HAL_RCC_OscConfig+0x618>
 8001a4e:	4b01      	ldr	r3, [pc, #4]	; (8001a54 <HAL_RCC_OscConfig+0x614>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	e01e      	b.n	8001a92 <HAL_RCC_OscConfig+0x652>
 8001a54:	40021000 	.word	0x40021000
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a6a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f043 0320 	orr.w	r3, r3, #32
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	095b      	lsrs	r3, r3, #5
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d102      	bne.n	8001a8e <HAL_RCC_OscConfig+0x64e>
 8001a88:	4bb9      	ldr	r3, [pc, #740]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	e001      	b.n	8001a92 <HAL_RCC_OscConfig+0x652>
 8001a8e:	4bb8      	ldr	r3, [pc, #736]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	2202      	movs	r2, #2
 8001a94:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a9c:	fa92 f1a2 	rbit	r1, r2
 8001aa0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001aa4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001aa6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	fab2 f282 	clz	r2, r2
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	f042 0220 	orr.w	r2, r2, #32
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	f002 021f 	and.w	r2, r2, #31
 8001abe:	40d3      	lsrs	r3, r2
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d084      	beq.n	80019d2 <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4ca9      	ldr	r4, [pc, #676]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001aca:	4ba9      	ldr	r3, [pc, #676]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6959      	ldr	r1, [r3, #20]
 8001ad8:	23f8      	movs	r3, #248	; 0xf8
 8001ada:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ae2:	fa93 f0a3 	rbit	r0, r3
 8001ae6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001aea:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001aec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	6023      	str	r3, [r4, #0]
 8001afe:	e094      	b.n	8001c2a <HAL_RCC_OscConfig+0x7ea>
 8001b00:	2301      	movs	r3, #1
 8001b02:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b0a:	fa93 f2a3 	rbit	r2, r3
 8001b0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b12:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b18:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	fab3 f383 	clz	r3, r3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001b24:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f9b9 	bl	8000ea4 <HAL_GetTick>
 8001b32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b38:	f7ff f9b4 	bl	8000ea4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d902      	bls.n	8001b4e <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	f000 bd33 	b.w	80025b4 <HAL_RCC_OscConfig+0x1174>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b58:	fa93 f2a3 	rbit	r2, r3
 8001b5c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b60:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b66:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f043 0320 	orr.w	r3, r3, #32
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d102      	bne.n	8001b84 <HAL_RCC_OscConfig+0x744>
 8001b7e:	4b7c      	ldr	r3, [pc, #496]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	e037      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7b4>
 8001b84:	2302      	movs	r3, #2
 8001b86:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b8e:	fa93 f2a3 	rbit	r2, r3
 8001b92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b96:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	095b      	lsrs	r3, r3, #5
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d102      	bne.n	8001bba <HAL_RCC_OscConfig+0x77a>
 8001bb4:	4b6e      	ldr	r3, [pc, #440]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	e01c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7b4>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bcc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f043 0320 	orr.w	r3, r3, #32
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x7b0>
 8001bea:	4b61      	ldr	r3, [pc, #388]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	e001      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7b4>
 8001bf0:	4b5f      	ldr	r3, [pc, #380]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8001bfe:	fa92 f1a2 	rbit	r1, r2
 8001c02:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001c06:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c08:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	fab2 f282 	clz	r2, r2
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	f042 0220 	orr.w	r2, r2, #32
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f002 021f 	and.w	r2, r2, #31
 8001c20:	40d3      	lsrs	r3, r2
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d186      	bne.n	8001b38 <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8132 	beq.w	8001e9e <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8099 	beq.w	8001d78 <HAL_RCC_OscConfig+0x938>
 8001c46:	2301      	movs	r3, #1
 8001c48:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c50:	fa93 f2a3 	rbit	r2, r3
 8001c54:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c58:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c5e:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <HAL_RCC_OscConfig+0x934>)
 8001c6a:	4413      	add	r3, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2301      	movs	r3, #1
 8001c70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7ff f917 	bl	8000ea4 <HAL_GetTick>
 8001c76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff f912 	bl	8000ea4 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d902      	bls.n	8001c92 <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	f000 bc91 	b.w	80025b4 <HAL_RCC_OscConfig+0x1174>
 8001c92:	2302      	movs	r3, #2
 8001c94:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c9c:	fa93 f2a3 	rbit	r2, r3
 8001ca0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ca4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ca6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001caa:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x888>
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	e037      	b.n	8001d38 <HAL_RCC_OscConfig+0x8f8>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cda:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cdc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d102      	bne.n	8001cfe <HAL_RCC_OscConfig+0x8be>
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	e01c      	b.n	8001d38 <HAL_RCC_OscConfig+0x8f8>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d10:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d12:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d102      	bne.n	8001d34 <HAL_RCC_OscConfig+0x8f4>
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	e001      	b.n	8001d38 <HAL_RCC_OscConfig+0x8f8>
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_RCC_OscConfig+0x930>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	2202      	movs	r2, #2
 8001d3a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d42:	fa92 f1a2 	rbit	r1, r2
 8001d46:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001d4a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d4c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f002 021f 	and.w	r2, r2, #31
 8001d64:	40d3      	lsrs	r3, r2
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d086      	beq.n	8001c7c <HAL_RCC_OscConfig+0x83c>
 8001d6e:	e096      	b.n	8001e9e <HAL_RCC_OscConfig+0xa5e>
 8001d70:	40021000 	.word	0x40021000
 8001d74:	42420480 	.word	0x42420480
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001d82:	fa93 f2a3 	rbit	r2, r3
 8001d86:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d8a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d8c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d90:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4bb5      	ldr	r3, [pc, #724]	; (8002070 <HAL_RCC_OscConfig+0xc30>)
 8001d9c:	4413      	add	r3, r2
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2300      	movs	r3, #0
 8001da2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da4:	f7ff f87e 	bl	8000ea4 <HAL_GetTick>
 8001da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	e009      	b.n	8001dc2 <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dae:	f7ff f879 	bl	8000ea4 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e3f8      	b.n	80025b4 <HAL_RCC_OscConfig+0x1174>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001dd4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001dd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001dda:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_RCC_OscConfig+0x9b8>
 8001df2:	4ba0      	ldr	r3, [pc, #640]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	e037      	b.n	8001e68 <HAL_RCC_OscConfig+0xa28>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e02:	fa93 f2a3 	rbit	r2, r3
 8001e06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e0a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e0c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	095b      	lsrs	r3, r3, #5
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_OscConfig+0x9ee>
 8001e28:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0xa28>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e40:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d102      	bne.n	8001e64 <HAL_RCC_OscConfig+0xa24>
 8001e5e:	4b85      	ldr	r3, [pc, #532]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	e001      	b.n	8001e68 <HAL_RCC_OscConfig+0xa28>
 8001e64:	4b83      	ldr	r3, [pc, #524]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001e72:	fa92 f1a2 	rbit	r1, r2
 8001e76:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001e7a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e7c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	fab2 f282 	clz	r2, r2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	f002 021f 	and.w	r2, r2, #31
 8001e94:	40d3      	lsrs	r3, r2
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d187      	bne.n	8001dae <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 818f 	beq.w	80021cc <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb4:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d112      	bne.n	8001ee6 <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	4a6c      	ldr	r2, [pc, #432]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001ec2:	4b6c      	ldr	r3, [pc, #432]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eca:	61d3      	str	r3, [r2, #28]
 8001ecc:	4b69      	ldr	r3, [pc, #420]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b64      	ldr	r3, [pc, #400]	; (8002078 <HAL_RCC_OscConfig+0xc38>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d11a      	bne.n	8001f28 <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef2:	4a61      	ldr	r2, [pc, #388]	; (8002078 <HAL_RCC_OscConfig+0xc38>)
 8001ef4:	4b60      	ldr	r3, [pc, #384]	; (8002078 <HAL_RCC_OscConfig+0xc38>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7fe ffd1 	bl	8000ea4 <HAL_GetTick>
 8001f02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	e009      	b.n	8001f1c <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f08:	f7fe ffcc 	bl	8000ea4 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	; 0x64
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e34b      	b.n	80025b4 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b56      	ldr	r3, [pc, #344]	; (8002078 <HAL_RCC_OscConfig+0xc38>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ef      	beq.n	8001f08 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d106      	bne.n	8001f40 <HAL_RCC_OscConfig+0xb00>
 8001f32:	4a50      	ldr	r2, [pc, #320]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f34:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6213      	str	r3, [r2, #32]
 8001f3e:	e02f      	b.n	8001fa0 <HAL_RCC_OscConfig+0xb60>
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0xb24>
 8001f4a:	4a4a      	ldr	r2, [pc, #296]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f4c:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6213      	str	r3, [r2, #32]
 8001f56:	4a47      	ldr	r2, [pc, #284]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f58:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	6213      	str	r3, [r2, #32]
 8001f62:	e01d      	b.n	8001fa0 <HAL_RCC_OscConfig+0xb60>
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0xb48>
 8001f6e:	4a41      	ldr	r2, [pc, #260]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f70:	4b40      	ldr	r3, [pc, #256]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	4a3e      	ldr	r2, [pc, #248]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6213      	str	r3, [r2, #32]
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0xb60>
 8001f88:	4a3a      	ldr	r2, [pc, #232]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	4a37      	ldr	r2, [pc, #220]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f96:	4b37      	ldr	r3, [pc, #220]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	f023 0304 	bic.w	r3, r3, #4
 8001f9e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8087 	beq.w	80020ba <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fac:	f7fe ff7a 	bl	8000ea4 <HAL_GetTick>
 8001fb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	e00b      	b.n	8001fce <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7fe ff75 	bl	8000ea4 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e2f2      	b.n	80025b4 <HAL_RCC_OscConfig+0x1174>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001fd8:	fa93 f2a3 	rbit	r2, r3
 8001fdc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fe0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fe2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fe6:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <HAL_RCC_OscConfig+0xbc4>
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	e03d      	b.n	8002080 <HAL_RCC_OscConfig+0xc40>
 8002004:	2302      	movs	r3, #2
 8002006:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002016:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002018:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002028:	b2db      	uxtb	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d102      	bne.n	800203a <HAL_RCC_OscConfig+0xbfa>
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	e022      	b.n	8002080 <HAL_RCC_OscConfig+0xc40>
 800203a:	2302      	movs	r3, #2
 800203c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800204c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800204e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205e:	b2db      	uxtb	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b04      	cmp	r3, #4
 8002068:	d108      	bne.n	800207c <HAL_RCC_OscConfig+0xc3c>
 800206a:	4b02      	ldr	r3, [pc, #8]	; (8002074 <HAL_RCC_OscConfig+0xc34>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	e007      	b.n	8002080 <HAL_RCC_OscConfig+0xc40>
 8002070:	42420480 	.word	0x42420480
 8002074:	40021000 	.word	0x40021000
 8002078:	40007000 	.word	0x40007000
 800207c:	4bbf      	ldr	r3, [pc, #764]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	2202      	movs	r2, #2
 8002082:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800208a:	fa92 f1a2 	rbit	r1, r2
 800208e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002092:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002094:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	fab2 f282 	clz	r2, r2
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f002 021f 	and.w	r2, r2, #31
 80020ac:	40d3      	lsrs	r3, r2
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f43f af7f 	beq.w	8001fb6 <HAL_RCC_OscConfig+0xb76>
 80020b8:	e07e      	b.n	80021b8 <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7fe fef3 	bl	8000ea4 <HAL_GetTick>
 80020be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7fe feee 	bl	8000ea4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e26b      	b.n	80025b4 <HAL_RCC_OscConfig+0x1174>
 80020dc:	2302      	movs	r3, #2
 80020de:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020e6:	fa93 f2a3 	rbit	r2, r3
 80020ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020ee:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80020f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020f4:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002100:	b2db      	uxtb	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d102      	bne.n	8002112 <HAL_RCC_OscConfig+0xcd2>
 800210c:	4b9b      	ldr	r3, [pc, #620]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	e037      	b.n	8002182 <HAL_RCC_OscConfig+0xd42>
 8002112:	2302      	movs	r3, #2
 8002114:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002124:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002126:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002136:	b2db      	uxtb	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d102      	bne.n	8002148 <HAL_RCC_OscConfig+0xd08>
 8002142:	4b8e      	ldr	r3, [pc, #568]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	e01c      	b.n	8002182 <HAL_RCC_OscConfig+0xd42>
 8002148:	2302      	movs	r3, #2
 800214a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002152:	fa93 f2a3 	rbit	r2, r3
 8002156:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800215a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800215c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216c:	b2db      	uxtb	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b04      	cmp	r3, #4
 8002176:	d102      	bne.n	800217e <HAL_RCC_OscConfig+0xd3e>
 8002178:	4b80      	ldr	r3, [pc, #512]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	e001      	b.n	8002182 <HAL_RCC_OscConfig+0xd42>
 800217e:	4b7f      	ldr	r3, [pc, #508]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	2202      	movs	r2, #2
 8002184:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800218c:	fa92 f1a2 	rbit	r1, r2
 8002190:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002194:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002196:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	fab2 f282 	clz	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f002 021f 	and.w	r2, r2, #31
 80021ae:	40d3      	lsrs	r3, r2
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d185      	bne.n	80020c4 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d105      	bne.n	80021cc <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c0:	4a6e      	ldr	r2, [pc, #440]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 80021c2:	4b6e      	ldr	r3, [pc, #440]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 81ed 	beq.w	80025b2 <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d8:	4b68      	ldr	r3, [pc, #416]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	f000 81e4 	beq.w	80025ae <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	f040 8144 	bne.w	800247a <HAL_RCC_OscConfig+0x103a>
 80021f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002206:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002208:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800220c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002218:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800221c:	461a      	mov	r2, r3
 800221e:	2300      	movs	r3, #0
 8002220:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fe3f 	bl	8000ea4 <HAL_GetTick>
 8002226:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222a:	e009      	b.n	8002240 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe fe3a 	bl	8000ea4 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e1b9      	b.n	80025b4 <HAL_RCC_OscConfig+0x1174>
 8002240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002244:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800224c:	fa93 f2a3 	rbit	r2, r3
 8002250:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002254:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002256:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800225a:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0320 	orr.w	r3, r3, #32
 8002266:	b2db      	uxtb	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d102      	bne.n	8002278 <HAL_RCC_OscConfig+0xe38>
 8002272:	4b42      	ldr	r3, [pc, #264]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	e039      	b.n	80022ec <HAL_RCC_OscConfig+0xeac>
 8002278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800227c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800228c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800228e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f043 0320 	orr.w	r3, r3, #32
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d102      	bne.n	80022b0 <HAL_RCC_OscConfig+0xe70>
 80022aa:	4b34      	ldr	r3, [pc, #208]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	e01d      	b.n	80022ec <HAL_RCC_OscConfig+0xeac>
 80022b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022c4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f043 0320 	orr.w	r3, r3, #32
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_OscConfig+0xea8>
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	e001      	b.n	80022ec <HAL_RCC_OscConfig+0xeac>
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f0:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80022f8:	fa92 f1a2 	rbit	r1, r2
 80022fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002300:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002302:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	fab2 f282 	clz	r2, r2
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f042 0220 	orr.w	r2, r2, #32
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f002 021f 	and.w	r2, r2, #31
 800231a:	40d3      	lsrs	r3, r2
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d183      	bne.n	800222c <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002324:	4815      	ldr	r0, [pc, #84]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_RCC_OscConfig+0xf3c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	430b      	orrs	r3, r1
 800233c:	4313      	orrs	r3, r2
 800233e:	6043      	str	r3, [r0, #4]
 8002340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002344:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800234c:	fa93 f2a3 	rbit	r2, r3
 8002350:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002354:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002356:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800235a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002366:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800236a:	461a      	mov	r2, r3
 800236c:	2301      	movs	r3, #1
 800236e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fd98 	bl	8000ea4 <HAL_GetTick>
 8002374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002378:	e00c      	b.n	8002394 <HAL_RCC_OscConfig+0xf54>
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002380:	f7fe fd90 	bl	8000ea4 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e10f      	b.n	80025b4 <HAL_RCC_OscConfig+0x1174>
 8002394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002398:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023a8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ae:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f043 0320 	orr.w	r3, r3, #32
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d102      	bne.n	80023cc <HAL_RCC_OscConfig+0xf8c>
 80023c6:	4b7e      	ldr	r3, [pc, #504]	; (80025c0 <HAL_RCC_OscConfig+0x1180>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	e039      	b.n	8002440 <HAL_RCC_OscConfig+0x1000>
 80023cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f043 0320 	orr.w	r3, r3, #32
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d102      	bne.n	8002404 <HAL_RCC_OscConfig+0xfc4>
 80023fe:	4b70      	ldr	r3, [pc, #448]	; (80025c0 <HAL_RCC_OscConfig+0x1180>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	e01d      	b.n	8002440 <HAL_RCC_OscConfig+0x1000>
 8002404:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002408:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002418:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800241a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f043 0320 	orr.w	r3, r3, #32
 800242a:	b2db      	uxtb	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b04      	cmp	r3, #4
 8002434:	d102      	bne.n	800243c <HAL_RCC_OscConfig+0xffc>
 8002436:	4b62      	ldr	r3, [pc, #392]	; (80025c0 <HAL_RCC_OscConfig+0x1180>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	e001      	b.n	8002440 <HAL_RCC_OscConfig+0x1000>
 800243c:	4b60      	ldr	r3, [pc, #384]	; (80025c0 <HAL_RCC_OscConfig+0x1180>)
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002444:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800244c:	fa92 f1a2 	rbit	r1, r2
 8002450:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002454:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002456:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	fab2 f282 	clz	r2, r2
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	f042 0220 	orr.w	r2, r2, #32
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f002 021f 	and.w	r2, r2, #31
 800246e:	40d3      	lsrs	r3, r2
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d083      	beq.n	8002380 <HAL_RCC_OscConfig+0xf40>
 8002478:	e09b      	b.n	80025b2 <HAL_RCC_OscConfig+0x1172>
 800247a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800247e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f107 0320 	add.w	r3, r7, #32
 800248e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002490:	f107 0320 	add.w	r3, r7, #32
 8002494:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80024a0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80024a4:	461a      	mov	r2, r3
 80024a6:	2300      	movs	r3, #0
 80024a8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe fcfb 	bl	8000ea4 <HAL_GetTick>
 80024ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	e009      	b.n	80024c8 <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fcf6 	bl	8000ea4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e075      	b.n	80025b4 <HAL_RCC_OscConfig+0x1174>
 80024c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024d4:	fa93 f2a3 	rbit	r2, r3
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f043 0320 	orr.w	r3, r3, #32
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_OscConfig+0x10c0>
 80024fa:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <HAL_RCC_OscConfig+0x1180>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	e039      	b.n	8002574 <HAL_RCC_OscConfig+0x1134>
 8002500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002504:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800250c:	fa93 f2a3 	rbit	r2, r3
 8002510:	f107 0318 	add.w	r3, r7, #24
 8002514:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002516:	f107 0318 	add.w	r3, r7, #24
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f043 0320 	orr.w	r3, r3, #32
 8002526:	b2db      	uxtb	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d102      	bne.n	8002538 <HAL_RCC_OscConfig+0x10f8>
 8002532:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_RCC_OscConfig+0x1180>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	e01d      	b.n	8002574 <HAL_RCC_OscConfig+0x1134>
 8002538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800253c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002544:	fa93 f2a3 	rbit	r2, r3
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f043 0320 	orr.w	r3, r3, #32
 800255e:	b2db      	uxtb	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b04      	cmp	r3, #4
 8002568:	d102      	bne.n	8002570 <HAL_RCC_OscConfig+0x1130>
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_RCC_OscConfig+0x1180>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	e001      	b.n	8002574 <HAL_RCC_OscConfig+0x1134>
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_RCC_OscConfig+0x1180>)
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002578:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002580:	fa92 f1a2 	rbit	r1, r2
 8002584:	f107 0210 	add.w	r2, r7, #16
 8002588:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800258a:	f107 0210 	add.w	r2, r7, #16
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	fab2 f282 	clz	r2, r2
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f042 0220 	orr.w	r2, r2, #32
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f002 021f 	and.w	r2, r2, #31
 80025a2:	40d3      	lsrs	r3, r2
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d183      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1074>
 80025ac:	e001      	b.n	80025b2 <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd90      	pop	{r4, r7, pc}
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000

080025c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b09e      	sub	sp, #120	; 0x78
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80025d2:	4ba3      	ldr	r3, [pc, #652]	; (8002860 <HAL_RCC_ClockConfig+0x29c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0207 	and.w	r2, r3, #7
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d210      	bcs.n	8002602 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e0:	499f      	ldr	r1, [pc, #636]	; (8002860 <HAL_RCC_ClockConfig+0x29c>)
 80025e2:	4b9f      	ldr	r3, [pc, #636]	; (8002860 <HAL_RCC_ClockConfig+0x29c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025f0:	4b9b      	ldr	r3, [pc, #620]	; (8002860 <HAL_RCC_ClockConfig+0x29c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0207 	and.w	r2, r3, #7
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1d0      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260e:	4995      	ldr	r1, [pc, #596]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 8002610:	4b94      	ldr	r3, [pc, #592]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8168 	beq.w	80028fe <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d15c      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x12c>
 8002636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263a:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f043 0320 	orr.w	r3, r3, #32
 8002650:	b2db      	uxtb	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d102      	bne.n	8002662 <HAL_RCC_ClockConfig+0x9e>
 800265c:	4b81      	ldr	r3, [pc, #516]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	e02d      	b.n	80026be <HAL_RCC_ClockConfig+0xfa>
 8002662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002666:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f043 0320 	orr.w	r3, r3, #32
 800267c:	b2db      	uxtb	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d102      	bne.n	800268e <HAL_RCC_ClockConfig+0xca>
 8002688:	4b76      	ldr	r3, [pc, #472]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	e017      	b.n	80026be <HAL_RCC_ClockConfig+0xfa>
 800268e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002692:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f043 0320 	orr.w	r3, r3, #32
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d102      	bne.n	80026ba <HAL_RCC_ClockConfig+0xf6>
 80026b4:	4b6b      	ldr	r3, [pc, #428]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	e001      	b.n	80026be <HAL_RCC_ClockConfig+0xfa>
 80026ba:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026c2:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80026c6:	fa92 f2a2 	rbit	r2, r2
 80026ca:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ce:	fab2 f282 	clz	r2, r2
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f042 0220 	orr.w	r2, r2, #32
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	f002 021f 	and.w	r2, r2, #31
 80026e0:	40d3      	lsrs	r3, r2
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 80be 	bne.w	8002868 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e159      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d15b      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x1ec>
 80026f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026fc:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f043 0320 	orr.w	r3, r3, #32
 8002712:	b2db      	uxtb	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d102      	bne.n	8002724 <HAL_RCC_ClockConfig+0x160>
 800271e:	4b51      	ldr	r3, [pc, #324]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	e02d      	b.n	8002780 <HAL_RCC_ClockConfig+0x1bc>
 8002724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002728:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f043 0320 	orr.w	r3, r3, #32
 800273e:	b2db      	uxtb	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d102      	bne.n	8002750 <HAL_RCC_ClockConfig+0x18c>
 800274a:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	e017      	b.n	8002780 <HAL_RCC_ClockConfig+0x1bc>
 8002750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002754:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f043 0320 	orr.w	r3, r3, #32
 800276a:	b2db      	uxtb	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b04      	cmp	r3, #4
 8002774:	d102      	bne.n	800277c <HAL_RCC_ClockConfig+0x1b8>
 8002776:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	e001      	b.n	8002780 <HAL_RCC_ClockConfig+0x1bc>
 800277c:	4b39      	ldr	r3, [pc, #228]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002784:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002788:	fa92 f2a2 	rbit	r2, r2
 800278c:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800278e:	6a3a      	ldr	r2, [r7, #32]
 8002790:	fab2 f282 	clz	r2, r2
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	f042 0220 	orr.w	r2, r2, #32
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f002 021f 	and.w	r2, r2, #31
 80027a2:	40d3      	lsrs	r3, r2
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d15d      	bne.n	8002868 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0f9      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3e0>
 80027b0:	2302      	movs	r3, #2
 80027b2:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027bc:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f043 0320 	orr.w	r3, r3, #32
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d102      	bne.n	80027da <HAL_RCC_ClockConfig+0x216>
 80027d4:	4b23      	ldr	r3, [pc, #140]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	e02b      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
 80027da:	2302      	movs	r3, #2
 80027dc:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f043 0320 	orr.w	r3, r3, #32
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_ClockConfig+0x240>
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	e016      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
 8002804:	2302      	movs	r3, #2
 8002806:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f043 0320 	orr.w	r3, r3, #32
 800281c:	b2db      	uxtb	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b04      	cmp	r3, #4
 8002826:	d102      	bne.n	800282e <HAL_RCC_ClockConfig+0x26a>
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	e001      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_RCC_ClockConfig+0x2a0>)
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2202      	movs	r2, #2
 8002834:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002838:	fa92 f2a2 	rbit	r2, r2
 800283c:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	fab2 f282 	clz	r2, r2
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	f042 0220 	orr.w	r2, r2, #32
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f002 021f 	and.w	r2, r2, #31
 8002852:	40d3      	lsrs	r3, r2
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0a1      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3e0>
 8002860:	40022000 	.word	0x40022000
 8002864:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002868:	4950      	ldr	r1, [pc, #320]	; (80029ac <HAL_RCC_ClockConfig+0x3e8>)
 800286a:	4b50      	ldr	r3, [pc, #320]	; (80029ac <HAL_RCC_ClockConfig+0x3e8>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800287a:	f7fe fb13 	bl	8000ea4 <HAL_GetTick>
 800287e:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d112      	bne.n	80028ae <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288a:	f7fe fb0b 	bl	8000ea4 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e081      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a0:	4b42      	ldr	r3, [pc, #264]	; (80029ac <HAL_RCC_ClockConfig+0x3e8>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d1ee      	bne.n	800288a <HAL_RCC_ClockConfig+0x2c6>
 80028ac:	e027      	b.n	80028fe <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d11d      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b8:	f7fe faf4 	bl	8000ea4 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e06a      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <HAL_RCC_ClockConfig+0x3e8>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d1ee      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x2f4>
 80028da:	e010      	b.n	80028fe <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe fae2 	bl	8000ea4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e058      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80028f2:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_RCC_ClockConfig+0x3e8>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1ee      	bne.n	80028dc <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80028fe:	4b2c      	ldr	r3, [pc, #176]	; (80029b0 <HAL_RCC_ClockConfig+0x3ec>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0207 	and.w	r2, r3, #7
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d910      	bls.n	800292e <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290c:	4928      	ldr	r1, [pc, #160]	; (80029b0 <HAL_RCC_ClockConfig+0x3ec>)
 800290e:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <HAL_RCC_ClockConfig+0x3ec>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 0207 	bic.w	r2, r3, #7
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_ClockConfig+0x3ec>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0207 	and.w	r2, r3, #7
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d001      	beq.n	800292e <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e03a      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293a:	491c      	ldr	r1, [pc, #112]	; (80029ac <HAL_RCC_ClockConfig+0x3e8>)
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <HAL_RCC_ClockConfig+0x3e8>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002958:	4914      	ldr	r1, [pc, #80]	; (80029ac <HAL_RCC_ClockConfig+0x3e8>)
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_RCC_ClockConfig+0x3e8>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800296c:	f000 f826 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8002970:	4601      	mov	r1, r0
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_RCC_ClockConfig+0x3e8>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800297a:	23f0      	movs	r3, #240	; 0xf0
 800297c:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
 8002990:	4a08      	ldr	r2, [pc, #32]	; (80029b4 <HAL_RCC_ClockConfig+0x3f0>)
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	fa21 f303 	lsr.w	r3, r1, r3
 8002998:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <HAL_RCC_ClockConfig+0x3f4>)
 800299a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe fa57 	bl	8000e50 <HAL_InitTick>
  
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3778      	adds	r7, #120	; 0x78
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40022000 	.word	0x40022000
 80029b4:	080036b0 	.word	0x080036b0
 80029b8:	20000428 	.word	0x20000428

080029bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	b08b      	sub	sp, #44	; 0x2c
 80029c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x30>
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x36>
 80029ea:	e03c      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029ee:	623b      	str	r3, [r7, #32]
      break;
 80029f0:	e03c      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80029fc:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a12:	5cd3      	ldrb	r3, [r2, r3]
 8002a14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	230f      	movs	r3, #15
 8002a20:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
 8002a38:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002a44:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	fb02 f303 	mul.w	r3, r2, r3
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	e004      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	623b      	str	r3, [r7, #32]
      break;
 8002a64:	e002      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a68:	623b      	str	r3, [r7, #32]
      break;
 8002a6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	372c      	adds	r7, #44	; 0x2c
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	007a1200 	.word	0x007a1200
 8002a84:	080036c0 	.word	0x080036c0
 8002a88:	080036d0 	.word	0x080036d0
 8002a8c:	003d0900 	.word	0x003d0900

08002a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000428 	.word	0x20000428

08002aa8 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e01d      	b.n	8002af6 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe f950 	bl	8000d74 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 f878 	bl	8002bdc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop

08002b00 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e01d      	b.n	8002b4e <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe f906 	bl	8000d38 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f000 f84c 	bl	8002bdc <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop

08002b58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 faa8 	bl	80030c0 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <HAL_TIM_PWM_Start+0x74>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00e      	beq.n	8002b98 <HAL_TIM_PWM_Start+0x40>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <HAL_TIM_PWM_Start+0x78>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d009      	beq.n	8002b98 <HAL_TIM_PWM_Start+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <HAL_TIM_PWM_Start+0x7c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_TIM_PWM_Start+0x40>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <HAL_TIM_PWM_Start+0x80>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_TIM_PWM_Start+0x44>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_TIM_PWM_Start+0x46>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
} 
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40014000 	.word	0x40014000
 8002bd4:	40014400 	.word	0x40014400
 8002bd8:	40014800 	.word	0x40014800

08002bdc <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a2e      	ldr	r2, [pc, #184]	; (8002cac <TIM_Base_SetConfig+0xd0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <TIM_Base_SetConfig+0x2c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d003      	beq.n	8002c08 <TIM_Base_SetConfig+0x2c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a2b      	ldr	r2, [pc, #172]	; (8002cb0 <TIM_Base_SetConfig+0xd4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d108      	bne.n	8002c1a <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a23      	ldr	r2, [pc, #140]	; (8002cac <TIM_Base_SetConfig+0xd0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <TIM_Base_SetConfig+0x6e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d00f      	beq.n	8002c4a <TIM_Base_SetConfig+0x6e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a20      	ldr	r2, [pc, #128]	; (8002cb0 <TIM_Base_SetConfig+0xd4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00b      	beq.n	8002c4a <TIM_Base_SetConfig+0x6e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <TIM_Base_SetConfig+0xd8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <TIM_Base_SetConfig+0x6e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <TIM_Base_SetConfig+0xdc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_Base_SetConfig+0x6e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <TIM_Base_SetConfig+0xe0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a0d      	ldr	r2, [pc, #52]	; (8002cac <TIM_Base_SetConfig+0xd0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00b      	beq.n	8002c92 <TIM_Base_SetConfig+0xb6>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <TIM_Base_SetConfig+0xd8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d007      	beq.n	8002c92 <TIM_Base_SetConfig+0xb6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <TIM_Base_SetConfig+0xdc>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d003      	beq.n	8002c92 <TIM_Base_SetConfig+0xb6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <TIM_Base_SetConfig+0xe0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d103      	bne.n	8002c9a <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	615a      	str	r2, [r3, #20]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40000400 	.word	0x40000400
 8002cb4:	40014000 	.word	0x40014000
 8002cb8:	40014400 	.word	0x40014400
 8002cbc:	40014800 	.word	0x40014800

08002cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0201 	bic.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0303 	bic.w	r3, r3, #3
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f023 0302 	bic.w	r3, r3, #2
 8002d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a28      	ldr	r2, [pc, #160]	; (8002dc8 <TIM_OC1_SetConfig+0x108>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00b      	beq.n	8002d44 <TIM_OC1_SetConfig+0x84>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a27      	ldr	r2, [pc, #156]	; (8002dcc <TIM_OC1_SetConfig+0x10c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <TIM_OC1_SetConfig+0x84>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <TIM_OC1_SetConfig+0x110>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_OC1_SetConfig+0x84>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <TIM_OC1_SetConfig+0x114>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10c      	bne.n	8002d5e <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f023 0308 	bic.w	r3, r3, #8
 8002d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <TIM_OC1_SetConfig+0x108>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <TIM_OC1_SetConfig+0xbe>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <TIM_OC1_SetConfig+0x10c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d007      	beq.n	8002d7e <TIM_OC1_SetConfig+0xbe>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <TIM_OC1_SetConfig+0x110>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_OC1_SetConfig+0xbe>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a16      	ldr	r2, [pc, #88]	; (8002dd4 <TIM_OC1_SetConfig+0x114>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d111      	bne.n	8002da2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	621a      	str	r2, [r3, #32]
} 
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	40014400 	.word	0x40014400
 8002dd4:	40014800 	.word	0x40014800

08002dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0210 	bic.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1e:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f023 0320 	bic.w	r3, r3, #32
 8002e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <TIM_OC2_SetConfig+0xfc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d10d      	bne.n	8002e64 <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e62:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <TIM_OC2_SetConfig+0xfc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00b      	beq.n	8002e84 <TIM_OC2_SetConfig+0xac>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <TIM_OC2_SetConfig+0x100>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d007      	beq.n	8002e84 <TIM_OC2_SetConfig+0xac>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a19      	ldr	r2, [pc, #100]	; (8002edc <TIM_OC2_SetConfig+0x104>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d003      	beq.n	8002e84 <TIM_OC2_SetConfig+0xac>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <TIM_OC2_SetConfig+0x108>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d113      	bne.n	8002eac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40012c00 	.word	0x40012c00
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40014800 	.word	0x40014800

08002ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a23      	ldr	r2, [pc, #140]	; (8002fdc <TIM_OC3_SetConfig+0xf8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10d      	bne.n	8002f6e <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f6c:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <TIM_OC3_SetConfig+0xf8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <TIM_OC3_SetConfig+0xaa>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <TIM_OC3_SetConfig+0xfc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <TIM_OC3_SetConfig+0xaa>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <TIM_OC3_SetConfig+0x100>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_OC3_SetConfig+0xaa>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <TIM_OC3_SetConfig+0x104>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d113      	bne.n	8002fb6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	621a      	str	r2, [r3, #32]
}
 8002fd0:	bf00      	nop
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	40014800 	.word	0x40014800

08002fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003032:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003046:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	031b      	lsls	r3, r3, #12
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <TIM_OC4_SetConfig+0xc4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00b      	beq.n	8003074 <TIM_OC4_SetConfig+0x88>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <TIM_OC4_SetConfig+0xc8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <TIM_OC4_SetConfig+0x88>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <TIM_OC4_SetConfig+0xcc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_OC4_SetConfig+0x88>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a13      	ldr	r2, [pc, #76]	; (80030bc <TIM_OC4_SetConfig+0xd0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d109      	bne.n	8003088 <TIM_OC4_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800307a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	019b      	lsls	r3, r3, #6
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	621a      	str	r2, [r3, #32]
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40014000 	.word	0x40014000
 80030b8:	40014400 	.word	0x40014400
 80030bc:	40014800 	.word	0x40014800

080030c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80030d0:	2201      	movs	r2, #1
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1a      	ldr	r2, [r3, #32]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	401a      	ands	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	431a      	orrs	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop

08003108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800311e:	2302      	movs	r3, #2
 8003120:	e105      	b.n	800332e <HAL_TIM_PWM_ConfigChannel+0x226>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b14      	cmp	r3, #20
 8003136:	f200 80f0 	bhi.w	800331a <HAL_TIM_PWM_ConfigChannel+0x212>
 800313a:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	08003195 	.word	0x08003195
 8003144:	0800331b 	.word	0x0800331b
 8003148:	0800331b 	.word	0x0800331b
 800314c:	0800331b 	.word	0x0800331b
 8003150:	080031d5 	.word	0x080031d5
 8003154:	0800331b 	.word	0x0800331b
 8003158:	0800331b 	.word	0x0800331b
 800315c:	0800331b 	.word	0x0800331b
 8003160:	08003217 	.word	0x08003217
 8003164:	0800331b 	.word	0x0800331b
 8003168:	0800331b 	.word	0x0800331b
 800316c:	0800331b 	.word	0x0800331b
 8003170:	08003257 	.word	0x08003257
 8003174:	0800331b 	.word	0x0800331b
 8003178:	0800331b 	.word	0x0800331b
 800317c:	0800331b 	.word	0x0800331b
 8003180:	08003299 	.word	0x08003299
 8003184:	0800331b 	.word	0x0800331b
 8003188:	0800331b 	.word	0x0800331b
 800318c:	0800331b 	.word	0x0800331b
 8003190:	080032d9 	.word	0x080032d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fd90 	bl	8002cc0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	6992      	ldr	r2, [r2, #24]
 80031aa:	f042 0208 	orr.w	r2, r2, #8
 80031ae:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	6992      	ldr	r2, [r2, #24]
 80031ba:	f022 0204 	bic.w	r2, r2, #4
 80031be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	6991      	ldr	r1, [r2, #24]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	6912      	ldr	r2, [r2, #16]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	619a      	str	r2, [r3, #24]
    }
    break;
 80031d2:	e0a3      	b.n	800331c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fdfc 	bl	8002dd8 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	6992      	ldr	r2, [r2, #24]
 80031ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ee:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	6992      	ldr	r2, [r2, #24]
 80031fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	6991      	ldr	r1, [r2, #24]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	6912      	ldr	r2, [r2, #16]
 800320e:	0212      	lsls	r2, r2, #8
 8003210:	430a      	orrs	r2, r1
 8003212:	619a      	str	r2, [r3, #24]
    }
    break;
 8003214:	e082      	b.n	800331c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fe61 	bl	8002ee4 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	69d2      	ldr	r2, [r2, #28]
 800322c:	f042 0208 	orr.w	r2, r2, #8
 8003230:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	69d2      	ldr	r2, [r2, #28]
 800323c:	f022 0204 	bic.w	r2, r2, #4
 8003240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	69d1      	ldr	r1, [r2, #28]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	6912      	ldr	r2, [r2, #16]
 8003250:	430a      	orrs	r2, r1
 8003252:	61da      	str	r2, [r3, #28]
    }
    break;
 8003254:	e062      	b.n	800331c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fec5 	bl	8002fec <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	69d2      	ldr	r2, [r2, #28]
 800326c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003270:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	69d2      	ldr	r2, [r2, #28]
 800327c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	69d1      	ldr	r1, [r2, #28]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	6912      	ldr	r2, [r2, #16]
 8003290:	0212      	lsls	r2, r2, #8
 8003292:	430a      	orrs	r2, r1
 8003294:	61da      	str	r2, [r3, #28]
    }
    break;
 8003296:	e041      	b.n	800331c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f92c 	bl	80034fc <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032ae:	f042 0208 	orr.w	r2, r2, #8
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	6912      	ldr	r2, [r2, #16]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80032d6:	e021      	b.n	800331c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f970 	bl	80035c4 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	6912      	ldr	r2, [r2, #16]
 8003312:	0212      	lsls	r2, r2, #8
 8003314:	430a      	orrs	r2, r1
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8003318:	e000      	b.n	800331c <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 800331a:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop

08003338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800334c:	2302      	movs	r3, #2
 800334e:	e038      	b.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d108      	bne.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003378:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800339c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
} 
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40012c00 	.word	0x40012c00

080033d4 <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e07c      	b.n	80034ea <HAL_TIMEx_ConfigBreakDeadTime+0x116>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a3e      	ldr	r2, [pc, #248]	; (80034f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d13d      	bne.n	800347e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8003408:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF |
                 TIM_BDTR_BK2F | TIM_BDTR_BK2E | TIM_BDTR_BK2P);

    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	051b      	lsls	r3, r3, #20
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2State;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e02c      	b.n	80034d8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
  }
  else
  {
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	0d1b      	lsrs	r3, r3, #20
 8003482:	051b      	lsls	r3, r3, #20
 8003484:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF);
    
    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40012c00 	.word	0x40012c00

080034fc <TIM_OC5_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800354c:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <TIM_OC5_SetConfig+0xb8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00b      	beq.n	800357a <TIM_OC5_SetConfig+0x7e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <TIM_OC5_SetConfig+0xbc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <TIM_OC5_SetConfig+0x7e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a13      	ldr	r2, [pc, #76]	; (80035bc <TIM_OC5_SetConfig+0xc0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_OC5_SetConfig+0x7e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <TIM_OC5_SetConfig+0xc4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d109      	bne.n	800358e <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003580:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	621a      	str	r2, [r3, #32]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40014000 	.word	0x40014000
 80035bc:	40014400 	.word	0x40014400
 80035c0:	40014800 	.word	0x40014800

080035c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003602:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003616:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	051b      	lsls	r3, r3, #20
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a16      	ldr	r2, [pc, #88]	; (8003680 <TIM_OC6_SetConfig+0xbc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00b      	beq.n	8003644 <TIM_OC6_SetConfig+0x80>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <TIM_OC6_SetConfig+0xc0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d007      	beq.n	8003644 <TIM_OC6_SetConfig+0x80>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a14      	ldr	r2, [pc, #80]	; (8003688 <TIM_OC6_SetConfig+0xc4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_OC6_SetConfig+0x80>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <TIM_OC6_SetConfig+0xc8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d109      	bne.n	8003658 <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	029b      	lsls	r3, r3, #10
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
} 
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40014000 	.word	0x40014000
 8003688:	40014400 	.word	0x40014400
 800368c:	40014800 	.word	0x40014800

08003690 <_init>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	bf00      	nop
 8003694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003696:	bc08      	pop	{r3}
 8003698:	469e      	mov	lr, r3
 800369a:	4770      	bx	lr

0800369c <_fini>:
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	bf00      	nop
 80036a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a2:	bc08      	pop	{r3}
 80036a4:	469e      	mov	lr, r3
 80036a6:	4770      	bx	lr
